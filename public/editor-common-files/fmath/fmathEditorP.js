var FMATH = (function () {
    function mV() {
        this.style = new fC();
        this.settings = new he();
        this.beanStructure;
        this.canvasElem;
        this.style.setDefaultValues(this.settings);
        this.panelStructure;
        this.scale = 1;
        this.disableMouse = true;
        this.retFunction;
        this.w;
        this.s;
        this.myChart;
    }
    mV.prototype.drawImage = function (ou, ov) {
        this.canvasElem = ou;
        try {
            this.drawFormula(ov);
        } catch (ow) {
            gn.displayErr("Error: " + ow);
            gn.displayErr("Error: " + ow.stack);
            gn.displayErr("Mathml: " + ov);
        }
    };
    mV.prototype.drawFormula = function (ou) {
        gn.resetTime();
        this.beanStructure = fe.createBeanStructureStyle(
            ou,
            this.settings,
            this.style,
            false,
        );
        if (this.style.getColor() == null) {
            this.style.setColor("black");
        }
        var ov = this;
        lu.loadRessourcesFor(this.beanStructure, function () {
            ov.drawFormulaOnPanel();
        });
    };
    mV.prototype.updateFormula = function () {
        var ou = this;
        lu.loadRessourcesFor(this.beanStructure, function () {
            ou.drawFormulaOnPanel();
        });
    };
    mV.prototype.drawFormulaExc = function (ou) {
        this.beanStructure = fe.createBeanStructureStyle(
            ou,
            this.settings,
            this.style,
            true,
        );
        if (this.style.getColor() == null) {
            this.style.setColor("black");
        }
        var ov = this;
        lu.loadRessourcesFor(this.beanStructure, function () {
            ov.drawFormulaOnPanel();
        });
    };
    mV.prototype.drawFormulaOnPanel = function () {
        this.panelStructure = ix.generatePanelStructure(
            this.beanStructure,
            null,
        );
        this.panelStructure.setScale(this.scale);
        this.drawOnPanel();
        if (this.retFunction != null) {
            this.retFunction();
            this.retFunction = null;
        }
    };
    mV.prototype.setW = function (ou) {
        this.w = ou;
    };
    mV.prototype.setS = function (ou) {
        this.s = ou;
    };
    mV.prototype.setReturnFunction = function (ou) {
        this.retFunction = ou;
    };
    mV.prototype.scaleFormula = function (ou) {
        this.scale = ou;
        if (this.panelStructure != null) {
            this.panelStructure.setScale(this.scale);
            this.drawOnPanel();
        }
    };
    mV.prototype.setScale = function (ou) {
        this.scaleFormula(ou);
    };
    mV.prototype.getScale = function () {
        return this.scale;
    };
    mV.prototype.drawOnPanel = function () {
        this.panelStructure.calculateDimension();
        var ou = new eH(this.panelStructure);
        if (this.myChart != null) {
            this.myChart.destroy();
        }
        ou.initCanvas(this.canvasElem);
        this.myChart = new Chart(
            this.canvasElem.getContext("2d"),
            this.panelStructure.getChartConfig(),
        );
        ou.drawPanels(this.canvasElem);
        mV.fireEvent(this.canvasElem, "imageChanged");
    };
    mV.fireEvent = function (ov, ow) {
        if (document.createEvent) {
            var ou = document.createEvent("Event");
            ou.initEvent(ow, true, true);
            ov.dispatchEvent(ou);
        } else {
            ov.dispatchEvent(new CustomEvent(ow));
        }
    };
    mV.prototype.getMathML = function (ov, ou) {
        if (ov == null) {
            ov = hV;
        }
        return lc.getMathml(this.beanStructure, ov, ou, this.settings);
    };
    mV.prototype.getMathMLString = function (ov, ou) {
        return this.getMathML(ov, ou);
    };
    mV.prototype.getImage = function (oC, oD) {
        var oz = this.scale;
        this.scaleFormula(1);
        var ox = null;
        if (this.w != null) {
            var ov = document.createElement("canvas");
            ov.height = this.canvasElem.height;
            ov.width = this.canvasElem.width;
            var ou = ov.getContext("2d");
            ou.globalAlpha = 0.25;
            var ow = parseInt(ov.width / 10, 10);
            var oA = parseInt(ov.width / 30, 10);
            ou.font = ow + "px Comic Sans MS";
            ou.fillStyle = "red";
            var oB = ou.measureText(this.w);
            var oy = oB.width;
            ou.fillText(this.w, (ov.width - oy) / 2, (ov.height + ow) / 2);
            ou.globalAlpha = 1;
            ou.font = oA + "px Comic Sans MS";
            var oB = ou.measureText(this.w);
            var oy = oB.width;
            ou.fillText(this.s, ov.width - oy, ov.height);
            ou.globalAlpha = 1;
            ou.drawImage(this.canvasElem, 0, 0);
            ox = ov.toDataURL(oC, oD);
        } else {
            ox = this.canvasElem.toDataURL(oC, oD);
        }
        this.scaleFormula(oz);
        return ox;
    };

    function gf() {
        this.style = new fC();
        this.settings = new he();
        this.beanStructure;
        this.canvasElem;
        this.canvasTooltipElem;
        this.style.setDefaultValues(this.settings);
        this.panelStructure;
        this.scale = 1;
        this.disableMouse = true;
        this.retFunction;
        this.mouseManager = new hU();
        this.w;
        this.s;
    }
    gf.prototype.drawImage = function (ou, ox, ov) {
        this.canvasElem = ou;
        this.canvasTooltipElem = ox;
        try {
            this.drawFormula(ov);
        } catch (ow) {
            gn.displayErr("Error: " + ow);
            gn.displayErr("Error: " + ow.stack);
            gn.displayErr("Mathml: " + ov);
        }
    };
    gf.prototype.drawFormula = function (ou) {
        gn.resetTime();
        this.beanStructure = fe.createBeanStructureStyle(
            ou,
            this.settings,
            this.style,
            false,
        );
        if (this.style.getColor() == null) {
            this.style.setColor("black");
        }
        var ov = this;
        lu.loadRessourcesFor(this.beanStructure, function () {
            ov.drawFormulaOnPanel();
        });
    };
    gf.prototype.updateFormula = function () {
        var ou = this;
        lu.loadRessourcesFor(this.beanStructure, function () {
            ou.drawFormulaOnPanel();
        });
    };
    gf.prototype.drawFormulaExc = function (ou) {
        this.beanStructure = fe.createBeanStructureStyle(
            ou,
            this.settings,
            this.style,
            true,
        );
        if (this.style.getColor() == null) {
            this.style.setColor("black");
        }
        var ov = this;
        lu.loadRessourcesFor(this.beanStructure, function () {
            ov.drawFormulaOnPanel();
        });
    };
    gf.prototype.drawFormulaOnPanel = function () {
        this.panelStructure = ix.generatePanelStructure(
            this.beanStructure,
            null,
        );
        this.panelStructure.setScale(this.scale);
        this.drawOnPanel();
        if (this.retFunction != null) {
            this.retFunction();
            this.retFunction = null;
        }
    };
    gf.prototype.setW = function (ou) {
        this.w = ou;
    };
    gf.prototype.setS = function (ou) {
        this.s = ou;
    };
    gf.prototype.setReturnFunction = function (ou) {
        this.retFunction = ou;
    };
    gf.prototype.scaleFormula = function (ou) {
        this.scale = ou;
        if (this.panelStructure != null) {
            this.panelStructure.setScale(this.scale);
            this.drawOnPanel();
        }
    };
    gf.prototype.setScale = function (ou) {
        this.scaleFormula(ou);
    };
    gf.prototype.setDisableMouse = function (ou) {
        this.disableMouse = ou;
    };
    gf.prototype.getScale = function () {
        return this.scale;
    };
    gf.prototype.isBlock = function () {
        return this.beanStructure.isBLock();
    };
    gf.prototype.clickLeftOn = function (ow) {
        if (this.disableMouse) {
            return;
        }
        var ox = this.canvasElem.getBoundingClientRect();
        var ov = ow.clientX - ox.left;
        var oz = ow.clientY - ox.top;
        var ou = this.mouseManager.click(this.panelStructure, ov, oz);
        if (ou.isMathmlChanged()) {
            ou.setMathmlChanged(false);
            var oy = this.getMathML(null, false);
            this.drawFormula(oy);
        } else {
            this.drawFormulaOnPanel();
        }
    };
    gf.prototype.onMouseMove = function (oB) {
        if (this.disableMouse) {
            return;
        }
        if (this.panelStructure == null) {
            return false;
        }
        var ow = null;
        if (oB == null) {
            ow = this.mouseManager.onMouseMove(this.panelStructure, -1, -1);
            this.canvasElem.style.cursor = ow.getMouse();
        } else {
            var oy = this.canvasElem.getBoundingClientRect();
            var oz = oB.clientX - oy.left;
            var ox = oB.clientY - oy.top;
            ow = this.mouseManager.onMouseMove(this.panelStructure, oz, ox);
            this.canvasElem.style.cursor = ow.getMouse();
        }
        if (ow.isChanged()) {
            gn.resetTime();
            this.drawOnPanel();
        }
        var ov = ow.getMouseActionBean();
        if (
            ov != null &&
            (ov.getType() == "TOOLTIP" ||
                ov.getType() == "HREF" ||
                ov.getType() == "RESIZE_HORIZONTAL")
        ) {
            if (ow.isChanged()) {
                var oD = ow.getMouseActionBean().getTooltipBean();
                var oC = new mU();
                oC.loadRessourcesForBean(oD);
                var oA = ix.generatePanelStructure(oD, null);
                oA.calculateDimension();
                var ou = new eH(oA);
                ou.drawTooltipImage(this.canvasTooltipElem, oA);
            }
            return true;
        } else {
            return false;
        }
    };
    gf.prototype.onMouseDown = function (ow) {
        if (this.disableMouse) {
            return;
        }
        if (this.panelStructure == null) {
            return false;
        }
        var ox = this.canvasElem.getBoundingClientRect();
        var ov = ow.clientX - ox.left;
        var oz = ow.clientY - ox.top;
        var ou = this.mouseManager.onMouseDown(this.panelStructure, ov, oz);
        if (ou.isMathmlChanged()) {
            ou.setMathmlChanged(false);
            var oy = this.getMathML(null, false);
            this.drawFormula(oy);
        } else {
            this.drawFormulaOnPanel();
        }
    };
    gf.prototype.onMouseUp = function (ov) {
        if (this.disableMouse) {
            return;
        }
        if (this.panelStructure == null) {
            return false;
        }
        var ow = this.canvasElem.getBoundingClientRect();
        var ou = ov.clientX - ow.left;
        var ox = ov.clientY - ow.top;
        this.mouseManager.onMouseUp(this.panelStructure, ou, ox);
    };
    gf.prototype.onKeyDown = function (ou) {
        if (ou.ctrlKey) {
            this.mouseManager.onCtrlDown();
        }
    };
    gf.prototype.onKeyUp = function (ou) {
        this.mouseManager.onCtrlUp();
    };
    gf.prototype.isInline = function () {
        return !this.beanStructure.getStyle().isDisplaystyle();
    };
    gf.prototype.drawOnPanel = function () {
        this.panelStructure.calculateDimension();
        var ou = new eH(this.panelStructure);
        ou.drawImage(this.canvasElem);
        gf.fireEvent(this.canvasElem, "imageChanged");
    };
    gf.fireEvent = function (ov, ow) {
        if (document.createEvent) {
            var ou = document.createEvent("Event");
            ou.initEvent(ow, true, true);
            ov.dispatchEvent(ou);
        } else {
            ov.dispatchEvent(new CustomEvent(ow));
        }
    };
    gf.prototype.setSelectedPanel = function (ov, ow, oA, oy) {
        if (oA != null) {
            var oz = oA.getBean();
            oz.getStyle().setBgcolor(oy);
        }
        if (ov != null) {
            var ou = ov.getBean();
            var ox = ou.getAttribute("mathbackground");
            ou.getStyle().setBgcolor(ow);
            this.drawOnPanel();
            return ox;
        } else {
            this.drawOnPanel();
            return null;
        }
    };
    gf.prototype.getPanelsForXY = function (ou, ov) {
        return this.loadPanelsForXY(ou, ov, this.panelStructure);
    };
    gf.prototype.loadPanelsForXY = function (ou, oB, oy) {
        var oz = new fM();
        this.addMathMLFromPanel(oz, oy);
        for (var ox = 0; ox < oy.getContent().getChildren().size(); ox++) {
            var oA = oy.getContent().getChildren().get(ox);
            if (oA instanceof fZ) {
                continue;
            }
            if (oA.getDim().getX() > ou) {
                continue;
            }
            if (oA.getDim().getY() > oB) {
                continue;
            }
            if (oA.getDim().getX() + oA.getDim().getWidth() < ou) {
                continue;
            }
            if (oA.getDim().getY() + oA.getDim().getHeight() < oB) {
                continue;
            }
            var ov = this.loadPanelsForXY(
                ou - oA.getDim().getX() - oA.getDim().getWidthLeft(),
                oB - oA.getDim().getY() - oA.getDim().getHeightTop(),
                oA,
            );
            for (var ow = 0; ow < ov.size(); ow++) {
                oz.add(ov.get(ow));
            }
        }
        return oz;
    };
    gf.prototype.addMathMLFromPanel = function (ow, ov) {
        var ou = ov.getBean();
        if (ou instanceof bI) {
            return;
        }
        if (ou instanceof e2) {
            return;
        }
        ow.add(ov);
    };
    gf.prototype.buildList = function (ou) {
        var ov = new fM();
        ov.add(ou);
        do {
            ou = ou.getParent();
            if (ou == null) {
                break;
            }
            ov.add(ou);
        } while (true);
        return this.reverseList(ov);
    };
    gf.prototype.getMathPanel = function () {
        return this.panelStructure;
    };
    gf.prototype.reverseList = function (ou) {
        var ow = new fM();
        for (var ov = ou.size() - 1; ov >= 0; ov--) {
            ow.add(ou.get(ov));
        }
        return ow;
    };
    gf.prototype.getMathML_getMathML = function (ou, ow, ov) {
        if (ow == null) {
            ow = hV;
        }
        if (ou != null) {
            return lc.getMathml(ou.getBean(), ow, ov, this.settings);
        }
        return lc.getMathml(
            this.panelStructure.getBean(),
            ow,
            ov,
            this.settings,
        );
    };
    gf.prototype.getMathML = function (ov, ou) {
        if (ov == null) {
            ov = hV;
        }
        return lc.getMathml(this.beanStructure, ov, ou, this.settings);
    };
    gf.prototype.getMathMLString = function (ov, ou) {
        return this.getMathML(ov, ou);
    };
    gf.prototype.getMathML_structure = function () {
        return this.panelStructure;
    };
    gf.prototype.getMathML_style = function () {
        return this.style;
    };
    gf.prototype.setFontSize = function (ou) {
        this.style.setMathsize(ou);
    };
    gf.prototype.setFontBold = function (ou) {
        this.style.setBold(ou);
    };
    gf.prototype.setFontItalic = function (ou) {
        this.style.setItalic(ou);
    };
    gf.prototype.setColor = function (ou) {
        this.style.setColor(ou);
    };
    gf.prototype.getMathML_settings = function () {
        return this.settings;
    };
    gf.prototype.getSettings = function () {
        return this.settings;
    };
    gf.prototype.setMathMLSettings = function () {
        this.settings = new he();
        this.style.setDefaultValues(this.settings);
    };
    gf.prototype.setWordSettings = function () {
        this.settings = new be();
        this.style.setDefaultValues(this.settings);
    };
    gf.prototype.setAdobeSettings = function () {
        this.settings = new eh();
        this.style.setDefaultValues(this.settings);
    };
    gf.prototype.setOpenOfficeSettings = function () {
        this.settings = new bt();
        this.style.setDefaultValues(this.settings);
    };
    gf.prototype.getImage = function (oC, oD) {
        var oz = this.scale;
        this.scaleFormula(1);
        var ox = null;
        if (this.w != null) {
            var ov = document.createElement("canvas");
            ov.height = this.canvasElem.height;
            ov.width = this.canvasElem.width;
            var ou = ov.getContext("2d");
            ou.globalAlpha = 0.3;
            var ow = parseInt(ov.width / 10, 10);
            var oA = parseInt(ov.width / 30, 10);
            ou.font = ow + "px Comic Sans MS";
            ou.fillStyle = "red";
            var oB = ou.measureText(this.w);
            var oy = oB.width;
            ou.fillText(this.w, (ov.width - oy) / 2, (ov.height + ow) / 2);
            ou.globalAlpha = 1;
            ou.font = oA + "px Comic Sans MS";
            var oB = ou.measureText(this.w);
            var oy = oB.width;
            ou.fillText(this.s, ov.width - oy, ov.height);
            ou.globalAlpha = 1;
            ou.drawImage(this.canvasElem, 0, 0);
            ox = ov.toDataURL(oC, oD);
        } else {
            ox = this.canvasElem.toDataURL(oC, oD);
        }
        this.scaleFormula(oz);
        return ox;
    };

    function eH(ou) {
        this.panelStructure = ou;
    }
    eH.prototype.initCanvas = function (ow) {
        var ox = this.panelStructure.getScale();
        var oy = this.panelStructure.getCanvasWidth();
        var ou = this.panelStructure.getCanvasHeight();
        if (oy == 0) {
            oy = 1;
        }
        if (ou == 0) {
            ou = 1;
        }
        if (ox > 1 || ox < 1) {
            oy = oy * ox;
            ou = ou * ox;
        }
        ow.width = oy + 1;
        ow.height = ou + 1;
        var ov = ow.getContext("2d");
        if (ox > 1 || ox < 1) {
            ov.scale(ox, ox);
        }
    };
    eH.prototype.drawPanels = function (ov) {
        var ou = ov.getContext("2d");
        ou.dashedLine = function (oz, oF, ox, oE, oC) {
            var oy = Math.sqrt(Math.pow(ox - oz, 2) + Math.pow(oE - oF, 2));
            var oA = {
                x: (ox - oz) / oy,
                y: (oE - oF) / oy,
            };
            var oD = 0;
            var oB = 0;
            oC = oC && oC.length ? oC : [4, 4];
            while (oD < oy) {
                var ow = Math.min(oC[oB++ % oC.length], oy - oD);
                oD += ow;
                oB % 2 && this.moveTo(oz, oF);
                oz += ow * oA.x;
                oF += ow * oA.y;
                oB % 2 && this.lineTo(oz, oF);
            }
        };
        ou.drawRoundRect = function (ow, oA, ox, oy, oz) {
            oz = oz / 2;
            this.beginPath();
            this.moveTo(ow + oz, oA);
            this.lineTo(ow + ox - oz, oA);
            this.quadraticCurveTo(ow + ox, oA, ow + ox, oA + oz);
            this.lineTo(ow + ox, oA + oy - oz);
            this.quadraticCurveTo(ow + ox, oA + oy, ow + ox - oz, oA + oy);
            this.lineTo(ow + oz, oA + oy);
            this.quadraticCurveTo(ow, oA + oy, ow, oA + oy - oz);
            this.lineTo(ow, oA + oz);
            this.quadraticCurveTo(ow, oA, ow + oz, oA);
            this.stroke();
            this.closePath();
        };
        ou.drawEllipse = function (oB, oA, oC, oD) {
            var oE = (oC / 2) * 0.5522848,
                ox = (oD / 2) * 0.5522848,
                ow = oB + oC,
                oF = oA + oD,
                oz = oB + oC / 2,
                oy = oA + oD / 2;
            this.moveTo(oB, oy);
            this.bezierCurveTo(oB, oy - ox, oz - oE, oA, oz, oA);
            this.bezierCurveTo(oz + oE, oA, ow, oy - ox, ow, oy);
            this.bezierCurveTo(ow, oy + ox, oz + oE, oF, oz, oF);
            this.bezierCurveTo(oz - oE, oF, oB, oy + ox, oB, oy);
        };
        this.drawPanelStructure(ou, this.panelStructure, 0, 0);
    };
    eH.prototype.drawImage = function (ou) {
        this.initCanvas(ou);
        this.drawPanels(ou);
    };
    eH.prototype.drawTooltipImage = function (ox, ow) {
        var oy = ow.getDim().getWidth();
        var ou = ow.getDim().getHeight();
        if (oy == 0) {
            oy = 1;
        }
        if (ou == 0) {
            ou = 1;
        }
        ox.width = oy;
        ox.height = ou;
        var ov = ox.getContext("2d");
        ov.dashedLine = function (oC, oI, oA, oH, oF) {
            var oB = Math.sqrt(Math.pow(oA - oC, 2) + Math.pow(oH - oI, 2));
            var oD = {
                x: (oA - oC) / oB,
                y: (oH - oI) / oB,
            };
            var oG = 0;
            var oE = 0;
            oF = oF && oF.length ? oF : [4, 4];
            while (oG < oB) {
                var oz = Math.min(oF[oE++ % oF.length], oB - oG);
                oG += oz;
                oE % 2 && this.moveTo(oC, oI);
                oC += oz * oD.x;
                oI += oz * oD.y;
                oE % 2 && this.lineTo(oC, oI);
            }
        };
        ov.drawRoundRect = function (oz, oD, oA, oB, oC) {
            oC = oC / 2;
            this.beginPath();
            this.moveTo(oz + oC, oD);
            this.lineTo(oz + oA - oC, oD);
            this.quadraticCurveTo(oz + oA, oD, oz + oA, oD + oC);
            this.lineTo(oz + oA, oD + oB - oC);
            this.quadraticCurveTo(oz + oA, oD + oB, oz + oA - oC, oD + oB);
            this.lineTo(oz + oC, oD + oB);
            this.quadraticCurveTo(oz, oD + oB, oz, oD + oB - oC);
            this.lineTo(oz, oD + oC);
            this.quadraticCurveTo(oz, oD, oz + oC, oD);
            this.stroke();
            this.closePath();
        };
        ov.drawEllipse = function (oE, oD, oF, oG) {
            var oH = (oF / 2) * 0.5522848,
                oA = (oG / 2) * 0.5522848,
                oz = oE + oF,
                oI = oD + oG,
                oC = oE + oF / 2,
                oB = oD + oG / 2;
            this.moveTo(oE, oB);
            this.bezierCurveTo(oE, oB - oA, oC - oH, oD, oC, oD);
            this.bezierCurveTo(oC + oH, oD, oz, oB - oA, oz, oB);
            this.bezierCurveTo(oz, oB + oA, oC + oH, oI, oC, oI);
            this.bezierCurveTo(oC - oH, oI, oE, oB + oA, oE, oB);
        };
        this.drawPanelStructure(ov, ow, 0, 0);
    };
    eH.prototype.drawPanelStructure = function (ow, ov, ou, oy) {
        ou = ou + Math.round(ov.getDim().getX());
        oy = oy + Math.round(ov.getDim().getY());
        var ox = ov.getContent().getBgShapeList();
        this.drawShapeList(ow, ox, ou, oy);
        ou = ou + Math.round(ov.getDim().getWidthLeft());
        oy = oy + Math.round(ov.getDim().getHeightTop());
        if (ov instanceof hb || ov instanceof h4) {
            return;
        }
        this.drawContenuStructure(ow, ov.getContent(), ou, oy);
    };
    eH.prototype.drawContenuStructure = function (ov, ox, ou, oA) {
        var oy = ox.getShapeList();
        this.drawShapeList(ov, oy, ou, oA);
        for (var ow = 0; ow < ox.getChildren().size(); ow++) {
            var oz = ox.getChildren().get(ow);
            this.drawPanelStructure(ov, oz, ou, oA);
        }
    };
    eH.prototype.drawShapeList = function (oE, oL, oz, oy) {
        for (var oI = 0; oI < oL.size(); oI++) {
            var ou = oL.get(oI);
            oE.save();
            if (ou instanceof ip) {
                var oC = ou;
                this.drawText(oE, oC, oz + ou.getX(), oy + ou.getY());
            } else {
                if (ou instanceof fJ) {
                    var oM = ou;
                    var oN = lu.getGlyphImage(oM.getSrc());
                    if (oN != null) {
                        oE.beginPath();
                        oE.drawImage(
                            oN,
                            oz + ou.getX(),
                            oy + ou.getY(),
                            oM.getWidth(),
                            oM.getHeight(),
                        );
                        oE.closePath();
                    }
                } else {
                    if (ou instanceof jr) {
                        var ox = ou;
                        var oG = ox.getColor();
                        if (ox.getRotate() != null) {
                            oE.save();
                            oE.translate(
                                oz + ox.getRotate().getCenterX(),
                                oy + ox.getRotate().getCenterY(),
                            );
                            oE.rotate(ox.getRotate().getRotation());
                            oE.beginPath();
                            oE.fillStyle =
                                "rgb(" +
                                oG.getR() +
                                "," +
                                oG.getG() +
                                "," +
                                oG.getB() +
                                ")";
                            oE.lineWidth = 0;
                            var oA = ox.getActions();
                            for (var oB = 0; oB < oA.size(); oB++) {
                                var oH = oA.get(oB);
                                if ("Move" == oH.getType()) {
                                    oE.moveTo(
                                        oH.getX() - ox.getRotate().getCenterX(),
                                        oH.getY() - ox.getRotate().getCenterY(),
                                    );
                                } else {
                                    if ("Line" == oH.getType()) {
                                        oE.lineTo(
                                            oH.getX() -
                                                ox.getRotate().getCenterX(),
                                            oH.getY() -
                                                ox.getRotate().getCenterY(),
                                        );
                                    } else {
                                        if ("Quad" == oH.getType()) {
                                            oE.quadraticCurveTo(
                                                oH.getX() -
                                                    ox.getRotate().getCenterX(),
                                                oH.getY() -
                                                    ox.getRotate().getCenterY(),
                                                oH.getX1() -
                                                    ox.getRotate().getCenterX(),
                                                oH.getY1() -
                                                    ox.getRotate().getCenterY(),
                                            );
                                        }
                                    }
                                }
                            }
                            oE.fill();
                            oE.closePath();
                            oE.restore();
                        } else {
                            oE.beginPath();
                            oE.fillStyle =
                                "rgb(" +
                                oG.getR() +
                                "," +
                                oG.getG() +
                                "," +
                                oG.getB() +
                                ")";
                            oE.lineWidth = 0;
                            var oA = ox.getActions();
                            for (var oB = 0; oB < oA.size(); oB++) {
                                var oH = oA.get(oB);
                                if ("Move" == oH.getType()) {
                                    oE.moveTo(oz + oH.getX(), oy + oH.getY());
                                } else {
                                    if ("Line" == oH.getType()) {
                                        oE.lineTo(
                                            oz + oH.getX(),
                                            oy + oH.getY(),
                                        );
                                    } else {
                                        if ("Quad" == oH.getType()) {
                                            oE.quadraticCurveTo(
                                                oz + oH.getX(),
                                                oy + oH.getY(),
                                                oz + oH.getX1(),
                                                oy + oH.getY1(),
                                            );
                                        }
                                    }
                                }
                            }
                            oE.fill();
                            oE.closePath();
                        }
                    } else {
                        if (ou instanceof g9) {
                            var ox = ou;
                            var oG = ox.getColor();
                            var oF = ox.getLinethickness();
                            oE.beginPath();
                            oE.strokeStyle =
                                "rgb(" +
                                oG.getR() +
                                "," +
                                oG.getG() +
                                "," +
                                oG.getB() +
                                ")";
                            oE.lineWidth = oF;
                            var oA = ox.getActions();
                            for (var oB = 0; oB < oA.size(); oB++) {
                                var oH = oA.get(oB);
                                if ("Line" == oH.getType()) {
                                    oE.lineTo(oz + oH.getX(), oy + oH.getY());
                                }
                            }
                            oE.stroke();
                        } else {
                            if (ou instanceof j3) {
                                var oD = ou;
                                if (oD.getRondedCorner() > 0) {
                                    var oG = oD.getBorderColor();
                                    var oF = oD.getLinethickness();
                                    oE.strokeStyle =
                                        "rgb(" +
                                        oG.getR() +
                                        "," +
                                        oG.getG() +
                                        "," +
                                        oG.getB() +
                                        ")";
                                    oE.lineWidth = oF;
                                    oE.drawRoundRect(
                                        oz + oD.getX() + oF / 2,
                                        oy + oD.getY() + oF / 2,
                                        oD.getWidth() - oF,
                                        oD.getHeight() - oF,
                                        oD.getRondedCorner(),
                                    );
                                } else {
                                    if (oD.isFill()) {
                                        var oG = oD.getFillColor();
                                        if (oG != null) {
                                            oE.beginPath();
                                            oE.fillStyle =
                                                "rgb(" +
                                                oG.getR() +
                                                "," +
                                                oG.getG() +
                                                "," +
                                                oG.getB() +
                                                ")";
                                            oE.lineWidth = 0;
                                            oE.rect(
                                                oz + oD.getX(),
                                                oy + oD.getY(),
                                                oD.getWidth(),
                                                oD.getHeight(),
                                            );
                                            oE.fill();
                                            oE.closePath();
                                        }
                                    } else {
                                        var oG = oD.getBorderColor();
                                        if (oG != null) {
                                            var oF = oD.getLinethickness();
                                            oE.beginPath();
                                            oE.strokeStyle =
                                                "rgb(" +
                                                oG.getR() +
                                                "," +
                                                oG.getG() +
                                                "," +
                                                oG.getB() +
                                                ")";
                                            oE.lineWidth = oF;
                                            oE.rect(
                                                oz + oD.getX() + oF / 2,
                                                oy + oD.getY() + oF / 2,
                                                oD.getWidth() - oF,
                                                oD.getHeight() - oF,
                                            );
                                            oE.stroke();
                                            oE.closePath();
                                        }
                                    }
                                }
                            } else {
                                if (ou instanceof cG) {
                                    var oD = ou;
                                    if (oD.isFill()) {
                                        var oG = oD.getFillColor();
                                        if (oG != null) {
                                            oE.beginPath();
                                            oE.lineWidth = 0;
                                            oE.drawEllipse(
                                                oz +
                                                    oD.getX() +
                                                    oD.getLinethickness() / 2,
                                                oy +
                                                    oD.getY() +
                                                    oD.getLinethickness() / 2,
                                                2 * oD.getRadiusX() -
                                                    oD.getLinethickness(),
                                                2 * oD.getRadiusY() -
                                                    oD.getLinethickness(),
                                            );
                                            oE.fillStyle =
                                                "rgb(" +
                                                oG.getR() +
                                                "," +
                                                oG.getG() +
                                                "," +
                                                oG.getB() +
                                                ")";
                                            oE.fill();
                                        }
                                    } else {
                                        var oG = oD.getBorderColor();
                                        if (oG != null) {
                                            var oF = oD.getLinethickness();
                                            oE.beginPath();
                                            oE.drawEllipse(
                                                oz +
                                                    oD.getX() +
                                                    oD.getLinethickness() / 2,
                                                oy +
                                                    oD.getY() +
                                                    oD.getLinethickness() / 2,
                                                2 * oD.getRadiusX() -
                                                    oD.getLinethickness(),
                                                2 * oD.getRadiusY() -
                                                    oD.getLinethickness(),
                                            );
                                            oE.lineWidth = oF;
                                            oE.strokeStyle =
                                                "rgb(" +
                                                oG.getR() +
                                                "," +
                                                oG.getG() +
                                                "," +
                                                oG.getB() +
                                                ")";
                                            oE.stroke();
                                        }
                                    }
                                } else {
                                    if (ou instanceof jQ) {
                                        var oD = ou;
                                        var oG = oD.getBorderColor();
                                        if (oG != null) {
                                            var oF = oD.getLinethickness();
                                            if (!oE.setLineDash) {
                                                oE.setLineDash = function () {};
                                            }
                                            oE.beginPath();
                                            oE.strokeStyle =
                                                "rgb(" +
                                                oG.getR() +
                                                "," +
                                                oG.getG() +
                                                "," +
                                                oG.getB() +
                                                ")";
                                            oE.lineWidth = oF;
                                            var oK = Math.round(oz + oD.getX());
                                            var ow = Math.round(oy + oD.getY());
                                            var oJ = Math.round(
                                                oz + oD.getEndX(),
                                            );
                                            var ov = Math.round(
                                                oy + oD.getEndY(),
                                            );
                                            if (oK == oJ && oF % 2 == 1) {
                                                oK = oK + 0.5;
                                                oJ = oJ + 0.5;
                                            }
                                            if (ow == ov && oF % 2 == 1) {
                                                ow = ow + 0.5;
                                                ov = ov + 0.5;
                                            }
                                            if ("dashed" == oD.getType()) {
                                                oE.dashedLine(
                                                    oK,
                                                    ow,
                                                    oJ,
                                                    ov,
                                                    [10, 10],
                                                );
                                            } else {
                                                if ("dotted" == oD.getType()) {
                                                    oE.dashedLine(
                                                        oK,
                                                        ow,
                                                        oJ,
                                                        ov,
                                                        [3, 3],
                                                    );
                                                } else {
                                                    oE.moveTo(oK, ow);
                                                    oE.lineTo(oJ, ov);
                                                }
                                            }
                                            oE.stroke();
                                            oE.closePath();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            oE.restore();
        }
    };
    eH.prototype.drawText = function (ov, ox, ou, oy) {
        if (ox.getText().length == 0) {
            return;
        }
        var ow = ox.getColor();
        ov.textBaseline = "alphabetic";
        eH.setContextFont(ov, ox);
        ov.fillStyle =
            "rgb(" + ow.getR() + "," + ow.getG() + "," + ow.getB() + ")";
        if (ox.isFlipVertical()) {
            ov.translate(ou + ox.getWidth(), 0);
            ov.scale(-1, 1);
            ov.fillText(
                ox.getText(),
                0 + ox.getShiftX(),
                oy + ox.getFontAscent() + ox.getShiftY(),
            );
        } else {
            ov.fillText(
                ox.getText(),
                ou + ox.getShiftX(),
                oy + ox.getFontAscent() + ox.getShiftY(),
            );
        }
    };
    eH.setContextFont = function (ou, ov) {
        var oy = ov.getFontSize();
        if (ov.getFont().isEmbeded()) {
            ou.font = oy + "px " + eH.getFontName(ov.getFont());
        } else {
            var ow = ov.getFont().getMathvariantBean();
            var ox = "";
            if (ow.isItalic()) {
                ox = ox + "italic ";
            }
            if (ow.isBold()) {
                ox = ox + "bold ";
            }
            ou.font = ox + oy + "px " + eH.getFontName(ov.getFont());
        }
    };
    eH.getFontName = function (ou) {
        return ou.getFontName();
    };
    eH.calculateDimensionForText = function (ou) {
        this.setWidthForText(ou);
        this.setSuperscriptLine(ou);
        this.setAxisLine(ou);
        this.setExactDimensionForText(ou);
        this.setExactDimensionForDecimalPoint(ou);
    };
    eH.setWidthForText = function (ox) {
        var ow = document.createElement("canvas");
        var ov = ow.getContext("2d");
        ov.textBaseline = "alphabetic";
        eH.setContextFont(ov, ox);
        var ou = ov.measureText(ox.getText());
        ox.setInitWidth(ou.width);
        ox.setInitHeight(ou.height);
    };
    eH.setSuperscriptLine = function (ow) {
        var oF = ow.getFontSize();
        var ox = oF * 2;
        var oz = oF * 2;
        var oA = c9.getSuppDim(
            oF +
                "px " +
                eH.getFontName(ow.getFont()) +
                ow.getFont().getSuperscriptChar(),
        );
        if (oA != null) {
            ow.setSuperscriptline(oA.getBottom() - oA.getTop());
            ow.setBaseBottomLine(oA.getBottom());
            return;
        }
        var oD = document.createElement("canvas");
        oD.height = oz;
        oD.width = ox;
        var oE = oD.getContext("2d");
        oE.textBaseline = "alphabetic";
        eH.setContextFont(oE, ow);
        oE.fillText(ow.getFont().getSuperscriptChar(), oF, oF);
        var ov = oE.getImageData(0, 0, ox, oz);
        var oy = ov.data;
        var oC = 0;
        var oB = 0;
        while (oB < oy.length) {
            if (
                oy[oB + 3] > 0 ||
                oy[oB + 2] > 0 ||
                oy[oB + 1] > 0 ||
                oy[oB] > 0
            ) {
                oC = parseInt(oB / (ox * 4));
                break;
            }
            oB = oB + 4;
        }
        oC = oC - 1;
        oB = oy.length;
        var ou = oz;
        while (oB > 0) {
            ou = parseInt(oB / (ox * 4));
            if (
                oy[oB + 3] > 0 ||
                oy[oB + 2] > 0 ||
                oy[oB + 1] > 0 ||
                oy[oB] > 0
            ) {
                break;
            }
            oB = oB - 4;
        }
        ou = ou + 1;
        ow.setSuperscriptline(ou - oC);
        ow.setBaseBottomLine(ou);
        c9.addSuppDim(
            oF +
                "px " +
                eH.getFontName(ow.getFont()) +
                ow.getFont().getSuperscriptChar(),
            ou,
            oC,
        );
    };
    eH.setAxisLine = function (ow) {
        var oF = ow.getFontSize();
        var ox = oF * 2;
        var oz = oF * 2;
        var oA = c9.getAxisDim(oF + "px " + eH.getFontName(ow.getFont()));
        if (oA != null) {
            ow.setAxisLine(
                ow.getBaseBottomLine() -
                    oA.getBottom() +
                    lv.getIntFromDouble((oA.getBottom() - oA.getTop()) / 2),
            );
            return;
        }
        var oD = document.createElement("canvas");
        oD.height = oz;
        oD.width = ox;
        var oE = oD.getContext("2d");
        oE.textBaseline = "alphabetic";
        eH.setContextFont(oE, ow);
        oE.fillText("-", oF, oF);
        var ov = oE.getImageData(0, 0, ox, oz);
        var oy = ov.data;
        var oC = 0;
        var oB = 0;
        while (oB < oy.length) {
            if (
                oy[oB + 3] > 0 ||
                oy[oB + 2] > 0 ||
                oy[oB + 1] > 0 ||
                oy[oB] > 0
            ) {
                break;
            }
            oB = oB + 4;
        }
        oC = parseInt(oB / (ox * 4)) - 1;
        oB = oy.length;
        var ou = oz;
        while (oB > 0) {
            if (
                oy[oB + 3] > 0 ||
                oy[oB + 2] > 0 ||
                oy[oB + 1] > 0 ||
                oy[oB] > 0
            ) {
                break;
            }
            oB = oB - 4;
        }
        ou = parseInt(oB / (ox * 4)) + 1;
        ow.setAxisLine(
            ow.getBaseBottomLine() - ou + lv.getIntFromDouble((ou - oC) / 2),
        );
        c9.addAxisDim(oF + "px " + eH.getFontName(ow.getFont()), ou, oC);
    };
    eH.setExactDimensionForDecimalPoint = function (ow) {
        var oE = ow.getText();
        if (oE.indexOf(ow.getDecimalPoint()) == -1) {
            return;
        }
        oE = oE.substring(0, oE.indexOf(ow.getDecimalPoint()));
        var oH = ow.getFontSize();
        var oy = parseInt(ow.getInitWidth() + 2 * oH);
        var oA = parseInt(oH * 1.5);
        var oC = document.createElement("canvas");
        oC.height = oA;
        oC.width = oy;
        var oF = oC.getContext("2d");
        oF.textBaseline = "alphabetic";
        eH.setContextFont(oF, ow);
        oF.fillText(oE, oH, oH);
        var ou = oF.getImageData(0, 0, oy, oA);
        var oz = ou.data;
        var ox = 0;
        var oG = 0;
        var ov = 0;
        var oB = 0;
        while (oB < oz.length) {
            ox = ov;
            if (
                oz[oB + 3] > 0 ||
                oz[oB + 2] > 0 ||
                oz[oB + 1] > 0 ||
                oz[oB] > 0
            ) {
                break;
            }
            oG++;
            if (oG % oA == 0) {
                oG = 0;
                ov++;
            }
            oB = oG * oy * 4 + ov * 4;
        }
        ox = ox + 1;
        var oD = 0;
        oG = 0;
        ov = oy - 1;
        oB = oG * oy * 4 + ov * 4;
        while (oB < oz.length) {
            oD = ov;
            if (
                oz[oB + 3] > 0 ||
                oz[oB + 2] > 0 ||
                oz[oB + 1] > 0 ||
                oz[oB] > 0
            ) {
                break;
            }
            oG++;
            if (oG % oA == 0) {
                oG = 0;
                ov--;
            }
            oB = oG * oy * 4 + ov * 4;
            if (oB < 0) {
                break;
            }
        }
        oD = oD + 4;
        ow.setDecimalpositionX(oD - ox);
    };
    eH.setExactDimensionForText = function (ox) {
        var oI = ox.getFontSize();
        var oz = parseInt(ox.getInitWidth() + 2 * oI);
        var oB = parseInt(oI * 1.5);
        var oE = document.createElement("canvas");
        var oG = oE.getContext("2d");
        oE.height = oB;
        oE.width = oz;
        oG.textBaseline = "alphabetic";
        eH.setContextFont(oG, ox);
        oG.fillText(ox.getText(), oI, oI);
        var ov = oG.getImageData(0, 0, oz, oB);
        var oA = ov.data;
        var oD = 0;
        var oC = 0;
        while (oC < oA.length) {
            if (
                oA[oC + 3] > 0 ||
                oA[oC + 2] > 0 ||
                oA[oC + 1] > 0 ||
                oA[oC] > 0
            ) {
                break;
            }
            oC = oC + 4;
        }
        oD = parseInt(oC / (oz * 4));
        oC = oA.length;
        var ou = oB;
        while (oC > 0) {
            if (
                oA[oC + 3] > 0 ||
                oA[oC + 2] > 0 ||
                oA[oC + 1] > 0 ||
                oA[oC] > 0
            ) {
                break;
            }
            oC = oC - 4;
        }
        ou = parseInt(oC / (oz * 4)) + 1;
        var oy = 0;
        var oH = 0;
        var ow = 0;
        oC = 0;
        while (oC < oA.length) {
            oy = ow;
            if (
                oA[oC + 3] > 0 ||
                oA[oC + 2] > 0 ||
                oA[oC + 1] > 0 ||
                oA[oC] > 0
            ) {
                break;
            }
            oH++;
            if (oH % oB == 0) {
                oH = 0;
                ow++;
            }
            oC = oH * oz * 4 + ow * 4;
        }
        oy = oy + 1;
        var oF = 0;
        oH = 0;
        ow = oz - 1;
        oC = oH * oz * 4 + ow * 4;
        while (oC < oA.length) {
            oF = ow;
            if (
                oA[oC + 3] > 0 ||
                oA[oC + 2] > 0 ||
                oA[oC + 1] > 0 ||
                oA[oC] > 0
            ) {
                break;
            }
            oH++;
            if (oH % oB == 0) {
                oH = 0;
                ow--;
            }
            oC = oH * oz * 4 + ow * 4;
            if (oC < 0) {
                break;
            }
        }
        oF = oF + 1;
        ox.setFontAscent(oI);
        ox.setShiftX(oI - oy);
        if (ou - oD <= 0) {
            ox.setHeight(2);
            ox.setShiftY(-ox.getFontAscent());
            ox.setWidth(oG.measureText(ox.getText()).width);
        } else {
            ox.setShiftY(-oD);
            ox.setHeight(ou - oD);
            ox.setWidth(oF - oy);
        }
    };
    eH.calculateDimensionForImage = function (ow) {
        var ou = lu.getGlyphImage(ow.getSrc());
        var ov = new fJ();
        if (ou != null) {
            if (ow.getWidth() > 0 && ow.getHeight() == 0) {
                ow.setHeight(ou.height * (ow.getWidth() / ou.width));
            } else {
                if (ow.getHeight() > 0 && ow.getWidth() == 0) {
                    ow.setWidth(ou.width * (ow.getHeight() / ou.height));
                } else {
                    if (ow.getWidth() == 0 && ow.getHeight() == 0) {
                        ow.setHeight(ou.height);
                        ow.setWidth(ou.width);
                    }
                }
            }
        }
    };
    eH.sqrt = function (ou) {
        return Math.sqrt(ou);
    };
    var ga = function (ou, ow) {
        var ov = function () {};
        ov.prototype = ow.prototype;
        ou.prototype = new ov();
        ou.prototype.constructor = ou;
        ou.superclass = ow.prototype;
        if (ow.prototype.constructor == Object.prototype.constructor) {
            ow.prototype.constructor = ow;
        }
    };

    function lv() {}
    lv.getMinLimitLine = function () {
        return 1000;
    };
    lv.addPixel = function (ou) {
        if (ou > 1) {
            return 0;
        }
        return 1;
    };
    lv.stringIsNumber = function (ou) {
        var ov = lv.getNumber(ou);
        return lv.isNumber(ov);
    };
    lv.stringIsInteger = function (ou) {
        if (lv.stringIsNumber(ou)) {
            var ov = lv.getNumber(ou);
            return ov % 1 === 0;
        }
        return false;
    };
    lv.isNumber = function (ou) {
        return !isNaN(ou);
    };
    lv.getNumber = function (ov) {
        if (ov != null && ov.indexOf(".") == 0) {
            ov = "0" + ov;
        }
        var ou = /^\-?([0-9]+(\.[0-9]+)?|Infinity)$/;
        if (ou.test(ov)) {
            return Number(ov);
        }
        return NaN;
    };
    lv.getCharFromIntCode = function (ou) {
        return String.fromCodePoint(parseInt(ou));
    };
    lv.getCharFromHexCode = function (ou) {
        return String.fromCodePoint(parseInt(ou, 16));
    };
    lv.getCharFromInt = function (ou) {
        return String.fromCodePoint(ou);
    };
    lv.normalize = function (ou) {
        if (ou == null) {
            return ou;
        }
        return ou.normalize("NFC");
    };
    lv.getIntFromHexCode = function (ou) {
        return parseInt(ou, 16);
    };
    lv.getHex = function (ow, ov, ou) {
        return (
            "#" +
            lv.componentToHex(ow) +
            lv.componentToHex(ov) +
            lv.componentToHex(ou)
        );
    };
    lv.componentToHex = function (ov) {
        var ou = ov.toString(16);
        return ou.length == 1 ? "0" + ou : ou;
    };
    lv.getIntFromDouble = function (ou) {
        return Math.round(ou);
    };
    lv.getIntegerValue = function (ow, ov) {
        if (ow == null) {
            return ov;
        }
        ow = W.trim(ow);
        var ou = /^\-?([0-9]+(\.[0-9]+)?|Infinity)$/;
        if (ou.test(ow)) {
            return parseInt(ow);
        }
        return ov;
    };
    lv.getDoubleValue = function (ow, ov) {
        if (ow != null && ow.indexOf(".") == 0) {
            ow = "0" + ow;
        }
        var ou = /^\-?([0-9]+(\.[0-9]+)?|Infinity)$/;
        if (ou.test(ow)) {
            return Number(ow);
        }
        return ov;
    };
    lv.getBooleanValue = function (ov, ou) {
        if (ov == null) {
            return false;
        }
        ov = ov.toLowerCase();
        return ov == "true";
    };
    lv.getHexCodeFromInt = function (ou) {
        return ou.toString(16).toUpperCase();
    };
    lv.evaluateExpresionToDouble = function (ow, oy) {
        var ov = new hQ();
        ov.setError(true);
        if (ow == null) {
            return ov;
        }
        ow = ow.trim();
        if (ow.length == 0) {
            return ov;
        }

        function ou(oz, oB) {
            var oA = new Function("PI", "return " + oz);
            return oA(oB);
        }
        try {
            ov.setValue(ou(ow, oy));
            ov.setError(false);
            return ov;
        } catch (ox) {}
        return ov;
    };

    function eQ(ou) {
        this.started = false;
        this.stopped = false;
        this.listeners = new Array();
        this.url = ou;
    }
    eQ.prototype.start = function () {};
    eQ.prototype.loadOk = function (ou) {
        this.callListeners();
    };
    eQ.prototype.callListeners = function () {
        this.stopped = true;
        for (var ov = 0; ov < this.listeners.length; ov++) {
            var ou = this.listeners[ov];
            ou.receiveRessourceLoaded();
        }
        this.listeners = new Array();
    };
    eQ.prototype.isStopped = function () {
        return this.stopped;
    };
    eQ.prototype.getUrl = function () {
        return this.url;
    };
    eQ.prototype.addRessourceFormula = function (ou) {
        if (this.stopped) {
            return false;
        }
        this.listeners[this.listeners.length] = ou;
        return true;
    };
    var bQ = 1000;

    function i8(ou, ov) {
        this.family = ov;
        this.time = 1000;
        bQ = bQ + 1;
        this.id = bQ;
        this.$a = eQ;
        this.$a(ou);
    }
    ga(i8, eQ);
    i8.prototype.start = function () {
        if (this.started) {
            return;
        }
        this.started = true;
        this.createSpan(
            "spanN_" + this.id,
            "ABCDEFGHIJKLMNOPQRSTUVXYZW",
            "N" + this.family,
            false,
        );
        this.createSpan(
            "span_" + this.id,
            "ABCDEFGHIJKLMNOPQRSTUVXYZW",
            this.family,
            false,
        );
        this.createSpan("space_" + this.id, " ", this.family, true);
        this.time = 100;
        var ou = document.createElement("link");
        ou.setAttribute("rel", "stylesheet");
        ou.setAttribute("type", "text/css");
        ou.setAttribute("href", this.url);
        document.getElementsByTagName("head")[0].appendChild(ou);
        var ov = this;
        setTimeout(function () {
            ov.returnFunction();
        }, 5);
    };
    i8.prototype.returnFunction = function () {
        if (this.isNotLoaded() && this.time > 0) {
            this.time--;
            var ov = this;
            setTimeout(function () {
                ov.returnFunction();
            }, 5);
            return;
        }
        var ou = document.getElementById("span_" + this.id);
        ou.parentNode.removeChild(ou);
        ou = document.getElementById("space_" + this.id);
        ou.parentNode.removeChild(ou);
        this.loadOk();
    };
    i8.prototype.createSpan = function (oy, ox, ou, ow) {
        var ov = document.createElement("span");
        ov.id = oy;
        ov.setAttribute("style", "font-family:" + ou + ";font-size:100px");
        ov.innerHTML = ox;
        if (!ow) {
            ov.style.display = "none";
        }
        document.body.appendChild(ov);
    };
    i8.prototype.isNotLoaded = function () {
        var ox = document.getElementById("spanN_" + this.id);
        var ov = document.getElementById("span_" + this.id);
        ox.style.display = "";
        ov.style.display = "";
        var ow = ox.offsetWidth;
        var ou = ov.offsetWidth;
        ox.style.display = "none";
        ov.style.display = "none";
        return Math.abs(ou - ow) < 5;
    };

    function dh(ou) {
        this.imageObj = new Image();
        this.time = 1000;
        this.$a = eQ;
        this.$a(ou);
    }
    ga(dh, eQ);
    dh.prototype.start = function () {
        this.imageObj.src = this.url;
        var ou = this;
        setTimeout(function () {
            ou.returnFunction();
        }, 5);
    };
    dh.prototype.returnFunction = function () {
        if (this.imageObj.width == 0 && this.time > 0) {
            this.time--;
            var ou = this;
            setTimeout(function () {
                ou.returnFunction();
            }, 5);
            return;
        }
        this.loadOk();
    };
    dh.prototype.getImage = function () {
        return this.imageObj;
    };
    var ey = false;
    var nV = new Array();
    var g8 = new Array();

    function lu() {}
    lu.loadRessourcesFor = function (ou, ow) {
        if (!ey) {
            this.loadConfiguration();
            ey = true;
        }
        var ov = new mU();
        ov.loadRessourcesFor(ou, ow);
    };
    lu.loadConfiguration = function () {
        l6.setSearchSymbolInAllFonts(
            fMathFontDescriptor.searchSymbolInAllFonts,
        );
        l6.setAvailableFontFamilies(fMathFontDescriptor.availableFontFamilies);
        l6.setDefaultFontFamily(fMathFontDescriptor.defaultFontFamily);
        var ox = fMathFontDescriptor.availableFontFamilies.split(",");
        for (var ov = 0; ov < ox.length; ov++) {
            var ou = ox[ov];
            var ow = new dO();
            ow.setFamilyName(ou);
            ow.setFolderOrUrl(fMathFontDescriptor["font." + ou + ".urlFolder"]);
            ow.setPreload(
                "true" == fMathFontDescriptor["font." + ou + ".preload"],
            );
            ow.setUseClientFont(
                "true" == fMathFontDescriptor["font." + ou + ".useClientFont"],
            );
            l6.addFamilyInfo(ow);
            this.loadFontDictinary(
                fMathFontDescriptor["font." + ou + ".object"],
                ow,
            );
        }
    };
    lu.loadFontDictinary = function (ov, oA) {
        var oz = new fM();
        var ou = ov.load_order.split(",");
        for (var ow = 0; ow < ou.length; ow++) {
            var oy = ou[ow];
            var ox = ov[oy];
            var oB = new m4(ox);
            if (oy.indexOf("_") > -1) {
                oy = oy.substring(0, oy.indexOf("_"));
            }
            oz.add(this.loadFontForMathvariant(oB, oA, oy));
        }
        oA.setFonts(oz);
    };
    lu.loadFontForMathvariant = function (ox, ow, ov) {
        var ou = new en();
        ou.setDescriptor(ox);
        ou.setFamily(ow.getFamilyName());
        ou.setMathvariant(ov);
        ou.setFontFile(
            eL + "/" + ow.getFolderOrUrl() + "/" + ox.getFontFileName(),
        );
        return ou;
    };
    lu.addFontListener = function (ov) {
        var ow = ov.getFontFile();
        for (var ox = 0; ox < nV.length; ox++) {
            var ou = nV[ox];
            if (ou.getUrl() == ow) {
                return ou;
            }
        }
        var oy = new i8(ow, eH.getFontName(ov));
        nV[nV.length] = oy;
        return oy;
    };
    lu.addGlyphListener = function (oy) {
        var ov = oy;
        for (var ox = 0; ox < g8.length; ox++) {
            var ou = g8[ox];
            if (ou.getUrl() == ov) {
                return ou;
            }
        }
        var ow = new dh(ov);
        g8[g8.length] = ow;
        return ow;
    };
    lu.getTextShape = function (ow, ou, ov) {
        return mU.getTextShape(ow, ou, ov);
    };
    lu.getGlyphImage = function (ox) {
        var ov = ox;
        for (var ow = 0; ow < g8.length; ow++) {
            var ou = g8[ow];
            if (ou.getUrl() == ov) {
                return ou.getImage();
            }
        }
        return null;
    };
    lu.encodeUri = function (ou) {
        return encodeURI(ou);
    };

    function mU() {
        this.parentBean = null;
        this.returnFunction = null;
        this.listLoaders = new Array();
    }
    mU.prototype.loadRessourcesFor = function (ov, ou) {
        this.parentBean = ov;
        this.returnFunction = ou;
        this.processTheStructure();
    };
    mU.prototype.processTheStructure = function () {
        this.loadRessourcesForBean(this.parentBean);
        this.verifyAndReturn();
    };
    mU.prototype.receiveRessourceLoaded = function () {
        this.verifyAndReturn();
    };
    mU.prototype.verifyAndReturn = function () {
        for (var ov = 0; ov < this.listLoaders.length; ov++) {
            var ou = this.listLoaders[ov];
            if (!ou.isStopped()) {
                return;
            }
        }
        this.returnFunction();
    };
    mU.prototype.loadRessourcesForBean = function (ov) {
        if (ov instanceof cO) {
            this.loadFonts(ov);
            this.mergeFonts(ov);
            return;
        } else {
            if (ov instanceof ae) {
                this.loadGlyph(ov);
                return;
            } else {
                if (ov instanceof ad) {
                    var oy = ov;
                    this.loadRessourcesForBean(oy.getLabel());
                }
            }
        }
        var ox = ov.getChildren();
        if (ox != null) {
            for (var ow = 0; ow < ox.size(); ow++) {
                var oB = ox.get(ow);
                this.loadRessourcesForBean(oB);
            }
        }
        if (ov instanceof aK) {
            var oA = ov;
            if (oA.getZeroBean() != null) {
                this.loadRessourcesForBean(oA.getZeroBean());
            }
        } else {
            if (ov instanceof lD) {
                var ou = ov;
                if (ou.getZeroBean() != null) {
                    this.loadRessourcesForBean(ou.getZeroBean());
                }
            }
        }
        if (ov instanceof k) {
            var oz = ov.getTooltipBeans();
            for (var ow = 0; ow < oz.size(); ow++) {
                var oB = oz.get(ow);
                this.loadRessourcesForBean(oB);
            }
        }
    };
    mU.prototype.mergeFonts = function (oC) {
        var ow = oC.getShapeList();
        if (ow.size() < 2) {
            return;
        }
        for (var oy = ow.size() - 1; oy > 0; oy--) {
            var oB = ow.get(oy);
            var oA = ow.get(oy - 1);
            var ou = oA.getUnicodeText();
            for (var ox = 0; ox < ou.size(); ox++) {
                var oz = ou.charUnicodeCharAt(ox);
                if (!oB.getFont().getDescriptor().existCharInList(oz)) {
                    continue;
                }
            }
            var ov = oB.getUnicodeText();
            oA.setFont(oB.getFont());
            ou.addString(ov);
            ow.remove(oy);
        }
    };
    mU.prototype.loadFonts = function (oF) {
        oF.getShapeList().clear();
        var oE = oF.getUnicodeText();
        var oG = oF.getStyle().getMathvariant();
        var oB = l6.getFamilyName(oG.getMathvariant());
        if (oB == null || oB.length == 0) {
            oB = l6.getDefaultFontFamily();
        }
        var oA = -1;
        var ov = null;
        var ou = null;
        for (var ox = 0; ox < oE.size(); ox++) {
            var oD = oE.charUnicodeCharAt(ox);
            if (ou != null && ou.getDescriptor().existCharInList(oD)) {
                ov = ou;
            } else {
                ov = l6.getFontInfoForChar(oB, oG, oD);
            }
            if (ov == null) {
                var ow = new kt();
                ow.setMathvariant("Times");
                ow.setBold(false);
                ow.setItalic(false);
                ow.setClientFont(true);
                ov = l6.getClientFontFor(ow);
            }
            if (ou == null) {
                ou = ov;
            }
            if (
                iw.indexOf(";" + ov.getMathvariant() + ";") > -1 ||
                ov.getMathvariantBean().isGoogleFont()
            ) {
                var oz = lu.addFontListener(ov);
                var oC = this.addedToList(oz);
                if (!oC) {
                    var oy = oz.addRessourceFormula(this);
                    if (oy) {
                        this.listLoaders[this.listLoaders.length] = oz;
                    }
                }
                oz.start();
            }
            if (
                ov.getFamily() == ou.getFamily() &&
                ov.getMathvariant() == ou.getMathvariant()
            ) {
                continue;
            }
            this.generateShapeForText(oE, oA, ox, ou, oF);
            ou = ov;
            oA = ox;
        }
        if (oA < oE.size()) {
            this.generateShapeForText(oE, oA, oE.size(), ou, oF);
        }
    };
    mU.prototype.generateShapeForText = function (oy, oz, ow, ou, ov) {
        if (oz == -1) {
            oz = 0;
        }
        if (ou == null || oy.size() == 0) {
            return;
        }
        if (oz == ow) {
            return;
        }
        var ox = mU.getTextShape(oy.substring(oz, ow), ou, ov.getStyle());
        ov.getShapeList().add(ox);
    };
    mU.getTextShape = function (ox, ou, ov) {
        var ow = new ip();
        ow.setUnicodeText(ox);
        ow.setFont(ou);
        ow.setFontSize(ov.getMathsize());
        ow.setColor(c2.getColor(ov.getColor(), 0));
        return ow;
    };
    mU.prototype.addedToList = function (ov) {
        for (var ow = 0; ow < this.listLoaders.length; ow++) {
            var ou = this.listLoaders[ow];
            if (ou.getUrl() == ov.getUrl()) {
                return true;
            }
        }
        return false;
    };
    mU.prototype.loadGlyph = function (ov) {
        var ox = ov.getSrc();
        if (ox == null) {
            return;
        }
        var ou = lu.addGlyphListener(ov.getSrc());
        if (!this.addedToList(ou)) {
            var ow = ou.addRessourceFormula(this);
            if (ow) {
                this.listLoaders[this.listLoaders.length] = ou;
            }
        }
        ou.start();
    };

    function dK() {
        this._parent = null;
        this.childIndex = 0;
        this.text = null;
        this.name = null;
        this.children = new Array();
        this.attributesV = new Array();
        this.attributes = new Array();
    }
    dK.prototype.localName = function () {
        return this.name;
    };
    dK.prototype.getChildren = function () {
        return this.children;
    };
    dK.prototype.getChildIndex = function () {
        return this.childIndex;
    };
    dK.prototype.deleteChild = function (ou) {
        this.children.splice(ou, 1);
    };
    dK.prototype.attribute = function (ou) {
        for (var ov = 0; ov < this.attributes.length; ov++) {
            if (this.attributes[ov] == ou) {
                return this.attributesV[ov];
            }
        }
        return null;
    };
    dK.prototype.existAttribute = function (ou) {
        for (var ov = 0; ov < this.attributes.length; ov++) {
            if (this.attributes[ov] == ou) {
                return true;
            }
        }
        return false;
    };
    dK.prototype.parent = function () {
        return this._parent;
    };
    dK.prototype.deleteAttribute = function (ou) {
        for (var ov = 0; ov < this.attributes.length; ov++) {
            if (this.attributes[ov] == ou) {
                this.attributes.splice(ov, 1);
                this.attributesV.splice(ov, 1);
                break;
            }
        }
    };
    dK.prototype.setAttribute = function (ou, ov) {
        this.attributesV[this.attributesV.length] = ov;
        this.attributes[this.attributes.length] = ou;
    };
    dK.prototype.appendChild = function (ou) {
        this.children[this.children.length] = ou;
    };
    dK.prototype.setText = function (ou) {
        this.text = ou;
    };
    dK.prototype.insertChildBefore = function (ou) {};
    dK.prototype.insertChildAfter = function (ou) {};
    dK.prototype.reIndexChildren = function () {};
    dK.prototype.name = function () {
        return this.name;
    };
    dK.prototype.setParent = function (ou) {
        this._parent = ou;
    };
    dK.prototype.setChildIndex = function (ou) {
        this.childIndex = ou;
    };
    dK.prototype.setName = function (ou) {
        this.name = ou;
    };
    dK.prototype.setChildren = function (ou) {};
    dK.prototype.setAttributes = function (ou) {};
    dK.prototype.toString = function () {
        return this.text;
    };
    dK.prototype.copy = function () {
        var ox = new dK();
        ox.setName(this.name);
        ox.setText(this.value);
        for (var ov = 0; ov < this.attributes.length; ov++) {
            var ou = this.attributes[ov];
            var ow = this.attributesV[ov];
            ox.setAttribute(ou, ow);
        }
        for (var ov = 0; ov < this.children.length; ov++) {
            var oy = this.children[ov];
            ox.appendChild(oy.copy());
        }
        return ox;
    };

    function mW() {}
    mW.parse = function (ou) {
        while (ou.indexOf("<!--") > -1) {
            var ov = ou.indexOf("<!--");
            var ox = ou.indexOf("-->", ov);
            if (ox == -1) {
                ox = ou.length;
            } else {
                ox = ox + 3;
            }
            ou = ou.substring(0, ov) + ou.substring(ox, ou.length);
        }
        ou = W.replace(ou, "&", "&amp;");
        var ow = mW.parseXML(ou);
        if (ow == null) {
            return new dK();
        }
        return mW.traverse(ow.documentElement);
    };
    mW.parseXML = function (ow) {
        var ou, ov;
        try {
            if (window.DOMParser) {
                ov = new DOMParser();
                ou = ov.parseFromString(ow, "text/xml");
            } else {
                ou = new ActiveXObject("Microsoft.XMLDOM");
                ou.async = "false";
                ou.loadXML(ow);
            }
        } catch (ox) {
            ou = null;
            console.log("error parsing mathml:" + ow);
        }
        return ou;
    };
    mW.is_all_ws = function (ou) {
        return !/[^\t\n\r ]/.test(ou.textContent);
    };
    mW.is_ignorable = function (ou) {
        return ou.nodeType == 8 || (ou.nodeType == 3 && mW.is_all_ws(ou));
    };
    mW.traverse = function (oy) {
        if (mW.is_ignorable(oy)) {
            return null;
        }
        var ov = new dK();
        if (oy.tagName) {
            ov.setName(oy.tagName);
        }
        if (oy.hasChildNodes()) {
            var oz = oy.childNodes.length;
            var ou = 0;
            for (var ow = 0; ow < oz; ow++) {
                var ox = mW.traverse(oy.childNodes[ow]);
                if (ox != null) {
                    ox.setChildIndex(ou);
                    ox.setParent(ov);
                    ov.appendChild(ox);
                    ou++;
                }
            }
        } else {
            ov.setText(oy.nodeValue);
        }
        if (oy.attributes) {
            for (var ow = 0; ow < oy.attributes.length; ow++) {
                ov.setAttribute(
                    oy.attributes[ow].name,
                    oy.attributes[ow].value,
                );
            }
        }
        return ov;
    };
    mW.xmlSetText = function (ou, ov) {
        ou.setText(ov);
    };
    mW.xmlSetAttribute = function (ov, ou, ow) {
        ov.setAttribute(ou, ow);
    };
    mW.xmlDeleteAttribute = function (ov, ou) {
        ov.deleteAttribute(ou);
    };
    mW.xmlDeleteChild = function (ou, ov) {
        ou.deleteChild(ov);
    };

    function fM() {
        this.innerArray = new Array();
    }
    fM.prototype.add = function (ou) {
        this.innerArray[this.innerArray.length] = ou;
    };
    fM.prototype.addTo = function (ou, ov) {
        this.innerArray.splice(ou, 0, ov);
    };
    fM.prototype.set = function (ou, ov) {
        this.innerArray[ou] = ov;
    };
    fM.prototype.addAll = function (ou) {
        for (var ov = 0; ov < ou.size(); ov++) {
            this.add(ou.get(ov));
        }
    };
    fM.prototype.get = function (ou) {
        return this.innerArray[ou];
    };
    fM.prototype.size = function () {
        return this.innerArray.length;
    };
    fM.prototype.clear = function () {
        this.innerArray = new Array();
    };
    fM.prototype.remove = function (ou) {
        this.innerArray.splice(ou, 1);
    };
    fM.prototype.removeObject = function (ov) {
        for (var ou = 0; ou < this.innerArray.length; ou++) {
            if (this.innerArray[ou] == ov) {
                this.innerArray.splice(ou, 1);
                break;
            }
        }
    };
    fM.prototype.contains = function (ov) {
        for (var ou = 0; ou < this.innerArray.length; ou++) {
            if (this.innerArray[ou] == ov) {
                return true;
            }
        }
        return false;
    };
    fM.prototype.getArray = function () {
        return this.innerArray;
    };
    fM.prototype.setArray = function (ou) {
        this.innerArray = ou;
    };
    fM.prototype.sort = function () {
        this.innerArray.sort();
    };

    function fq(ou) {
        this.value = ou;
    }
    fq.prototype.append = function (ou) {
        this.value = this.value + ou;
    };
    fq.prototype.toString = function () {
        return this.value;
    };

    function lQ() {}
    lQ.getComputedStyle = function (oy) {
        var ou = oy.getKlass();
        if (ou == null) {
            return;
        }
        var oz = document.createElement("div");
        var ov = document.createElement("div");
        document.body.appendChild(oz);
        document.body.appendChild(ov);
        ov.className = ou;
        var ow = window.getComputedStyle(oz);
        var ox = window.getComputedStyle(ov);
        cM(ow, ox, "font-family", oy);
        cM(ow, ox, "font-size", oy);
        cM(ow, ox, "font-weight", oy);
        cM(ow, ox, "font-style", oy);
        cM(ow, ox, "color", oy);
        cM(ow, ox, "background", oy);
        cM(ow, ox, "border", oy);
        cM(ow, ox, "border-top", oy);
        cM(ow, ox, "border-bottom", oy);
        cM(ow, ox, "border-left", oy);
        cM(ow, ox, "border-right", oy);
        cM(ow, ox, "border-top-color", oy);
        cM(ow, ox, "border-top-style", oy);
        cM(ow, ox, "border-top-width", oy);
        cM(ow, ox, "border-bottom-color", oy);
        cM(ow, ox, "border-bottom-style", oy);
        cM(ow, ox, "border-bottom-width", oy);
        cM(ow, ox, "border-left-color", oy);
        cM(ow, ox, "border-left-style", oy);
        cM(ow, ox, "border-left-width", oy);
        cM(ow, ox, "border-right-color", oy);
        cM(ow, ox, "border-right-style", oy);
        cM(ow, ox, "border-right-width", oy);
        cM(ow, ox, "border-color", oy);
        cM(ow, ox, "border-style", oy);
        cM(ow, ox, "border-width", oy);
        cM(ow, ox, "margin", oy);
        cM(ow, ox, "margin-top", oy);
        cM(ow, ox, "margin-bottom", oy);
        cM(ow, ox, "margin-left", oy);
        cM(ow, ox, "margin-right", oy);
        cM(ow, ox, "padding", oy);
        cM(ow, ox, "padding-top", oy);
        cM(ow, ox, "padding-bottom", oy);
        cM(ow, ox, "padding-left", oy);
        cM(ow, ox, "padding-right", oy);
        document.body.removeChild(oz);
        document.body.removeChild(ov);
    };

    function cM(ow, oy, ov, ox) {
        var oB = ow.getPropertyValue(ov);
        var oA = oy.getPropertyValue(ov);
        if (oB != oA) {
            var oz = oA;
            if (oz.indexOf("rgb(") == 0 || oz.indexOf("rgba(") == 0) {
                oz = cJ(oz);
            }
            if (ov == "font-weight") {
                if (lv.stringIsNumber(oz)) {
                    var ou = lv.getIntegerValue(oz, 400);
                    if (ou > 400) {
                        oz = "bold";
                    } else {
                        oz = "normal";
                    }
                }
            }
            fe.loadStyleAttributesForBox(ov + ":" + oz, ox);
        }
    }

    function cJ(ov) {
        var ou = /rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)/.exec(ov);
        return ou
            ? "#" +
                  ((1 << 24) | (ou[1] << 16) | (ou[2] << 8) | ou[3])
                      .toString(16)
                      .substr(1)
            : ov;
    }

    function aR() {
        this.keyArray = new Array();
        this.valueArray = new Array();
    }
    aR.prototype.hasAttributes = function () {
        return this.keyArray.length > 0;
    };
    aR.prototype.clearAttributes = function () {
        this.keyArray = new Array();
        this.valueArray = new Array();
    };
    aR.prototype.clearAttribute = function (ov) {
        for (var ou = 0; ou < this.keyArray.length; ou++) {
            if (this.keyArray[ou] == ov) {
                this.keyArray.splice(ou, 1);
                this.valueArray.splice(ou, 1);
                break;
            }
        }
    };
    aR.prototype.setAttribute = function (ou, ov) {
        this.clearAttribute(ou);
        this.keyArray[this.keyArray.length] = ou;
        this.valueArray[this.valueArray.length] = ov;
    };
    aR.prototype.getAttribute = function (ov) {
        for (var ou = 0; ou < this.keyArray.length; ou++) {
            if (this.keyArray[ou] == ov) {
                return this.valueArray[ou];
            }
        }
        return null;
    };
    aR.prototype.hasKey = function (ov) {
        for (var ou = 0; ou < this.keyArray.length; ou++) {
            if (this.keyArray[ou] == ov) {
                return true;
            }
        }
        return false;
    };
    aR.prototype.getKeys = function () {
        var ov = new fM();
        for (var ou = 0; ou < this.keyArray.length; ou++) {
            ov.add(this.keyArray[ou]);
        }
        return ov;
    };
    aR.prototype.getValues = function () {
        var ov = new fM();
        for (var ou = 0; ou < this.valueArray.length; ou++) {
            ov.add(this.valueArray[ou]);
        }
        return ov;
    };
    aR.prototype.size = function () {
        return this.keyArray.length;
    };
    var nY = true;
    var eL = "";
    var jD = "";
    var eW = "cursor";
    var w = "#EEEEEE";
    var cu = "#BBBBFF";
    var a8 =
        ",MINIMIZE,MAXIMIZE,TOOLTIP,TOGGLE,HREF,RESIZE_HORIZONTAL,RESIZE_VERTICAL,";
    var ay =
        "math,mathml,mrow,mstyle,mglyph,mi,mn,mo,mtext,mspace,ms,mfrac,msqrt,mroot,merror,mpadded,mphantom,mfenced,menclose,msub,msup,msubsup,munder,mover,munderover,mmultiscripts,mprescripts,mtable,mlabeledtr,mtr,mtd,maligngroup,malignmark,mstack,mlongdiv,msgroup,msrow,mscarries,mscarry,msline,none,maction";
    var kT = ",dashed,dotted,solid,";
    var f1 = new fM();
    var aQ = new fM();
    var kD = ";2212;B1;2062;2061;B7;2C;2E;2146;2D9;";
    var eO = 37.79;
    var cp = "px,%,em,ex,in,cm,mm,pt,pc".split(",");
    var jj =
        ";black=000000;blue=0000FF;brown=A52A2A;cyan=00FFFF;darkgray=A9A9A9;gray=808080;green=008000;lightgray=D3D3D3;lime=00FF00;magenta=FF00FF;olive=808000;orange=FFA500;pink=FFC0CB;purple=800080;red=FF0000;teal=008080;violet=8F00FF;white=FFFFFF;yellow=FFFF00;apricot=FBCEB1;aquamarine=7FFFD4;bittersweet=FE6F5E;bluegreen=0D98BA;blueviolet=8A2BE2;brickred=CB4154;burntorange=CC5500;cadetblue=5F9EA0;carnationpink=FFA6C9;cerulean=007BA7;cornflowerblue=6495ED;dandelion=F0E130;darkorchid=9932CC;emerald=50C878;forestgreen=228B22;fuchsia=FF00FF;goldenrod=DAA520;greenyellow=ADFF2F;junglegreen=29AB87;lavender=E6E6FA;limegreen=32CD32;mahogany=C04000;maroon=800000;melon=FDBCB4;midnightblue=191970;mulberry=C54B8C;navyblue=000080;olivegreen=556B2F;orangered=FF4500;orchid=DA70D6;peach=FFCBA4;periwinkle=CCCCFF;pinegreen=01796F;plum=DDA0DD;processblue=0AFFFF;rawsienna=8C0000;redorange=FF5349;redviolet=C71585;rhodamine=FF2EFF;royalblue=4169E1;royalpurple=7851A9;rubinered=D10056;salmon=FF8C69;seagreen=2E8B57;sepia=704214;skyblue=87CEEB;springgreen=00FF7F;tan=D2B48C;tealblue=367588;thistle=D8BFD8;turquoise=30D5C8;violetred=F75394;wildstrawberry=FF43A4;yellowgreen=9ACD32;yelloworange=FFAE42;aliceblue=F0F8FF;antiquewhite=FAEBD7;aqua=00FFFF;azure=007FFF;beige=F5F5DC;bisque=FFE4C4;blanchedalmond=FFEBCD;burlywood=DEB887;chartreuse=7FFF00;chocolate=D2691E;coral=FF7F50;cornsilk=FFF8DC;crimson=DC143C;darkblue=00008B;darkcyan=008B8B;darkgoldenrod=B8860B;darkgreen=013220;darkkhaki=BDB76B;darkmagenta=8B008B;darkolivegreen=556B2F;darkorange=FF8C00;darkred=8B0000;darksalmon=E9967A;darkseagreen=8FBC8F;darkslateblue=483D8B;darkslategray=2F4F4F;darkturquoise=00CED1;darkviolet=9400D3;deeppink=FF1493;deepskyblue=00BFFF;dimgray=696969;dodgerblue=1E90FF;firebrick=B22222;floralwhite=FFFAF0;gainsboro=DCDCDC;ghostwhite=F8F8FF;gold=FFD700;honeydew=F0FFF0;hotpink=FF69B4;indianred=CD5C5C;indigo=6F00FF;ivory=FFFFF0;khaki=F0E68C;lavenderblush=FFF0F5;lawngreen=7CFC00;lemonchiffon=FFFACD;lightblue=ADD8E6;lightcoral=F08080;lightcyan=E0FFFF;lightgoldenrod=FAFAD2;lightgoldenrodyellow=FAFAD2;lightgreen=90EE90;lightpink=FFB6C1;lightsalmon=FFA07A;lightseagreen=20B2AA;lightskyblue=87CEFA;lightslateblue=8470FF;lightslategray=778899;lightsteelblue=B0C4DE;lightyellow=FFFFE0;linen=FAF0E6;mediumaquamarine=66DDAA;mediumblue=0000CD;mediumorchid=BA55D3;mediumpurple=9370DB;mediumseagreen=3CB371;mediumslateblue=7B68EE;mediumspringgreen=00FA9A;mediumturquoise=48D1CC;mediumvioletred=C71585;mintcream=F5FFFA;mistyrose=FFE4E1;moccasin=FAEBD7;navajowhite=FFDEAD;navy=000080;oldlace=FDF5E6;olivedrab=6B8E23;palegoldenrod=EEE8AA;palegreen=98FB98;paleturquoise=AFEEEE;palevioletred=DB7093;papayawhip=FFEFD5;peachpuff=FFDAB9;peru=CD853F;powderblue=B0E0E6;rosybrown=BC8F8F;saddlebrown=8B4513;sandybrown=F4A460;seashell=FFF5EE;sienna=882D17;silver=C0C0C0;slateblue=6A5ACD;slategray=708090;snow=FFFAFA;steelblue=4682B4;tomato=FF6347;wheat=F5DEB3;whitesmoke=F5F5F5;";
    var kS =
        "|20|\\space|23|\\#|24|\\$|25|\\%|26|\\&|27|\\textquotesingle|2A|\\ast|5C|\\backslash|5E|\\^{}|5F|\\_|60|\\textasciigrave|7B|\\lbrace|7C|\\vert|7D|\\rbrace|7E|\\textasciitilde|A1|\\textexclamdown|A2|\\textcent|A3|\\pounds|A4|\\textcurrency|A5|\\yen|A6|\\textbrokenbar|A7|\\S|A8|\\textasciidieresis|A9|\\copyright|AA|\\textordfeminine|AB|\\guillemotleft|AC|\\lnot|AD|\\-|AE|\\circledR|AF|\\textasciimacron|B0|\\textdegree|B1|\\pm|B4|\\textasciiacute|B5|\\mathrm{\\mu}|B6|\\P|B7|\\cdot|B8|\\c{}|BA|\\textordmasculine|BB|\\guillemotright|BC|\\textonequarter|BD|\\textonehalf|BE|\\textthreequarters|BF|\\textquestiondown|C0|\\grave{A}|C1|\\acute{A}|C2|\\hat{A}|C3|\\tilde{A}|C4|\\ddot{A}|C5|\\AA|C6|\\AE|C7|\\c{C}|C8|\\grave{E}|C9|\\acute{E}|CA|\\hat{E}|CB|\\ddot{E}|CC|\\grave{I}|CD|\\acute{I}|CE|\\hat{I}|CF|\\ddot{I}|D0|\\DH|D1|\\tilde{N}|D2|\\grave{O}|D3|\\acute{O}|D4|\\hat{O}|D5|\\tilde{O}|D6|\\ddot{O}|D7|\\times|D8|\\O|D9|\\grave{U}|DA|\\acute{U}|DB|\\hat{U}|DC|\\ddot{U}|DD|\\acute{Y}|DE|\\TH|DF|\\ss|E0|\\grave{a}|E1|\\acute{a}|E2|\\hat{a}|E3|\\tilde{a}|E4|\\ddot{a}|E5|\\aa|E6|\\ae|E7|\\c{c}|E8|\\grave{e}|E9|\\acute{e}|EA|\\hat{e}|EB|\\ddot{e}|EC|\\grave{\\imath}|ED|\\acute{\\imath}|EE|\\hat{\\imath}|EF|\\ddot{\\imath}|F0|\\dh|F1|\\tilde{n}|F2|\\grave{o}|F3|\\acute{o}|F4|\\hat{o}|F5|\\tilde{o}|F6|\\ddot{o}|F7|\\div|F8|\\o|F9|\\grave{u}|FA|\\acute{u}|FB|\\hat{u}|FC|\\ddot{u}|FD|\\acute{y}|FE|\\th|FF|\\ddot{y}|100|\\bar{A}|101|\\bar{a}|102|\\breve{A}|103|\\u{a}|104|\\k{A}|105|\\k{a}|106|\\acute{C}|107|\\acute{c}|108|\\hat{C}|109|\\hat{c}|10A|\\dot{C}|10B|\\dot{c}|10C|\\check{C}|10D|\\check{c}|10E|\\check{D}|10F|\\check{d}|110|\\DJ|111|\\dj|112|\\bar{E}|113|\\bar{e}|114|\\breve{E}|115|\\breve{e}|116|\\dot{E}|117|\\dot{e}|118|\\k{E}|119|\\k{e}|11A|\\check{E}|11B|\\check{e}|11C|\\hat{G}|11D|\\hat{g}|11E|\\breve{G}|11F|\\breve{g}|120|\\dot{G}|121|\\dot{g}|122|\\c{G}|123|\\c{g}|124|\\hat{H}|125|\\hat{h}|127|\\Elzxh|128|\\tilde{I}|129|\\tilde{\\imath}|12A|\\bar{I}|12B|\\bar{\\imath}|12C|\\breve{I}|12D|\\breve{\\imath}|12E|\\k{I}|12F|\\k{i}|130|\\dot{I}|131|\\imath|134|\\hat{J}|135|\\hat{\\jmath}|136|\\c{K}|137|\\c{k}|139|\\acute{L}|13A|\\acute{l}|13B|\\c{L}|13C|\\c{l}|13D|\\check{L}|13E|\\check{l}|141|\\L|142|\\l|143|\\acute{N}|144|\\acute{n}|145|\\c{N}|146|\\c{n}|147|\\check{N}|148|\\check{n}|14A|\\NG|14B|\\ng|14C|\\bar{O}|14D|\\bar{o}|14E|\\breve{O}|14F|\\breve{o}|150|\\H{O}|151|\\H{o}|152|\\OE|153|\\oe|154|\\acute{R}|155|\\acute{r}|156|\\c{R}|157|\\c{r}|158|\\check{R}|159|\\check{r}|15A|\\acute{S}|15B|\\acute{s}|15C|\\hat{S}|15D|\\hat{s}|15E|\\c{S}|15F|\\c{s}|160|\\check{S}|161|\\check{s}|162|\\c{T}|163|\\c{t}|164|\\check{T}|165|\\check{t}|168|\\tilde{U}|169|\\tilde{u}|16A|\\bar{U}|16B|\\bar{u}|16C|\\breve{U}|16D|\\breve{u}|16E|\\mathring{U}|16F|\\mathring{u}|170|\\H{U}|171|\\H{u}|172|\\k{U}|173|\\k{u}|174|\\hat{W}|175|\\hat{w}|176|\\hat{Y}|177|\\hat{y}|178|\\ddot{Y}|179|\\acute{Z}|17A|\\acute{z}|17B|\\dot{Z}|17C|\\dot{z}|17D|\\check{Z}|17E|\\check{z}|195|\\texthvlig|19E|\\textnrleg|1AA|\\eth|1C2|\\textdoublepipe|1F5|\\acute{g}|250|\\Elztrna|252|\\Elztrnsa|254|\\Elzopeno|256|\\Elzrtld|259|\\Elzschwa|25B|\\varepsilon|263|\\Elzpgamma|264|\\Elzpbgam|265|\\Elztrnh|26C|\\Elzbtdl|26D|\\Elzrtll|26F|\\Elztrnm|270|\\Elztrnmlr|271|\\Elzltlmr|272|\\Elzltln|273|\\Elzrtln|277|\\Elzclomeg|278|\\textphi|279|\\Elztrnr|27A|\\Elztrnrl|27B|\\Elzrttrnr|27C|\\Elzrl|27D|\\Elzrtlr|27E|\\Elzfhr|282|\\Elzrtls|283|\\Elzesh|287|\\Elztrnt|288|\\Elzrtlt|28A|\\Elzpupsil|28B|\\Elzpscrv|28C|\\Elzinvv|28D|\\Elzinvw|28E|\\Elztrny|290|\\Elzrtlz|292|\\Elzyogh|294|\\Elzglst|295|\\Elzreglst|296|\\Elzinglst|29E|\\textturnk|2A4|\\Elzdyogh|2A7|\\Elztesh|2C7|\\textasciicaron|2C8|\\Elzverts|2CC|\\Elzverti|2D0|\\Elzlmrk|2D1|\\Elzhlmrk|2D2|\\Elzsbrhr|2D3|\\Elzsblhr|2D4|\\Elzrais|2D5|\\Elzlow|2D8|\\u|2D9|\\dot{}|2DA|\\mathring{}|2DB|\\k{}|2DC|\\texttildelow|2DD|\\H{}|2E5|\\tone{55}|2E6|\\tone{44}|2E7|\\tone{33}|2E8|\\tone{22}|2E9|\\tone{11}|300|\\grave|301|\\acute|302|\\hat|303|\\tilde|304|\\bar|306|\\breve|307|\\dot|308|\\ddot|30A|\\r|30B|\\H|30C|\\check|30F|\\cyrchar\\C|321|\\Elzpalh|322|\\Elzrh|327|\\c|328|\\k|32A|\\Elzsbbrg|335|\\Elzxl|336|\\Elzbar|389|\\grave{H}|38A|\\mathrm{'I}|38C|\\mathrm{'O}|38E|\\mathrm{'Y}|38F|\\mathrm{'\\Omega}|390|\\acute{\\ddot{\\iota}}|391|\\Alpha|392|\\Beta|393|\\Gamma|394|\\Delta|395|\\Epsilon|396|\\Zeta|397|\\Eta|398|\\Theta|399|\\Iota|39A|\\Kappa|39B|\\Lambda|39E|\\Xi|3A0|\\Pi|3A1|\\Rho|3A3|\\Sigma|3A4|\\Tau|3A5|\\Upsilon|3A6|\\Phi|3A7|\\Chi|3A8|\\Psi|3A9|\\Omega|3AA|\\mathrm{\\ddot{I}}|3AB|\\mathrm{\\ddot{Y}}|3AC|\\acute{\\alpha}|3AD|\\acute{\\epsilon}|3AE|\\acute{\\eta}|3AF|\\acute{\\iota}|3B0|\\acute{\\ddot{\\upsilon}}|3B1|\\alpha|3B2|\\beta|3B3|\\gamma|3B4|\\delta|3B5|\\epsilon|3B6|\\zeta|3B7|\\eta|3B8|\\theta|3B9|\\iota|3BA|\\kappa|3BB|\\lambda|3BC|\\mu|3BD|\\nu|3BE|\\xi|3C0|\\pi|3C1|\\rho|3C2|\\varsigma|3C3|\\sigma|3C4|\\tau|3C5|\\upsilon|3C6|\\varphi|3C7|\\chi|3C8|\\psi|3C9|\\omega|3CA|\\ddot{\\iota}|3CB|\\ddot{\\upsilon}|3CD|\\acute{\\upsilon}|3CE|\\acute{\\omega}|3D0|\\Pisymbol{ppi022}{87}|3D1|\\vartheta|3D5|\\phi|3D6|\\varpi|3DA|\\Stigma|3DC|\\Digamma|3DD|\\digamma|3DE|\\Koppa|3E0|\\Sampi|3F0|\\varkappa|3F1|\\varrho|3F4|\\textTheta|3F6|\\backepsilon|401|\\cyrchar\\CYRYO|402|\\cyrchar\\CYRDJE|403|\\cyrchar{\\'\\CYRG}|404|\\cyrchar\\CYRIE|405|\\cyrchar\\CYRDZE|406|\\cyrchar\\CYRII|407|\\cyrchar\\CYRYI|408|\\cyrchar\\CYRJE|409|\\cyrchar\\CYRLJE|40A|\\cyrchar\\CYRNJE|40B|\\cyrchar\\CYRTSHE|40C|\\cyrchar{\\'\\CYRK}|40E|\\cyrchar\\CYRUSHRT|40F|\\cyrchar\\CYRDZHE|410|\\cyrchar\\CYRA|411|\\cyrchar\\CYRB|412|\\cyrchar\\CYRV|413|\\cyrchar\\CYRG|414|\\cyrchar\\CYRD|415|\\cyrchar\\CYRE|416|\\cyrchar\\CYRZH|417|\\cyrchar\\CYRZ|418|\\cyrchar\\CYRI|419|\\cyrchar\\CYRISHRT|41A|\\cyrchar\\CYRK|41B|\\cyrchar\\CYRL|41C|\\cyrchar\\CYRM|41D|\\cyrchar\\CYRN|41E|\\cyrchar\\CYRO|41F|\\cyrchar\\CYRP|420|\\cyrchar\\CYRR|421|\\cyrchar\\CYRS|422|\\cyrchar\\CYRT|423|\\cyrchar\\CYRU|424|\\cyrchar\\CYRF|425|\\cyrchar\\CYRH|426|\\cyrchar\\CYRC|427|\\cyrchar\\CYRCH|428|\\cyrchar\\CYRSH|429|\\cyrchar\\CYRSHCH|42A|\\cyrchar\\CYRHRDSN|42B|\\cyrchar\\CYRERY|42C|\\cyrchar\\CYRSFTSN|42D|\\cyrchar\\CYREREV|42E|\\cyrchar\\CYRYU|42F|\\cyrchar\\CYRYA|430|\\cyrchar\\cyra|431|\\cyrchar\\cyrb|432|\\cyrchar\\cyrv|433|\\cyrchar\\cyrg|434|\\cyrchar\\cyrd|435|\\cyrchar\\cyre|436|\\cyrchar\\cyrzh|437|\\cyrchar\\cyrz|438|\\cyrchar\\cyri|439|\\cyrchar\\cyrishrt|43A|\\cyrchar\\cyrk|43B|\\cyrchar\\cyrl|43C|\\cyrchar\\cyrm|43D|\\cyrchar\\cyrn|43E|\\cyrchar\\cyro|43F|\\cyrchar\\cyrp|440|\\cyrchar\\cyrr|441|\\cyrchar\\cyrs|442|\\cyrchar\\cyrt|443|\\cyrchar\\cyru|444|\\cyrchar\\cyrf|445|\\cyrchar\\cyrh|446|\\cyrchar\\cyrc|447|\\cyrchar\\cyrch|448|\\cyrchar\\cyrsh|449|\\cyrchar\\cyrshch|44A|\\cyrchar\\cyrhrdsn|44B|\\cyrchar\\cyrery|44C|\\cyrchar\\cyrsftsn|44D|\\cyrchar\\cyrerev|44E|\\cyrchar\\cyryu|44F|\\cyrchar\\cyrya|451|\\cyrchar\\cyryo|452|\\cyrchar\\cyrdje|453|\\cyrchar{\\'\\cyrg}|454|\\cyrchar\\cyrie|455|\\cyrchar\\cyrdze|456|\\cyrchar\\cyrii|457|\\cyrchar\\cyryi|458|\\cyrchar\\cyrje|459|\\cyrchar\\cyrlje|45A|\\cyrchar\\cyrnje|45B|\\cyrchar\\cyrtshe|45C|\\cyrchar{\\'\\cyrk}|45E|\\cyrchar\\cyrushrt|45F|\\cyrchar\\cyrdzhe|460|\\cyrchar\\CYROMEGA|461|\\cyrchar\\cyromega|462|\\cyrchar\\CYRYAT|464|\\cyrchar\\CYRIOTE|465|\\cyrchar\\cyriote|466|\\cyrchar\\CYRLYUS|467|\\cyrchar\\cyrlyus|468|\\cyrchar\\CYRIOTLYUS|469|\\cyrchar\\cyriotlyus|46A|\\cyrchar\\CYRBYUS|46C|\\cyrchar\\CYRIOTBYUS|46D|\\cyrchar\\cyriotbyus|46E|\\cyrchar\\CYRKSI|46F|\\cyrchar\\cyrksi|470|\\cyrchar\\CYRPSI|471|\\cyrchar\\cyrpsi|472|\\cyrchar\\CYRFITA|474|\\cyrchar\\CYRIZH|478|\\cyrchar\\CYRUK|479|\\cyrchar\\cyruk|47A|\\cyrchar\\CYROMEGARND|47B|\\cyrchar\\cyromegarnd|47C|\\cyrchar\\CYROMEGATITLO|47D|\\cyrchar\\cyromegatitlo|47E|\\cyrchar\\CYROT|47F|\\cyrchar\\cyrot|480|\\cyrchar\\CYRKOPPA|481|\\cyrchar\\cyrkoppa|482|\\cyrchar\\cyrthousands|488|\\cyrchar\\cyrhundredthousands|489|\\cyrchar\\cyrmillions|48C|\\cyrchar\\CYRSEMISFTSN|48D|\\cyrchar\\cyrsemisftsn|48E|\\cyrchar\\CYRRTICK|48F|\\cyrchar\\cyrrtick|490|\\cyrchar\\CYRGUP|491|\\cyrchar\\cyrgup|492|\\cyrchar\\CYRGHCRS|493|\\cyrchar\\cyrghcrs|494|\\cyrchar\\CYRGHK|495|\\cyrchar\\cyrghk|496|\\cyrchar\\CYRZHDSC|497|\\cyrchar\\cyrzhdsc|498|\\cyrchar\\CYRZDSC|499|\\cyrchar\\cyrzdsc|49A|\\cyrchar\\CYRKDSC|49B|\\cyrchar\\cyrkdsc|49C|\\cyrchar\\CYRKVCRS|49D|\\cyrchar\\cyrkvcrs|49E|\\cyrchar\\CYRKHCRS|49F|\\cyrchar\\cyrkhcrs|4A0|\\cyrchar\\CYRKBEAK|4A1|\\cyrchar\\cyrkbeak|4A2|\\cyrchar\\CYRNDSC|4A3|\\cyrchar\\cyrndsc|4A4|\\cyrchar\\CYRNG|4A5|\\cyrchar\\cyrng|4A6|\\cyrchar\\CYRPHK|4A7|\\cyrchar\\cyrphk|4A8|\\cyrchar\\CYRABHHA|4A9|\\cyrchar\\cyrabhha|4AA|\\cyrchar\\CYRSDSC|4AB|\\cyrchar\\cyrsdsc|4AC|\\cyrchar\\CYRTDSC|4AD|\\cyrchar\\cyrtdsc|4AE|\\cyrchar\\CYRY|4AF|\\cyrchar\\cyry|4B0|\\cyrchar\\CYRYHCRS|4B1|\\cyrchar\\cyryhcrs|4B2|\\cyrchar\\CYRHDSC|4B3|\\cyrchar\\cyrhdsc|4B4|\\cyrchar\\CYRTETSE|4B5|\\cyrchar\\cyrtetse|4B6|\\cyrchar\\CYRCHRDSC|4B7|\\cyrchar\\cyrchrdsc|4B8|\\cyrchar\\CYRCHVCRS|4B9|\\cyrchar\\cyrchvcrs|4BA|\\cyrchar\\CYRSHHA|4BB|\\cyrchar\\cyrshha|4BC|\\cyrchar\\CYRABHCH|4BD|\\cyrchar\\cyrabhch|4BE|\\cyrchar\\CYRABHCHDSC|4BF|\\cyrchar\\cyrabhchdsc|4C0|\\cyrchar\\CYRpalochka|4C3|\\cyrchar\\CYRKHK|4C4|\\cyrchar\\cyrkhk|4C7|\\cyrchar\\CYRNHK|4C8|\\cyrchar\\cyrnhk|4CB|\\cyrchar\\CYRCHLDSC|4CC|\\cyrchar\\cyrchldsc|4D4|\\cyrchar\\CYRAE|4D5|\\cyrchar\\cyrae|4D8|\\cyrchar\\CYRSCHWA|4D9|\\cyrchar\\cyrschwa|4E0|\\cyrchar\\CYRABHDZE|4E1|\\cyrchar\\cyrabhdze|4E8|\\cyrchar\\CYROTLD|4E9|\\cyrchar\\cyrotld|2002|\\hspace{0.6em}|2003|\\hspace{1em}|2004|\\hspace{0.33em}|2005|\\hspace{0.25em}|2006|\\hspace{0.166em}|2007|\\hphantom{0}|2008|\\hphantom{,}|2009|\\hspace{0.167em}|200A|\\mkern1mu|2013|\\textendash|2015|\\rule{1em}{1pt}|2016|\\Vert|201B|\\Elzreapos|201C|\\textquotedblleft|201D|\\textquotedblright|2020|\\dag|2021|\\ddag|2022|\\bullet|2026|\\ldots|2030|\\textperthousand|2031|\\textpertenthousand|2035|\\backprime|2039|\\guilsinglleft|203A|\\guilsinglright|205F|\\mkern4mu|2060|\\nolinebreak|20A7|\\Elzpes|20AC|\\texteuro|20DB|\\dddot|20DC|\\ddddot|2102|\\mathbb{C}|210A|\\mathscr{g}|210B|\\mathscr{H}|210C|\\mathfrak{H}|210D|\\mathbb{H}|210F|\\hslash|2110|\\mathscr{I}|2111|\\mathfrak{I}|2112|\\mathscr{L}|2113|\\mathscr{l}|2115|\\mathbb{N}|2116|\\cyrchar\\textnumero|2118|\\wp|2119|\\mathbb{P}|211A|\\mathbb{Q}|211B|\\mathscr{R}|211C|\\mathfrak{R}|211D|\\mathbb{R}|211E|\\Elzxrat|2122|\\texttrademark|2124|\\mathbb{Z}|2127|\\mho|2128|\\mathfrak{Z}|2129|\\ElsevierGlyph{2129}|212C|\\mathscr{B}|212D|\\mathfrak{C}|212F|\\mathscr{e}|2130|\\mathscr{E}|2131|\\mathscr{F}|2133|\\mathscr{M}|2134|\\mathscr{o}|2135|\\aleph|2136|\\beth|2137|\\gimel|2138|\\daleth|2153|\\textfrac{1}{3}|2154|\\textfrac{2}{3}|2155|\\textfrac{1}{5}|2156|\\textfrac{2}{5}|2157|\\textfrac{3}{5}|2158|\\textfrac{4}{5}|2159|\\textfrac{1}{6}|215A|\\textfrac{5}{6}|215B|\\textfrac{1}{8}|215C|\\textfrac{3}{8}|215D|\\textfrac{5}{8}|215E|\\textfrac{7}{8}|2190|\\leftarrow|2191|\\uparrow|2192|\\rightarrow|2193|\\downarrow|2194|\\leftrightarrow|2195|\\updownarrow|2196|\\nwarrow|2197|\\nearrow|2198|\\searrow|2199|\\swarrow|219A|\\nleftarrow|219B|\\nrightarrow|219C|\\arrowwaveright|219E|\\twoheadleftarrow|21A0|\\twoheadrightarrow|21A2|\\leftarrowtail|21A3|\\rightarrowtail|21A6|\\mapsto|21A9|\\hookleftarrow|21AA|\\hookrightarrow|21AB|\\looparrowleft|21AC|\\looparrowright|21AD|\\leftrightsquigarrow|21AE|\\nleftrightarrow|21B0|\\Lsh|21B1|\\Rsh|21B3|\\ElsevierGlyph{21B3}|21B6|\\curvearrowleft|21B7|\\curvearrowright|21BA|\\circlearrowleft|21BB|\\circlearrowright|21BC|\\leftharpoonup|21BD|\\leftharpoondown|21BE|\\upharpoonright|21BF|\\upharpoonleft|21C0|\\rightharpoonup|21C1|\\rightharpoondown|21C2|\\downharpoonright|21C3|\\downharpoonleft|21C4|\\rightleftarrows|21C5|\\dblarrowupdown|21C6|\\leftrightarrows|21C7|\\leftleftarrows|21C8|\\upuparrows|21C9|\\rightrightarrows|21CA|\\downdownarrows|21CB|\\leftrightharpoons|21CC|\\rightleftharpoons|21CD|\\nLeftarrow|21CE|\\nLeftrightarrow|21CF|\\nRightarrow|21D0|\\Leftarrow|21D1|\\Uparrow|21D2|\\Rightarrow|21D3|\\Downarrow|21D4|\\Leftrightarrow|21D5|\\Updownarrow|21DA|\\Lleftarrow|21DB|\\Rrightarrow|21DD|\\rightsquigarrow|21F5|\\DownArrowUpArrow|2200|\\forall|2201|\\complement|2202|\\partial|2203|\\exists|2204|\\nexists|2205|\\varnothing|2207|\\nabla|2208|\\in|2209|\\not\\in|220B|\\ni|220C|\\not\\ni|220F|\\prod|2210|\\coprod|2211|\\sum|2213|\\mp|2214|\\dotplus|2216|\\setminus|2218|\\circ|221A|\\surd|221D|\\propto|221E|\\infty|221F|\\rightangle|2220|\\angle|2221|\\measuredangle|2222|\\sphericalangle|2223|\\mid|2224|\\nmid|2225|\\parallel|2226|\\nparallel|2227|\\wedge|2228|\\vee|2229|\\cap|222A|\\cup|222B|\\int|222C|\\int\\!\\int|222D|\\int\\!\\int\\!\\int|222E|\\oint|222F|\\surfintegral|2230|\\volintegral|2231|\\clwintegral|2232|\\ElsevierGlyph{2232}|2233|\\ElsevierGlyph{2233}|2234|\\therefore|2235|\\because|2237|\\Colon|2238|\\ElsevierGlyph{2238}|223A|\\mathbin{{:}\\!\\!{-}\\!\\!{:}}|223B|\\homothetic|223C|\\sim|223D|\\backsim|223E|\\lazysinv|2240|\\wr|2241|\\not\\sim|2242|\\ElsevierGlyph{2242}|E05C|\\NotEqualTilde|2243|\\simeq|2244|\\not\\simeq|2245|\\cong|2246|\\approxnotequal|2247|\\not\\cong|2248|\\approx|2249|\\not\\approx|224A|\\approxeq|224B|\\tildetrpl|E01E|\\not\\apid|224C|\\allequal|224D|\\asymp|224E|\\Bumpeq|E052|\\NotHumpDownHump|224F|\\bumpeq|E05B|\\NotHumpEqual|2250|\\doteq|E039|\\not\\doteq|2251|\\doteqdot|2252|\\fallingdotseq|2253|\\risingdotseq|2256|\\eqcirc|2257|\\circeq|2259|\\estimates|225A|\\ElsevierGlyph{225A}|225B|\\starequal|225C|\\triangleq|225F|\\ElsevierGlyph{225F}|2260|\\not =|2261|\\equiv|2262|\\not\\equiv|2264|\\leq|2265|\\geq|2266|\\leqq|2267|\\geqq|2268|\\lneqq|2269|\\gneqq|226A|\\ll|E028|\\NotLessLess|226B|\\gg|E029|\\NotGreaterGreater|226C|\\between|226D|\\not\\kern-0.3em\\times|226E|\\not<|226F|\\not>|2270|\\not\\leq|2271|\\not\\geq|2272|\\lessequivlnt|2273|\\greaterequivlnt|2274|\\ElsevierGlyph{2274}|2275|\\ElsevierGlyph{2275}|2276|\\lessgtr|2277|\\gtrless|2278|\\notlessgreater|2279|\\notgreaterless|227A|\\prec|227B|\\succ|227C|\\preccurlyeq|227D|\\succcurlyeq|227E|\\precapprox|E059|\\NotPrecedesTilde|227F|\\succapprox|E05A|\\NotSucceedsTilde|2280|\\not\\prec|2281|\\not\\succ|2282|\\subset|2283|\\supset|2284|\\not\\subset|2285|\\not\\supset|2286|\\subseteq|2287|\\supseteq|2288|\\not\\subseteq|2289|\\not\\supseteq|228A|\\subsetneq|228B|\\supsetneq|228E|\\uplus|228F|\\sqsubset|E050|\\NotSquareSubset|2290|\\sqsupset|E051|\\NotSquareSuperset|2291|\\sqsubseteq|2292|\\sqsupseteq|2293|\\sqcap|2294|\\sqcup|2295|\\oplus|2296|\\ominus|2297|\\otimes|2298|\\oslash|2299|\\odot|229A|\\circledcirc|229B|\\circledast|229D|\\circleddash|229E|\\boxplus|229F|\\boxminus|22A0|\\boxtimes|22A1|\\boxdot|22A2|\\vdash|22A3|\\dashv|22A4|\\top|22A5|\\perp|22A7|\\truestate|22A8|\\forcesextra|22A9|\\Vdash|22AA|\\Vvdash|22AB|\\VDash|22AC|\\nvdash|22AD|\\nvDash|22AE|\\nVdash|22AF|\\nVDash|22B2|\\vartriangleleft|22B3|\\vartriangleright|22B4|\\trianglelefteq|22B5|\\trianglerighteq|22B6|\\original|22B7|\\image|22B8|\\multimap|22B9|\\hermitconjmatrix|22BA|\\intercal|22BB|\\veebar|22BE|\\rightanglearc|22C0|\\ElsevierGlyph{22C0}|22C1|\\ElsevierGlyph{22C1}|22C2|\\bigcap|22C3|\\bigcup|22C4|\\diamond|22C6|\\star|22C7|\\divideontimes|22C8|\\bowtie|22C9|\\ltimes|22CA|\\rtimes|22CB|\\leftthreetimes|22CC|\\rightthreetimes|22CD|\\backsimeq|22CE|\\curlyvee|22CF|\\curlywedge|22D0|\\Subset|22D1|\\Supset|22D2|\\Cap|22D3|\\Cup|22D4|\\pitchfork|22D6|\\lessdot|22D7|\\gtrdot|22D8|\\verymuchless|22D9|\\verymuchgreater|22DA|\\lesseqgtr|22DB|\\gtreqless|22DE|\\curlyeqprec|22DF|\\curlyeqsucc|22E2|\\not\\sqsubseteq|22E3|\\not\\sqsupseteq|22E5|\\Elzsqspne|22E6|\\lnsim|22E7|\\gnsim|22E8|\\precedesnotsimilar|22E9|\\succnsim|22EA|\\ntriangleleft|22EB|\\ntriangleright|22EC|\\ntrianglelefteq|22ED|\\ntrianglerighteq|22EE|\\vdots|22EF|\\cdots|22F0|\\upslopeellipsis|22F1|\\downslopeellipsis|2305|\\barwedge|2306|\\perspcorrespond|2308|\\lceil|2309|\\rceil|230A|\\lfloor|230B|\\rfloor|2315|\\recorder|231C|\\ulcorner|231D|\\urcorner|231E|\\llcorner|231F|\\lrcorner|2322|\\frown|2323|\\smile|2329|\\langle|232A|\\rangle|233D|\\ElsevierGlyph{E838}|23A3|\\Elzdlcorn|23B0|\\lmoustache|23B1|\\rmoustache|2423|\\textvisiblespace|2460|\\ding{172}|2461|\\ding{173}|2462|\\ding{174}|2463|\\ding{175}|2464|\\ding{176}|2465|\\ding{177}|2466|\\ding{178}|2467|\\ding{179}|2468|\\ding{180}|2469|\\ding{181}|24C8|\\circledS|2506|\\Elzdshfnc|2519|\\Elzsqfnw|2571|\\diagup|25A0|\\ding{110}|25A1|\\square|25AA|\\blacksquare|25AD|\\fbox{~~}|25AF|\\Elzvrecto|25B1|\\ElsevierGlyph{E381}|25B2|\\ding{115}|25B3|\\bigtriangleup|25B4|\\blacktriangle|25B5|\\vartriangle|25B8|\\blacktriangleright|25B9|\\triangleright|25BC|\\ding{116}|25BD|\\bigtriangledown|25BE|\\blacktriangledown|25BF|\\triangledown|25C2|\\blacktriangleleft|25C3|\\triangleleft|25C6|\\ding{117}|25CA|\\lozenge|25CB|\\bigcirc|25CF|\\ding{108}|25D0|\\Elzcirfl|25D1|\\Elzcirfr|25D2|\\Elzcirfb|25D7|\\ding{119}|25D8|\\Elzrvbull|25E7|\\Elzsqfl|25E8|\\Elzsqfr|25EA|\\Elzsqfse|2605|\\ding{72}|2606|\\ding{73}|260E|\\ding{37}|261B|\\ding{42}|261E|\\ding{43}|263E|\\rightmoon|263F|\\mercury|2640|\\venus|2642|\\male|2643|\\jupiter|2644|\\saturn|2645|\\uranus|2646|\\neptune|2647|\\pluto|2648|\\aries|2649|\\taurus|264A|\\gemini|264B|\\cancer|264C|\\leo|264D|\\virgo|264E|\\libra|264F|\\scorpio|2650|\\sagittarius|2651|\\capricornus|2652|\\aquarius|2653|\\pisces|2660|\\ding{171}|2663|\\ding{168}|2665|\\ding{170}|2666|\\ding{169}|2669|\\quarternote|266A|\\eighthnote|266D|\\flat|266E|\\natural|266F|\\sharp|2701|\\ding{33}|2702|\\ding{34}|2703|\\ding{35}|2704|\\ding{36}|2706|\\ding{38}|2707|\\ding{39}|2708|\\ding{40}|2709|\\ding{41}|270C|\\ding{44}|270D|\\ding{45}|270E|\\ding{46}|270F|\\ding{47}|2710|\\ding{48}|2711|\\ding{49}|2712|\\ding{50}|2713|\\ding{51}|2714|\\ding{52}|2715|\\ding{53}|2716|\\ding{54}|2717|\\ding{55}|2718|\\ding{56}|2719|\\ding{57}|271A|\\ding{58}|271B|\\ding{59}|271C|\\ding{60}|271D|\\ding{61}|271E|\\ding{62}|271F|\\ding{63}|2720|\\ding{64}|2721|\\ding{65}|2722|\\ding{66}|2723|\\ding{67}|2724|\\ding{68}|2725|\\ding{69}|2726|\\ding{70}|2727|\\ding{71}|272A|\\ding{74}|272B|\\ding{75}|272C|\\ding{76}|272D|\\ding{77}|272E|\\ding{78}|272F|\\ding{79}|2730|\\ding{80}|2731|\\ding{81}|2732|\\ding{82}|2733|\\ding{83}|2734|\\ding{84}|2735|\\ding{85}|2736|\\ding{86}|2737|\\ding{87}|2738|\\ding{88}|2739|\\ding{89}|273A|\\ding{90}|273B|\\ding{91}|273C|\\ding{92}|273D|\\ding{93}|273E|\\ding{94}|273F|\\ding{95}|2740|\\ding{96}|2741|\\ding{97}|2742|\\ding{98}|2743|\\ding{99}|2744|\\ding{100}|2745|\\ding{101}|2746|\\ding{102}|2747|\\ding{103}|2748|\\ding{104}|2749|\\ding{105}|274A|\\ding{106}|274B|\\ding{107}|274D|\\ding{109}|274F|\\ding{111}|2750|\\ding{112}|2751|\\ding{113}|2752|\\ding{114}|2756|\\ding{118}|2758|\\ding{120}|2759|\\ding{121}|275A|\\ding{122}|275B|\\ding{123}|275C|\\ding{124}|275D|\\ding{125}|275E|\\ding{126}|2761|\\ding{161}|2762|\\ding{162}|2763|\\ding{163}|2764|\\ding{164}|2765|\\ding{165}|2766|\\ding{166}|2767|\\ding{167}|2776|\\ding{182}|2777|\\ding{183}|2778|\\ding{184}|2779|\\ding{185}|277A|\\ding{186}|277B|\\ding{187}|277C|\\ding{188}|277D|\\ding{189}|277E|\\ding{190}|277F|\\ding{191}|2780|\\ding{192}|2781|\\ding{193}|2782|\\ding{194}|2783|\\ding{195}|2784|\\ding{196}|2785|\\ding{197}|2786|\\ding{198}|2787|\\ding{199}|2788|\\ding{200}|2789|\\ding{201}|278A|\\ding{202}|278B|\\ding{203}|278C|\\ding{204}|278D|\\ding{205}|278E|\\ding{206}|278F|\\ding{207}|2790|\\ding{208}|2791|\\ding{209}|2792|\\ding{210}|2793|\\ding{211}|2794|\\ding{212}|2798|\\ding{216}|2799|\\ding{217}|279A|\\ding{218}|279B|\\ding{219}|279C|\\ding{220}|279D|\\ding{221}|279E|\\ding{222}|279F|\\ding{223}|27A0|\\ding{224}|27A1|\\ding{225}|27A2|\\ding{226}|27A3|\\ding{227}|27A4|\\ding{228}|27A5|\\ding{229}|27A6|\\ding{230}|27A7|\\ding{231}|27A8|\\ding{232}|27A9|\\ding{233}|27AA|\\ding{234}|27AB|\\ding{235}|27AC|\\ding{236}|27AD|\\ding{237}|27AE|\\ding{238}|27AF|\\ding{239}|27B1|\\ding{241}|27B2|\\ding{242}|27B3|\\ding{243}|27B4|\\ding{244}|27B5|\\ding{245}|27B6|\\ding{246}|27B7|\\ding{247}|27B8|\\ding{248}|27B9|\\ding{249}|27BA|\\ding{250}|27BB|\\ding{251}|27BC|\\ding{252}|27BD|\\ding{253}|27BE|\\ding{254}|27F5|\\longleftarrow|27F6|\\longrightarrow|27F7|\\longleftrightarrow|27F8|\\Longleftarrow|27F9|\\Longrightarrow|27FA|\\Longleftrightarrow|27FC|\\longmapsto|27FF|\\sim\\joinrel\\leadsto|2905|\\ElsevierGlyph{E212}|2912|\\UpArrowBar|2913|\\DownArrowBar|2923|\\ElsevierGlyph{E20C}|2924|\\ElsevierGlyph{E20D}|2925|\\ElsevierGlyph{E20B}|2926|\\ElsevierGlyph{E20A}|2927|\\ElsevierGlyph{E211}|2928|\\ElsevierGlyph{E20E}|2929|\\ElsevierGlyph{E20F}|292A|\\ElsevierGlyph{E210}|2933|\\ElsevierGlyph{E21C}|E005|\\ElsevierGlyph{E21D}|2936|\\ElsevierGlyph{E21A}|2937|\\ElsevierGlyph{E219}|2940|\\Elolarr|2941|\\Elorarr|2942|\\ElzRlarr|2944|\\ElzrLarr|2947|\\Elzrarrx|294E|\\LeftRightVector|294F|\\RightUpDownVector|2950|\\DownLeftRightVector|2951|\\LeftUpDownVector|2952|\\LeftVectorBar|2953|\\RightVectorBar|2954|\\RightUpVectorBar|2955|\\RightDownVectorBar|2956|\\DownLeftVectorBar|2957|\\DownRightVectorBar|2958|\\LeftUpVectorBar|2959|\\LeftDownVectorBar|295A|\\LeftTeeVector|295B|\\RightTeeVector|295C|\\RightUpTeeVector|295D|\\RightDownTeeVector|295E|\\DownLeftTeeVector|295F|\\DownRightTeeVector|2960|\\LeftUpTeeVector|2961|\\LeftDownTeeVector|296E|\\UpEquilibrium|296F|\\ReverseUpEquilibrium|2970|\\RoundImplies|297C|\\ElsevierGlyph{E214}|297D|\\ElsevierGlyph{E215}|2980|\\Elztfnc|2985|\\ElsevierGlyph{3018}|2986|\\Elroang|2994|\\ElsevierGlyph{E291}|2999|\\Elzddfnc|299C|\\Angle|29A0|\\Elzlpargt|29B5|\\ElsevierGlyph{E260}|29B6|\\ElsevierGlyph{E61B}|29CA|\\ElzLap|29CB|\\Elzdefas|29CF|\\LeftTriangleBar|E14C|\\NotLeftTriangleBar|29D0|\\RightTriangleBar|E14D|\\NotRightTriangleBar|29DC|\\ElsevierGlyph{E372}|29EB|\\blacklozenge|29F4|\\RuleDelayed|2A04|\\Elxuplus|2A05|\\ElzThr|2A06|\\Elxsqcup|2A07|\\ElzInf|2A08|\\ElzSup|2A0D|\\ElzCint|2A0F|\\clockoint|2A10|\\ElsevierGlyph{E395}|2A16|\\sqrint|2A25|\\ElsevierGlyph{E25A}|2A2A|\\ElsevierGlyph{E25B}|2A2D|\\ElsevierGlyph{E25C}|2A2E|\\ElsevierGlyph{E25D}|2A2F|\\ElzTimes|2A34|\\ElsevierGlyph{E25E}|2A3C|\\ElsevierGlyph{E259}|2A3F|\\amalg|2A53|\\ElzAnd|2A54|\\ElzOr|2A55|\\ElsevierGlyph{E36E}|2A56|\\ElOr|2A5F|\\Elzminhat|2A6E|\\stackrel{*}{=}|2A75|\\Equal|2A7D|\\leqslant|E010|\\nleqslant|2A7E|\\geqslant|E00F|\\ngeqslant|2A85|\\lessapprox|2A86|\\gtrapprox|2A87|\\lneq|2A88|\\gneq|2A89|\\lnapprox|2A8A|\\gnapprox|2A8B|\\lesseqqgtr|2A8C|\\gtreqqless|2A95|\\eqslantless|2A96|\\eqslantgtr|2A9D|\\Pisymbol{ppi020}{117}|2A9E|\\Pisymbol{ppi020}{105}|2AA1|\\NestedLessLess|E14E|\\NotNestedLessLess|2AA2|\\NestedGreaterGreater|E14F|\\NotNestedGreaterGreater|2AAF|\\preceq|E04B|\\not\\preceq|2AB0|\\succeq|E04F|\\not\\succeq|2AB5|\\precneqq|2AB6|\\succneqq|2AB9|\\precnapprox|2ABA|\\succnapprox|2AC5|\\subseteqq|E016|\\nsubseteqq|2AC6|\\supseteqq|E018|\\nsupseteqq|2ACB|\\subsetneqq|2ACC|\\supsetneqq|2AEB|\\ElsevierGlyph{E30D}|2AF6|\\Elztdcol|300A|\\ElsevierGlyph{300A}|300B|\\ElsevierGlyph{300B}|3019|\\ElsevierGlyph{3019}|301A|\\openbracketleft|301B|\\openbracketright|";
    var lz =
        ",lvert,rvert,lVert,rVert,lgroup,rgroup,land,sphericalangle,circ,oiint,cdots,ddots,exists,infty,iint,neq,owns,lor,partial,surd,to,doublecap,doublecup,oslash,cdot,star,nmid,backslash,gets,neg,lnot,to,gggtr,lll,llless,smallfrown,smallsmile,";
    var cF =
        ",verbar,verbar,par,par,lpar,rpar,and,angsph,compfn,Conint,ctdot,dtdot,exist,infin,Int,ne,ni,or,part,radic,rarr,Cap,Cup,osol,sdot,sstarf,rnmid,bsol,larr,not,not,rarr,Gg,Ll,Ll,sfrown,ssmile,";
    var f9 = ";EOFB=5-18em;";
    var e7 = ";66=E0B3;";
    var jx = ";205F=E0FB;";
    var og = ";223D=E00A;";
    var od = ";223E=E00B;";
    var oa =
        ";219D=E004;2202=E03A;2242=E05C;224B=E01E;224E=E052;224F=E05B;2250=E039;2266=E011;2267=E00E;226A=E028;226B=E029;227E=E059;227F=E05A;228F=E050;2290=E051;22D8=E02A;22D9=E02B;22F5=E03B;22F9=E03C;2933=E005;29CF=E14C;29D0=E14D;2A6D=E023;2A70=E025;2A7D=E010;2A7E=E00F;2AA1=E14E;2AA2=E14F;2AAF=E04B;2AB0=E04F;2AC5=E016;2AC6=E018;";
    var dl =
        ";3C=E434;3D=E42F;3E=E435;2208=E415;220A=E06B;220B=E417;220D=E06C;2220=E02F;223C=E429;223D=E45E;2242=E04D;2245=E42B;2248=E42D;224A=E3C3;224B=E45F;224D=E433;2261=E430;2263=E07D;2264=E07E;2265=E07F;2266=E080;2267=E081;226A=E460;226B=E461;2272=E43A;2273=E43B;2276=E462;2277=E463;227A=E43E;227B=E43F;227C=E44D;227F=E44E;2282=E440;2283=E441;2286=E442;2287=E443;228F=E464;2290=E465;2291=E466;2292=E467;22B2=E468;22B3=E469;22B4=E44F;22B5=E450;22CD=E42A;";
    var c4 = ";3D=E037;2261=E3C2;2AFD=E038;";
    var eT =
        ";2229=E424;222A=E425;2268=E431;2269=E432;2272=E438;2273=E439;228A=E444;228B=E445;2293=E446;2294=E447;2295=E448;2297=E449;229C=E44A;22DA=E44B;22DB=E44C;2A3C=E455;2A3D=E456;2A9D=E457;2A9E=E458;2AAC=E459;2AAD=E45A;2ACB=E45B;2ACC=E45C;";
    var hn =
        ";9=Tab;A=NewLine;21=excl;22=quot=QUOT;23=num;24=dollar;25=percnt;26=amp=AMP;27=apos;28=lpar;29=rpar;2A=ast=midast;2B=plus;2C=comma;2E=period;2F=sol;3A=colon;3B=semi;3C=lt=LT;E434=nvlt;3D=equals;E037=bne;3E=gt=GT;E435=nvgt;3F=quest;40=commat;5B=lsqb=lbrack;5C=bsol;5D=rsqb=rbrack;5E=Hat;5F=lowbar=UnderBar;60=grave=DiacriticalGrave;E0B3=fjlig;7B=lcub=lbrace;7C=verbar=vert=VerticalLine;7D=rcub=rbrace;A0=nbsp=NonBreakingSpace;A1=iexcl;A2=cent;A3=pound;A4=curren;A5=yen;A6=brvbar;A7=sect;A8=Dot=die=DoubleDot=uml;A9=copy=COPY;AA=ordf;AB=laquo;AC=not;AD=shy;AE=reg=circledR=REG;AF=macr=strns;B0=deg;B1=plusmn=pm=PlusMinus;B2=sup2;B3=sup3;B4=acute=DiacriticalAcute;B5=micro;B6=para;B7=middot=centerdot=CenterDot;B8=cedil=Cedilla;B9=sup1;BA=ordm;BB=raquo;BC=frac14;BD=frac12=half;BE=frac34;BF=iquest;C0=Agrave;C1=Aacute;C2=Acirc;C3=Atilde;C4=Auml;C5=Aring=angst;C6=AElig;C7=Ccedil;C8=Egrave;C9=Eacute;CA=Ecirc;CB=Euml;CC=Igrave;CD=Iacute;CE=Icirc;CF=Iuml;D0=ETH;D1=Ntilde;D2=Ograve;D3=Oacute;D4=Ocirc;D5=Otilde;D6=Ouml;D7=times;D8=Oslash;D9=Ugrave;DA=Uacute;DB=Ucirc;DC=Uuml;DD=Yacute;DE=THORN;DF=szlig;E0=agrave;E1=aacute;E2=acirc;E3=atilde;E4=auml;E5=aring;E6=aelig;E7=ccedil;E8=egrave;E9=eacute;EA=ecirc;EB=euml;EC=igrave;ED=iacute;EE=icirc;EF=iuml;F0=eth;F1=ntilde;F2=ograve;F3=oacute;F4=ocirc;F5=otilde;F6=ouml;F7=divide=div;F8=oslash;F9=ugrave;FA=uacute;FB=ucirc;FC=uuml;FD=yacute;FE=thorn;FF=yuml;100=Amacr;101=amacr;102=Abreve;103=abreve;104=Aogon;105=aogon;106=Cacute;107=cacute;108=Ccirc;109=ccirc;10A=Cdot;10B=cdot;10C=Ccaron;10D=ccaron;10E=Dcaron;10F=dcaron;110=Dstrok;111=dstrok;112=Emacr;113=emacr;116=Edot;117=edot;118=Eogon;119=eogon;11A=Ecaron;11B=ecaron;11C=Gcirc;11D=gcirc;11E=Gbreve;11F=gbreve;120=Gdot;121=gdot;122=Gcedil;124=Hcirc;125=hcirc;126=Hstrok;127=hstrok;128=Itilde;129=itilde;12A=Imacr;12B=imacr;12E=Iogon;12F=iogon;130=Idot;131=imath=inodot;132=IJlig;133=ijlig;134=Jcirc;135=jcirc;136=Kcedil;137=kcedil;138=kgreen;139=Lacute;13A=lacute;13B=Lcedil;13C=lcedil;13D=Lcaron;13E=lcaron;13F=Lmidot;140=lmidot;141=Lstrok;142=lstrok;143=Nacute;144=nacute;145=Ncedil;146=ncedil;147=Ncaron;148=ncaron;149=napos;14A=ENG;14B=eng;14C=Omacr;14D=omacr;150=Odblac;151=odblac;152=OElig;153=oelig;154=Racute;155=racute;156=Rcedil;157=rcedil;158=Rcaron;159=rcaron;15A=Sacute;15B=sacute;15C=Scirc;15D=scirc;15E=Scedil;15F=scedil;160=Scaron;161=scaron;162=Tcedil;163=tcedil;164=Tcaron;165=tcaron;166=Tstrok;167=tstrok;168=Utilde;169=utilde;16A=Umacr;16B=umacr;16C=Ubreve;16D=ubreve;16E=Uring;16F=uring;170=Udblac;171=udblac;172=Uogon;173=uogon;174=Wcirc;175=wcirc;176=Ycirc;177=ycirc;178=Yuml;179=Zacute;17A=zacute;17B=Zdot;17C=zdot;17D=Zcaron;17E=zcaron;192=fnof;1B5=imped;1F5=gacute;237=jmath;2C6=circ;2C7=caron=Hacek;2D8=breve=Breve;2D9=dot=DiacriticalDot;2DA=ring;2DB=ogon;2DC=tilde=DiacriticalTilde;2DD=dblac=DiacriticalDoubleAcute;311=DownBreve;386=Aacgr;388=Eacgr;389=EEacgr;38A=Iacgr;38C=Oacgr;38E=Uacgr;38F=OHacgr;390=idiagr;391=Alpha=Agr;392=Bgr=Beta;393=Gamma=Ggr;394=Delta=Dgr;395=Egr=Epsilon;396=Zgr=Zeta;397=EEgr=Eta;398=THgr=Theta;399=Igr=Iota;39A=Kgr=Kappa;39B=Lambda=Lgr;39C=Mgr=Mu;39D=Ngr=Nu;39E=Xgr=Xi;39F=Ogr=Omicron;3A0=Pgr=Pi;3A1=Rgr=Rho;3A3=Sgr=Sigma;3A4=Tgr=Tau;3A5=Ugr=Upsilon;3A6=PHgr=Phi;3A7=KHgr=Chi;3A8=PSgr=Psi;3A9=OHgr=Omega=ohm;3AA=Idigr;3AB=Udigr;3AC=aacgr;3AD=eacgr;3AE=eeacgr;3AF=iacgr;3B0=udiagr;3B1=alpha=agr;3B2=beta=bgr;3B3=gamma=ggr;3B4=delta=dgr;3B5=epsi=epsilon=egr;3B6=zeta=zgr;3B7=eegr=eta;3B8=theta=thgr;3B9=igr=iota;3BA=kappa=kgr;3BB=lambda=lgr;3BC=mgr=mu;3BD=ngr=nu;3BE=xgr=xi;3BF=omicron=ogr;3C0=pi=pgr;3C1=rgr=rho;3C2=sfgr=sigmav=varsigma=sigmaf;3C3=sgr=sigma;3C4=tau=tgr;3C5=ugr=upsi=upsilon;3C6=phiv=straightphi=varphi;3C7=chi=khgr;3C8=psgr=psi;3C9=ohgr=omega;3CA=idigr;3CB=udigr;3CC=oacgr;3CD=uacgr;3CE=ohacgr;3D1=thetav=vartheta=thetasym;3D2=Upsi=upsih;3D5=phi=phgr;3D6=piv=varpi;3DC=Gammad;3DD=gammad=digamma;3F0=kappav=varkappa;3F1=rhov=varrho;3F5=epsiv=straightepsilon=varepsilon;3F6=bepsi=backepsilon;401=IOcy;402=DJcy;403=GJcy;404=Jukcy;405=DScy;406=Iukcy;407=YIcy;408=Jsercy;409=LJcy;40A=NJcy;40B=TSHcy;40C=KJcy;40E=Ubrcy;40F=DZcy;410=Acy;411=Bcy;412=Vcy;413=Gcy;414=Dcy;415=IEcy;416=ZHcy;417=Zcy;418=Icy;419=Jcy;41A=Kcy;41B=Lcy;41C=Mcy;41D=Ncy;41E=Ocy;41F=Pcy;420=Rcy;421=Scy;422=Tcy;423=Ucy;424=Fcy;425=KHcy;426=TScy;427=CHcy;428=SHcy;429=SHCHcy;42A=HARDcy;42B=Ycy;42C=SOFTcy;42D=Ecy;42E=YUcy;42F=YAcy;430=acy;431=bcy;432=vcy;433=gcy;434=dcy;435=iecy;436=zhcy;437=zcy;438=icy;439=jcy;43A=kcy;43B=lcy;43C=mcy;43D=ncy;43E=ocy;43F=pcy;440=rcy;441=scy;442=tcy;443=ucy;444=fcy;445=khcy;446=tscy;447=chcy;448=shcy;449=shchcy;44A=hardcy;44B=ycy;44C=softcy;44D=ecy;44E=yucy;44F=yacy;451=iocy;452=djcy;453=gjcy;454=jukcy;455=dscy;456=iukcy;457=yicy;458=jsercy;459=ljcy;45A=njcy;45B=tshcy;45C=kjcy;45E=ubrcy;45F=dzcy;2002=ensp;2003=emsp;2004=emsp13;2005=emsp14;2007=numsp;2008=puncsp;2009=thinsp=ThinSpace;200A=hairsp=VeryThinSpace;200B=ZeroWidthSpace=NegativeVeryThinSpace=NegativeThinSpace=NegativeMediumSpace=NegativeThickSpace;200C=zwnj;200D=zwj;200E=lrm;200F=rlm;2010=hyphen=dash;2013=ndash;2014=mdash;2015=horbar;2016=Verbar=Vert;2018=lsquo=OpenCurlyQuote;2019=rsquo=rsquor=CloseCurlyQuote;201A=lsquor=sbquo;201C=ldquo=OpenCurlyDoubleQuote;201D=rdquo=rdquor=CloseCurlyDoubleQuote;201E=ldquor=bdquo;2020=dagger;2021=Dagger=ddagger;2022=bull=bullet;2025=nldr;2026=hellip=mldr;2030=permil;2031=pertenk;2032=prime;2033=Prime;2034=tprime;2035=bprime=backprime;2039=lsaquo;203A=rsaquo;203E=oline=OverBar;2041=caret;2043=hybull;2044=frasl;204F=bsemi;2057=qprime;205F=MediumSpace;E0FB=ThickSpace;2060=NoBreak;2061=ApplyFunction=af;2062=InvisibleTimes=it;2063=InvisibleComma=ic;20AC=euro;20DB=tdot=TripleDot;20DC=DotDot;2102=Copf=complexes;2105=incare;210A=gscr;210B=hamilt=HilbertSpace=Hscr;210C=Hfr=Poincareplane;210D=quaternions=Hopf;210E=planckh;210F=planck=hbar=plankv=hslash;2110=Iscr=imagline;2111=image=Im=imagpart=Ifr;2112=Lscr=lagran=Laplacetrf;2113=ell;2115=Nopf=naturals;2116=numero;2117=copysr;2118=weierp=wp;2119=Popf=primes;211A=rationals=Qopf;211B=Rscr=realine;211C=real=Re=realpart=Rfr;211D=reals=Ropf;211E=rx;2122=trade=TRADE;2124=integers=Zopf;2127=mho;2128=Zfr=zeetrf;2129=iiota;212C=bernou=Bernoullis=Bscr;212D=Cfr=Cayleys;212F=escr;2130=Escr=expectation;2131=Fscr=Fouriertrf;2133=phmmat=Mellintrf=Mscr;2134=order=orderof=oscr;2135=alefsym=aleph;2136=beth;2137=gimel;2138=daleth;2145=CapitalDifferentialD=DD;2146=DifferentialD=dd;2147=ExponentialE=exponentiale=ee;2148=ImaginaryI=ii;2153=frac13;2154=frac23;2155=frac15;2156=frac25;2157=frac35;2158=frac45;2159=frac16;215A=frac56;215B=frac18;215C=frac38;215D=frac58;215E=frac78;2190=larr=leftarrow=LeftArrow=slarr=ShortLeftArrow;2191=uarr=uparrow=UpArrow=ShortUpArrow;2192=rarr=rightarrow=RightArrow=srarr=ShortRightArrow;2193=darr=downarrow=DownArrow=ShortDownArrow;2194=harr=leftrightarrow=LeftRightArrow;2195=varr=updownarrow=UpDownArrow;2196=nwarr=UpperLeftArrow=nwarrow;2197=nearr=UpperRightArrow=nearrow;2198=searr=searrow=LowerRightArrow;2199=swarr=swarrow=LowerLeftArrow;219A=nlarr=nleftarrow;219B=nrarr=nrightarrow;219D=rarrw=rightsquigarrow;E004=nrarrw;219E=Larr=twoheadleftarrow;219F=Uarr;21A0=Rarr=twoheadrightarrow;21A1=Darr;21A2=larrtl=leftarrowtail;21A3=rarrtl=rightarrowtail;21A4=LeftTeeArrow=mapstoleft;21A5=UpTeeArrow=mapstoup;21A6=map=RightTeeArrow=mapsto;21A7=DownTeeArrow=mapstodown;21A9=larrhk=hookleftarrow;21AA=rarrhk=hookrightarrow;21AB=larrlp=looparrowleft;21AC=rarrlp=looparrowright;21AD=harrw=leftrightsquigarrow;21AE=nharr=nleftrightarrow;21B0=lsh=Lsh;21B1=rsh=Rsh;21B2=ldsh;21B3=rdsh;21B5=crarr;21B6=cularr=curvearrowleft;21B7=curarr=curvearrowright;21BA=olarr=circlearrowleft;21BB=orarr=circlearrowright;21BC=lharu=LeftVector=leftharpoonup;21BD=lhard=leftharpoondown=DownLeftVector;21BE=uharr=upharpoonright=RightUpVector;21BF=uharl=upharpoonleft=LeftUpVector;21C0=rharu=RightVector=rightharpoonup;21C1=rhard=rightharpoondown=DownRightVector;21C2=dharr=RightDownVector=downharpoonright;21C3=dharl=LeftDownVector=downharpoonleft;21C4=rlarr=rightleftarrows=RightArrowLeftArrow;21C5=udarr=UpArrowDownArrow;21C6=lrarr=leftrightarrows=LeftArrowRightArrow;21C7=llarr=leftleftarrows;21C8=uuarr=upuparrows;21C9=rrarr=rightrightarrows;21CA=ddarr=downdownarrows;21CB=lrhar=ReverseEquilibrium=leftrightharpoons;21CC=rlhar=rightleftharpoons=Equilibrium;21CD=nlArr=nLeftarrow;21CE=nhArr=nLeftrightarrow;21CF=nrArr=nRightarrow;21D0=lArr=Leftarrow=DoubleLeftArrow;21D1=uArr=Uparrow=DoubleUpArrow;21D2=rArr=Rightarrow=Implies=DoubleRightArrow;21D3=dArr=Downarrow=DoubleDownArrow;21D4=hArr=Leftrightarrow=DoubleLeftRightArrow=iff;21D5=vArr=Updownarrow=DoubleUpDownArrow;21D6=nwArr;21D7=neArr;21D8=seArr;21D9=swArr;21DA=lAarr=Lleftarrow;21DB=rAarr=Rrightarrow;21DD=zigrarr;21E4=larrb=LeftArrowBar;21E5=rarrb=RightArrowBar;21F5=duarr=DownArrowUpArrow;21FD=loarr;21FE=roarr;21FF=hoarr;2200=forall=ForAll;2201=comp=complement;2202=part=PartialD;E03A=npart;2203=exist=Exists;2204=nexist=NotExists=nexists;2205=empty=emptyset=emptyv=varnothing;2207=nabla=Del;2208=isin=isinv=Element=in;2209=notin=NotElement=notinva;220B=niv=ReverseElement=ni=SuchThat;220C=notni=notniva=NotReverseElement;220F=prod=Product;2210=coprod=Coproduct;2211=sum=Sum;2212=minus;2213=mnplus=mp=MinusPlus;2214=plusdo=dotplus;2216=setmn=setminus=Backslash=ssetmn=smallsetminus;2217=lowast;2218=compfn=SmallCircle;221A=radic=Sqrt;221D=prop=propto=Proportional=vprop=varpropto;221E=infin;221F=angrt;2220=ang=angle;E02F=nang;2221=angmsd=measuredangle;2222=angsph;2223=mid=VerticalBar=smid=shortmid;2224=nmid=NotVerticalBar=nsmid=nshortmid;2225=par=parallel=DoubleVerticalBar=spar=shortparallel;2226=npar=nparallel=NotDoubleVerticalBar=nspar=nshortparallel;2227=and=wedge;2228=or=vee;2229=cap;E424=caps;222A=cup;E425=cups;222B=int=Integral;222C=Int;222D=tint=iiint;222E=conint=oint=ContourIntegral;222F=Conint=DoubleContourIntegral;2230=Cconint;2231=cwint;2232=cwconint=ClockwiseContourIntegral;2233=awconint=CounterClockwiseContourIntegral;2234=there4=therefore=Therefore;2235=becaus=because=Because;2236=ratio;2237=Colon=Proportion;2238=minusd=dotminus;223A=mDDot;223B=homtht;223C=sim=Tilde=thksim=thicksim;E429=nvsim;223D=bsim=backsim;E00A=race;223E=ac=mstpos;E00B=acE;223F=acd;2240=wreath=VerticalTilde=wr;2241=nsim=NotTilde;2242=esim=EqualTilde=eqsim;E05C=NotEqualTilde=nesim;2243=sime=TildeEqual=simeq;2244=nsime=nsimeq=NotTildeEqual;2245=cong=TildeFullEqual;2246=simne;2247=ncong=NotTildeFullEqual;2248=asymp=ap=TildeTilde=approx=thkap=thickapprox;2249=nap=NotTildeTilde=napprox;224A=ape=approxeq;224B=apid;E01E=napid;224C=bcong=backcong;224D=asympeq=CupCap;E433=nvap;224E=bump=HumpDownHump=Bumpeq;E052=NotHumpDownHump=nbump;224F=bumpe=HumpEqual=bumpeq;E05B=nbumpe=NotHumpEqual;2250=esdot=DotEqual=doteq;E039=nedot;2251=eDot=doteqdot;2252=efDot=fallingdotseq;2253=erDot=risingdotseq;2254=colone=coloneq=Assign;2255=ecolon=eqcolon;2256=ecir=eqcirc;2257=cire=circeq;2259=wedgeq;225A=veeeq;225C=trie=triangleq;225F=equest=questeq;2260=ne=NotEqual;2261=equiv=Congruent;E3C2=bnequiv;2262=nequiv=NotCongruent;2264=le=leq;E07E=nvle;2265=ge=GreaterEqual=geq;E07F=nvge;2266=lE=LessFullEqual=leqq;E011=nlE=nleqq;2267=gE=GreaterFullEqual=geqq;E00E=ngE=ngeqq=NotGreaterFullEqual;2268=lnE=lneqq;E431=lvnE=lvertneqq;2269=gnE=gneqq;E432=gvnE=gvertneqq;226A=Lt=NestedLessLess=ll;E028=nLtv=NotLessLess;E460=nLt;226B=Gt=NestedGreaterGreater=gg;E029=nGtv=NotGreaterGreater;E461=nGt;226C=twixt=between;226D=NotCupCap;226E=nlt=NotLess=nless;226F=ngt=NotGreater=ngtr;2270=nle=NotLessEqual=nleq;2271=nge=NotGreaterEqual=ngeq;2272=lsim=LessTilde=lesssim;2273=gsim=gtrsim=GreaterTilde;2274=nlsim=NotLessTilde;2275=ngsim=NotGreaterTilde;2276=lg=lessgtr=LessGreater;2277=gl=gtrless=GreaterLess;2278=ntlg=NotLessGreater;2279=ntgl=NotGreaterLess;227A=pr=Precedes=prec;227B=sc=Succeeds=succ;227C=prcue=PrecedesSlantEqual=preccurlyeq;227D=sccue=SucceedsSlantEqual=succcurlyeq;227E=prsim=precsim=PrecedesTilde;227F=scsim=succsim=SucceedsTilde;E05A=NotSucceedsTilde;2280=npr=nprec=NotPrecedes;2281=nsc=nsucc=NotSucceeds;2282=sub=subset;E440=vnsub=nsubset=NotSubset;2283=sup=supset=Superset;E441=vnsup=nsupset=NotSuperset;2284=nsub;2285=nsup;2286=sube=SubsetEqual=subseteq;2287=supe=supseteq=SupersetEqual;2288=nsube=nsubseteq=NotSubsetEqual;2289=nsupe=nsupseteq=NotSupersetEqual;228A=subne=subsetneq;E444=vsubne=varsubsetneq;228B=supne=supsetneq;E445=vsupne=varsupsetneq;228D=cupdot;228E=uplus=UnionPlus;228F=sqsub=SquareSubset=sqsubset;E050=NotSquareSubset;2290=sqsup=SquareSuperset=sqsupset;E051=NotSquareSuperset;2291=sqsube=SquareSubsetEqual=sqsubseteq;2292=sqsupe=SquareSupersetEqual=sqsupseteq;2293=sqcap=SquareIntersection;E446=sqcaps;2294=sqcup=SquareUnion;E447=sqcups;2295=oplus=CirclePlus;2296=ominus=CircleMinus;2297=otimes=CircleTimes;2298=osol;2299=odot=CircleDot;229A=ocir=circledcirc;229B=oast=circledast;229D=odash=circleddash;229E=plusb=boxplus;229F=minusb=boxminus;22A0=timesb=boxtimes;22A1=sdotb=dotsquare;22A2=vdash=RightTee;22A3=dashv=LeftTee;22A4=top=DownTee;22A5=bottom=bot=perp=UpTee;22A7=models;22A8=vDash=DoubleRightTee;22A9=Vdash;22AA=Vvdash;22AB=VDash;22AC=nvdash;22AD=nvDash;22AE=nVdash;22AF=nVDash;22B0=prurel;22B2=vltri=vartriangleleft=LeftTriangle;22B3=vrtri=vartriangleright=RightTriangle;22B4=ltrie=trianglelefteq=LeftTriangleEqual;E44F=nvltrie;22B5=rtrie=trianglerighteq=RightTriangleEqual;E450=nvrtrie;22B6=origof;22B7=imof;22B8=mumap=multimap;22B9=hercon;22BA=intcal=intercal;22BB=veebar;22BD=barvee;22BE=angrtvb;22BF=lrtri;22C0=xwedge=Wedge=bigwedge;22C1=xvee=Vee=bigvee;22C2=xcap=Intersection=bigcap;22C3=xcup=Union=bigcup;22C4=diam=diamond=Diamond;22C5=sdot;22C6=sstarf=Star;22C7=divonx=divideontimes;22C8=bowtie;22C9=ltimes;22CA=rtimes;22CB=lthree=leftthreetimes;22CC=rthree=rightthreetimes;22CD=bsime=backsimeq;22CE=cuvee=curlyvee;22CF=cuwed=curlywedge;22D0=Sub=Subset;22D1=Sup=Supset;22D2=Cap;22D3=Cup;22D4=fork=pitchfork;22D5=epar;22D6=ltdot=lessdot;22D7=gtdot=gtrdot;22D8=Ll;E02A=nLl;22D9=Gg=ggg;E02B=nGg;22DA=leg=LessEqualGreater=lesseqgtr;E44B=lesg;22DB=gel=gtreqless=GreaterEqualLess;E44C=gesl;22DE=cuepr=curlyeqprec;22DF=cuesc=curlyeqsucc;22E0=nprcue=NotPrecedesSlantEqual;22E1=nsccue=NotSucceedsSlantEqual;22E2=nsqsube=NotSquareSubsetEqual;22E3=nsqsupe=NotSquareSupersetEqual;22E6=lnsim;22E7=gnsim;22E8=prnsim=precnsim;22E9=scnsim=succnsim;22EA=nltri=ntriangleleft=NotLeftTriangle;22EB=nrtri=ntriangleright=NotRightTriangle;22EC=nltrie=ntrianglelefteq=NotLeftTriangleEqual;22ED=nrtrie=ntrianglerighteq=NotRightTriangleEqual;22EE=vellip;22EF=ctdot;22F0=utdot;22F1=dtdot;22F2=disin;22F3=isinsv;22F4=isins;22F5=isindot;E03B=notindot;22F6=notinvc;22F7=notinvb;22F9=isinE;E03C=notinE;22FA=nisd;22FB=xnis;22FC=nis;22FD=notnivc;22FE=notnivb;2305=barwed=barwedge;2306=Barwed=doublebarwedge;2308=lceil=LeftCeiling;2309=rceil=RightCeiling;230A=lfloor=LeftFloor;230B=rfloor=RightFloor;230C=drcrop;230D=dlcrop;230E=urcrop;230F=ulcrop;2310=bnot;2312=profline;2313=profsurf;2315=telrec;2316=target;231C=ulcorn=ulcorner;231D=urcorn=urcorner;231E=dlcorn=llcorner;231F=drcorn=lrcorner;2322=frown=sfrown;2323=smile=ssmile;232D=cylcty;232E=profalar;2336=topbot;233D=ovbar;233F=solbar;237C=angzarr;23B0=lmoust=lmoustache;23B1=rmoust=rmoustache;23B4=tbrk=OverBracket;23B5=bbrk=UnderBracket;23B6=bbrktbrk;23DC=OverParenthesis;23DD=UnderParenthesis;23DE=OverBrace;23DF=UnderBrace;23E2=trpezium;23E7=elinters;2423=blank;24C8=oS=circledS;2500=boxh=HorizontalLine;2502=boxv;250C=boxdr;2510=boxdl;2514=boxur;2518=boxul;251C=boxvr;2524=boxvl;252C=boxhd;2534=boxhu;253C=boxvh;2550=boxH;2551=boxV;2552=boxdR;2553=boxDr;2554=boxDR;2555=boxdL;2556=boxDl;2557=boxDL;2558=boxuR;2559=boxUr;255A=boxUR;255B=boxuL;255C=boxUl;255D=boxUL;255E=boxvR;255F=boxVr;2560=boxVR;2561=boxvL;2562=boxVl;2563=boxVL;2564=boxHd;2565=boxhD;2566=boxHD;2567=boxHu;2568=boxhU;2569=boxHU;256A=boxvH;256B=boxVh;256C=boxVH;2580=uhblk;2584=lhblk;2588=block;2591=blk14;2592=blk12;2593=blk34;25A1=squ=square=Square;25AA=squf=squarf=blacksquare=FilledVerySmallSquare;25AB=EmptyVerySmallSquare;25AD=rect;25AE=marker;25B1=fltns;25B3=xutri=bigtriangleup;25B4=utrif=blacktriangle;25B5=utri=triangle;25B8=rtrif=blacktriangleright;25B9=rtri=triangleright;25BD=xdtri=bigtriangledown;25BE=dtrif=blacktriangledown;25BF=dtri=triangledown;25C2=ltrif=blacktriangleleft;25C3=ltri=triangleleft;25CA=loz=lozenge;25CB=cir;25EC=tridot;25EF=xcirc=bigcirc;25F8=ultri;25F9=urtri;25FA=lltri;25FB=EmptySmallSquare;25FC=FilledSmallSquare;2605=starf=bigstar;2606=star;260E=phone;2640=female;2642=male;2660=spades=spadesuit;2663=clubs=clubsuit;2665=hearts=heartsuit;2666=diams=diamondsuit;266A=sung;266D=flat;266E=natur=natural;266F=sharp;2713=check=checkmark;2717=cross;2720=malt=maltese;2736=sext;2758=VerticalSeparator;2772=lbbrk;2773=rbbrk;27C8=bsolhsub;27C9=suphsol;27E6=lobrk=LeftDoubleBracket;27E7=robrk=RightDoubleBracket;27E8=lang=LeftAngleBracket=langle;27E9=rang=RightAngleBracket=rangle;27EA=Lang;27EB=Rang;27EC=loang;27ED=roang;27F5=xlarr=longleftarrow=LongLeftArrow;27F6=xrarr=longrightarrow=LongRightArrow;27F7=xharr=longleftrightarrow=LongLeftRightArrow;27F8=xlArr=Longleftarrow=DoubleLongLeftArrow;27F9=xrArr=Longrightarrow=DoubleLongRightArrow;27FA=xhArr=Longleftrightarrow=DoubleLongLeftRightArrow;27FC=xmap=longmapsto;27FF=dzigrarr;2902=nvlArr;2903=nvrArr;2904=nvHarr;2905=Map;290C=lbarr;290D=rbarr=bkarow;290E=lBarr;290F=rBarr=dbkarow;2910=RBarr=drbkarow;2911=DDotrahd;2912=UpArrowBar;2913=DownArrowBar;2916=Rarrtl;2919=latail;291A=ratail;291B=lAtail;291C=rAtail;291D=larrfs;291E=rarrfs;291F=larrbfs;2920=rarrbfs;2923=nwarhk;2924=nearhk;2925=searhk=hksearow;2926=swarhk=hkswarow;2927=nwnear;2928=nesear=toea;2929=seswar=tosa;292A=swnwar;2933=rarrc;E005=nrarrc;2935=cudarrr;2936=ldca;2937=rdca;2938=cudarrl;2939=larrpl;293C=curarrm;293D=cularrp;2945=rarrpl;2948=harrcir;2949=Uarrocir;294A=lurdshar;294B=ldrushar;294E=LeftRightVector;294F=RightUpDownVector;2950=DownLeftRightVector;2951=LeftUpDownVector;2952=LeftVectorBar;2953=RightVectorBar;2954=RightUpVectorBar;2955=RightDownVectorBar;2956=DownLeftVectorBar;2957=DownRightVectorBar;2958=LeftUpVectorBar;2959=LeftDownVectorBar;295A=LeftTeeVector;295B=RightTeeVector;295C=RightUpTeeVector;295D=RightDownTeeVector;295E=DownLeftTeeVector;295F=DownRightTeeVector;2960=LeftUpTeeVector;2961=LeftDownTeeVector;2962=lHar;2963=uHar;2964=rHar;2965=dHar;2966=luruhar;2967=ldrdhar;2968=ruluhar;2969=rdldhar;296A=lharul;296B=llhard;296C=rharul;296D=lrhard;296E=udhar=UpEquilibrium;296F=duhar=ReverseUpEquilibrium;2970=RoundImplies;2971=erarr;2972=simrarr;2973=larrsim;2974=rarrsim;2975=rarrap;2976=ltlarr;2978=gtrarr;2979=subrarr;297B=suplarr;297C=lfisht;297D=rfisht;297E=ufisht;297F=dfisht;2985=lopar;2986=ropar;298B=lbrke;298C=rbrke;298D=lbrkslu;298E=rbrksld;298F=lbrksld;2990=rbrkslu;2991=langd;2992=rangd;2993=lparlt;2994=rpargt;2995=gtlPar;2996=ltrPar;299A=vzigzag;299C=vangrt;299D=angrtvbd;29A4=ange;29A5=range;29A6=dwangle;29A7=uwangle;29A8=angmsdaa;29A9=angmsdab;29AA=angmsdac;29AB=angmsdad;29AC=angmsdae;29AD=angmsdaf;29AE=angmsdag;29AF=angmsdah;29B0=bemptyv;29B1=demptyv;29B2=cemptyv;29B3=raemptyv;29B4=laemptyv;29B5=ohbar;29B6=omid;29B7=opar;29B9=operp;29BB=olcross;29BC=odsold;29BE=olcir;29BF=ofcir;29C0=olt;29C1=ogt;29C2=cirscir;29C3=cirE;29C4=solb;29C5=bsolb;29C9=boxbox;29CD=trisb;29CE=rtriltri;29CF=LeftTriangleBar;E14C=NotLeftTriangleBar;29D0=RightTriangleBar;E14D=NotRightTriangleBar;29DC=iinfin;29DD=infintie;29DE=nvinfin;29E3=eparsl;29E4=smeparsl;29E5=eqvparsl;29EB=lozf=blacklozenge;29F4=RuleDelayed;29F6=dsol;2A00=bigodot=xodot;2A01=bigoplus=xoplus;2A02=bigotimes=xotime;2A04=biguplus=xuplus;2A06=bigsqcup=xsqcup;2A0C=qint=iiiint;2A0D=fpartint;2A10=cirfnint;2A11=awint;2A12=rppolint;2A13=scpolint;2A14=npolint;2A15=pointint;2A16=quatint;2A17=intlarhk;2A22=pluscir;2A23=plusacir;2A24=simplus;2A25=plusdu;2A26=plussim;2A27=plustwo;2A29=mcomma;2A2A=minusdu;2A2D=loplus;2A2E=roplus;2A2F=Cross;2A30=timesd;2A31=timesbar;2A33=smashp;2A34=lotimes;2A35=rotimes;2A36=otimesas;2A37=Otimes;2A38=odiv;2A39=triplus;2A3A=triminus;2A3B=tritime;2A3C=iprod=intprod;2A3F=amalg;2A40=capdot;2A42=ncup;2A43=ncap;2A44=capand;2A45=cupor;2A46=cupcap;2A47=capcup;2A48=cupbrcap;2A49=capbrcup;2A4A=cupcup;2A4B=capcap;2A4C=ccups;2A4D=ccaps;2A50=ccupssm;2A53=And;2A54=Or;2A55=andand;2A56=oror;2A57=orslope;2A58=andslope;2A5A=andv;2A5B=orv;2A5C=andd;2A5D=ord;2A5F=wedbar;2A66=sdote;2A6A=simdot;2A6D=congdot;E023=ncongdot;2A6E=easter;2A6F=apacir;2A70=apE;E025=napE;2A71=eplus;2A72=pluse;2A73=Esim;2A74=Colone;2A75=Equal;2A77=eDDot=ddotseq;2A78=equivDD;2A79=ltcir;2A7A=gtcir;2A7B=ltquest;2A7C=gtquest;2A7D=les=LessSlantEqual=leqslant;E010=nles=NotLessSlantEqual=nleqslant;2A7E=ges=GreaterSlantEqual=geqslant;E00F=nges=NotGreaterSlantEqual=ngeqslant;2A7F=lesdot;2A80=gesdot;2A81=lesdoto;2A82=gesdoto;2A83=lesdotor;2A84=gesdotol;2A85=lap=lessapprox;2A86=gap=gtrapprox;2A87=lne=lneq;2A88=gne=gneq;2A89=lnap=lnapprox;2A8A=gnap=gnapprox;2A8B=lEg=lesseqqgtr;2A8C=gEl=gtreqqless;2A8D=lsime;2A8E=gsime;2A8F=lsimg;2A90=gsiml;2A91=lgE;2A92=glE;2A93=lesges;2A94=gesles;2A95=els=eqslantless;2A96=egs=eqslantgtr;2A97=elsdot;2A98=egsdot;2A99=el;2A9A=eg;2A9D=siml;2A9E=simg;2A9F=simlE;2AA0=simgE;2AA1=LessLess;E14E=NotNestedLessLess;2AA2=GreaterGreater;E14F=NotNestedGreaterGreater;2AA4=glj;2AA5=gla;2AA6=ltcc;2AA7=gtcc;2AA8=lescc;2AA9=gescc;2AAA=smt;2AAB=lat;2AAC=smte;E459=smtes;2AAD=late;E45A=lates;2AAE=bumpE;2AAF=pre=preceq=PrecedesEqual;E04B=npre=npreceq=NotPrecedesEqual;2AB0=sce=succeq=SucceedsEqual;E04F=nsce=nsucceq=NotSucceedsEqual;2AB3=prE;2AB4=scE;2AB5=prnE=precneqq;2AB6=scnE=succneqq;2AB7=prap=precapprox;2AB8=scap=succapprox;2AB9=prnap=precnapprox;2ABA=scnap=succnapprox;2ABB=Pr;2ABC=Sc;2ABD=subdot;2ABE=supdot;2ABF=subplus;2AC0=supplus;2AC1=submult;2AC2=supmult;2AC3=subedot;2AC4=supedot;2AC5=subE=subseteqq;E016=nsubE=nsubseteqq;2AC6=supE=supseteqq;E018=nsupE=nsupseteqq;2AC7=subsim;2AC8=supsim;2ACB=subnE=subsetneqq;E45B=vsubnE=varsubsetneqq;2ACC=supnE=supsetneqq;E45C=vsupnE=varsupsetneqq;2ACF=csub;2AD0=csup;2AD1=csube;2AD2=csupe;2AD3=subsup;2AD4=supsub;2AD5=subsub;2AD6=supsup;2AD7=suphsub;2AD8=supdsub;2AD9=forkv;2ADA=topfork;2ADB=mlcp;2AE4=Dashv=DoubleLeftTee;2AE6=Vdashl;2AE7=Barv;2AE8=vBar;2AE9=vBarv;2AEB=Vbar;2AEC=Not;2AED=bNot;2AEE=rnmid;2AEF=cirmid;2AF0=midcir;2AF1=topcir;2AF2=nhpar;2AF3=parsim;2AFD=parsl;E038=nparsl;FB00=fflig;FB01=filig;FB02=fllig;FB03=ffilig;FB04=ffllig;1D49C=Ascr;1D49E=Cscr;1D49F=Dscr;1D4A2=Gscr;1D4A5=Jscr;1D4A6=Kscr;1D4A9=Nscr;1D4AA=Oscr;1D4AB=Pscr;1D4AC=Qscr;1D4AE=Sscr;1D4AF=Tscr;1D4B0=Uscr;1D4B1=Vscr;1D4B2=Wscr;1D4B3=Xscr;1D4B4=Yscr;1D4B5=Zscr;1D4B6=ascr;1D4B7=bscr;1D4B8=cscr;1D4B9=dscr;1D4BB=fscr;1D4BD=hscr;1D4BE=iscr;1D4BF=jscr;1D4C0=kscr;1D4C1=lscr;1D4C2=mscr;1D4C3=nscr;1D4C5=pscr;1D4C6=qscr;1D4C7=rscr;1D4C8=sscr;1D4C9=tscr;1D4CA=uscr;1D4CB=vscr;1D4CC=wscr;1D4CD=xscr;1D4CE=yscr;1D4CF=zscr;1D504=Afr;1D505=Bfr;1D507=Dfr;1D508=Efr;1D509=Ffr;1D50A=Gfr;1D50D=Jfr;1D50E=Kfr;1D50F=Lfr;1D510=Mfr;1D511=Nfr;1D512=Ofr;1D513=Pfr;1D514=Qfr;1D516=Sfr;1D517=Tfr;1D518=Ufr;1D519=Vfr;1D51A=Wfr;1D51B=Xfr;1D51C=Yfr;1D51E=afr;1D51F=bfr;1D520=cfr;1D521=dfr;1D522=efr;1D523=ffr;1D524=gfr;1D525=hfr;1D526=ifr;1D527=jfr;1D528=kfr;1D529=lfr;1D52A=mfr;1D52B=nfr;1D52C=ofr;1D52D=pfr;1D52E=qfr;1D52F=rfr;1D530=sfr;1D531=tfr;1D532=ufr;1D533=vfr;1D534=wfr;1D535=xfr;1D536=yfr;1D537=zfr;1D538=Aopf;1D539=Bopf;1D53B=Dopf;1D53C=Eopf;1D53D=Fopf;1D53E=Gopf;1D540=Iopf;1D541=Jopf;1D542=Kopf;1D543=Lopf;1D544=Mopf;1D546=Oopf;1D54A=Sopf;1D54B=Topf;1D54C=Uopf;1D54D=Vopf;1D54E=Wopf;1D54F=Xopf;1D550=Yopf;1D552=aopf;1D553=bopf;1D554=copf;1D555=dopf;1D556=eopf;1D557=fopf;1D558=gopf;1D559=hopf;1D55A=iopf;1D55B=jopf;1D55C=kopf;1D55D=lopf;1D55E=mopf;1D55F=nopf;1D560=oopf;1D561=popf;1D562=qopf;1D563=ropf;1D564=sopf;1D565=topf;1D566=uopf;1D567=vopf;1D568=wopf;1D569=xopf;1D56A=yopf;1D56B=zopf;1D6AA=b.Gamma;1D6AB=b.Delta;1D6AF=b.Theta;1D6B2=b.Lambda;1D6B5=b.Xi;1D6B7=b.Pi;1D6BA=b.Sigma;1D6BC=b.Upsi;1D6BD=b.Phi;1D6BF=b.Psi;1D6C0=b.Omega;1D6C2=b.alpha;1D6C3=b.beta;1D6C4=b.gamma;1D6C5=b.delta;1D6C6=b.epsi;1D6C7=b.zeta;1D6C8=b.eta;1D6C9=b.thetas;1D6CA=b.iota;1D6CB=b.kappa;1D6CC=b.lambda;1D6CD=b.mu;1D6CE=b.nu;1D6CF=b.xi;1D6D1=b.pi;1D6D2=b.rho;1D6D3=b.sigmav;1D6D4=b.sigma;1D6D5=b.tau;1D6D6=b.upsi;1D6D7=b.phi;1D6D8=b.chi;1D6D9=b.psi;1D6DA=b.omega;1D6DC=b.epsiv;1D6DD=b.thetav;1D6DE=b.kappav;1D6DF=b.phiv;1D6E0=b.rhov;1D6E1=b.piv;1D7CA=b.Gammad;1D7CB=b.gammad;";
    var oo =
        ";|||;...;||;->;..;&&;<=;>=;!=;*=;+=;-=;/=;:=;==;**;<>;!!;////;++;--;";
    var jA =
        ";2016=01p00012o00012;2018=01p00000;2019=01o00000;201C=01p00000;201D=01o00000;2022=00i44360;2026=00i00080;2032=00o00541;2033=00o00541;2034=00o00541;203E=00o00543;2044=00i44262;2061=00i00530;2062=00i00360;2063=28i00030;2064=00i00540;20DB=00o00541;20DC=00o00541;21=00o10480;21 21=00o10480;21 3D=00i44250;2145=00p21520;2146=00p20520;2190=00i55273;2191=00i55272;2192=00i55273;2193=00i55272;2194=00i55273;2195=00i55272;2196=00i55272;2197=00i55272;2198=00i55272;2199=00i55272;219A=00i55271;219B=00i55271;219C=00i55273;219D=00i55273;219E=00i55273;219F=00i55273;21A0=00i55273;21A1=00i55272;21A2=00i55273;21A3=00i55273;21A4=00i55273;21A5=00i55272;21A6=00i55273;21A7=00i55272;21A8=00i55272;21A9=00i55273;21AA=00i55273;21AB=00i55273;21AC=00i55273;21AD=00i55273;21AE=00i55271;21AF=00i55272;21B0=00i55272;21B1=00i55272;21B2=00i55272;21B3=00i55272;21B4=00i55272;21B5=00i55272;21B6=00i55271;21B7=00i55271;21B8=00i55270;21B9=00i55273;21BA=00i55270;21BB=00i55270;21BC=00i55273;21BD=00i55273;21BE=00i55272;21BF=00i55272;21C0=00i55273;21C1=00i55273;21C2=00i55272;21C3=00i55272;21C4=00i55273;21C5=00i55272;21C6=00i55273;21C7=00i55273;21C8=00i55272;21C9=00i55273;21CA=00i55272;21CB=00i55273;21CC=00i55273;21CD=00i55271;21CE=00i55271;21CF=00i55271;21D0=00i55273;21D1=00i55272;21D2=00i55273;21D3=00i55272;21D4=00i55273;21D5=00i55272;21D6=00i55272;21D7=00i55272;21D8=00i55272;21D9=00i55272;21DA=00i55273;21DB=00i55273;21DC=00i55273;21DD=00i55273;21DE=00i55270;21DF=00i55270;21E0=00i55273;21E1=00i55272;21E2=00i55273;21E3=00i55272;21E4=00i55273;21E5=00i55273;21E6=00i55273;21E7=00i55272;21E8=00i55273;21E9=00i55272;21EA=00i55272;21EB=00i55272;21EC=00i55272;21ED=00i55272;21EE=00i55272;21EF=00i55272;21F0=00i55273;21F1=00i55270;21F2=00i55270;21F3=00i55272;21F4=00i55271;21F5=00i55272;21F6=00i55273;21F7=00i55271;21F8=00i55271;21F9=00i55271;21FA=00i55271;21FB=00i55271;21FC=00i55271;21FD=00i55273;21FE=00i55273;21FF=00i55273;2200=00p21130;2201=00i12140;2202=00p21450;2203=00p21130;2204=00p21130;2206=00i33260;2207=00p21450;2208=00i55140;2209=00i55140;220A=00i55260;220B=00i55090;220C=00i55140;220D=00i55260;220E=00i33260;220F=16p12350;2210=16p12350;2211=16p12290;2212=00i44280p01280;2213=00i44280p01280;2214=00i44280;2215=00i44262;2216=00i44400;2217=00i44260;2218=00i44260;2219=00i44260;221A=00p11522;221B=00p11520;221C=00p11520;221D=00i55250;221F=00i55260;2220=00p00420;2221=00p00420;2222=00p00420;2223=00i55260;2224=00i55250;2225=00i55250;2226=00i55250;2227=00i44120;2228=00i44110;2229=00i44350;222A=00i44350;222B=12p01310;222C=12p01300;222D=12p01300;222E=12p01310;222F=12p01310;2230=12p01310;2231=12p01310;2232=12p01310;2233=12p01310;2234=00i55040;2235=00i55040;2236=00i55260;2237=00i55260;2238=00i44260;2239=00i55260;223A=00i44260;223B=00i55260;223C=00i55220;223D=00i55260i33260;223E=00i55260;223F=00i33260;2240=00i44340;2241=00i55250;2242=00i55260i55260;2243=00i55250;2244=00i55250;2245=00i55250;2246=00i55250;2247=00i55250;2248=00i55210;2249=00i55220;224A=00i55260;224B=00i55260;224C=00i55260;224D=00i55250;224E=00i55260i55260;224F=00i55260i55260;2250=00i55260;2251=00i55260;2252=00i55260;2253=00i55260;2254=00i55250;2255=00i55260;2256=00i55260;2257=00i55250;2258=00i55260;2259=00i55250;225A=00i55250;225C=00i55250;225D=00i55260;225E=00i55260;225F=00i55250;2260=00i55240;2261=00i55250;2262=00i55230;2263=00i55260;2264=00i55150;2265=00i55160;2266=00i55260i55260;2267=00i55260;2268=00i55250;2269=00i55250;226A=00i55250i55250;226B=00i55250i55250;226C=00i55260;226D=00i55250;226E=00i55200;226F=00i55180;2270=00i55250;2271=00i55250;2272=00i55260;2273=00i55260;2274=00i55260;2275=00i55260;2276=00i55260;2277=00i55260;2278=00i55260;2279=00i55260;227A=00i55250;227B=00i55250;227C=00i55250;227D=00i55250;227E=00i55260;227F=00i55260i55260;2280=00i55250;2281=00i55250;2282=00i55140i55140;2283=00i55140i55140;2284=00i55140;2285=00i55140;2286=00i55140;2287=00i55140;2288=00i55140;2289=00i55140;228A=00i55140;228B=00i55140;228C=00i44260;228D=00i44260;228E=00i44260;228F=00i55260i55260;2290=00i55260i55260;2291=00i55260;2292=00i55260;2293=00i44260;2294=00i44260;2295=00i44300;2296=00i44300;2297=00i44380;2298=00i44300;2299=00i44440;229A=00i44260;229B=00i44260;229C=00i44260;229D=00i44260;229E=00i44280;229F=00i44280;22A0=00i44360;22A1=00i44360;22A2=00i55100;22A3=00i55100;22A4=00i55100;22A5=00i55250;22A6=00i55260;22A7=00i55260;22A8=00i55100;22A9=00i55100;22AA=00i55260;22AB=00i55260;22AC=00i55100;22AD=00i55100;22AE=00i55100;22AF=00i55100;22B0=00i55260;22B1=00i55260;22B2=00i55260;22B3=00i55260;22B4=00i55250;22B5=00i55250;22B6=00i55260;22B7=00i55260;22B8=00i55270;22B9=00i55260;22BA=00i44260;22BB=00i44260;22BC=00i44260;22BD=00i44260;22BE=00i33260;22BF=00i33260;22C0=16p12330;22C1=16p12330;22C2=16p12330;22C3=16p12320;22C4=00i44260;22C5=00i44360;22C6=00i44260;22C7=00i44260;22C8=00i55260;22C9=00i44250;22CA=00i44250;22CB=00i44250;22CC=00i44250;22CD=00i55260;22CE=00i44260;22CF=00i44260;22D0=00i55260;22D1=00i55260;22D2=00i44260;22D3=00i44260;22D4=00i55250;22D5=00i55260;22D6=00i55250;22D7=00i55250;22D8=00i55250;22D9=00i55250;22DA=00i55260;22DB=00i55260;22DC=00i55260;22DD=00i55260;22DE=00i55260;22DF=00i55260;22E0=00i55260;22E1=00i55260;22E2=00i55260;22E3=00i55260;22E4=00i55260;22E5=00i55260;22E6=00i55260;22E7=00i55260;22E8=00i55260;22E9=00i55260;22EA=00i55250;22EB=00i55250;22EC=00i55250;22ED=00i55250;22EE=00i55080;22EF=00i00080;22F0=00i55260;22F1=00i55080;22F2=00i55260;22F3=00i55260;22F4=00i55260;22F5=00i55260;22F6=00i55260;22F7=00i55260;22F8=00i55260;22F9=00i55260;22FA=00i55260;22FB=00i55260;22FC=00i55260;22FD=00i55260;22FE=00i55260;22FF=00i55260;2308=11p00012;2309=11o00012;230A=11p00012;230B=11o00012;2329=00i00542;232A=00i00542;23B4=00o00543;23B5=00o00543;23DC=00o00543;23DD=00o00543;23DE=00o00543;23DF=00o00543;23E0=00o00543;23E1=00o00543;25=00i33390;25A0=00i33250;25A1=00i33250;25AA=00i33250;25AB=00i33250;25AD=00i33250;25AE=00i33250;25AF=00i33250;25B0=00i33250;25B1=00i33250;25B2=00i44260;25B3=00i44250;25B4=00i44250;25B5=00i44250;25B6=00i44250;25B7=00i44250;25B8=00i44250;25B9=00i44250;25BC=00i44250;25BD=00i44250;25BE=00i44250;25BF=00i44250;25C0=00i44250;25C1=00i44250;25C2=00i44250;25C3=00i44250;25C4=00i44250;25C5=00i44250;25C6=00i44250;25C7=00i44250;25C8=00i44250;25C9=00i44250;25CC=00i44250;25CD=00i44250;25CE=00i44250;25CF=00i44250;25D6=00i44250;25D7=00i44250;25E6=00i44250;26=00o00540;26 26=00i44120;266D=00o02470;266E=00o02470;266F=00o02470;27=00o00541;2758=00i55260;2772=11p00012;2773=11o00012;27E6=11p00012;27E7=11o00012;27E8=11p00012;27E9=11o00012;27EA=11p00012;27EB=11o00012;27EC=11p00012;27ED=11o00012;27EE=11p00012;27EF=11o00012;27F0=00i55272;27F1=00i55272;27F5=00i55273;27F6=00i55273;27F7=00i55273;27F8=00i55273;27F9=00i55273;27FA=00i55273;27FB=00i55273;27FC=00i55273;27FD=00i55273;27FE=00i55273;27FF=00i55273;28=11p00012;29=11o00012;2900=00i55271;2901=00i55271;2902=00i55271;2903=00i55271;2904=00i55271;2905=00i55271;2906=00i55271;2907=00i55271;2908=00i55270;2909=00i55270;290A=00i55272;290B=00i55272;290C=00i55273;290D=00i55273;290E=00i55273;290F=00i55273;2910=00i55273;2911=00i55271;2912=00i55272;2913=00i55272;2914=00i55271;2915=00i55271;2916=00i55271;2917=00i55271;2918=00i55271;2919=00i55271;291A=00i55271;291B=00i55271;291C=00i55271;291D=00i55271;291E=00i55271;291F=00i55271;2920=00i55271;2921=00i55272;2922=00i55272;2923=00i55270;2924=00i55270;2925=00i55270;2926=00i55270;2927=00i55270;2928=00i55270;2929=00i55270;292A=00i55270;292B=00i55270;292C=00i55270;292D=00i55270;292E=00i55270;292F=00i55270;2930=00i55270;2931=00i55270;2932=00i55270;2933=00i55271;2934=00i55270;2935=00i55270;2936=00i55270;2937=00i55270;2938=00i55270;2939=00i55270;293A=00i55271;293B=00i55271;293C=00i55271;293D=00i55271;293E=00i55270;293F=00i55270;2940=00i55270;2941=00i55270;2942=00i55271;2943=00i55271;2944=00i55271;2945=00i55271;2946=00i55271;2947=00i55271;2948=00i55271;2949=00i55270;294A=00i55271;294B=00i55271;294C=00i55270;294D=00i55270;294E=00i55273;294F=00i55272;2950=00i55273;2951=00i55272;2952=00i55273;2953=00i55273;2954=00i55272;2955=00i55272;2956=00i55272;2957=00i55272;2958=00i55272;2959=00i55272;295A=00i55273;295B=00i55273;295C=00i55272;295D=00i55272;295E=00i55273;295F=00i55273;2960=00i55272;2961=00i55272;2962=00i55271;2963=00i55270;2964=00i55271;2965=00i55270;2966=00i55271;2967=00i55271;2968=00i55271;2969=00i55271;296A=00i55271;296B=00i55271;296C=00i55271;296D=00i55271;296E=00i55272;296F=00i55272;2970=00i55271;2971=00i55271;2972=00i55271;2973=00i55271;2974=00i55271;2975=00i55271;2976=00i55271;2977=00i55271;2978=00i55271;2979=00i55271;297A=00i55271;297B=00i55271;297C=00i55271;297D=00i55271;297E=00i55270;297F=00i55270;2980=01p00012o00012;2981=00i33260;2982=00i33260;2983=11p00012;2984=11o00012;2985=11p00012;2986=11o00012;2987=11p00012;2988=11o00012;2989=11p00012;298A=11o00012;298B=11p00012;298C=11o00012;298D=11p00012;298E=11o00012;298F=11p00012;2990=11o00012;2991=11p00012;2992=11o00012;2993=11p00012;2994=11o00012;2995=11p00012;2996=11o00012;2997=11p00012;2998=11o00012;2999=00i33270;299A=00i33270;299B=00i33270;299C=00i33270;299D=00i33270;299E=00i33270;299F=00i33270;29A0=00i33260;29A1=00i33260;29A2=00i33260;29A3=00i33260;29A4=00i33260;29A5=00i33260;29A6=00i33260;29A7=00i33260;29A8=00i33260;29A9=00i33260;29AA=00i33260;29AB=00i33260;29AC=00i33260;29AD=00i33260;29AE=00i33260;29AF=00i33260;29B0=00i33260;29B1=00i33260;29B2=00i33260;29B3=00i33260;29B4=00i33260;29B5=00i33260;29B6=00i44260;29B7=00i44260;29B8=00i44260;29B9=00i44260;29BA=00i44260;29BB=00i44260;29BC=00i44260;29BD=00i44260;29BE=00i44260;29BF=00i44260;29C0=00i55250;29C1=00i55250;29C2=00i33260;29C3=00i33260;29C4=00i44260;29C5=00i44260;29C6=00i44260;29C7=00i44260;29C8=00i44260;29C9=00i33260;29CA=00i33260;29CB=00i33260;29CC=00i33260;29CD=00i33260;29CE=00i55260;29CF=00i55260i55260;29D0=00i55260i55260;29D1=00i55260;29D2=00i55260;29D3=00i55260;29D4=00i55260;29D5=00i55260;29D6=00i44260;29D7=00i44260;29D8=00i33260;29D9=00i33260;29DB=00i33260;29DC=00i33260;29DD=00i33260;29DE=00i55260;29DF=00i33270;29E0=00i33260;29E1=00i55260;29E2=00i44260;29E3=00i55250;29E4=00i55250;29E5=00i55250;29E6=00i55250;29E7=00i33260;29E8=00i33260;29E9=00i33260;29EA=00i33260;29EB=00i33260;29EC=00i33260;29ED=00i33260;29EE=00i33260;29EF=00i33270;29F0=00i33260;29F1=00i33260;29F2=00i33260;29F3=00i33250;29F4=00i55270;29F5=00i44260;29F6=00i44260;29F7=00i44260;29F8=00i33260;29F9=00i33260;29FA=00i33260;29FB=00i33260;29FC=11p00012;29FD=11o00012;29FE=00i44260;29FF=00i44260;2A=00i33360;2A 2A=00i11460;2A 3D=00i44250;2A00=16p12330;2A01=16p12300;2A02=16p12330;2A03=16p12320;2A04=16p12320;2A05=16p12330;2A06=16p12330;2A07=16p12330;2A08=16p12330;2A09=16p12330;2A0A=16p12290;2A0B=12p12290;2A0C=12p01310;2A0D=12p12310;2A0E=12p12310;2A0F=12p12310;2A10=16p12310;2A11=16p12310;2A12=16p12310;2A13=16p12310;2A14=16p12310;2A15=12p12310;2A16=12p12310;2A17=12p12310;2A18=12p12310;2A19=12p12310;2A1A=12p12310;2A1B=12p12310;2A1C=12p12310;2A1D=00i33260;2A1E=00i33260;2A1F=00i33260;2A20=00i33260;2A21=00i33260;2A22=00i44260;2A23=00i44260;2A24=00i44260;2A25=00i44260;2A26=00i44260;2A27=00i44260;2A28=00i44260;2A29=00i44260;2A2A=00i44260;2A2B=00i44260;2A2C=00i44260;2A2D=00i44260;2A2E=00i44260;2A2F=00i44360;2A30=00i44260;2A31=00i44260;2A32=00i44260;2A33=00i44260;2A34=00i44260;2A35=00i44260;2A36=00i44260;2A37=00i44260;2A38=00i44260;2A39=00i44260;2A3A=00i44260;2A3B=00i44260;2A3C=00i44260;2A3D=00i44260;2A3E=00i44260;2A3F=00i44360;2A40=00i44260;2A41=00i44260;2A42=00i44260;2A43=00i44260;2A44=00i44260;2A45=00i44260;2A46=00i44260;2A47=00i44260;2A48=00i44260;2A49=00i44260;2A4A=00i44260;2A4B=00i44260;2A4C=00i44260;2A4D=00i44260;2A4E=00i44260;2A4F=00i44260;2A50=00i44260;2A51=00i44260;2A52=00i44260;2A53=00i44260;2A54=00i44260;2A55=00i44260;2A56=00i44260;2A57=00i44260;2A58=00i44260;2A59=00i55260;2A5A=00i44260;2A5B=00i44260;2A5C=00i44260;2A5D=00i44260;2A5E=00i44260;2A5F=00i44260;2A60=00i44260;2A61=00i44260;2A62=00i44260;2A63=00i44260;2A64=00i44260;2A65=00i44260;2A66=00i55260;2A67=00i55260;2A68=00i55260;2A69=00i55260;2A6A=00i55260;2A6B=00i55260;2A6C=00i55260;2A6D=00i55260;2A6E=00i55260;2A6F=00i55260;2A70=00i55260;2A71=00i44260;2A72=00i44260;2A73=00i55260;2A74=00i55260;2A75=00i55260;2A76=00i55260;2A77=00i55260;2A78=00i55260;2A79=00i55260;2A7A=00i55260;2A7B=00i55260;2A7C=00i55260;2A7D=00i55260i55260;2A7E=00i55260i55260;2A7F=00i55260;2A80=00i55260;2A81=00i55260;2A82=00i55260;2A83=00i55260;2A84=00i55260;2A85=00i55260;2A86=00i55260;2A87=00i55250;2A88=00i55250;2A89=00i55260;2A8A=00i55260;2A8B=00i55260;2A8C=00i55260;2A8D=00i55260;2A8E=00i55260;2A8F=00i55260;2A90=00i55260;2A91=00i55260;2A92=00i55260;2A93=00i55260;2A94=00i55260;2A95=00i55260;2A96=00i55260;2A97=00i55260;2A98=00i55260;2A99=00i55260;2A9A=00i55260;2A9B=00i55260;2A9C=00i55260;2A9D=00i55260;2A9E=00i55260;2A9F=00i55260;2AA0=00i55260;2AA1=00i55260i55260;2AA2=00i55260i55260;2AA3=00i55260;2AA4=00i55260;2AA5=00i55260;2AA6=00i55260;2AA7=00i55260;2AA8=00i55260;2AA9=00i55260;2AAA=00i55260;2AAB=00i55260;2AAC=00i55260;2AAD=00i55260;2AAE=00i55260;2AAF=00i55250i55250;2AB0=00i55250i55250;2AB1=00i55260;2AB2=00i55260;2AB3=00i55260;2AB4=00i55260;2AB5=00i55260;2AB6=00i55260;2AB7=00i55260;2AB8=00i55260;2AB9=00i55260;2ABA=00i55260;2ABB=00i55260;2ABC=00i55260;2ABD=00i55260;2ABE=00i55260;2ABF=00i55260;2AC0=00i55260;2AC1=00i55260;2AC2=00i55260;2AC3=00i55260;2AC4=00i55260;2AC5=00i55260;2AC6=00i55260;2AC7=00i55260;2AC8=00i55260;2AC9=00i55260;2ACA=00i55260;2ACB=00i55260;2ACC=00i55260;2ACD=00i55260;2ACE=00i55260;2ACF=00i55260;2AD0=00i55260;2AD1=00i55260;2AD2=00i55260;2AD3=00i55260;2AD4=00i55260;2AD5=00i55260;2AD6=00i55260;2AD7=00i55260;2AD8=00i55260;2AD9=00i55260;2ADA=00i55260;2ADB=00i55260;2ADC=00i55260;2ADD=00i55260;2ADE=00i55260;2ADF=00i55260;2AE0=00i55260;2AE1=00i55260;2AE2=00i55260;2AE3=00i55260;2AE4=00i55260;2AE5=00i55260;2AE6=00i55260;2AE7=00i55260;2AE8=00i55260;2AE9=00i55260;2AEA=00i55260;2AEB=00i55260;2AEC=00i55260;2AED=00i55260;2AEE=00i55260;2AEF=00i55260;2AF0=00i55260;2AF1=00i55260;2AF2=00i55260;2AF3=00i55260;2AF4=00i44260;2AF5=00i44260;2AF6=00i44260;2AF7=00i55260;2AF8=00i55260;2AF9=00i55260;2AFA=00i55260;2AFB=00i44260;2AFC=16p12330;2AFD=00i44260;2AFE=00i33260;2AFF=16p12330;2B=00i44280p01280;2B 2B=00o00540;2B 3D=00i44250;2B45=00i55272;2B46=00i55272;2C=28i03030;2C6=00o00543;2C7=00o00543;2C9=00o00543;2CA=00o00541;2CB=00o00541;2CD=00o00543;2D=00i44280p01280;2D 2D=00o00540;2D 3D=00i44250;2D 3E=00i55050;2D8=00o00541;2D9=00o00541;2DA=00o00541;2DC=00o00543;2DD=00o00541;2E=00i33360;2E 2E=00o00060;2E 2E 2E=00o00060;2F=00i11410;2F 2F=00i11490;2F 3D=00i44250;2F7=00o00543;302=00o00543;30C=00o00543;311=00o00541;3A=00i12060;3A 3D=00i44250;3B=28i03020;3C=00i55190;3C 3D=00i55150;3C 3E=00i11460;3D=00i55250;3D 3D=00i44250;3E=00i55170;3E 3D=00i55170;3F=00i11510;3F6=00i55070;40=00i11500;5B=11p00012;5C=00i00400;5D=11o00012;5E=00o00543;5F=00o00543;332=00o00543;60=00o00541;7B=11p00012;7C=11p00012o00012i22272;7C 7C=11p00012o00012i44120;7C 7C 7C=11p00012o00012i22272;7D=11o00012;7E=00o00543;A8=00o00541;AC=00p21430;AF=00o00543;B0=00o00540;B1=00i44280p01280;B4=00o00541;B7=00i44370;B8=00o00541;D7=00i44360;F7=00i44410;";
    var o = ";2061;2062;2063;2064;";
    var k1 =
        ";2A0B;222C;222D;222B;222E;222F;2230;2231;2232;2233;2A0C;2A0D;2A0E;2A0F;2A10;2A11;2A12;2A13;2A14;2A15;2A16;2A17;2A18;2A19;2A1A;2A1B;2A1C;";
    var f =
        ";0028N SVE 230/1000 P{218/5,C:218/995/-140/500,L:226/995,C:226/5/-64/500,L:218/5};0028 SVE 230/1000 P{272/0,C:110/203/110/0,L:110/791,C:272/1000/110/1000,C:161/796/161/981,L:161/203,C:272/0/161/0};0029 symV 0028;005B SV 262/1000 P{257/0,L:0/0,L:0/1000,L:257/1000,L:257/950,L:50/950,L:50/50,L:257/50};005D symV 005B;007B SVE 275/1000 P{272/0,C:110/203/110/0,L:110/386,C:-18/500/110/500,C:110/613/110/500,L:110/791,C:272/1000/110/1000,C:161/796/161/981,L:161/628,C:67/500/161/500,C:161/371/161/500,L:161/203,C:272/0/161/0};007D symV 007B;007C SV 110/400 P{20/30,L:20/370,L:90/370,L:90/30};2016 SV 210/300 P{20/30,L:20/270,L:90/270,L:90/30} P{120/30,L:120/270,L:190/270,L:190/30};2225 eq 2016;230A SV 231/1010 P{221/10,L:10/10,L:10/1000,L:72/1000,L:72/73,C:138/55/72/55,L:221/55,L221/10};2309 symV 2308;2308 SV 231/1010 P{10/10,L:10/1000,L:221/1000,L:221/945,L:138/945,C:72/945/72/945,L:72/10};230B symV 230A;2329 SVE 257/1000 P{257/0,L:205/0,L:0/490,L:0/510,L:205/1000,L:257/1000,L:66/500};232A symV 2329;2772 SV 277/1000 P{225/0,L:0/217,L:0/783,L:225/1000,L:277/1000,L:66/757,L:66/243,L:277/0};2773 symV 2772;27E6 SV 274/600 P{274/0,L:0/0,L:0/600,L:274/600,L:274/584,L:167/584,C:66/487/66/584,L:66/104,C:167/20/66/20,L:274/20} P{197/10,L:147/10,L:147/590,L:197/590};27E7 symV 27E6;27E8 eq 2329;27E9 eqsV 2329;27EA SVE 447/1000 P{257/0,L:205/0,L:0/490,L:0/510,L:205/1000,L:257/1000,L:66/500} P{447/0,L:395/0,L:190/490,L:190/510,L:395/1000,L:447/1000,L:256/500};27EB symV 27EA;27EC SV 288/1000 P{235/0,L:0/217,L:0/783,L:235/1000,L:288/1000,L:66/760,L:66/240,L:288/0} P{212/61,L:172/115,L:172/885,L:212/939};27ED symV 27EC;27EE eq 0028;27EF eqsV 0028;2980 SV 310/400 P{20/30,L:20/370,L:90/370,L:90/30} P{120/30,L:120/370,L:190/370,L:190/30} P{220/30,L:220/370,L:290/370,L:290/30};2983 SVE 335/1000 P{240/0,C:78/134/78/0,L:78/317,C:-10/500/78/500,C:78/613/78/500,L:78/872,C:240/1000/78/1000,L:333/1000,L:333/991,L:240/991,C:129/877/129/1000,L:129/628,C:35/500/129/500,C:129/371/129/500,L:129/134,C:240/9/129/0,L:333/9,L:333/0,L:240/0} P{246/5,L:206/5,L:206/995,L:246/995};2984 symV 2983;2985 SVE 270/1000 P{268/0,C:268/1000/-260/500,L:268/981,C:268/19/-180/500} P{168/114,C:168/886/50/500,L:216/946,C:216/54/90/500};2986 symV 2985;2987 SVE 270/1000 P{268/0,C:268/1000/-260/500,L:268/950,C:268/50/-180/500} P{230/50,L:230/950,L:268/1000,L:268/0};2988 symV 2987;2989 SVE 250/1000 P{244/0,L:0/500,L:244/1000,L:244/910,L:50/500,L:244/90} P{244/0,L:210/80,L:210/920,L:244/1000};298A symV 2989;298B SV 262/1000 P{259/1000,L:0/1000,L:0/950,L:259/950} P{259/900,L:0/900,L:0/0,L:259/0,L:259/50,L:50/50,L:50/850,L:259/850};298C symV 298B;298F SV 262/1000 P{259/0,L:0/0,L:0/1000,L:259/1000,L:259/950,L:85/950,L:199/837,L:163/801,L:50/914,L:50/50,L:259/50};298E symV 298F;298D SV 262/1000 P{259/1000,L:0/1000,L:0/0,L:259/0,L:259/50,L:85/50,L:199/163,L:163/199,L:50/86,L:50/950,L:259/950};2990 symV 298D;2991 SVE 257/1000 P{257/0,L:205/0,L:0/490,L:0/510,L:205/1000,L:257/1000,L:66/500} P{190/500,R:190/500/70};2992 symV 2991;2993 SVE 557/1000 P{557/225,L:0/500,L:557/775,L:557/725,L:100/500,L:557/275} P{491/0,C:491/1000/-30/500,L:507/950,C:507/50/70/500};2994 symV 2993;2996 SVE 557/1000 P{557/225,L:0/500,L:557/775,L:557/725,L:100/500,L:557/275} P{65/50,C:65/950/565/500,L:85/1000,C:85/0/675/500} P{215/50,C:215/950/715/500,L:235/1000,C:235/0/825/500};2995 symV 2996;2997 SV 280/1000 P{250/0,L:0/244,L:0/752,L:250/1000,L:278/1000,L:154/828,L:154/177,L:278/0};2998 symV 2997;29FC SVE 362/1000 P{300/0,C:0/500/280/400,C:300/1000/280/600,L:360/940,C:120/500/320/600,C:360/60/320/400};29FD symV 29FC;;221A SVE 700/1000 P{335/0,L:143/480,C:16/508/100/559,L:4/528,L:160/653,L:179/653,L:388/159,L:646/1000,L:695/1000,L:377/0};2044 SB 499/690 P{0/0,L:453/690,L:499/690,L:49/0};2190 SH 800/410 P{793/180,L:194/180,C:182/123/150/170,L:264/27,L:245/8,C:7/200/190/100,C:245/400/190/300,L:265/380,L:182/284,C:194/220/150/230,L:793/220};2192 symV 2190;2191 SV 390/822 P{215/4,L:175/4,L:175/634,C:120/647/165/680,L:24/564,L:5/585,C:195/822/100/660,C:385/585/290/660,L:366/564,L:271/647,C:215/634/225/680};2193 symH 2191;2194 SH 884/406 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:680/220,C:692/284/724/230,L:610/380,L:630/398,C:867/200/690/300,C:630/8/690/100,L:610/26,L:691/124,C:679/180/724/170};2195 SV 410/900 P{185/704,C:130/717/175/750,L:34/634,L:15/655,C:205/892/110/730,C:395/655/300/730,L:376/634,L:281/717,C:225/704/235/750,L:225/194,C:281/183/235/135,L:376/264,L:395/244,C:205/6/300/168,C:15/245/110/168,L:34/265,L:130/183,C:185/195/175/135};219E SH 1000/406 P{986/180,L:411/180,C:400/123/370/170,L:481/27,L:461/8,C:280/180/400/100,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:279/220,C:462/400/400/300,L:482/380,L:400/284,C:412/220/370/230,L:986/220};21A0 symV 219E;219F SV 410/1220 P{225/4,L:185/4,L:185/834,C:130/847/175/880,L:34/764,L:15/785,C:185/990/110/860,L:185/1034,C:130/1047/175/1080,L:34/964,L:15/985,C:205/1222/110/1060,C:395/985/300/1060,L:376/964,L:281/1047,C:225/1034/235/1080,L:225/990,C:395/785/300/860,L:376/764,L:281/847,C:225/834/235/880};21A1 symH 219F;21A2 SH 816/406 P{601/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:601/220,C:783/400/730/300,L:803/380,L:721/284,C:720/123/650/200,L:802/27,L:782/8,C:601/180/730/100};21A3 symV 21A2;21A4 SH 816/406 P{754/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:754/220,L:754/400,L:804/400,L:804/8,L:754/8};21A6 symV 21A4;21A5 SV 410/842 P{185/50,L:185/644,C:130/657/175/690,L:34/574,L:15/595,C:205/832/110/670,C:395/595/300/670,L:376/574,L:281/657,C:225/644/235/690,L:225/50,L:407/50,L:407/10,L:16/10,L:16/50};21A7 symH 21A5;21A8 SV 410/812 P{185/624,C:130/637/175/670,L:34/554,L:15/575,C:205/812/110/650,C:395/575/300/650,L:376/554,L:281/637,C:225/624/235/670,L:225/234,C:281/223/235/175,L:376/304,L:395/284,C:207/46/300/208,L:408/46,L:408/6,L:17/6,L:17/46,L:203/46,C:15/285/110/208,L:34/305,L:130/223,C:185/235/175/175};21A9 SH 818/490 P{626/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:626/220,C:736/335/736/220,C:626/437/736/437,L:545/437,L:545/477,L:640/477,C:780/335/780/477,C:626/180/780/180};21AA symV 21A9;21AB SH 815/555 P{626/240,L:204/240,C:192/183/160/230,L:274/87,L:255/68,C:17/260/200/160,C:255/460/200/360,L:275/440,L:192/344,C:204/280/160/290,L:626/280,C:736/395/736/280,C:640/497/736/497,C:541/384/541/497,L:541/10,L:490/10,L:490/382,C:643/543/500/543,C:790/396/790/543,C:626/240/790/240};21AC symV 21AB;21B0 SV 424/810 P{204/590,C:192/543/160/580,L:274/437,L:255/418,C:17/610/200/510,C:255/810/200/710,L:275/790,L:192/694,C:204/630/160/640,L:407/630,L:407/4,L:367/4,L:367/590};21B1 symV 21B0;21B2 symH 21B0;21B3 symB 21B0;21B4 SB 830/1000 P{660/214,C:716/203/670/155,L:811/284,L:830/264,C:640/26/725/188,C:450/265/545/188,L:470/285,L:565/203,C:620/215/620/155,L:620/846,L:13/846,L:13/886,L:660/886};21B5 SB 820/850 P{204/180,C:192/123/160/160,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:760/220,L:760/842,L:800/842,L:800/180};GGB9 SH 884/750 P{244/180,C:232/123/200/170,L:314/27,L:295/8,C:57/200/240/100,L:57/8,L:17/8,L:17/400,L:57/400,L:57/200,C:295/400/240/300,L:315/380,L:232/284,C:244/220/200/230,L:791/220,L:791/180} P{24/560,L:639/560,C:652/622/684/570,L:570/720,L:590/738,C:827/540/650/640,L:827/738,L:867/738,L:867/738,L:867/347,L:827/347,L:827/540,C:590/347/650/440,L:570/366,L:651/464,C:639/520/684/510,L:24/520};21B9 symV GGB9;21BC SH 880/270 P{864/10,L:17/10,C:315/260/210/120,L:338/230,L:280/170,C:259/50/160/50,L:864/50};21BD symH 21BC;21BE SV 212/850 P{5/14,L:5/832,C:198/594/70/670,L:179/574,L:83/646,C:45/634/45/670,L:45/14};21BF symV 21BE;21C0 symV 21BC;21C1 symB 21BC;21C2 symH 21BE;21C3 symB 21BE;21C4 SH 884/750 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:791/220,L:791/180} P{24/560,L:679/560,C:692/622/724/570,L:610/720,L:630/738,C:867/540/690/640,C:630/347/690/440,L:610/366,L:691/464,C:679/520/724/510,L:24/520};21C5 SV 745/900 P{185/704,C:130/717/175/750,L:34/634,L:15/625,C:205/892/110/730,C:395/655/300/730,L:376/634,L:281/717,C:225/704/235/750,L:225/6,L:185/6} P{565/194,C:621/183/575/135,L:716/264,L:735/244,C:545/6/640/168,C:345/245/450/168,L:374/265,L:470/183,C:525/195/515/135,L:525/892,L:565/892};21C6 symV 21C4;21C7 SH 884/810 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:791/220,L:791/180} P{204/580,C:192/523/160/570,L:274/427,L:255/408,C:17/580/200/500,C:255/800/200/700,L:275/780,L:192/684,C:204/620/160/630,L:791/620,L:791/580};21C8 SV 800/900 P{185/704,C:130/717/175/750,L:34/634,L:15/655,C:205/892/110/730,C:395/655/300/730,L:376/634,L:281/717,C:225/704/235/750,L:225/6,L:185/6} P{585/704,C:530/717/575/750,L:434/634,L:415/655,C:605/892/510/730,C:795/655/700/730,L:776/634,L:681/717,C:625/704/635/750,L:625/6,L:585/6};21C9 symV 21C7;21CA symH 21C8;21CB SH 880/490 P{864/290,L:17/290,C:253/490/140/370,L:273/470,L:201/394,C:213/330/160/330,L:864/330} P{17/200,L:864/200,C:626/7/704/110,L:607/26,L:678/122,C:667/160/720/160,L:17/160};21CC symV 21CB;21D0 SH 840/600 P{822/170,L:332/170,C:329/106/280/150,L:403/25,L:382/5,L:16/300,L:382/600,L:403/581,L:328/500,C:332/436/280/470,L:822/436,L:822/370,L:188/370,C:187/236/100/300,L:822/236};21D1 SV 610/850 P{171/14,L:171/516,C:107/519/150/570,L:26/445,L:6/466,L:300/832,L:602/466,L:582/445,L:500/520,C:437/519/450/570,L:437/14,L:371/14,L:371/660,C:237/660/300/770,L:237/14};21D2 symV 21D0;21D3 symH 21D1;21D4 SH 920/550 P{599/140,L:323/140,C:358/33/250/128,L:335/10,L:17/270,L:335/537,L:358/514,C:320/406/250/406,L:600/406,C:561/514/710/406,L:589/537,L:903/270,L:589/10,L:561/31,C:600/140/710/140,L:600/206,L:731/206,C:731/340/850/270,L:188/340,C:188/206/80/270,L:599/206,L:599/140};21D5 SV 610/960 P{171/321,L:171/644,C:107/647/150/680,L:26/573,L:6/594,L:300/960,L:602/594,L:582/573,L:500/647,C:437/647/456/680,L:437/322,C:500/318/456/280,L:582/393,L:602/372,L:310/6,L:6/372,L:26/393,L:107/318,C:171/322/171/280,L:237/322,L:237/177,C:371/177/310/80,L:371/688,C:237/688/310/880,L:237/321};21DA SH 840/810 P{822/170,L:303/170,L:402/27,L:379/11,L:16/400,L:379/794,L:403/779,L:304/639,L:822/639,L:822/570,L:257/570,L:176/484,C:188/436/150/436,L:822/436,L:822/370,L:186/370,C:175/323/150/370,L:256/236,L:822/236};21DB symV 21DA;21E4 SH 810/410 P{244/180,C:232/123/200/170,L:314/27,L:295/8,C:57/200/240/100,L:57/8,L:17/8,L:17/400,L:57/400,L:57/200,C:295/400/240/300,L:315/380,L:232/284,C:244/220/200/230,L:791/220,L:791/180};21E5 symV 21E4;21E6 SH 840/610 P{822/170,L:402/170,L:402/15,L:382/5,L:16/300,L:382/600,L:402/590,L:402/436,L:822/436,L:822/220,L:772/220,L:772/386,L:352/386,L:352/492,L:187/376,C:187/231/100/300,L:352/103,L:352/220,L:822/220};21E7 SV 630/830 P{181/4,L:181/436,L:26/436,L:16/456,L:310/822,L:612/456,L:602/436,L:447/436,L:447/4,L:231/4,L:231/54,L:387/54,L:387/486,L:513/486,L:387/651,C:242/651/310/760,L:114/486,L:231/486,L:231/4};21E8 symV 21E6;21E9 symH 21E7;21EA SV 630/865 P{181/232,L:181/466,L:26/466,L:16/466,L:310/852,L:612/486,L:602/486,L:447/486,L:447/232,L:231/232,L:231/282,L:387/282,L:387/516,L:513/516,L:387/681,C:242/681/310/790,L:114/516,L:231/516,L:231/232} P{181/6,L:181/167,L:447/167,L:447/6,L:231/6,L:231/56,L:397/56,L:397/117,L:231/117,L:231/6};21EB SV 600/935 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11};21EC SV 600/935 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11} P{195/699,L:195/746,L:408/746,L:408/699};21ED SV 600/935 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11} P{273/47,L:273/860,L:333/860,L:333/47};21EE SV 600/1045 P{163/8,L:163/610,L:15/610,L:300/893,L:581/610,L:435/610,L:435/8,L:188/8,L:188/33,L:408/33,L:408/625,L:531/625,L:300/858,L:61/625,L:189/625,L:189/8} P{153/752,L:15/752,L:300/1036,L:581/752,L:441/752,L:419/770,L:531/770,L:300/1001,L:61/770,L:173/770};21EF SV 600/1077 P{85/11,L:85/63,L:163/63,L:163/640,L:15/640,L:300/923,L:581/640,L:435/640,L:435/63,L:513/63,L:513/11,L:121/11,L:121/23,L:483/23,L:483/47,L:408/47,L:408/655,L:531/655,L:300/888,L:61/655,L:189/655,L:189/47,L:121/47,L:121/23,L:121/23,L:121/11} P{153/782,L:15/782,L:300/1066,L:581/782,L:441/782,L:419/800,L:531/800,L:300/1031,L:61/800,L:173/800};21F0 SH 945/600 P{646/165,L:69/165,L:69/87,L:17/87,L:17/515,L:69/515,L:69/437,L:646/437,L:646/585,L:929/300,L:646/19,L:661/69,L:894/300,L:662/539,L:662/411,L:53/411,L:53/479,L:29/479,L:28/117,L:53/117,L:53/192,L:661/192,L:661/69,L:646/18};21F3 SV 600/900 P{163/293,L:163/610,L:15/610,L:300/893,L:581/610,L:435/610,L:435/292,L:581/292,L:300/8,L:15/293,L:61/275,L:300/33,L:531/275,L:408/275,L:408/624,L:531/625,L:300/858,L:61/625,L:189/625,L:189/275,L:60/275,L:16/293};21F5 symV 21C5;GGF6 SH 884/1200 P{204/580,C:192/523/160/570,L:274/427,L:255/408,C:17/600/200/500,C:255/800/200/700,L:275/780,L:192/684,C:204/620/160/630,L:791/620,L:791/580} P{204/980,C:192/923/160/970,L:274/827,L:255/808,C:17/980/200/900,C:255/1200/200/1100,L:275/1180,L:192/1084,C:204/1020/160/1030,L:791/1020,L:791/980} P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:791/220,L:791/180};21F6 symV GGF6;21FD SH 840/400 P{823/170,L:285/170,L:285/12,L:17/200,L:285/394,L:285/237,L:235/237,L:235/289,L:114/200,L:235/116,L:235/236,L:823/236};21FE symV 21FD;21FF SH 900/400 P{625/170,L:275/170,L:275/12,L:7/200,L:275/394,L:275/237,L:225/237,L:225/289,L:104/200,L:225/116,L:225/236,L:625/236,L:625/394,L:893/200,L:625/7,L:625/171,L:675/171,L:675/117,L:796/200,L:675/290,L:675/170};27F0 SV 928/845 P{176/14,L:176/525,L:31/445,L:16/470,C:460/832/270/620,C:912/470/650/620,L:900/444,L:752/525,L:752/14,L:686/14,L:686/571,L:582/659,L:582/14,L:516/14,L:516/711,C:412/711/460/770,L:412/14,L:346/14,L:346/656,L:242/571,L:242/14};27F1 symH 27F0;27F5 SH 1500/415 P{1481/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:1481/220};27F6 symV 27F5;27F7 SH 1500/415 P{204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:1280/220,C:1292/284/1324/230,L:1210/380,L:1230/398,C:1467/200/1290/300,C:1230/8/1290/100,L:1210/26,L:1291/124,C:1279/180/1324/170};27F8 SH 1500/610 P{1481/170,L:332/170,C:329/106/280/150,L:403/25,L:382/5,L:16/300,L:382/600,L:403/581,L:328/500,C:332/436/280/470,L:1481/436,L:1481/370,L:188/370,C:187/236/100/300,L:1481/236};27F9 symV 27F8;27FA SH 1510/550 P{1200/140,L:323/140,C:358/33/250/128,L:335/10,L:17/270,L:335/537,L:358/514,C:320/406/250/406,L:1200/406,C:1161/514/1300/406,L:1189/537,L:1503/270,L:1189/10,L:1161/31,C:1200/140/1300/140,L:1200/206,L:1331/206,C:1331/340/1450/270,L:188/340,C:188/206/80/270,L:1200/206,L:1200/140};27FB SH 1510/408 P{1454/180,L:204/180,C:192/123/160/170,L:274/27,L:255/8,C:17/200/200/100,C:255/400/200/300,L:275/380,L:192/284,C:204/220/160/230,L:1454/220,L:1454/400,L:1504/400,L:1504/8,L:1454/8};27FC symV 27FB;;27FD SH 1500/605 P{1430/170,L:332/170,C:329/106/280/150,L:403/25,L:382/5,L:16/300,L:382/600,L:403/581,L:328/500,C:332/436/280/470,L:1431/436,L:1431/561,L:1481/561,L:1481/45,L:1431/45,L:1431/370,L:188/370,C:187/236/100/300,L:1430/236};27FE symV 27FD;;290A SV 820/850 P{174/14,L:174/545,L:31/446,L:15/470,C:400/832/220/620,C:798/470/600/620,L:783/446,L:643/545,L:643/14,L:574/14,L:574/581,L:488/670,C:440/660/440/720,L:440/14,L:374/14,L:374/660,C:327/670/374/720,L:240/591,L:240/14};290B symH 290A;;2912 SV 410/885 P{225/14,L:185/14,L:185/644,C:130/657/175/690,L:34/574,L:15/595,C:205/832/110/670,L:15/832,L:15/872,L:406/872,L:406/832,L:206/832,C:395/595/300/670,L:376/574,L:281/657,C:225/644/235/690};2913 symH 2912;;294E SH 880/250 P{864/20,L:17/20,C:254/239/210/130,L:274/210,L:202/114,C:214/60/160/60,L:668/60,C:680/114/710/60,L:608/210,L:628/229,C:864/20/670/130};294F SV 250/900 P{23/14,L:23/872,L:25/872,C:237/594/130/680,L:218/574,L:122/646,C:84/634/84/670,L:84/212,C:122/200/84/180,L:218/270,L:237/252,C:23/14/120/190};2950 symH 294E;;2951 symH 294F;;2952 SH 850/410 P{834/180,L:67/180,L:67/8,L:18/8,L:18/398,L:67/398,L:67/180,C:304/399/260/290,L:324/370,L:252/274,C:264/220/210/220,L:834/220,L:834/180};2953 symV 2952;;2954 SV 420/935 P{200/14,L:200/872,L:14/872,L:14/920,L:405/920,L:405/872,L:200/872,C:407/594/300/680,L:388/574,L:292/646,C:254/634/254/660,L:254/14};2955 symH 2954;;2956 symH 2952;;2957 symB 2952;;2958 symV 2954;;2959 symB 2954;;295A SH 830/410 P{779/180,L:17/180,C:254/399/210/290,L:274/370,L:202/274,C:214/220/160/220,L:779/220,L:779/399,L:820/399,L:820/8,L:779/8};295B symV 295A;;295C SV 420/925 P{200/54,L:200/912,C:407/634/300/720,L:388/614,L:292/686,C:254/674/254/740,L:254/54,L:405/54,L:405/4,L:14/4,L:14/54};295D symH 295C;;295E symH 295A;;295F symB 295A;;2960 symV 295C;;2961 symB 295C;;296E SV 600/820 P{168/4,L:168/614,C:130/626/168/670,L:34/554,L:15/574,C:229/812/129/670,L:229/4} P{373/4,L:373/812,L:434/812,L:434/192,C:472/180/434/130,L:568/252,L:587/232,C:373/4/480/150};296F symV 296E;;005E SHE 430/425 P{4/7,L:215/420,L:426/7,L:215/296} ;030C symH 005E;;02C6 eq 005E;;02C7 eq 030C;;005F SH 512/70 P{6/10,L:6/60,L:506/60,L:506/10} ;0332 eq 005F;007E SHE 470/145 P{30/8,L:2/53,C:127/140/43/140,C:244/106/170/140,C:340/72/325/72,C:428/140/390/72,L:464/94,C:339/8/410/8,C:219/51/305/8,C:122/76/175/76,C:30/8/65/76} ;02DC eq 007E;203E SH 560/70 P{10/10,L:10/60,L:550/60,L:550/10} ;00AF eq 203E;23B4 SH 832/210 P{8/10,L:8/202,L:824/202,L:824/10,L:758/10,L:758/136,L:74/136,L:74/10} ;23B5 symH 23B4;;23DC SHE 576/180 P{0/0,C:576/0/288/340,C:0/0/288/215};23DD symH 23DC;;23DE SHE 580/222 P{2/2,C:74/122/26/122,L:211/122,C:290/220/286/122,C:367/122/296/122,L:504/122,C:578/2/546/122,L:575/2,C:486/76/556/76,L:383/76,C:290/170/294/76,C:197/76/291/76,L:103/76,C:5/2/26/76};23DF symH 23DE;;23E0 SH 945/300 P{7/9,L:7/61,L:224/286,L:722/286,L:939/61,L:939/9,L:699/220,L:247/220};23E1 symH 23E0;;;0644 SH 753/1250 P{668/202,C:56/202/46/-150,C:145/500/56/400,C:141/202/101/300,C:621/222/250/0,C:664/302/664/252,L:538/1143,C:581/1278/581/1200,C:651/1190/581/1190,C:593/1099/630/1099,L:682/483,C:668/202/733/280};";
    var mK =
        ";0028 20 8;005B 20 3;007B 9 5;007C 100 4;00AF 80 4;2016 100 8;230A 20 5;2308 20 5;2329 10 5;2772 20 5;27E6 20 10;27EA 10 5;27EC 20 5;2980 100 12;2983 9 7;2985 10 5;2987 10 5;2989 10 5;298B 20 5;298F 20 5;298D 20 5;2991 8 5;2993 8 5;2996 8 5;2997 20 5;29FC 10 5;221A 20 5;2044 20 5;2190 20 5;2191 20 12;2194 20 5;2195 20 12;219E 20 5;219F 20 12;21A2 20 5;21A4 20 5;21A5 20 12;21A8 20 12;21A9 20 5;21AB 20 5;21B0 20 15;21B4 20 5;21B5 20 5;21BC 20 5;21BE 20 8;21C4 20 5;21C5 20 18;21C7 20 5;21C8 20 18;21CB 20 5;21D0 20 5;21D1 20 12;21D4 20 5;21D5 20 12;21DA 20 5;21E4 20 5;21E6 20 5;21E7 20 20;21EA 20 20;21EB 20 20;21EC 20 20;21ED 20 20;21EE 20 20;21EF 20 20;21F0 20 5;21F3 20 20;GGF6 20 5;21FD 20 5;21FF 20 5;27F0 20 22;27F5 20 5;27F7 20 5;27F8 20 5;27FA 20 5;27FB 20 5;27FD 20 5;290A 20 16;2912 20 12;294E 20 10;294F 20 5;2952 20 5;2954 20 12;295A 20 5;295C 20 12;296E 20 15;005E 20 5;030C 8 5;005F 20 5;007E 20 5;203E 20 5;23B4 20 5;23DC 20 5;23DE 20 10;23E0 20 5;0644 20 5;";
    var mm =
        ".,),(,[,],\\{,\\},|,\\|,\\langle,\\rangle,\\lfloor,\\rfloor,\\lceil,\\rceil,\\lobrk,\\robrk,\\lbbrk,\\rbbrk,\\Lang,\\Rang,\\loang,\\roang,";
    var cy =
        ",),(,[,],{,},|,&Verbar;,&lang;,&rang;,&lfloor;,&rfloor;,&lceil;,&rceil;,&lobrk;,&robrk;,&lbbrk;,&rbbrk;,&Lang;,&Rang;,&loang;,&roang;,";
    var a9 =
        "smallmatrix,cases,array,matrix,matrix*,pmatrix,pmatrix*,bmatrix,bmatrix*,Bmatrix,Bmatrix*,vmatrix,vmatrix*,Vmatrix,Vmatrix*";
    var nw = "+,-";
    var bF =
        "\\mbox,\\textrm,\\textit,\\textbf,\\textbi,\\texttt,\\text,\\emph";
    var ah =
        ",arcsinh,arccosh,arctanh,arccsch,arcsech,arccoth,arcsin,arccos,arctan,arccsc,arcsec,arccot,sinh,cosh,tanh,csch,sech,coth,sin,cos,tan,csc,sec,cot,log,ln,lg,min,max,inf,sup,exp,ker,deg,gcd,det,hom,arg,dim,Pr,lim,";
    var jo = "|quad|,|:|;|!| |qquad|thickspace|medspace|thinspace|newline|";
    var bA =
        "|1em|thin|medium|thick|negativethin|1em|2em|thick|medium|thin|newline|";
    var dD =
        "05BE;05C0;05C3;05D0-05EA;05F0-05F4;061B;061F;0621-063A;0640-064A;066D-066F;0671-06D5;06DD;06E5-06E6;06FA-06FE;0700-070D;0710;0712-072C;0780-07A5;07B1;200F;FB1D;FB1F-FB28;FB2A-FB36;FB38-FB3C;FB3E;FB40-FB41;FB43-FB44;FB46-FBB1;FBD3-FD3D;FD50-FD8F;FD92-FDC7;FDF0-FDFC;FE70-FE74;FE76-FEFC";
    var f8 = null;
    var i7 = "CHARS";
    var hV = "ENTITIES";
    var aX = "UNICODE";
    var bK =
        "UEsDBBQABgAIAAAAIQDd/JU3ZgEAACAFAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIootuwjAQvFfqP0S+Vomhh6qqCBz6OLZIpR9g7A1Y9Uv28vr7bgJEVQtBKuUSKVnvzOzsxIPR2ppsCTFp70rWL3osAye90m5Wso/JS37PsoTCKWG8g5JtILHR8PpqMNkESBl1u1SyOWJ44DzJOViRCh/AUaXy0Qqk1zjjQchPMQN+2+vdcekdgsMcaww2HDxBJRYGs+c1fd4qiWASyx63B2uukokQjJYCSSlfOvWDJd8xFNTZnElzHdINyWD8IENdOU6w63sja6JWkI1FxFdhSQZf+ai48nJhaYaiG+aATl9VWkLbX6OF6CWkRJ5bU7QVK7Tb6z+qI+HGQPp/FVvcLnrSOY4+JE57OZsf6s0rUDlZESCihnZ1x0cHRLLsEsPvkLvGb1KAlHfgzbN/tgcNzEnKin6JiZgaOJvvV/Ja6JMiVjB9v5j738C7hLT5kz7+wYz9dVF3H0gdb+634RcAAAD//wMAUEsDBBQABgAIAAAAIQAekRq38wAAAE4CAAALAAgCX3JlbHMvLnJlbHMgogQCKKAAAgjJLbSgNBDIbvBd9hyH032woi0tneSKF3IusDhJnsAXcOzKTavr2jILpQ217m9OfLT9abg5vUO6c8Bq9hWdWg2JtgR99reG23iwdQWchbmoJnDUfOsGlub9YvPJGUoTyMMaui4rOGQSQ+ImYzsKNchci+VLqQHEkJU4+RzBv1jKu6vsf0VwOamabaWQ1pZ+9AtcdYNl/WDl03Gn4KZu/Yy4kVyAdhb9kuYipsScZyjWop9SwabDDPJZ2RYqwKNuBpotX1RP9fi46FLAmhCYnP83x1nANaXg902aJ5x687HyFZLBZ9e/tDg7MvaD4BAAD//wMAUEsDBBQABgAIAAAAIQDWZLNR+gAAADEDAAAcAAgBd29yZC9fcmVscy9kb2N1bWVudC54bWwucmVscyCiBAEooAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKySzWrDMBCE74W+g9h7LTv9oYTIuZRArq37AIq9/qGyJLSbtn77CkNShwb34otgRmjmk7Sb7XdvxCcG6pxVkCUpCLSlqzrbKHgvdnfPIIi1rbRxFhUMSLDNb282r2g0x0PUdp5ETLGkoGX2aympbLHXlDiPNu7ULvSaowyN9Lr80A3KVZo+yTDNgPwiU+wrBWFf3YMoBh+b/892dd2V+OLKY4+Wr1TILzy8IXO8HMVYHRpkBRMzibQgr4OslgShPxQnZw4hWxSBBxM/8/wMNOq5+scl6zmOCP62j1KOazbH8LAkQ+0sF/pgJhxn6wQhLwY9/wEAAP//AwBQSwMEFAAGAAgAAAAhAF58RMI5AgAAyQUAABEAAAB3b3JkL2RvY3VtZW50LnhtbLRUS27bMBDdF+gdBO5tyaoTu4LlwKmRrgIYdXsAmqIkovwIJGXVXfWGvVKHpOgkLhAYRboRZzia9+bHWd39EDw5Um2YkiWaTTOUUElUxWRTom9fHyZLlBiLZYW5krREJ2rQ3fr9u9VQVIr0gkqbAIQ0xRGsrbVdkaaGtFRgM1UdlWCslRbYgqqbVGD9ve8mRIkOW3ZgnNlTmmfZLRphVIl6LYsRYiIY0cqo2jqXQtU1I3Q8ooe+hjd4bseQPWOqKYcYlDQt60xEE/+KBim2EeT4WhJHweN/Q3cNW6XxAP0QPIQ9KF11WhFqDNxug/GMOMte4x4L6CDOHteE8JIzRiIwk2cYNx0X/T83bwrNSwN36qCeEoFarGGWDqo6ubNLhgJmsfpSoizb5PnsIwzGeLWlNe65dZZse3O/mYMnjMQj1H2HNT4rTtAOTO/C8aCkNYCCDWGsRJ+wOGiGE+fowNuNNJfX6XqVjgCisOtN+fvXKnWS+wKqKMy+7+LpeERBrOYj45sQA1OEBNHxBR76HxLUL7IDOk9iQopvXMz8ksvTjCn6AvuePkmhu9APKPhQGErsTseh+HtO9mB3t8v7xTJfID9Vzf4nOAyw4PJ8DisOmg7yzRJk6DQAN4/YQVoFD3I2D79o1rSAFNWDslbBdog6p/Uza0txRWETLXIPXytln6lNb7060hHF3TyaDhN4NM7FRwEL9bNmFVg4k3THLIEoP9x6K2QfEveDGZ4L3MUdvP4DAAD//wMAUEsDBBQABgAIAAAAIQCWta3ilgYAAFAbAAAVAAAAd29yZC90aGVtZS90aGVtZTEueG1s7FlPb9s2FL8P2HcgdG9jJ3YaB3WK2LGbLU0bxG6HHmmJlthQokDSSX0b2uOAAcO6YYcV2G2HYVuBFtil+zTZOmwd0K+wR1KSxVhekjbYiq0+JBL54/v/Hh+pq9fuxwwdEiEpT9pe/XLNQyTxeUCTsO3dHvYvrXlIKpwEmPGEtL0pkd61jfffu4rXVURigmB9Itdx24uUSteXlqQPw1he5ilJYG7MRYwVvIpwKRD4COjGbGm5VltdijFNPJTgGMjeGo+pT9BQk/Q2cuI9Bq+JknrAZ2KgSRNnhcEGB3WNkFPZZQIdYtb2gE/Aj4bkvvIQw1LBRNurmZ+3tHF1Ca9ni5hasLa0rm9+2bpsQXCwbHiKcFQwrfcbrStbBX0DYGoe1+v1ur16Qc8AsO+DplaWMs1Gf63eyWmWQPZxnna31qw1XHyJ/sqczK1Op9NsZbJYogZkHxtz+LXaamNz2cEbkMU35/CNzma3u+rgDcjiV+fw/Sut1YaLN6CI0eRgDq0d2u9n1AvImLPtSvgawNdqGXyGgmgookuzGPNELYq1GN/jog8ADWRY0QSpaUrG2Ico7uJ4JCjWDPA6waUZO+TLuSHNC0lf0FS1vQ9TDBkxo/fq+fevnj9Fxw+eHT/46fjhw+MHP1pCzqptnITlVS+//ezPxx+jP55+8/LRF9V4Wcb/+sMnv/z8eTUQ0mcmzosvn/z27MmLrz79/btHFfBNgUdl+JDGRKKb5Ajt8xgUM1ZxJScjcb4VwwjT8orNJJQ4wZpLBf2eihz0zSlmmXccOTrEteAdAeWjCnh9cs8ReBCJiaIVnHei2AHucs46XFRaYUfzKpl5OEnCauZiUsbtY3xYxbuLE8e/vUkKdTMPS0fxbkQcMfcYThQOSUIU0nP8gJAK7e5S6th1l/qCSz5W6C5FHUwrTTKkIyeaZou2aQx+mVbpDP52bLN7B3U4q9J6ixy6SMgKzCqEHxLmmPE6nigcV5Ec4piVDX4Dq6hKyMFU+GVcTyrwdEgYR72ASFm15pYAfUtO38FQsSrdvsumsYsUih5U0byBOS8jt/hBN8JxWoUd0CQqYz+QBxCiGO1xVQXf5W6G6HfwA04WuvsOJY67T68Gt2noiDQLED0zEdqXUKqdChzT5O/KMaNQj20MXFw5hgL44uvHFZH1thbiTdiTqjJh+0T5XYQ7WXS7XAT07a+5W3iS7BEI8/mN513JfVdyvf98yV2Uz2cttLPaCmVX9w22KTYtcrywQx5TxgZqysgNaZpkCftE0IdBvc6cDklxYkojeMzquoMLBTZrkODqI6qiQYRTaLDrniYSyox0KFHKJRzszHAlbY2HJl3ZY2FTHxhsPZBY7fLADq/o4fxcUJAxu01oDp85oxVN4KzMVq5kREHt12FW10KdmVvdiGZKncOtUBl8OK8aDBbWhAYEQdsCVl6F87lmDQcTzEig7W733twtxgsX6SIZ4YBkPtJ6z/uobpyUx4q5CYDYqfCRPuSdYrUSt5Ym+wbczuKkMrvGAna5997ES3kEz7yk8/ZEOrKknJwsQUdtr9VcbnrIx2nbG8OZFh7jFLwudc+HWQgXQ74SNuxPTWaT5TNvtnLF3CSowzWFtfucwk4dSIVUW1hGNjTMVBYCLNGcrPzLTTDrRSlgI/01pFhZg2D416QAO7quJeMx8VXZ2aURbTv7mpVSPlFEDKLgCI3YROxjcL8OVdAnoBKuJkxF0C9wj6atbabc4pwlXfn2yuDsOGZphLNyq1M0z2QLN3lcyGDeSuKBbpWyG+XOr4pJ+QtSpRzG/zNV9H4CNwUrgfaAD9e4AiOdr22PCxVxqEJpRP2+gMbB1A6IFriLhWkIKrhMNv8FOdT/bc5ZGiat4cCn9mmIBIX9SEWCkD0oSyb6TiFWz/YuS5JlhExElcSVqRV7RA4JG+oauKr3dg9FEOqmmmRlwOBOxp/7nmXQKNRNTjnfnBpS7L02B/7pzscmMyjl1mHT0OT2L0Ss2FXterM833vLiuiJWZvVyLMCmJW2glaW9q8pwjm3Wlux5jRebubCgRfnNYbBoiFK4b4H6T+w/1HhM/tlQm+oQ74PtRXBhwZNDMIGovqSbTyQLpB2cASNkx20waRJWdNmrZO2Wr5ZX3CnW/A9YWwt2Vn8fU5jF82Zy87JxYs0dmZhx9Z2bKGpwbMnUxSGxvlBxjjGfNIqf3Xio3vg6C24358wJU0wwTclgaH1HJg8gOS3HM3Sjb8AAAD//wMAUEsDBBQABgAIAAAAIQBEZsD68QIAAI4GAAARAAAAd29yZC9zZXR0aW5ncy54bWycVdtu2kAQfa/Uf7D8XMAQCKkVEyVQehFpqzr5gLG92KvsTbtrHPr1nbW9cdKiKOoTu+fMnJ2rubx65Cw4EG2oFEk4HUdhQEQuCyrKJLy/244uwsBYEAUwKUgSHokJr1bv3102sSHWopkJUEKYWCZhrUVs8opwMCNOcy2N3NtRLnks93uak/4n7D10ElbWqngy6Z3GUhGBanupOVgzlrqcdJ4bmdecCDuZRdH5RBMGFgM2FVXGq/H/VcOnKi9yeC2JA2ferplGr1n26TZSF08ebwnPOSgtc2IMVpazLl0OVHgZw96i09VzRzMN+vhMZIVt+y0lD5r4AKiUEWO31IZ4V0TnWGCcgcUinDhDDETuUwuWIG0UYawdipwRwHCauNTAOWATO6T1KcgeambvIEutVP6Z5SzqJPMKNOSW6FRBjmprKayWzNsV8ru0a8mVxgL0HngD68KpDdl+2sFR1hafmjQxzlVP4fQWxtm4wy8prReMok/r+WY777QcOzDRZnFzfZK5uFlezJanfK5ns+nH81PM8A5G1sfDYzdaP/XqsjttMduAd5VfA880heDWDR/mw+NMP9xQ4fmM4BKQ50xaZ54cjTrCcGBsixX1BM5dxxTUqA3Zt8LsFnQ5KLet4LE+iWL/vj2puXkg+rOWtepUGw3qqygQ9g9O5/Nejwq7o9zjps5S7yVwBp9RtSh+HLQTnAwFamKLnw3iKrQDUfouETG6T50pdpvp1H1ayC0ohaODJlk5TUJGy8pO3TxavBWgH9pLVs56btZyeHNce4HcZYbW/cEZdEe06g8DduaxswGbe2w+YAuPLQbs3GPnDquOuGS4RA+4wv7o8L1kTDak+OLBJPwH6opgKlAE++p2DAdexi3QL50JDjF5xA0mhVtpo2jB4TEJz6JlO+a9NWtX6IWtU3LG6gUaFGABvwdtq144t+v3VyxNXJCc4kCmR54NKz3uAmfU2JQo3H4rNabcfn0+tMrDH8nqDwAAAP//AwBQSwMEFAAGAAgAAAAhAIoTPKHBAQAAHwYAABIAAAB3b3JkL2ZvbnRUYWJsZS54bWzMlFFP2zAQx98n8R0iv0McN+2gIkXQ0bfxgLoPcE2dxlJsRz7TjG+/cxwyqQiNTBsikSzlf/Y/55/vfH3zUzfJUTpU1hQsu+Askaa0e2UOBfux3ZxfsgQ9mD001siCPUtkN6uzL9fdsrLGY0LrDS5dwWrv22WaYllLDXhhW2koVlmnwdOnO6S2qlQpv9nySUvjU8H5InWyAU//xlq1yAa37j1unXX71tlSIlKyuol+GpRhqyG7pFsa0JT1Ghq1c6oPtGAsyoxiR2gKxgXf8DmN4c35LIwsDQ5lDQ6lHyfyKFegVfP8omKnEGOgVb6sX/QjOAW7RsYQqgMFnnDHC3afcc7FZsOikhUsJ+F2PSqCkorP1TBnNip0PJRY79NPya56H1LIZ1jV55nG83lFYqu0xORBdsmj1RBRvSYi+IJIzIlHIDObRMT1vj3B9xKhxMXtuH/ayZqUr5d5Nux/EpHoM4EI1JTxG6VxRyBCUQQU+YeUhrg/BbHg87tTEOJPpZHxbCqINWjqEUi+g6/fwBHqIcII9TGtU/6uLk46he4MkY+AftdF3xfUX/+wUwYcn5VEaPb/RWK4PHD1CwAA//8DAFBLAwQUAAYACAAAACEAStiKkrsAAAAEAQAAFAAAAHdvcmQvd2ViU2V0dGluZ3MueG1sjM7BasMwDMbxe2HvEHRfnfUwSkhSKKMv0PUBXEdpDLFkJG3e9vQ1bJfdehSf+PHvD19pbT5RNDIN8LJtoUEKPEW6DXB5Pz3voVHzNPmVCQf4RoXD+LTpS1fwekaz+qlNVUg7GWAxy51zGhZMXreckeo2syRv9ZSb43mOAd84fCQkc7u2fXWCq7daoEvMCn9aeUQrLFMWDqhaQ9L66yUfCcbayNliij94YjkKF0VxY+/+tY93AAAA//8DAFBLAwQUAAYACAAAACEAwSu3WXEBAADHAgAAEAAIAWRvY1Byb3BzL2FwcC54bWwgogQBKKAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcUstuwjAQvFfqP0S5gwOHqkKLqwpU9dAHEoGeLXuTWHVsyzZV+ftuCIRUvTWnndn1ZHZsePhuTfaFIWpnl/lsWuQZWumUtvUy35VPk/s8i0lYJYyzuMyPGPMHfnsDm+A8hqQxZiRh4zJvUvILxqJssBVxSm1LncqFViSCoWauqrTEtZOHFm1i86K4Y/id0CpUEz8I5r3i4iv9V1Q52fmL+/LoyTCHEltvREL+1tkxU+VSC2xgoXRJmFK3yAuiBwAbUWPkM2B9AR8uqBPuC1g1IgiZKD8+o6kRhEfvjZYiUbD8VcvgoqtS9n6KIOuOAxuPAMWyRXkIOh07E2MIL9r2NvqCbAVRB+Gbs7cBwVYKgyvanVfCRAR2JWDlWi/skZPPS0V6n3HnS7fuwjkf+U2OdvzQqdl6ITsvv7YdNWBLkaAi+xe5KwHPdB3BdP+kpGyN6jLzt9Hlt+/fJZ/NpwV9p8AuHF3J8GD4DwAAAP//AwBQSwMEFAAGAAgAAAAhAIMAEU15AQAA8QIAABEACAFkb2NQcm9wcy9jb3JlLnhtbCCiBAEooAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIxSy07DMBC8I/EPke+tkxYQipJUPNQTlZAoAnEz9rY1jR+yt0379zhJmzbAAckH787s7O7Y2WSnymgLzkujc5IMYxKB5kZIvczJ63w6uCWRR6YFK42GnOzBk0lxeZFxm3Lj4NkZCw4l+CgoaZ9ym5MVok0p9XwFivlhYOgALoxTDEPoltQyvmZLoKM4vqEKkAmGjNaCA9spkoOk4J2k3biyERCcQgkKNHqaDBN64iI45f8saJAzppK4t2Gnw7jn2oK3YMfeedkRq6oaVuNmjDB/Qt9nTy/NqgOpa684kCITPEWJJRQZPV3DzW8+v4Bjm+6CAHAHDI0r7oSSWnp0ddQUH5Ha8zXsK+OED/W9KAgI8NxJi+ElW/VeIrBL5nEWnnYhQdzvfzb6Taj7OdjK+m8U46ZhF4b9GjvbsUFEwaC0tfOIvI0fHudTUoziZDQIJ76eJ+M0vknj+KPeq1dfG9Ym1GHCfysmV33Fo0BrUf+TFt8AAAD//wMAUEsDBBQABgAIAAAAIQCd/TnOsQcAAA89AAAPAAAAd29yZC9zdHlsZXMueG1sxFvbcts4DH3fmf0Hjd7bOE5qt5m6nVzabWZ6Setk9pmW6FgTWfRKdJP06wuCEiNLlgRE6uyTI4rEAQjggHaIt+8f1rH3U6ZZpJKZf/hy5HsyCVQYJbcz/+b644vXvpdpkYQiVomc+Y8y89+/+/uvt/cnmX6MZeaBgCQ7SWf+SuvNycFBFqzkWmQv1UYm8G6p0rXQ8JjeHqjlMgrkhQq2a5nog/FoNDlIZSw0gGeraJP5ubR7irR7lYabVAUyy0DbdWzlrUWU+O9AvVAFF3IptrHOzGN6leaP+RN+fFSJzrz7E5EFUXQNioOJ6yhR6afTJIt8eCNFpk+zSJRffsjHzPuVmVh+6VYGmS4JPIvCyD8woNkvWPZTxDN/PC5Gzo0SO2OxSG6LMZm8uJmXlZn5bmgBcme+SF/MT42wA7S0+CxZvNmxH55QlY0IYO8ARyy1BB+CSwxOHBlfj6eT4uHHNoYBsdUqB0EBAFYWC4+VTQfXgqPnNlDgrVx+VsGdDOcaXsx8xILBm8urNFJppB9n/ps3BhMG53IdfYrCUJq4zMduklUUyn9XMrnJZPg0/v0jRlkuMVDbRIP6kykGQpyFHx4CuTFRBqITYZz81SyIjdishIMKbaMnbexABRUH/ysgD60P96KspDCZ5KH+rUBo9bY30NhYVDYA5bJ0Peov4ri/iFf9RWDw9tuLaX8tgD/7esTGRikq6U7VKrDBV96HozctIWtW1KKoc0UtaDpX1GKkc0UtJDpX1CKgc0XN4Z0rav7tXFFzZ+uKQCBxVaPoCHeDlNjXkY6lWd9KQIc9qS4vNd6VSMVtKjYrz9TWqtptZDnfLjRNVaTT55PlXKcque3cEajOJnWfzckf1puVyCI41HRs/bjn1l+LRSy9f9Io7IR6ZYOvZhMeTPaWsKtYBHKl4lCm3rV8sB5lrP+qvLk9ZXQq19Otn6PblfbmKyy5nWCThk1v3gkr/3OU4R60JtOkwZQu4SQfThrisln4FxlG23WxNYTTyMTyOcPNFQhUsX2Ljo2L6tnVaYVxAMUEWy74JqB8gv62uPDlGx9T9Lel6JnyCfrbwvVM+Rgf7f5lM82FSO88UnpN2bl7rmKVLrdxkQOd9DBlZ7CDoJnATmInn0QSU3YG79CndxoE8M2NEqdsXzzxKAOF7Q6LgslGt4XtlArtHTIsYjuogjVmYPXjWgYQm3R/yJ+R+e2JWwyQpd1ZszOdjxp2AEoQ6Qz9fat09xl63MB5VJTLBH4uyaRHQztqyDwqWh5Ptt4xfNyv8DGA+lVABlC/UsgAaoiP5jOPq4l0kP7FkYHFpmVXxTDsyMw8ZTOzA+KVgIHqJuH81ZC9zbFQr5sEFLaD6nWTgML2TqWWubpJwBqsbhKwGqpGs4/KnMoxil03y0DuJECwaBjyJgANQ94EoGHImwDUn7y7QYYjbwIWmxscp5bJmwCEUzhf9R1QmbwJQGxusGyX/2ZU1D2U0v7ldgDyJqCwHVQnbwIK2ztN5E3AwimcSKhgOaojYA1D3gSgYcibADQMeROAhiFvAtAw5E0A6k/e3SDDkTcBi80NjlPL5E0AYtODAyqTNwEIp3C4YS95Y9b/cfImoLAdVCdvAgrbOxVCdYdUAhbbQRUsR94ELJzCCYYcC4ObY9Qw5E2waBjyJgANQ94EoGHImwDUn7y7QYYjbwIWmxscp5bJmwDEpgcHVCZvAhCbG/aSNybjHydvAgrbQXXyJqCwvVMhVMdzBCy2gypYjrwJWBgvvcmbAIRTngvEsWgY8iZYNAx5E4CGIW8CUH/y7gYZjrwJWGxucJxaJm8CEJseHFCZvAlAbG7YS96YI3+cvAkobAfVyZuAwvZOhVAdeROw2A6qYDmqI2ANQ94EIAzM3uRNAMIpzwDCLOK4aRjyJlg0DHkTgPqTdzfIcORNwGJzg+PUMnkTgNj04IDK5E0AYnODuWcL90XJ11MPG4KAes+guNVABhw3OIkKmBv4Qy5lCs1Msvt2SE/AwkIGYkN4UE08U+rOo13sPmoIEDJUtIgjhVe6H/GWTqkR4Wja0klw/e3c+2QbYGrrMKR2b95A91C5XQjbk0zjEOipHzfQsrMpbpYbadAgZFq78hYgbEW7hIagvK3HLDZ9PjARm6ryYfy/bY6Kf0PbW1jMGY1en01fj9Ei0AVF1pUIVqBFAL1SLUrkV+Hd7SS8CF9VqeG+PKr11KxRKJffm386Xdl5O7c3YahZb23uiLfojHfIW3fPwynW33UFoW0LVerS0N23wtl6EdtGNPjjMjGugM4//N+adXn4IKxYeH8u4/iLwLY1rTbNU2O51Pbt4QjrZEXUQmmt1s3rU7xGjprsEwBbXFbGPhojmvc+2a4XMoU+sJb9/6pMfcF+td3AtTdirbtd5oH2GNfUXW/WbSepXBqdiThWKsH7/tXAzd/ZZgDUayGgGe+b6a2rJRs0Et4V4yWh55BF/SNpN3tHF6/OTo+t1Kb2RgytvLnx2D3sb27MGynhY6dJdOZfi5VaC+NL7P0sDwSZe7LZ4Fo9Dyd5fvx6avW0Y+Ab6E1ti58dzgm2GYQvtlRWya+6wW2e855cUHHfXvZCaxqcyXRks9dwG/6H/S6yI3v3GwAA//8DAFBLAQItABQABgAIAAAAIQDd/JU3ZgEAACAFAAATAAAAAAAAAAAAAAAAAAAAAABbQ29udGVudF9UeXBlc10ueG1sUEsBAi0AFAAGAAgAAAAhAB6RGrfzAAAATgIAAAsAAAAAAAAAAAAAAAAAnwMAAF9yZWxzLy5yZWxzUEsBAi0AFAAGAAgAAAAhANZks1H6AAAAMQMAABwAAAAAAAAAAAAAAAAAwwYAAHdvcmQvX3JlbHMvZG9jdW1lbnQueG1sLnJlbHNQSwECLQAUAAYACAAAACEAXnxEwjkCAADJBQAAEQAAAAAAAAAAAAAAAAD/CAAAd29yZC9kb2N1bWVudC54bWxQSwECLQAUAAYACAAAACEAlrWt4pYGAABQGwAAFQAAAAAAAAAAAAAAAABnCwAAd29yZC90aGVtZS90aGVtZTEueG1sUEsBAi0AFAAGAAgAAAAhAERmwPrxAgAAjgYAABEAAAAAAAAAAAAAAAAAMBIAAHdvcmQvc2V0dGluZ3MueG1sUEsBAi0AFAAGAAgAAAAhAIoTPKHBAQAAHwYAABIAAAAAAAAAAAAAAAAAUBUAAHdvcmQvZm9udFRhYmxlLnhtbFBLAQItABQABgAIAAAAIQBK2IqSuwAAAAQBAAAUAAAAAAAAAAAAAAAAAEEXAAB3b3JkL3dlYlNldHRpbmdzLnhtbFBLAQItABQABgAIAAAAIQDBK7dZcQEAAMcCAAAQAAAAAAAAAAAAAAAAAC4YAABkb2NQcm9wcy9hcHAueG1sUEsBAi0AFAAGAAgAAAAhAIMAEU15AQAA8QIAABEAAAAAAAAAAAAAAAAA1RoAAGRvY1Byb3BzL2NvcmUueG1sUEsBAi0AFAAGAAgAAAAhAJ39Oc6xBwAADz0AAA8AAAAAAAAAAAAAAAAAhR0AAHdvcmQvc3R5bGVzLnhtbFBLBQYAAAAACwALAMECAABjJQAAAAA=";
    var il = new aR();
    var bN = new aR();
    var iA = -1;
    var eG = -1;
    var iw =
        ";normal;bold;italic;bold-italic;double-struck;bold-double-struck;double-struck-italic;double-struck-bold-italic;fraktur;bold-fraktur;script;bold-script;sans-serif;bold-sans-serif;sans-serif-italic;sans-serif-bold-italic;monospace;";
    var d8 = new he();
    var ig = false;
    var dL = false;
    var fx = ",sup,inf,#,$,";
    var dj = "newline|sfrac|cfrac|prescript";
    var fr = "\\fencedLatex";
    var e0 = "\\latexStyle";
    var bl =
        "|mathnormal|mathrm|mathit|mathbfup|mathbf|mathbi|mathsfbi|mathsfb|mathsfi|mathsf|mathtt|mathfrakb|mathfrak|mathcalb|mathcal|mathbbbi|mathbbb|mathbbi|mathbb|mathscrb|mathscr|textcolor|emph|";
    var oi = "\\latexFrac";
    var iq = "|frac|binom|sfrac|cfrac|";
    var mH = "\\latexFunction";
    var bg = "|bar|";
    var aU = "\\latexHardcoded";
    var np = "\\matrixLatex";
    var na =
        "|array|smallmatrix|matrix|matrix*|pmatrix|pmatrix*|bmatrix|bmatrix*|Bmatrix|Bmatrix*|vmatrix|vmatrix*|Vmatrix|Vmatrix*|cases|";
    var ak = "\\latexPhantom";
    var gt = "|phantom|hphantom|";
    var iW = "\\latexRoot";
    var nP = "|sqrt|";
    var lk = "\\latexSpace";
    var lJ = "|nolimits|limits|prescript|";
    var dA = "\\latexSubSup";
    var nC = "\\latexTextMode";
    var cb =
        "|textnormal|textrm|textit|textbf|textbi|textsfbi|textsfb|textsfi|textsf|texttt|textcalb|textcal|textfrakb|textfrak|textbbbi|textbbb|textbbi|textbb|textscrb|textscr|mbox|text|emph|";
    var ej = "(";
    var iN = ")";
    var kr = false;
    var fh = null;
    var iY = "OVER_PANEL";
    var hv = "MINIMIZE";
    var dX = "MAXIMIZE";
    var hr = "TOOLTIP";
    var hO = "TOGGLE";
    var df = "HREF";
    var mB = "RESIZE_HORIZONTAL";
    var fB = "RESIZE_VERTICAL";
    var ni = null;
    var ar = false;
    var ma = "";
    var kF = "";
    var az = null;
    var gx = 0.2;
    var Y = 0.5;
    var bu = -100000;
    var ia = 3.779;
    var gO = "spacer";
    var jI = "text";
    var eR = "display";
    var k9 = "calc_number";
    var ih = "number";
    var cr = "button";
    var mt = "select";
    var j0 = "select_image";
    var g1 = "select_length";
    var ai = "select_position";
    var jG = "select_color";
    var nl = "boolean";
    var c8 = "menu_img";
    var m = ",thin,loose,medium,tight,thick,default,infinity,";
    var gc = "delete";
    var mb = "edit";
    var kz = "config";
    var aD = "down";
    var aV = "up";
    var iZ = "space";
    var lO = "file_new";
    var di = "file_new_text";
    var kR = "file_new_default";
    var kQ = "file_new_load";
    var oq = "file_load_action";
    var fp = "file_new_import";
    var gi = "file_import_action";
    var ab = "insert_new_wizard";
    var nM = "file_save";
    var ji = "file_save_as";
    var gh = "file_save_default";
    var oj = "file_save_as_action";
    var fy = "file_save_as_select";
    var hZ = "file_compact";
    var em = "home_font_family";
    var ol = "home_font_size";
    var fW = "home_color";
    var kP = "home_back_color";
    var hy = "home_font_inc";
    var mg = "home_font_dec";
    var f0 = "home_font_bold";
    var gy = "home_font_italic";
    var lV = "home_align_left";
    var cz = "home_align_center";
    var hD = "home_align_right";
    var iP = "home_delete_fonts";
    var fN = "delete_font_name";
    var cw = "delete_font_save";
    var lg = "edit_delete";
    var dk = "edit_copy";
    var oh = "edit_cut";
    var bd = "edit_paste";
    var dg = "edit_paste_left";
    var ml = "edit_paste_right";
    var lH = "edit_undo";
    var jv = "edit_redo";
    var mv = "view_mathml";
    var gl = "view_latex";
    var n3 = "view_100";
    var mz = "view_width";
    var nS = "view_page";
    var iv = "view_zoom_in";
    var ly = "view_zoom_out";
    var kL = "view_select_zoom";
    var jV = "view_change_theme";
    var fb = "view_change_coord";
    var nO = "view_portrait";
    var a7 = "view_landscape";
    var lx = "view_symbols";
    var bw = "view_prop";
    var hI = "view_keyboard";
    var k0 = "view_change_draw";
    var fP = "insert_basic";
    var nk = "insert_identifiers";
    var hi = "insert_operators";
    var kl = "choose_operators";
    var bV = "insert_constants";
    var jT = "insert_new_line";
    var a4 = "insert_fraction";
    var go = "insert_script";
    var hc = "insert_arrow_script";
    var fz = "insert_radical";
    var lf = "insert_integral";
    var bq = "insert_deriv";
    var cE = "insert_sum";
    var mh = "insert_bracket";
    var g7 = "insert_function";
    var hY = "insert_accent";
    var gM = "insert_limit";
    var nj = "insert_matrix";
    var f4 = "insert_table";
    var h6 = "insert_symbole";
    var iO = "insert_equation";
    var I = "insert_enclose";
    var gN = "insert_unicode";
    var a1 = "choose_unicode";
    var dH = "choose_chinese";
    var bp = "insert_template";
    var mP = "choose_template_poly";
    var b5 = "choose_template_poly_degree";
    var gP = "choose_template_poly_save";
    var db = "choose_template_matrix";
    var nU = "choose_template_matrix_rows";
    var fk = "choose_template_matrix_columns";
    var ep = "choose_template_matrix_save";
    var T = "choose_template_table_rows";
    var lG = "choose_template_table_columns";
    var fD = "choose_template_table_save";
    var eb = "choose_template_piece_rows";
    var eJ = "choose_template_piece_columns";
    var kh = "choose_template_piece_save";
    var mT = "choose_template_local_font_name";
    var jz = "choose_template_local_font_save";
    var e5 = "choose_template_google_font_name";
    var bO = "choose_template_google_font_save";
    var ks = "help_editor";
    var b1 = "help_navigation";
    var nd = "help_tutorials";
    var dW = "help_languages";
    var iK = "help_license";
    var jO = "help_tips";
    var bx = "wizard_addition_save";
    var hM = "wizard_addition_add";
    var nG = "wizard_addition_remove";
    var gB = "wizard_subtraction_save";
    var p = "wizard_multiplication_save";
    var lB = "wizard_division_save";
    var lj = "news_tips_prev_elem";
    var im = "news_tips_next_elem";
    var fK = "news_tips_next_tip";
    var kk = "news_tips_hide";
    var kg = "keyboard.ctrlc";
    var j1 = "keyboard.ctrlx";
    var j4 = "keyboard.ctrlv";
    var jX = "keyboard.ctrlz";
    var jZ = "keyboard.ctrly";
    var cD = "keyboard.del";
    var kU = "keyboard.enter";
    var m8 = "keyboard.up";
    var iM = "keyboard.down";
    var nN = "keyboard.left";
    var hg = "keyboard.right";
    var du = "keyboard.tab";
    var l3 = "keyboard.char";
    var d6 = "mouse.leftclick";
    var gs = "mouse.dblclick";
    var hh = "mouse.dragdrop";
    var mj = "function_delete_conf";
    var ob = "function_edit_save";
    var eA = "function_param_save";
    var nx = "function_add_editor";
    var gw = "function_add_calc";
    var nL = "keyboard.num.0";
    var nK = "keyboard.num.1";
    var nH = "keyboard.num.2";
    var nF = "keyboard.num.3";
    var nE = "keyboard.num.4";
    var nD = "keyboard.num.5";
    var nB = "keyboard.num.6";
    var ny = "keyboard.num.7";
    var nv = "keyboard.num.8";
    var nt = "keyboard.num.9";
    var bk = "keyboard.num.point";
    var l7 = "function.sign";
    var km = "constant.pi";
    var d5 = "constant.e";
    var iu = "constant.euler";
    var dN = "constant.golden";
    var x = "function.root";
    var dS = "function.sqrt";
    var lL = "function.power";
    var iS = "function.log";
    var bE = "function.ln";
    var jn = "function.log-n";
    var iy = "function.times";
    var mF = "function.divide";
    var iG = "function.plus";
    var mZ = "function.minus";
    var eB = "function.sin";
    var cZ = "function.cos";
    var mN = "function.tan";
    var fU = "function.sec";
    var bR = "function.csc";
    var cY = "function.cot";
    var fg = "function.sinh";
    var ao = "function.cosh";
    var g = "function.tanh";
    var bn = "function.sech";
    var mO = "function.csch";
    var Z = "function.coth";
    var cH =
        "American Typewriter,Andale Mono,Arial,Arial Black,Arial Narrow,Arial Rounded MT Bold,Arial Unicode MS,Avenir,Avenir Next,Avenir Next Condensed,Bahnschrift,Baskerville,Big Caslon,Bodoni 72,Bodoni 72 Oldstyle,Bodoni 72 Smallcaps,Bradley Hand,Brush Script MT,Calibri,Cambria,Cambria Math,Candara,Chalkboard,Chalkboard SE,Chalkduster,Charter,Cochin,Comic Sans MS,Consolas,Constantia,Copperplate,Corbel,Courier,Courier New,DIN Alternate,DIN Condensed,Didot,Ebrima,Franklin Gothic Medium,Futura,Gabriola,Gadugi,Geneva,Georgia,Gill Sans,Helvetica,Helvetica Neue,Herculanum,Hoefler Text,HoloLens MDL2 Assets,Impact,Impact,Ink Free,Javanese Text,Leelawadee UI,Lucida Console,Lucida Grande,Lucida Sans Unicode,Luminari,MS Gothic,MV Boli,Malgun Gothic,Marker Felt,Marlett,Menlo,Microsoft Himalaya,Microsoft JhengHei,Microsoft New Tai Lue,Microsoft PhagsPa,Microsoft Sans Serif,Microsoft Tai Le,Microsoft YaHei,Microsoft Yi Baiti,MingLiU-ExtB,Monaco,Mongolian Baiti,Myanmar Text,Nirmala UI,Noteworthy,Optima,Palatino,Palatino Linotype,Papyrus,Phosphate,Rockwell,Savoye LET,Segoe MDL2 Assets,Segoe Print,Segoe Script,Segoe UI,Segoe UI Emoji,Segoe UI Historic,Segoe UI Symbol,SignPainter,SimSun,Sitka,Skia,Snell Roundhand,Sylfaen,Symbol,Tahoma,Times,Times New Roman,Trattatello,Trebuchet MS,Verdana,Webdings,Wingdings,Yu Gothic,Zapfino";
    var eo = null;
    var ew = null;
    var cc = null;
    var n4 = null;
    var gj = null;
    var g4 = null;
    var cN = null;
    var lw = null;
    var gd = null;
    var n5 = null;
    var dY = null;
    var hX = null;
    var jw = null;
    var hN = null;
    var kE = null;
    var iR = null;
    var cf = null;
    var ld = null;
    var nW = null;
    var ij = null;
    var mJ = null;
    var lT = null;
    var aN = null;
    var bB = null;
    var dv = null;
    var oc = null;
    var bX = null;
    var k4 = null;
    var bL = null;
    var kJ = null;
    var gF = null;
    var iQ = null;
    var mM = null;
    var jd = null;
    var bP = null;
    var cl = null;
    var h1 = null;
    var et = null;
    var ez = null;
    var l2 = null;
    var hG = "selected_panel";
    var dJ = "mainCanvas";
    var gZ = "top";
    var jH = "top2";
    var eY = "left";
    var fv = "main";
    var i = "preview";
    var a6 = "preview2";
    var io = "right";
    var gv = "bottom";
    var i5 = "editor_update_language";
    var bJ = "mainLayout";
    var g6 = "left_update";
    var hA = "left_resize";
    var eS = "add_basic";
    var h2 = "add_char";
    var dR = "add_ident";
    var gG = "add_op";
    var nA = "add_const";
    var kI = "add_exp";
    var m7 = "add_arr_exp";
    var ll = "add_root";
    var fQ = "add_int";
    var aJ = "add_frac";
    var O = "add_sum";
    var fL = "add_limit";
    var ap = "add_deriv";
    var fw = "add_fence";
    var e6 = "add_table";
    var kZ = "add_matrix";
    var bT = "add_fun";
    var e9 = "add_accent";
    var cx = "add_enclose";
    var h7 = "add_newline";
    var jy = "add_unicode";
    var hf = "add_wizard";
    var fi = "main_resize";
    var bG = "main_fly_draw";
    var aZ = "main_fly_hide";
    var nf = "flyingInputText";
    var i4 = "mainScreen";
    var s = "menu_update_language";
    var ic = "menu_file_update";
    var hW = "menu_home_update";
    var dw = "menu_edit_update";
    var ck = "menu_undo_redo";
    var e = null;
    var bS = "preview_resize";
    var iT = "preview_update";
    var b7 = "preview_moveline";
    var fc = "update_properties";
    var fA = "prop_resize";
    var lh = "status_update_hierarchy";
    var mf = "goToElement";
    var d4 = "prop_style_border";
    var dq = "prop_style_margin";
    var m5 = "prop_style_padding";
    var kA = "prop_draw";
    var iU = "prop_enclose";
    var br = "prop_fence";
    var ki = "prop_frac";
    var lb = "prop_glyph";
    var ln = "http://";
    var m9 = "prop_gen";
    var gI = "prop_mlongdiv";
    var nc = "prop_multi";
    var mr = "prop_operator";
    var hS = "prop_over";
    var iE = "prop_padded";
    var aF = "prop_scarries";
    var Q = "prop_scarry";
    var j8 = "prop_sgroup";
    var ba = "prop_sline";
    var hR = "prop_space";
    var ha = "prop_sqrt";
    var cS = "prop_srow";
    var la = "prop_stack";
    var ag = "prop_style_enclose";
    var k7 = "prop_style_fence";
    var mp = "prop_style_frac";
    var P = "prop_style_numbers";
    var h5 = "prop_sub";
    var iI = "prop_subsup";
    var N = "prop_sup";
    var lm = "prop_td_table";
    var mE = "prop_table";
    var ea = "prop_tr_table";
    var by = "prop_token";
    var l8 = "prop_under";
    var jM = "prop_underover";

    function ft() {}
    ft.isWebApp = function () {
        return nY;
    };
    ft.setWebApp = function (ou) {
        nY = ou;
    };
    ft.getFolderUrlForFonts = function () {
        return eL;
    };
    ft.setFolderUrlForFonts = function (ou) {
        eL = ou;
    };
    ft.getFolderUrlForGlyphs = function () {
        return jD;
    };
    ft.setFolderUrlForGlyphs = function (ou) {
        jD = ou;
    };
    ft.getFolderUrlForCursor = function () {
        return eW;
    };
    ft.setFolderUrlForCursor = function (ou) {
        eW = ou;
    };
    ft.getColorOver = function () {
        return w;
    };
    ft.setColorOver = function (ou) {
        w = ou;
    };
    ft.getColorLink = function () {
        return cu;
    };
    ft.setColorLink = function (ou) {
        cu = ou;
    };
    ft.isMouseFunctionDisabled = function (ou) {
        return a8.indexOf("," + ou + ",") > -1;
    };
    ft.setMouseDisabled = function (ou) {
        a8 = ou;
    };

    function fe(ou) {
        this.acceptMathTag = true;
        this.settings;
        this.idManager;
        this.settings = ou;
        this.idManager = new nZ();
    }
    fe.getBeanNotMath = function (oy, ox) {
        oy = W.replace(oy, "<math", "<mrow");
        oy = W.replace(oy, "</math>", "</mrow>");
        var ou = new fe(ox);
        var ow = ou.createBeans(oy, false);
        ow.initChildren();
        var ov = new fC();
        ow.copyParentStyle(ov);
        return ow;
    };
    fe.createBeanStructure = function (ov, ou) {
        return fe.createBeanStructureGen(ov, ou, false);
    };
    fe.createBeanStructureExc = function (ov, ou) {
        return fe.createBeanStructureGen(ov, ou, true);
    };
    fe.createBeanStructureGen = function (ox, ow, ou) {
        var ov = new fC();
        ov.setDefaultValues(ow);
        return fe.createBeanStructureStyle(ox, ow, ov, ou);
    };
    fe.createBeanStructureStyle = function (oy, ow, ou, oC) {
        var ov = new fe(ow);
        var oA = ov.createBeans(oy, oC);
        var oB = oA;
        if (oB instanceof k) {
            oB.copyParentStyle(ou);
            return oB;
        }
        var ox = oB;
        var oz = new k(null);
        oz.setCurrentDefStyle(ox.getCurrentDefStyle());
        oz.addChild(oB);
        oz.copyParentStyle(ou);
        return oz;
    };
    fe.prototype.createBeans = function (ov, ou) {
        dK.ignoreWhitespace = false;
        dK.prettyPrinting = false;
        ov = W.deleteText(ov, "<!--", "-->");
        return this.createFromXML(mW.parse(ov), ou);
    };
    fe.prototype.createFromXML = function (ov, ou) {
        ov = this.changeNode(ov);
        var ow = this.loadNode(ov, null);
        return ow;
    };
    fe.prototype.loadNode = function (ox, ow) {
        var ov = null;
        var ou = ox.localName();
        if (ou == null) {
            ov = this.loadText(ox, ow);
        } else {
            ou = ou.toLowerCase();
            if (ou.indexOf(":") > -1) {
                ou = ou.substring(ou.indexOf(":") + 1, ou.length);
            }
            if (ou == "math" || ou == "mathml") {
                if (this.acceptMathTag) {
                    this.acceptMathTag = false;
                } else {
                    ou = "mrow";
                }
            }
            if (ou == "mrow") {
                ov = this.loadMrow(ox, ow);
            } else {
                if (ou == "math" || ou == "mathml") {
                    ov = this.loadMath(ox, ow);
                } else {
                    if (ou == "function") {
                        ov = this.loadGFunctionMath(ox, ow);
                    } else {
                        if (ou == "mstyle") {
                            ov = this.loadMStyle(ox, ow);
                        } else {
                            if (ou == "none") {
                                ov = new mx(ow);
                            } else {
                                if (ou == "empty") {
                                    ov = this.loadEmpty(ox, ow);
                                } else {
                                    if (ou == "mglyph") {
                                        ov = this.loadMglyph(ox, ow);
                                    } else {
                                        if (ou == "mi") {
                                            ov = this.loadMi(ox, ow);
                                        } else {
                                            if (ou == "ci") {
                                                ov = this.loadCi(ox, ow);
                                            } else {
                                                if (
                                                    ou == "mn" ||
                                                    ou == "digit"
                                                ) {
                                                    ov = this.loadMn(ox, ow);
                                                } else {
                                                    if (ou == "cn") {
                                                        ov = this.loadCn(
                                                            ox,
                                                            ow,
                                                        );
                                                    } else {
                                                        if (ou == "mo") {
                                                            ov = this.loadMo(
                                                                ox,
                                                                ow,
                                                            );
                                                        } else {
                                                            if (ou == "mtext") {
                                                                ov =
                                                                    this.loadMtext(
                                                                        ox,
                                                                        ow,
                                                                    );
                                                            } else {
                                                                if (
                                                                    ou ==
                                                                    "mspace"
                                                                ) {
                                                                    ov =
                                                                        this.loadMSpace(
                                                                            ox,
                                                                            ow,
                                                                        );
                                                                } else {
                                                                    if (
                                                                        ou ==
                                                                        "ms"
                                                                    ) {
                                                                        ov =
                                                                            this.loadMs(
                                                                                ox,
                                                                                ow,
                                                                            );
                                                                    } else {
                                                                        if (
                                                                            ou ==
                                                                            "mfrac"
                                                                        ) {
                                                                            ov =
                                                                                this.loadMfrac(
                                                                                    ox,
                                                                                    ow,
                                                                                );
                                                                        } else {
                                                                            if (
                                                                                ou ==
                                                                                "msqrt"
                                                                            ) {
                                                                                ov =
                                                                                    this.loadMSqrt(
                                                                                        ox,
                                                                                        ow,
                                                                                    );
                                                                            } else {
                                                                                if (
                                                                                    ou ==
                                                                                    "mroot"
                                                                                ) {
                                                                                    ov =
                                                                                        this.loadMRoot(
                                                                                            ox,
                                                                                            ow,
                                                                                        );
                                                                                } else {
                                                                                    if (
                                                                                        ou ==
                                                                                        "merror"
                                                                                    ) {
                                                                                        ov =
                                                                                            this.loadMError(
                                                                                                ox,
                                                                                                ow,
                                                                                            );
                                                                                    } else {
                                                                                        if (
                                                                                            ou ==
                                                                                            "mpadded"
                                                                                        ) {
                                                                                            ov =
                                                                                                this.loadMPadded(
                                                                                                    ox,
                                                                                                    ow,
                                                                                                );
                                                                                        } else {
                                                                                            if (
                                                                                                ou ==
                                                                                                "mphantom"
                                                                                            ) {
                                                                                                ov =
                                                                                                    this.loadMPhantom(
                                                                                                        ox,
                                                                                                        ow,
                                                                                                    );
                                                                                            } else {
                                                                                                if (
                                                                                                    ou ==
                                                                                                    "mfenced"
                                                                                                ) {
                                                                                                    ov =
                                                                                                        this.loadMfenced(
                                                                                                            ox,
                                                                                                            ow,
                                                                                                        );
                                                                                                } else {
                                                                                                    if (
                                                                                                        ou ==
                                                                                                        "menclose"
                                                                                                    ) {
                                                                                                        ov =
                                                                                                            this.loadMenclose(
                                                                                                                ox,
                                                                                                                ow,
                                                                                                            );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            ou ==
                                                                                                            "msub"
                                                                                                        ) {
                                                                                                            ov =
                                                                                                                this.loadMSub(
                                                                                                                    ox,
                                                                                                                    ow,
                                                                                                                );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                ou ==
                                                                                                                "msup"
                                                                                                            ) {
                                                                                                                ov =
                                                                                                                    this.loadMSup(
                                                                                                                        ox,
                                                                                                                        ow,
                                                                                                                    );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    ou ==
                                                                                                                    "msubsup"
                                                                                                                ) {
                                                                                                                    ov =
                                                                                                                        this.loadMSubSup(
                                                                                                                            ox,
                                                                                                                            ow,
                                                                                                                        );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        ou ==
                                                                                                                        "munder"
                                                                                                                    ) {
                                                                                                                        ov =
                                                                                                                            this.loadMUnder(
                                                                                                                                ox,
                                                                                                                                ow,
                                                                                                                            );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            ou ==
                                                                                                                            "mover"
                                                                                                                        ) {
                                                                                                                            ov =
                                                                                                                                this.loadMOver(
                                                                                                                                    ox,
                                                                                                                                    ow,
                                                                                                                                );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                ou ==
                                                                                                                                "munderover"
                                                                                                                            ) {
                                                                                                                                ov =
                                                                                                                                    this.loadMUnderOver(
                                                                                                                                        ox,
                                                                                                                                        ow,
                                                                                                                                    );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    ou ==
                                                                                                                                    "mmultiscripts"
                                                                                                                                ) {
                                                                                                                                    ov =
                                                                                                                                        this.loadMMultiscript(
                                                                                                                                            ox,
                                                                                                                                            ow,
                                                                                                                                        );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        ou ==
                                                                                                                                        "mprescripts"
                                                                                                                                    ) {
                                                                                                                                        ov =
                                                                                                                                            new ds(
                                                                                                                                                ow,
                                                                                                                                            );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            ou ==
                                                                                                                                            "mtablelabel"
                                                                                                                                        ) {
                                                                                                                                            ov =
                                                                                                                                                this.loadMTableLabel(
                                                                                                                                                    ox,
                                                                                                                                                    ow,
                                                                                                                                                );
                                                                                                                                        } else {
                                                                                                                                            if (
                                                                                                                                                ou ==
                                                                                                                                                "mtablereal"
                                                                                                                                            ) {
                                                                                                                                                ov =
                                                                                                                                                    this.loadMTable(
                                                                                                                                                        ox,
                                                                                                                                                        ow,
                                                                                                                                                    );
                                                                                                                                            } else {
                                                                                                                                                if (
                                                                                                                                                    ou ==
                                                                                                                                                    "mlabeledtr"
                                                                                                                                                ) {
                                                                                                                                                    ov =
                                                                                                                                                        this.loadMlabeledtr(
                                                                                                                                                            ox,
                                                                                                                                                            ow,
                                                                                                                                                        );
                                                                                                                                                } else {
                                                                                                                                                    if (
                                                                                                                                                        ou ==
                                                                                                                                                        "mtr"
                                                                                                                                                    ) {
                                                                                                                                                        ov =
                                                                                                                                                            this.loadMTr(
                                                                                                                                                                ox,
                                                                                                                                                                ow,
                                                                                                                                                            );
                                                                                                                                                    } else {
                                                                                                                                                        if (
                                                                                                                                                            ou ==
                                                                                                                                                            "mtd"
                                                                                                                                                        ) {
                                                                                                                                                            ov =
                                                                                                                                                                this.loadMTd(
                                                                                                                                                                    ox,
                                                                                                                                                                    ow,
                                                                                                                                                                );
                                                                                                                                                        } else {
                                                                                                                                                            if (
                                                                                                                                                                ou ==
                                                                                                                                                                "maligngroup"
                                                                                                                                                            ) {
                                                                                                                                                                ov =
                                                                                                                                                                    this.loadMaligngroup(
                                                                                                                                                                        ox,
                                                                                                                                                                        ow,
                                                                                                                                                                    );
                                                                                                                                                            } else {
                                                                                                                                                                if (
                                                                                                                                                                    ou ==
                                                                                                                                                                    "malignmark"
                                                                                                                                                                ) {
                                                                                                                                                                    ov =
                                                                                                                                                                        this.loadMalignmark(
                                                                                                                                                                            ox,
                                                                                                                                                                            ow,
                                                                                                                                                                        );
                                                                                                                                                                } else {
                                                                                                                                                                    if (
                                                                                                                                                                        ou ==
                                                                                                                                                                        "mstack"
                                                                                                                                                                    ) {
                                                                                                                                                                        ov =
                                                                                                                                                                            this.loadMStack(
                                                                                                                                                                                ox,
                                                                                                                                                                                ow,
                                                                                                                                                                            );
                                                                                                                                                                    } else {
                                                                                                                                                                        if (
                                                                                                                                                                            ou ==
                                                                                                                                                                            "mlongdiv"
                                                                                                                                                                        ) {
                                                                                                                                                                            ov =
                                                                                                                                                                                this.loadMLongdiv(
                                                                                                                                                                                    ox,
                                                                                                                                                                                    ow,
                                                                                                                                                                                );
                                                                                                                                                                        } else {
                                                                                                                                                                            if (
                                                                                                                                                                                ou ==
                                                                                                                                                                                "msgroup"
                                                                                                                                                                            ) {
                                                                                                                                                                                ov =
                                                                                                                                                                                    this.loadMSGroup(
                                                                                                                                                                                        ox,
                                                                                                                                                                                        ow,
                                                                                                                                                                                    );
                                                                                                                                                                            } else {
                                                                                                                                                                                if (
                                                                                                                                                                                    ou ==
                                                                                                                                                                                    "msrow"
                                                                                                                                                                                ) {
                                                                                                                                                                                    ov =
                                                                                                                                                                                        this.loadMSRow(
                                                                                                                                                                                            ox,
                                                                                                                                                                                            ow,
                                                                                                                                                                                        );
                                                                                                                                                                                } else {
                                                                                                                                                                                    if (
                                                                                                                                                                                        ou ==
                                                                                                                                                                                        "mscarries"
                                                                                                                                                                                    ) {
                                                                                                                                                                                        ov =
                                                                                                                                                                                            this.loadMSCarries(
                                                                                                                                                                                                ox,
                                                                                                                                                                                                ow,
                                                                                                                                                                                            );
                                                                                                                                                                                    } else {
                                                                                                                                                                                        if (
                                                                                                                                                                                            ou ==
                                                                                                                                                                                            "mscarry"
                                                                                                                                                                                        ) {
                                                                                                                                                                                            ov =
                                                                                                                                                                                                this.loadMSCarry(
                                                                                                                                                                                                    ox,
                                                                                                                                                                                                    ow,
                                                                                                                                                                                                );
                                                                                                                                                                                        } else {
                                                                                                                                                                                            if (
                                                                                                                                                                                                ou ==
                                                                                                                                                                                                "msline"
                                                                                                                                                                                            ) {
                                                                                                                                                                                                ov =
                                                                                                                                                                                                    this.loadMSLine(
                                                                                                                                                                                                        ox,
                                                                                                                                                                                                        ow,
                                                                                                                                                                                                    );
                                                                                                                                                                                            } else {
                                                                                                                                                                                                if (
                                                                                                                                                                                                    ou ==
                                                                                                                                                                                                    "maction"
                                                                                                                                                                                                ) {
                                                                                                                                                                                                    ov =
                                                                                                                                                                                                        this.loadMaction(
                                                                                                                                                                                                            ox,
                                                                                                                                                                                                            ow,
                                                                                                                                                                                                        );
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    if (
                                                                                                                                                                                                        ou ==
                                                                                                                                                                                                        "apply"
                                                                                                                                                                                                    ) {
                                                                                                                                                                                                        ov =
                                                                                                                                                                                                            this.loadApply(
                                                                                                                                                                                                                ox,
                                                                                                                                                                                                                ow,
                                                                                                                                                                                                            );
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                        if (
                                                                                                                                                                                                            ou ==
                                                                                                                                                                                                            "degree"
                                                                                                                                                                                                        ) {
                                                                                                                                                                                                            ov =
                                                                                                                                                                                                                this.loadDegree(
                                                                                                                                                                                                                    ox,
                                                                                                                                                                                                                    ow,
                                                                                                                                                                                                                );
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                            return null;
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (ov == null) {
            return null;
        }
        this.loadAttributes(ox, ov);
        this.addChildren(ox, ov);
        return ov;
    };
    fe.isPresentation = function (ou) {
        if (
            ou == "math" ||
            ou == "mathml" ||
            ou == "mrow" ||
            ou == "mstyle" ||
            ou == "mglyph" ||
            ou == "mi" ||
            ou == "mn" ||
            ou == "mo" ||
            ou == "mtext" ||
            ou == "mspace" ||
            ou == "ms" ||
            ou == "mfrac" ||
            ou == "msqrt" ||
            ou == "mroot" ||
            ou == "merror" ||
            ou == "mpadded" ||
            ou == "mphantom" ||
            ou == "mfenced" ||
            ou == "menclose" ||
            ou == "msub" ||
            ou == "msup" ||
            ou == "msubsup" ||
            ou == "munder" ||
            ou == "mover" ||
            ou == "munderover" ||
            ou == "mmultiscripts" ||
            ou == "mprescripts" ||
            ou == "mtable" ||
            ou == "mlabeledtr" ||
            ou == "mtr" ||
            ou == "mtd" ||
            ou == "maligngroup" ||
            ou == "malignmark" ||
            ou == "mstack" ||
            ou == "mlongdiv" ||
            ou == "msgroup" ||
            ou == "msrow" ||
            ou == "mscarries" ||
            ou == "mscarry" ||
            ou == "msline" ||
            ou == "none" ||
            ou == "maction"
        ) {
            return true;
        }
        return false;
    };
    fe.prototype.getDefaultSettings = function (ow, ov) {
        var ou = new kf();
        if (ov != null && ov.getCurrentDefStyle() != null) {
            ou = ov.getCurrentDefStyle().getCopy();
        }
        if (ow.attribute("scriptlevel") != null) {
            ou.setScriptlevel(ow.attribute("scriptlevel"));
        }
        if (ow.attribute("displaystyle") != null) {
            ou.setDisplaystyle(ow.attribute("displaystyle"));
        }
        if (ow.attribute("scriptsizemultiplier") != null) {
            ou.setScriptsizemultiplier(
                lv.getDoubleValue(ow.attribute("scriptsizemultiplier"), 0.65),
            );
        } else {
            ou.setScriptsizemultiplier(this.settings.getScriptsizemultiplier());
        }
        if (ow.attribute("scriptminsize") != null) {
            ou.setScriptminsize(ow.attribute("scriptminsize"));
        } else {
            ou.setScriptminsize(this.settings.getScriptminsize() + "");
        }
        if (ow.attribute("infixlinebreakstyle") != null) {
            ou.setInfixlinebreakstyle(ow.attribute("infixlinebreakstyle"));
        }
        if (ow.attribute("decimalpoint") != null) {
            ou.setDecimalpoint(h.convertToChars(ow.attribute("decimalpoint")));
        } else {
            ou.setDecimalpoint(
                h.convertToChars(this.settings.getDecimalpoint()),
            );
        }
        if (ow.attribute("accent") != null) {
            ou.setAccent(ow.attribute("accent"));
        }
        if (ow.attribute("accentunder") != null) {
            ou.setAccentunder(ow.attribute("accentunder"));
        }
        if (ow.attribute("align") != null) {
            ou.setAlign(ow.attribute("align"));
        }
        if (ow.attribute("alignmentscope") != null) {
            ou.setAlignmentscope(ow.attribute("alignmentscope"));
        }
        if (ow.attribute("bevelled") != null) {
            ou.setBevelled(ow.attribute("bevelled"));
        }
        if (ow.attribute("charalign") != null) {
            ou.setCharalign(ow.attribute("charalign"));
        }
        if (ow.attribute("charspacing") != null) {
            ou.setCharspacing(ow.attribute("charspacing"));
        }
        if (ow.attribute("close") != null) {
            ou.setClose(h.convertToChars(ow.attribute("close")));
        }
        if (ow.attribute("columnalign") != null) {
            ou.setColumnalign(ow.attribute("columnalign"));
        }
        if (ow.attribute("columnlines") != null) {
            ou.setColumnlines(ow.attribute("columnlines"));
        }
        if (ow.attribute("columnspacing") != null) {
            ou.setColumnspacing(ow.attribute("columnspacing"));
        }
        if (ow.attribute("columnspan") != null) {
            ou.setColumnspan(ow.attribute("columnspan"));
        }
        if (ow.attribute("columnwidth") != null) {
            ou.setColumnwidth(ow.attribute("columnwidth"));
        }
        if (ow.attribute("crossout") != null) {
            ou.setCrossout(ow.attribute("crossout"));
        }
        if (ow.attribute("denomalign") != null) {
            ou.setDenomalign(ow.attribute("denomalign"));
        }
        if (ow.attribute("depth") != null) {
            ou.setDepth(ow.attribute("depth"));
        }
        if (ow.attribute("dir") != null) {
            ou.setDir(ow.attribute("dir"));
        } else {
            ou.setDir(this.settings.getDir());
        }
        if (ow.attribute("edge") != null) {
            ou.setEdge(ow.attribute("edge"));
        }
        if (ow.attribute("equalcolumns") != null) {
            ou.setEqualcolumns(ow.attribute("equalcolumns"));
        }
        if (ow.attribute("equalrows") != null) {
            ou.setEqualrows(ow.attribute("equalrows"));
        }
        if (ow.attribute("fence") != null) {
            ou.setFence(ow.attribute("fence"));
        }
        if (ow.attribute("form") != null) {
            ou.setForm(ow.attribute("form"));
        }
        if (ow.attribute("frame") != null) {
            ou.setFrame(ow.attribute("frame"));
        }
        if (ow.attribute("framespacing") != null) {
            ou.setFramespacing(ow.attribute("framespacing"));
        }
        if (ow.attribute("groupalign") != null) {
            ou.setGroupalign(ow.attribute("groupalign"));
        }
        if (ow.attribute("height") != null) {
            ou.setHeight(ow.attribute("height"));
        }
        if (ow.attribute("indentalign") != null) {
            ou.setIndentalign(ow.attribute("indentalign"));
        }
        if (ow.attribute("indentalignfirst") != null) {
            ou.setIndentalignfirst(ow.attribute("indentalignfirst"));
        }
        if (ow.attribute("indentalignlast") != null) {
            ou.setIndentalignlast(ow.attribute("indentalignlast"));
        }
        if (ow.attribute("indentshift") != null) {
            ou.setIndentshift(ow.attribute("indentshift"));
        }
        if (ow.attribute("indentshiftfirst") != null) {
            ou.setIndentshiftfirst(ow.attribute("indentshiftfirst"));
        }
        if (ow.attribute("indentshiftlast") != null) {
            ou.setIndentshiftlast(ow.attribute("indentshiftlast"));
        }
        if (ow.attribute("indenttarget") != null) {
            ou.setIndenttarget(ow.attribute("indenttarget"));
        }
        if (ow.attribute("largeop") != null) {
            ou.setLargeop(ow.attribute("largeop"));
        }
        if (ow.attribute("leftoverhang") != null) {
            ou.setLeftoverhang(ow.attribute("leftoverhang"));
        }
        if (ow.attribute("length") != null) {
            ou.setLength(ow.attribute("length"));
        }
        if (ow.attribute("linebreak") != null) {
            ou.setLinebreak(ow.attribute("linebreak"));
        }
        if (ow.attribute("linebreakmultchar") != null) {
            ou.setLinebreakmultchar(ow.attribute("linebreakmultchar"));
        }
        if (ow.attribute("linebreakstyle") != null) {
            ou.setLinebreakstyle(ow.attribute("linebreakstyle"));
        }
        if (ow.attribute("lineleading") != null) {
            ou.setLineleading(ow.attribute("lineleading"));
        }
        if (ow.attribute("linethickness") != null) {
            ou.setLinethickness(ow.attribute("linethickness"));
        }
        if (ow.attribute("location") != null) {
            ou.setLocation(ow.attribute("location"));
        }
        if (ow.attribute("longdivstyle") != null) {
            ou.setLongdivstyle(ow.attribute("longdivstyle"));
        }
        if (ow.attribute("lquote") != null) {
            ou.setLquote(ow.attribute("lquote"));
        }
        if (ou.getLquote() == null) {
            ou.setLquote(this.settings.getLquote());
        }
        if (ow.attribute("lspace") != null) {
            ou.setLspace(ow.attribute("lspace"));
        }
        if (ow.attribute("maxsize") != null) {
            ou.setMaxsize(ow.attribute("maxsize"));
        }
        if (ow.attribute("minlabelspacing") != null) {
            ou.setMinlabelspacing(ow.attribute("minlabelspacing"));
        }
        if (ow.attribute("minsize") != null) {
            ou.setMinsize(ow.attribute("minsize"));
        }
        if (ow.attribute("movablelimits") != null) {
            ou.setMovablelimits(ow.attribute("movablelimits"));
        }
        if (ow.attribute("mslinethickness") != null) {
            ou.setMslinethickness(ow.attribute("mslinethickness"));
        }
        if (ow.attribute("notation") != null) {
            ou.setNotation(ow.attribute("notation"));
        }
        if (ow.attribute("numalign") != null) {
            ou.setNumalign(ow.attribute("numalign"));
        }
        if (ow.attribute("open") != null) {
            ou.setOpen(h.convertToChars(ow.attribute("open")));
        }
        if (ow.attribute("position") != null) {
            ou.setPosition(ow.attribute("position"));
        }
        if (ow.attribute("rightoverhang") != null) {
            ou.setRightoverhang(ow.attribute("rightoverhang"));
        }
        if (ow.attribute("rowalign") != null) {
            ou.setRowalign(ow.attribute("rowalign"));
        }
        if (ow.attribute("rowlines") != null) {
            ou.setRowlines(ow.attribute("rowlines"));
        }
        if (ow.attribute("rowspacing") != null) {
            ou.setRowspacing(ow.attribute("rowspacing"));
        }
        if (ow.attribute("rowspan") != null) {
            ou.setRowspan(ow.attribute("rowspan"));
        }
        if (ow.attribute("rquote") != null) {
            ou.setRquote(ow.attribute("rquote"));
        }
        if (ou.getRquote() == null) {
            ou.setRquote(this.settings.getRquote());
        }
        if (ow.attribute("rspace") != null) {
            ou.setRspace(ow.attribute("rspace"));
        }
        if (ow.attribute("selection") != null) {
            ou.setSelection(ow.attribute("selection"));
        }
        if (ow.attribute("separators") != null) {
            ou.setSeparators(h.convertToChars(ow.attribute("separators")));
        }
        if (ow.attribute("shift") != null) {
            ou.setShift(ow.attribute("shift"));
        }
        if (ow.attribute("side") != null) {
            ou.setSide(ow.attribute("side"));
        }
        if (ow.attribute("stackalign") != null) {
            ou.setStackalign(ow.attribute("stackalign"));
        }
        if (ow.attribute("stretchy") != null) {
            ou.setStretchy(ow.attribute("stretchy"));
        }
        if (ow.attribute("subscriptshift") != null) {
            ou.setSubscriptshift(ow.attribute("subscriptshift"));
        } else {
            ou.setSubscriptshift(this.settings.getSubscriptshift());
        }
        if (ow.attribute("superscriptshift") != null) {
            ou.setSuperscriptshift(ow.attribute("superscriptshift"));
        } else {
            ou.setSuperscriptshift(this.settings.getSuperscriptshift());
        }
        if (ow.attribute("symmetric") != null) {
            ou.setSymmetric(ow.attribute("symmetric"));
        }
        if (ow.attribute("valign") != null) {
            ou.setValign(ow.attribute("valign"));
        }
        if (ow.attribute("voffset") != null) {
            ou.setVoffset(ow.attribute("voffset"));
        }
        if (ow.attribute("width") != null) {
            ou.setWidth(ow.attribute("width"));
        }
        if (ow.attribute("enclosethickness") != null) {
            ou.setEnclosethickness(ow.attribute("enclosethickness"));
        }
        if (ow.attribute("encloseradius") != null) {
            ou.setEncloseradius(ow.attribute("encloseradius"));
        }
        if (ow.attribute("sqrtclosed") != null) {
            ou.setSqrtClosed(true);
        }
        if (ow.attribute("sqrtclosedlength") != null) {
            ou.setSqrtClosedLength(ow.attribute("sqrtclosedlength"));
        }
        if (ow.attribute("sqrtthickness") != null) {
            ou.setSqrtThickness(ow.attribute("sqrtthickness"));
        }
        if (ow.attribute("defaultpadding") != null) {
            ou.setDefaultPadding(
                lv.getIntegerValue(
                    ow.attribute("defaultpadding"),
                    this.settings.getDefaultPadding(),
                ),
            );
        } else {
            ou.setDefaultPadding(this.settings.getDefaultPadding());
        }
        return ou;
    };
    fe.prototype.loadAttributes = function (ov, ou) {
        this.loadCommunAttributes(ov, ou);
        this.loadMathML1Attributes(ov, ou);
        fe.loadStyleAttributes(ov.attribute("style"), ou);
        lQ.getComputedStyle(ou);
        this.loadMathML3Attributes(ov, ou);
        this.loadDeprecatedFMathAttributes(ov, ou);
    };
    fe.prototype.loadDeprecatedFMathAttributes = function (ow, ov) {
        var ox = ov;
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("border") != null) {
            ox.getCssstyle().setBorder(ow.attribute("border"));
        }
        if (ow.attribute("bordercolor") != null) {
            ox.getCssstyle().setBorderColor(ow.attribute("bordercolor"));
        }
        if (ow.attribute("shiftX") != null) {
            ox.getCssstyle().setPaddingLeft(ow.attribute("shiftX"));
        }
        if (ow.attribute("shiftY") != null) {
            ox.getCssstyle().setPaddingTop(ow.attribute("shiftY"));
        }
        if (ow.attribute("baseline") != null) {
            ox.getStyle().setDrawBaseline(true);
        } else {
            ox.getStyle().setDrawBaseline(ou.isDrawBaseline());
        }
        if (ow.attribute("axisline") != null) {
            ox.getStyle().setDrawAxisline(true);
        } else {
            ox.getStyle().setDrawAxisline(ou.isDrawAxisline());
        }
        if (ow.attribute("superscriptline") != null) {
            ox.getStyle().setDrawSuperscriptline(true);
        } else {
            ox.getStyle().setDrawSuperscriptline(ou.isDrawSuperscriptline());
        }
        if (ow.attribute("maxwidthline") != null) {
            ox.getStyle().setDrawMaxwidthline(true);
        } else {
            ox.getStyle().setDrawMaxwidthline(ou.isDrawMaxwidthline());
        }
    };
    fe.prototype.loadCommunAttributes = function (ov, ou) {
        if (ov.attribute("id") != null) {
            ou.setId(ov.attribute("id"));
            ou.setAttribute("id", ov.attribute("id"));
        } else {
            ou.setId(this.idManager.nextId());
        }
        if (ov.attribute("xref") != null) {
            ou.setXref(ov.attribute("xref"));
        }
        if (ov.attribute("href") != null) {
            ou.setHref(ov.attribute("href"));
        }
        if (ov.attribute("class") != null) {
            ou.setKlass(ov.attribute("class"));
        }
        if (ov.attribute("color") != null) {
            ou.setAttribute("mathcolor", ov.attribute("color"));
        }
        if (ov.attribute("mathcolor") != null) {
            ou.setAttribute("mathcolor", ov.attribute("mathcolor"));
        }
        if (ov.attribute("background") != null) {
            ou.setAttribute("mathbackground", ov.attribute("background"));
        }
        if (ov.attribute("mathbackground") != null) {
            ou.setAttribute("mathbackground", ov.attribute("mathbackground"));
        }
        if (ov.attribute("editorSelected") != null) {
            ou.setAttribute("editorSelected", ov.attribute("editorSelected"));
        }
        if (ov.attribute("minimize") != null) {
            ou.setToBeMinimized("true" == ov.attribute("minimize"));
        }
    };
    fe.prototype.loadMathML1Attributes = function (ov, ou) {
        if (ov.attribute("fontfamily") != null) {
            ou.setAttribute("mathvariant", ov.attribute("fontfamily"));
        }
        if (ov.attribute("fontweight") != null) {
            ou.setAttribute("fontweight", ov.attribute("fontweight"));
        }
        if (ov.attribute("fontstyle") != null) {
            ou.setAttribute("fontstyle", ov.attribute("fontstyle"));
        }
        if (ov.attribute("fontsize") != null) {
            ou.setAttribute("mathsize", ov.attribute("fontsize"));
        }
    };
    fe.loadStyleAttributes = function (ou, ov) {
        if (ou == null) {
            return;
        }
        ov.setAttribute("style", ou);
        fe.loadStyleAttributesForBox(ou, ov);
    };
    fe.loadStyleAttributesForBox = function (oE, ox) {
        if (oE == null) {
            return;
        }
        var oA = oE.toLowerCase().split(";");
        for (var ow = 0; ow < oA.length; ow++) {
            var oB = W.trim(oA[ow]);
            if (oB.toLowerCase().indexOf("font-family") > -1) {
                var oz = oA[ow];
                if (oz.indexOf(":") > -1) {
                    oz = oz.substring(oz.indexOf(":") + 1, oz.length);
                    oz = W.trim(oz);
                    ox.setAttribute("mathvariant", oz);
                }
                break;
            }
        }
        for (var ou = 0; ou < oA.length; ou++) {
            var ov = W.trim(oA[ou]);
            if (ov.indexOf(":") > -1) {
                var oy = ov.indexOf(":");
                var oD = ov.substring(0, oy);
                oD = W.trim(oD);
                var oC = ov.substring(oy + 1, ov.length);
                oC = W.trim(oC);
                if (oD == "font-size") {
                    ox.setAttribute("mathsize", oC);
                } else {
                    if (oD == "font-weight") {
                        ox.setAttribute("fontweight", oC);
                    } else {
                        if (oD == "font-style") {
                            ox.setAttribute("fontstyle", oC);
                        } else {
                            if (oD == "color") {
                                ox.setAttribute("mathcolor", oC);
                            } else {
                                if (oD == "background") {
                                    ox.setAttribute("mathbackground", oC);
                                } else {
                                    if (oD == "width") {
                                        ox.getCssstyle().setWidth(oC);
                                    } else {
                                        if (oD == "height") {
                                            ox.getCssstyle().setHeight(oC);
                                        } else {
                                            if (oD == "align") {
                                                ox.getCssstyle().setAlign(oC);
                                            } else {
                                                if (oD == "vertical-align") {
                                                    ox.getCssstyle().setValign(
                                                        oC,
                                                    );
                                                } else {
                                                    if (oD == "valign") {
                                                        ox.getCssstyle().setValign(
                                                            oC,
                                                        );
                                                    } else {
                                                        if (oD == "border") {
                                                            ox.getCssstyle().setBorder(
                                                                oC,
                                                            );
                                                        } else {
                                                            if (
                                                                oD ==
                                                                "border-top"
                                                            ) {
                                                                ox.getCssstyle().setBorderTop(
                                                                    oC,
                                                                );
                                                            } else {
                                                                if (
                                                                    oD ==
                                                                    "border-bottom"
                                                                ) {
                                                                    ox.getCssstyle().setBorderBottom(
                                                                        oC,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        oD ==
                                                                        "border-left"
                                                                    ) {
                                                                        ox.getCssstyle().setBorderLeft(
                                                                            oC,
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            oD ==
                                                                            "border-right"
                                                                        ) {
                                                                            ox.getCssstyle().setBorderRight(
                                                                                oC,
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                oD ==
                                                                                "border-top-color"
                                                                            ) {
                                                                                ox.getCssstyle().setBorderTopColor(
                                                                                    oC,
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    oD ==
                                                                                    "border-top-style"
                                                                                ) {
                                                                                    ox.getCssstyle().setBorderTopStyle(
                                                                                        oC,
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        oD ==
                                                                                        "border-top-width"
                                                                                    ) {
                                                                                        ox.getCssstyle().setBorderTopWidth(
                                                                                            oC,
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            oD ==
                                                                                            "border-bottom-color"
                                                                                        ) {
                                                                                            ox.getCssstyle().setBorderBottomColor(
                                                                                                oC,
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                oD ==
                                                                                                "border-bottom-style"
                                                                                            ) {
                                                                                                ox.getCssstyle().setBorderBottomStyle(
                                                                                                    oC,
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    oD ==
                                                                                                    "border-bottom-width"
                                                                                                ) {
                                                                                                    ox.getCssstyle().setBorderBottomWidth(
                                                                                                        oC,
                                                                                                    );
                                                                                                } else {
                                                                                                    if (
                                                                                                        oD ==
                                                                                                        "border-left-color"
                                                                                                    ) {
                                                                                                        ox.getCssstyle().setBorderLeftColor(
                                                                                                            oC,
                                                                                                        );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            oD ==
                                                                                                            "border-left-style"
                                                                                                        ) {
                                                                                                            ox.getCssstyle().setBorderLeftStyle(
                                                                                                                oC,
                                                                                                            );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                oD ==
                                                                                                                "border-left-width"
                                                                                                            ) {
                                                                                                                ox.getCssstyle().setBorderLeftWidth(
                                                                                                                    oC,
                                                                                                                );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    oD ==
                                                                                                                    "border-right-color"
                                                                                                                ) {
                                                                                                                    ox.getCssstyle().setBorderRightColor(
                                                                                                                        oC,
                                                                                                                    );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        oD ==
                                                                                                                        "border-right-style"
                                                                                                                    ) {
                                                                                                                        ox.getCssstyle().setBorderRightStyle(
                                                                                                                            oC,
                                                                                                                        );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            oD ==
                                                                                                                            "border-right-width"
                                                                                                                        ) {
                                                                                                                            ox.getCssstyle().setBorderRightWidth(
                                                                                                                                oC,
                                                                                                                            );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                oD ==
                                                                                                                                "border-color"
                                                                                                                            ) {
                                                                                                                                ox.getCssstyle().setBorderColor(
                                                                                                                                    oC,
                                                                                                                                );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    oD ==
                                                                                                                                    "border-style"
                                                                                                                                ) {
                                                                                                                                    ox.getCssstyle().setBorderStyle(
                                                                                                                                        oC,
                                                                                                                                    );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        oD ==
                                                                                                                                        "border-width"
                                                                                                                                    ) {
                                                                                                                                        ox.getCssstyle().setBorderWidth(
                                                                                                                                            oC,
                                                                                                                                        );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            oD ==
                                                                                                                                            "margin"
                                                                                                                                        ) {
                                                                                                                                            ox.getCssstyle().setMargin(
                                                                                                                                                oC,
                                                                                                                                            );
                                                                                                                                        } else {
                                                                                                                                            if (
                                                                                                                                                oD ==
                                                                                                                                                "margin-top"
                                                                                                                                            ) {
                                                                                                                                                ox.getCssstyle().setMarginTop(
                                                                                                                                                    oC,
                                                                                                                                                );
                                                                                                                                            } else {
                                                                                                                                                if (
                                                                                                                                                    oD ==
                                                                                                                                                    "margin-bottom"
                                                                                                                                                ) {
                                                                                                                                                    ox.getCssstyle().setMarginBottom(
                                                                                                                                                        oC,
                                                                                                                                                    );
                                                                                                                                                } else {
                                                                                                                                                    if (
                                                                                                                                                        oD ==
                                                                                                                                                        "margin-left"
                                                                                                                                                    ) {
                                                                                                                                                        ox.getCssstyle().setMarginLeft(
                                                                                                                                                            oC,
                                                                                                                                                        );
                                                                                                                                                    } else {
                                                                                                                                                        if (
                                                                                                                                                            oD ==
                                                                                                                                                            "margin-right"
                                                                                                                                                        ) {
                                                                                                                                                            ox.getCssstyle().setMarginRight(
                                                                                                                                                                oC,
                                                                                                                                                            );
                                                                                                                                                        } else {
                                                                                                                                                            if (
                                                                                                                                                                oD ==
                                                                                                                                                                "padding"
                                                                                                                                                            ) {
                                                                                                                                                                ox.getCssstyle().setPadding(
                                                                                                                                                                    oC,
                                                                                                                                                                );
                                                                                                                                                            } else {
                                                                                                                                                                if (
                                                                                                                                                                    oD ==
                                                                                                                                                                    "padding-top"
                                                                                                                                                                ) {
                                                                                                                                                                    ox.getCssstyle().setPaddingTop(
                                                                                                                                                                        oC,
                                                                                                                                                                    );
                                                                                                                                                                } else {
                                                                                                                                                                    if (
                                                                                                                                                                        oD ==
                                                                                                                                                                        "padding-bottom"
                                                                                                                                                                    ) {
                                                                                                                                                                        ox.getCssstyle().setPaddingBottom(
                                                                                                                                                                            oC,
                                                                                                                                                                        );
                                                                                                                                                                    } else {
                                                                                                                                                                        if (
                                                                                                                                                                            oD ==
                                                                                                                                                                            "padding-left"
                                                                                                                                                                        ) {
                                                                                                                                                                            ox.getCssstyle().setPaddingLeft(
                                                                                                                                                                                oC,
                                                                                                                                                                            );
                                                                                                                                                                        } else {
                                                                                                                                                                            if (
                                                                                                                                                                                oD ==
                                                                                                                                                                                "padding-right"
                                                                                                                                                                            ) {
                                                                                                                                                                                ox.getCssstyle().setPaddingRight(
                                                                                                                                                                                    oC,
                                                                                                                                                                                );
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    fe.prototype.loadMathML3Attributes = function (ov, ou) {
        if (ov.attribute("mathvariant") != null) {
            ou.setAttribute("mathvariant", ov.attribute("mathvariant"));
        }
        if (ov.attribute("mathsize") != null) {
            ou.setAttribute("mathsize", ov.attribute("mathsize"));
        }
        if (ov.attribute("dir") != null) {
            ou.setAttribute("dir", ov.attribute("dir"));
        }
        if (ov.attribute("width") != null) {
            ou.getCssstyle().setWidth(ov.attribute("width"));
        }
        if (ov.attribute("maxwidth") != null) {
            ou.getCssstyle().setMaxWidth(ov.attribute("maxwidth"));
        }
        if (ov.attribute("overflow") != null) {
            ou.getCssstyle().setOverflow(ov.attribute("overflow"));
        }
        if (ov.attribute("height") != null) {
            ou.getCssstyle().setHeight(ov.attribute("height"));
        }
        if (ov.attribute("align") != null) {
            ou.getCssstyle().setAlign(ov.attribute("align"));
        }
        if (ov.attribute("valign") != null) {
            ou.getCssstyle().setValign(ov.attribute("valign"));
        }
    };
    fe.prototype.loadMath = function (ow, ov) {
        var ox = new k(ov);
        ox.setCurrentDefStyle(this.getDefaultSettings(ow, ox));
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("display") != null) {
            ou.setDisplaystyle(
                ow.attribute("display") == "inline" ? "false" : "true",
            );
        } else {
            ou.setDisplaystyle("true");
        }
        this.loadMrowAttributes(ow, ox);
        return ox;
    };
    fe.prototype.loadGFunctionMath = function (ov, ou) {
        var ow = new gu(ou);
        if (ov.attribute("name") != null) {
            ow.setName(ov.attribute("name"));
        }
        ow.setCurrentDefStyle(this.getDefaultSettings(ov, ow));
        return ow;
    };
    fe.prototype.loadMStyle = function (ov, ou) {
        var ow = new iJ(ou);
        ow.setCurrentDefStyle(this.getDefaultSettings(ov, ou));
        this.loadMrowAttributes(ov, ow);
        return ow;
    };
    fe.prototype.addChildren = function (oy, ox) {
        for (var ov = 0; ov < oy.getChildren().length; ov++) {
            var ow = oy.getChildren()[ov];
            var ou = ow.localName();
            if (ou != null && ou == "mtable") {
                ow.setName("mtablereal");
                var oz = new dK();
                oz.setName("mtablelabel");
                oz.appendChild(ow);
                ow = oz;
            }
            var oA = this.loadNode(ow, ox);
            if (oA != null) {
                if (oA instanceof al) {
                    if (!(ox instanceof au)) {
                        return;
                    }
                } else {
                    if (oA instanceof au) {
                        if (!(ox instanceof iF)) {
                            return;
                        }
                    } else {
                        if (oA instanceof bI) {
                            if (!(ox instanceof aK)) {
                                return;
                            }
                        } else {
                            if (oA instanceof b0) {
                                if (!(ox instanceof lD)) {
                                    return;
                                }
                            } else {
                                if (
                                    oA instanceof lD ||
                                    oA instanceof kn ||
                                    oA instanceof aK
                                ) {
                                    if (
                                        !(ox instanceof n2 || ox instanceof dF)
                                    ) {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
                ox.addChild(oA);
            }
        }
    };
    fe.prototype.changeNode = function (ov) {
        var ou = ov.localName();
        if (ou != null && ou == "mtable") {
            ov.setName("mtablereal");
            var ow = new dK();
            ow.setName("mtablelabel");
            ow.appendChild(ov);
            return ow;
        }
        return ov;
    };
    fe.prototype.loadMglyph = function (ov, ou) {
        var ow = new ae(ou);
        if (ov.attribute("src") != null) {
            ow.setSrc(ov.attribute("src"));
        }
        if (ov.attribute("width") != null) {
            ow.setWidth(ov.attribute("width"));
        }
        if (ov.attribute("height") != null) {
            ow.setHeight(ov.attribute("height"));
        }
        if (ov.attribute("valign") != null) {
            ow.setValign(ov.attribute("valign"));
        }
        if (ov.attribute("alt") != null) {
            ow.setAlt(ov.attribute("alt"));
        }
        if (
            ow.getWidth() == "0.66em" &&
            ow.getHeight() == "1em" &&
            ov.attribute("style") == "border:1px;"
        ) {
            return this.loadEmpty(ov, ou);
        }
        return ow;
    };
    fe.prototype.loadEmpty = function (ow, ov) {
        var ou = new bh(ov);
        return ou;
    };
    fe.prototype.loadMi = function (ov, ou) {
        var ow = new no(ou);
        return ow;
    };
    fe.prototype.loadCi = function (ov, ou) {
        var ow = new cI(ou);
        return ow;
    };
    fe.prototype.loadMn = function (ov, ou) {
        var ow = new kq(ou);
        return ow;
    };
    fe.prototype.loadCn = function (ov, ou) {
        var ow = new l(ou);
        return ow;
    };
    fe.prototype.loadMtext = function (ov, ou) {
        var ow = new mu(ou);
        return ow;
    };
    fe.prototype.loadMs = function (ow, ov) {
        var ox = new g2(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("lquote") != null) {
            ox.setLquote(ow.attribute("lquote"));
        } else {
            if (ou.getLquote() != null) {
                ox.setLquote(ou.getLquote());
            }
        }
        if (ox.getLquote() != null) {
            ox.setLquote(h.convertToChars(ox.getLquote()));
        }
        if (ow.attribute("rquote") != null) {
            ox.setRquote(ow.attribute("rquote"));
        } else {
            if (ou.getRquote() != null) {
                ox.setRquote(ou.getRquote());
            }
        }
        if (ox.getRquote() != null) {
            ox.setRquote(h.convertToChars(ox.getRquote()));
        }
        return ox;
    };
    fe.prototype.loadMo = function (ow, ov) {
        var ox = new av(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("form") != null) {
            ox.setForm(ow.attribute("form"));
        } else {
            if (ou.getForm() != null) {
                ox.setForm(ou.getForm());
            }
        }
        if (ow.attribute("fence") != null) {
            ox.setFence(ow.attribute("fence"));
        } else {
            if (ou.getFence() != null) {
                ox.setFence(ou.getFence());
            }
        }
        if (ow.attribute("separator") != null) {
            ox.setSeparator(ow.attribute("separator"));
        } else {
            if (ou.getSeparator() != null) {
                ox.setSeparator(ou.getSeparator());
            }
        }
        if (ow.attribute("lspace") != null) {
            ox.setLspace(ow.attribute("lspace"));
        } else {
            if (ou.getLspace() != null) {
                ox.setLspace(ou.getLspace());
            }
        }
        if (ow.attribute("rspace") != null) {
            ox.setRspace(ow.attribute("rspace"));
        } else {
            if (ou.getRspace() != null) {
                ox.setRspace(ou.getRspace());
            }
        }
        if (ow.attribute("accent") != null) {
            ox.setAccent(ow.attribute("accent"));
        } else {
            if (ou.getAccent() != null) {
                ox.setAccent(ou.getAccent());
            }
        }
        if (ow.attribute("stretchy") != null) {
            ox.setStretchy(ow.attribute("stretchy"));
        } else {
            if (ou.getStretchy() != null) {
                ox.setStretchy(ou.getStretchy());
            }
        }
        if (ow.attribute("symmetric") != null) {
            ox.setSymmetric(ow.attribute("symmetric"));
        } else {
            if (ou.getSymmetric() != null) {
                ox.setSymmetric(ou.getSymmetric());
            }
        }
        if (ow.attribute("maxsize") != null) {
            ox.setMaxsize(ow.attribute("maxsize"));
        } else {
            if (ou.getMaxsize() != null) {
                ox.setMaxsize(ou.getMaxsize());
            }
        }
        if (ow.attribute("minsize") != null) {
            ox.setMinsize(ow.attribute("minsize"));
        } else {
            if (ou.getMinsize() != null) {
                ox.setMinsize(ou.getMinsize());
            }
        }
        if (ow.attribute("largeop") != null) {
            ox.setLargeop(ow.attribute("largeop"));
        } else {
            if (ou.getLargeop() != null) {
                ox.setLargeop(ou.getLargeop());
            }
        }
        if (ow.attribute("movablelimits") != null) {
            ox.setMovablelimits(ow.attribute("movablelimits"));
        } else {
            if (ou.getMovablelimits() != null) {
                ox.setMovablelimits(ou.getMovablelimits());
            }
        }
        if (ow.attribute("largeOpMultiplier") != null) {
            ox.setLargeOpMultiplier(ow.attribute("largeOpMultiplier"));
        } else {
            ox.setLargeOpMultiplier(this.settings.getLargeOpMultiplier());
        }
        if (ow.attribute("linebreakmultchar") != null) {
            ox.setLinebreakmultchar(
                h.convertToChars(ow.attribute("linebreakmultchar")),
            );
        } else {
            if (ou.getLinebreakmultchar() != null) {
                ox.setLinebreakmultchar(
                    h.convertToChars(ou.getLinebreakmultchar()),
                );
            }
        }
        this.loadIndent(ow, ox);
        return ox;
    };
    fe.prototype.loadIndent = function (ov, ow) {
        var ou = ow.getCurrentDefStyle();
        if (ov.attribute("linebreak") != null) {
            ow.setLinebreak(ov.attribute("linebreak"));
        } else {
            if (ou.getLinebreak() != null) {
                ow.setLinebreak(ou.getLinebreak());
            }
        }
        if (ov.attribute("lineleading") != null) {
            ow.setLineleading(ov.attribute("lineleading"));
        } else {
            if (ou.getLineleading() != null) {
                ow.setLineleading(ou.getLineleading());
            }
        }
        if (ov.attribute("linebreakstyle") != null) {
            if ("infixlinebreakstyle" == ov.attribute("linebreakstyle")) {
                ow.setLinebreakstyle(ou.getInfixlinebreakstyle());
            } else {
                ow.setLinebreakstyle(ov.attribute("linebreakstyle"));
            }
        } else {
            if (ou.getLinebreakstyle() != null) {
                ow.setLinebreakstyle(ou.getLinebreakstyle());
            }
        }
        if (ov.attribute("indentalign") != null) {
            ow.setIndentalign(ov.attribute("indentalign"));
        } else {
            if (ou.getIndentalign() != null) {
                ow.setIndentalign(ou.getIndentalign());
            }
        }
        if (ov.attribute("indentshift") != null) {
            ow.setIndentshift(ov.attribute("indentshift"));
        } else {
            if (ou.getIndentshift() != null) {
                ow.setIndentshift(ou.getIndentshift());
            }
        }
        if (ov.attribute("indenttarget") != null) {
            ow.setIndenttarget(ov.attribute("indenttarget"));
        } else {
            if (ou.getIndenttarget() != null) {
                ow.setIndenttarget(ou.getIndenttarget());
            }
        }
        if (ov.attribute("indentalignfirst") != null) {
            ow.setIndentalignfirst(ov.attribute("indentalignfirst"));
        } else {
            if (ou.getIndentalignfirst() != null) {
                ow.setIndentalignfirst(ou.getIndentalignfirst());
            }
        }
        if (ov.attribute("indentshiftfirst") != null) {
            ow.setIndentshiftfirst(ov.attribute("indentshiftfirst"));
        } else {
            if (ou.getIndentshiftfirst() != null) {
                ow.setIndentshiftfirst(ou.getIndentshiftfirst());
            }
        }
        if (ov.attribute("indentalignlast") != null) {
            ow.setIndentalignlast(ov.attribute("indentalignlast"));
        } else {
            if (ou.getIndentalignlast() != null) {
                ow.setIndentalignlast(ou.getIndentalignlast());
            }
        }
        if (ov.attribute("indentshiftlast") != null) {
            ow.setIndentshiftlast(ov.attribute("indentshiftlast"));
        } else {
            if (ou.getIndentshiftlast() != null) {
                ow.setIndentshiftlast(ou.getIndentshiftlast());
            }
        }
    };
    fe.prototype.loadText = function (ov, ou) {
        var oz = ov.toString();
        if (oz == null) {
            return null;
        }
        var ow = h.convertToChars(oz);
        var oy = gX.convertToUnicodeString(ow);
        if (oy == null) {
            return null;
        }
        if (ou instanceof aB) {
            var ox = new cO(ou);
            ox.setUnicodeText(oy);
            if (!(ou instanceof kq || ou instanceof av)) {
                ox.calculateNbSpacesBefore(
                    h.convertToCharsNoCollapsingNBSP(oz),
                    ow,
                );
                ox.calculateNbSpacesAfter(
                    h.convertToCharsNoCollapsingNBSP(oz),
                    ow,
                );
            }
            return ox;
        }
        return null;
    };
    fe.prototype.loadMSpace = function (ow, ov) {
        var ox = new cT(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("depth") != null) {
            ox.setDepth(ow.attribute("depth"));
        } else {
            if (ou.getDepth() != null) {
                ox.setDepth(ou.getDepth());
            }
        }
        if (ow.attribute("width") != null) {
            ox.setWidth(ow.attribute("width"));
        } else {
            if (ou.getWidth() != null) {
                ox.setWidth(ou.getWidth());
            }
        }
        if (ow.attribute("height") != null) {
            ox.setHeight(ow.attribute("height"));
        } else {
            if (ou.getHeight() != null) {
                ox.setHeight(ou.getHeight());
            }
        }
        if (ow.attribute("linebreak") != null) {
            ox.setLinebreak(ow.attribute("linebreak"));
        } else {
            if (ou.getLinebreak() != null) {
                ox.setLinebreak(ou.getLinebreak());
            }
        }
        this.loadIndent(ow, ox);
        return ox;
    };
    fe.prototype.loadMrow = function (ov, ou) {
        var ow = new bW(ou);
        this.loadMrowAttributes(ov, ow);
        return ow;
    };
    fe.prototype.loadMrowAttributes = function (ov, ow) {
        var ou = ow.getCurrentDefStyle();
        if (ov.attribute("rowalign") != null) {
            ow.setRowalign(ov.attribute("rowalign"));
        }
        if (ov.attribute("linestyle") != null) {
            ow.setLinestyle(ov.attribute("linestyle"));
        }
        if (ou.getIndentalignfirst() != null) {
            ow.setIndentalignfirst(ou.getIndentalignfirst());
        }
        if (ou.getIndentshiftfirst() != null) {
            ow.setIndentshiftfirst(ou.getIndentshiftfirst());
        }
        if (ou.getIndentalignlast() != null) {
            ow.setIndentalignlast(ou.getIndentalignlast());
        }
        if (ou.getIndentshiftlast() != null) {
            ow.setIndentshiftlast(ou.getIndentshiftlast());
        }
    };
    fe.prototype.loadMfrac = function (ov, ou) {
        var ow = new os(ou);
        this.loadMfracAttributes(ow, ov, ou);
        return ow;
    };
    fe.prototype.loadMfracAttributes = function (ox, ow, ov) {
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("linethickness") != null) {
            ox.setLinethickness(ow.attribute("linethickness"));
        } else {
            if (ou.getLinethickness() != null) {
                ox.setLinethickness(ou.getLinethickness());
            }
        }
        if (ox.getLinethickness() == null) {
            ox.setLinethickness(this.settings.getLinethickness());
        }
        if (ow.attribute("space") != null) {
            ox.setSpace(ow.attribute("space"));
        } else {
            ox.setSpace(this.settings.getFractionSpace());
        }
        if (ow.attribute("bevelled") != null) {
            ox.setBevelled(lv.getBooleanValue(ow.attribute("bevelled"), false));
        } else {
            if (ou.getBevelled() != null) {
                ox.setBevelled(lv.getBooleanValue(ou.getBevelled(), false));
            }
        }
        if (ow.attribute("numalign") != null) {
            ox.setNumalign(ow.attribute("numalign"));
        } else {
            if (ou.getNumalign() != null) {
                ox.setNumalign(ou.getNumalign());
            }
        }
        if (ow.attribute("denomalign") != null) {
            ox.setDenomalign(ow.attribute("denomalign"));
        } else {
            if (ou.getDenomalign() != null) {
                ox.setDenomalign(ou.getDenomalign());
            }
        }
        return ox;
    };
    fe.prototype.loadMSqrt = function (ov, ou) {
        var ow = new a3(ou);
        this.addMSqrtAttributes(ow, ov);
        return ow;
    };
    fe.prototype.addMSqrtAttributes = function (ov, ou) {
        this.loadMrowAttributes(ou, ov);
        if (ou.attribute("closed") != null) {
            ov.setClosed(lv.getBooleanValue(ou.attribute("closed"), false));
        } else {
            ov.setClosed(this.settings.isSqrtClosed());
        }
        if (ou.attribute("closedlength") != null) {
            ov.setClosedLength(ou.attribute("closedlength"));
        } else {
            ov.setClosedLength(this.settings.getSqrtClosedLength());
        }
        if (ou.attribute("thickness") != null) {
            if (m2.isPercent(ou.attribute("thickness"))) {
                ov.setThickness(ou.attribute("thickness"));
            }
        } else {
            ov.setThickness(ov.getCurrentDefStyle().getSqrtThickness());
        }
    };
    fe.prototype.loadMRoot = function (ov, ou) {
        var ow = new gb(ou);
        this.addMRootAttributes(ow, ov);
        return ow;
    };
    fe.prototype.addMRootAttributes = function (ov, ou) {
        if (ou.attribute("closed") != null) {
            ov.setClosed(lv.getBooleanValue(ou.attribute("closed"), false));
        } else {
            ov.setClosed(this.settings.isSqrtClosed());
        }
        if (ou.attribute("closedlength") != null) {
            ov.setClosedLength(ou.attribute("closedlength"));
        } else {
            ov.setClosedLength(this.settings.getSqrtClosedLength());
        }
        if (ou.attribute("thickness") != null) {
            if (m2.isPercent(ou.attribute("thickness"))) {
                ov.setThickness(ou.attribute("thickness"));
            }
        } else {
            ov.setThickness(this.settings.getSqrtThickness());
        }
    };
    fe.prototype.loadMError = function (ov, ou) {
        var ow = new kj(ou);
        ow.setAttribute("mathcolor", this.settings.getErrorColor());
        this.loadMrowAttributes(ov, ow);
        return ow;
    };
    fe.prototype.loadMPadded = function (ow, ov) {
        var ox = new lM(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("width") != null) {
            ox.setWidth(ow.attribute("width"));
        } else {
            if (ou.getWidth() != null) {
                ox.setWidth(ou.getWidth());
            }
        }
        if (ow.attribute("lspace") != null) {
            ox.setLspace(ow.attribute("lspace"));
        } else {
            if (ou.getLspace() != null) {
                ox.setLspace(ou.getLspace());
            }
        }
        if (ow.attribute("height") != null) {
            ox.setHeight(ow.attribute("height"));
        } else {
            if (ou.getHeight() != null) {
                ox.setHeight(ou.getHeight());
            }
        }
        if (ow.attribute("depth") != null) {
            ox.setDepth(ow.attribute("depth"));
        } else {
            if (ou.getDepth() != null) {
                ox.setDepth(ou.getDepth());
            }
        }
        if (ow.attribute("voffset") != null) {
            ox.setVoffset(ow.attribute("voffset"));
        } else {
            if (ou.getVoffset() != null) {
                ox.setVoffset(ou.getVoffset());
            }
        }
        this.loadMrowAttributes(ow, ox);
        return ox;
    };
    fe.prototype.loadMPhantom = function (ov, ou) {
        var ow = new mC(ou);
        this.loadMrowAttributes(ov, ow);
        return ow;
    };
    fe.prototype.loadMfenced = function (ow, ov) {
        var ox = new hk(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.existAttribute("open")) {
            ox.setOpen(ow.attribute("open"));
        } else {
            if (ou.getOpen() != null) {
                ox.setOpen(ou.getOpen());
            }
        }
        if (ox.getOpen() != null) {
            ox.setOpen(h.convertToChars(ox.getOpen()));
        }
        if (ow.existAttribute("close")) {
            ox.setClose(ow.attribute("close"));
        } else {
            if (ou.getClose() != null) {
                ox.setClose(ou.getClose());
            }
        }
        if (ox.getClose() != null) {
            ox.setClose(h.convertToChars(ox.getClose()));
        }
        this.loadMrowAttributes(ow, ox);
        return ox;
    };
    fe.prototype.loadMenclose = function (ow, ov) {
        var ox = new el(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("notation") != null) {
            ox.setNotation(ow.attribute("notation"));
        } else {
            if (ou.getNotation() != null) {
                ox.setNotation(ou.getNotation());
            }
        }
        if (ox.getNotation() == null) {
            ox.setNotation(this.settings.getNotation());
        }
        if (ow.attribute("linethickness") != null) {
            ox.setLinethickness(ow.attribute("linethickness"));
        } else {
            if (ou.getEnclosethickness() != null) {
                ox.setLinethickness(ou.getEnclosethickness());
            }
        }
        if (ox.getLinethickness() == null) {
            ox.setLinethickness(this.settings.getEnclosethickness());
        }
        if (ow.attribute("radius") != null) {
            ox.setRadius(ow.attribute("radius"));
        } else {
            if (ou.getEncloseradius() != null) {
                ox.setRadius(ou.getEncloseradius());
            }
        }
        if (ox.getRadius() == null) {
            ox.setRadius(this.settings.getEncloseradius());
        }
        this.loadMrowAttributes(ow, ox);
        return ox;
    };
    fe.prototype.loadMSub = function (ov, ou) {
        var ow = new mY(ou);
        this.loadMSubBeanAttributes(ow, ov, ou);
        return ow;
    };
    fe.prototype.loadMSubBeanAttributes = function (ow, ov, ou) {
        if (ov.attribute("subscriptshift") != null) {
            ow.setSubscriptshift(ov.attribute("subscriptshift"));
        }
    };
    fe.prototype.loadMSup = function (ov, ou) {
        var ow = new m6(ou);
        this.loadMSupBeanAttributes(ow, ov, ou);
        return ow;
    };
    fe.prototype.loadMSupBeanAttributes = function (ow, ov, ou) {
        if (ov.attribute("superscriptshift") != null) {
            ow.setSuperscriptshift(ov.attribute("superscriptshift"));
        }
    };
    fe.prototype.loadMSubSup = function (ov, ou) {
        var ow = new cg(ou);
        if (ov.attribute("subscriptshift") != null) {
            ow.setSubscriptshift(ov.attribute("subscriptshift"));
        }
        if (ov.attribute("superscriptshift") != null) {
            ow.setSuperscriptshift(ov.attribute("superscriptshift"));
        }
        return ow;
    };
    fe.prototype.loadMUnder = function (ow, ov) {
        var ox = new aj(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("accentunder") != null) {
            ox.setAccentunder(ow.attribute("accentunder"));
        } else {
            if (ou.getAccentunder() != null) {
                ox.setAccentunder(ou.getAccentunder());
            }
        }
        if (ow.attribute("align") != null) {
            ox.setAlign(ow.attribute("align"));
        } else {
            if (ou.getAlign() != null) {
                ox.setAlign(ou.getAlign());
            }
        }
        if (ow.attribute("underspace") != null) {
            ox.setUnderSpace(ow.attribute("underspace"));
        }
        return ox;
    };
    fe.prototype.loadMOver = function (ow, ov) {
        var ox = new nI(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("accent") != null) {
            ox.setAccent(ow.attribute("accent"));
        } else {
            if (ou.getAccent() != null) {
                ox.setAccent(ou.getAccent());
            }
        }
        if (ow.attribute("align") != null) {
            ox.setAlign(ow.attribute("align"));
        } else {
            if (ou.getAlign() != null) {
                ox.setAlign(ou.getAlign());
            }
        }
        if (ow.attribute("overspace") != null) {
            ox.setOverSpace(ow.attribute("overspace"));
        }
        return ox;
    };
    fe.prototype.loadMUnderOver = function (ow, ov) {
        var ox = new hF(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("accent") != null) {
            ox.setAccent(ow.attribute("accent"));
        } else {
            if (ou.getAccent() != null) {
                ox.setAccent(ou.getAccent());
            }
        }
        if (ow.attribute("accentunder") != null) {
            ox.setAccentunder(ow.attribute("accentunder"));
        } else {
            if (ou.getAccentunder() != null) {
                ox.setAccentunder(ou.getAccentunder());
            }
        }
        if (ow.attribute("align") != null) {
            ox.setAlign(ow.attribute("align"));
        } else {
            if (ou.getAlign() != null) {
                ox.setAlign(ou.getAlign());
            }
        }
        if (ow.attribute("overspace") != null) {
            ox.setOverSpace(ow.attribute("overspace"));
        }
        if (ow.attribute("underspace") != null) {
            ox.setUnderSpace(ow.attribute("underspace"));
        }
        return ox;
    };
    fe.prototype.loadMMultiscript = function (ow, ov) {
        var ox = new lr(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("subscriptshift") != null) {
            ox.setSubscriptshift(ow.attribute("subscriptshift"));
        }
        if (ow.attribute("superscriptshift") != null) {
            ox.setSupscriptshift(ow.attribute("superscriptshift"));
        }
        return ox;
    };
    fe.prototype.loadMTableLabel = function (ov, ou) {
        var ow = new e2(ou);
        return ow;
    };
    fe.prototype.loadMTable = function (ow, ov) {
        var ox = new iF(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("align") != null) {
            ox.setAlign(ow.attribute("align"));
        } else {
            if (ou.getAlign() != null) {
                ox.setAlign(ou.getAlign());
            }
        }
        if (ox.getAlign() == null) {
            ox.setAlign("axis");
        }
        if (ow.attribute("rowalign") != null) {
            ox.setRowalign(ow.attribute("rowalign"));
        } else {
            if (ou.getRowalign() != null) {
                ox.setRowalign(ou.getRowalign());
            }
        }
        if (ox.getRowalign() == null) {
            ox.setRowalign("baseline");
        }
        if (ow.attribute("columnalign") != null) {
            ox.setColumnalign(ow.attribute("columnalign"));
        } else {
            if (ou.getColumnalign() != null) {
                ox.setColumnalign(ou.getColumnalign());
            }
        }
        if (ow.attribute("groupalign") != null) {
            ox.setGroupalign(ow.attribute("groupalign"));
        }
        if (ow.attribute("alignmentscope") != null) {
            ox.setAlignmentscope(ow.attribute("alignmentscope"));
        } else {
            if (ou.getAlignmentscope() != null) {
                ox.setAlignmentscope(ou.getAlignmentscope());
            }
        }
        if (ow.attribute("columnwidth") != null) {
            ox.setColumnwidth(ow.attribute("columnwidth"));
        } else {
            ox.setColumnwidth("auto");
        }
        if (ow.attribute("width") != null) {
            ox.setWidth(ow.attribute("width"));
        }
        if (ow.attribute("height") != null) {
            ox.setHeight(ow.attribute("height"));
        }
        if (ow.attribute("rowspacing") != null) {
            ox.setRowspacing(ow.attribute("rowspacing"));
        } else {
            if (ou.getRowspacing() != null) {
                ox.setRowspacing(ou.getRowspacing());
            }
        }
        if (ox.getRowspacing() == null) {
            ox.setRowspacing(this.settings.getRowspacing());
        }
        if (ow.attribute("columnspacing") != null) {
            ox.setColumnspacing(ow.attribute("columnspacing"));
        } else {
            if (ou.getColumnspacing() != null) {
                ox.setColumnspacing(ou.getColumnspacing());
            }
        }
        if (ox.getColumnspacing() == null) {
            ox.setColumnspacing(this.settings.getColumnspacing());
        }
        if (ow.attribute("rowlines") != null) {
            ox.setRowlines(ow.attribute("rowlines"));
        } else {
            if (ou.getRowlines() != null) {
                ox.setRowlines(ou.getRowlines());
            }
        }
        if (ox.getRowlines() == null) {
            ox.setRowlines(this.settings.getRowlines());
        }
        if (ow.attribute("rowlinescolor") != null) {
            ox.setRowlinescolor(ow.attribute("rowlinescolor"));
        }
        if (ow.attribute("rowlinethickness") != null) {
            ox.setRowlinesthickness(ow.attribute("rowlinethickness"));
        } else {
            ox.setRowlinesthickness(this.settings.getRowlinesthickness());
        }
        if (ow.attribute("columnlines") != null) {
            ox.setColumnlines(ow.attribute("columnlines"));
        } else {
            if (ou.getColumnlines() != null) {
                ox.setColumnlines(ou.getColumnlines());
            }
        }
        if (ox.getColumnlines() == null) {
            ox.setColumnlines(this.settings.getColumnlines());
        }
        if (ow.attribute("columnlinescolor") != null) {
            ox.setColumnlinescolor(ow.attribute("columnlinescolor"));
        }
        if (ow.attribute("columnlinethickness") != null) {
            ox.setColumnlinesthickness(ow.attribute("columnlinethickness"));
        } else {
            ox.setColumnlinesthickness(this.settings.getColumnlinesthickness());
        }
        if (ow.attribute("frame") != null) {
            ox.setFrame(ow.attribute("frame"));
        } else {
            if (ou.getFrame() != null) {
                ox.setFrame(ou.getFrame());
            }
        }
        if (ox.getFrame() == null) {
            ox.setFrame(this.settings.getFrame());
        }
        if (ow.attribute("framecolor") != null) {
            ox.setFramecolor(ow.attribute("framecolor"));
        }
        if (ow.attribute("framelinethickness") != null) {
            ox.setFramethickness(ow.attribute("framelinethickness"));
        } else {
            ox.setFramethickness(this.settings.getFramelinesthickness());
        }
        if (ow.attribute("framespacing") != null) {
            ox.setFramespacing(ow.attribute("framespacing"));
        } else {
            if (ou.getFramespacing() != null) {
                ox.setFramespacing(ou.getFramespacing());
            }
        }
        if (ox.getFramespacing() == null) {
            ox.setFramespacing(this.settings.getFramespacing());
        }
        if (ow.attribute("equalrows") != null) {
            ox.setEqualrows(ow.attribute("equalrows"));
        } else {
            if (ou.getEqualrows() != null) {
                ox.setEqualrows(ou.getEqualrows());
            }
        }
        if (ox.getEqualrows() == null) {
            ox.setEqualrows("false");
        }
        if (ow.attribute("equalcolumns") != null) {
            ox.setEqualcolumns(ow.attribute("equalcolumns"));
        } else {
            if (ou.getEqualcolumns() != null) {
                ox.setEqualcolumns(ou.getEqualcolumns());
            }
        }
        if (ox.getEqualcolumns() == null) {
            ox.setEqualcolumns("false");
        }
        if (ow.attribute("side") != null) {
            ox.setSide(ow.attribute("side"));
        } else {
            if (ou.getSide() != null) {
                ox.setSide(ou.getSide());
            }
        }
        if (ox.getSide() == null) {
            ox.setSide(this.settings.getSide());
        }
        if (ow.attribute("minlabelspacing") != null) {
            ox.setMinlabelspacing(ow.attribute("minlabelspacing"));
        } else {
            if (ou.getMinlabelspacing() != null) {
                ox.setMinlabelspacing(ou.getMinlabelspacing());
            }
        }
        if (ox.getMinlabelspacing() == null) {
            ox.setMinlabelspacing(this.settings.getMinlabelspacing());
        }
        if (ow.attribute("labelspacing") != null) {
            ox.setLabelspacing(ow.attribute("labelspacing"));
        } else {
            ox.setLabelspacing(this.settings.getLabelspacing());
        }
        return ox;
    };
    fe.prototype.loadMTr = function (ov, ou) {
        var ow = new au(ou);
        this.loadMTrAttributes(ow, ov, ou);
        return ow;
    };
    fe.prototype.loadMlabeledtr = function (ov, ou) {
        var ow = new ad(ou);
        this.loadMTrAttributes(ow, ov, ou);
        return ow;
    };
    fe.prototype.loadMTrAttributes = function (ow, ov, ou) {
        if (ov.attribute("rowalign") != null) {
            ow.setRowalign(ov.attribute("rowalign"));
        }
        if (ov.attribute("columnalign") != null) {
            ow.setColumnalign(ov.attribute("columnalign"));
        }
        if (ov.attribute("columnspacing") != null) {
            ow.setColumnspacing(ov.attribute("columnspacing"));
        }
        if (ov.attribute("groupalign") != null) {
            ow.setGroupalign(ov.attribute("groupalign"));
        }
    };
    fe.prototype.loadMTd = function (ow, ov) {
        var ox = new al(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("rowalign") != null) {
            ox.setRowalign(ow.attribute("rowalign"));
        }
        if (ow.attribute("columnalign") != null) {
            ox.setColumnalign(ow.attribute("columnalign"));
        }
        if (ow.attribute("rowspan") != null) {
            ox.setRowspan(ow.attribute("rowspan"));
        }
        if (ow.attribute("columnspan") != null) {
            ox.setColumnspan(ow.attribute("columnspan"));
        }
        if (ow.attribute("groupalign") != null) {
            ox.setGroupalign(ow.attribute("groupalign"));
        }
        this.loadMrowAttributes(ow, ox);
        return ox;
    };
    fe.prototype.loadMalignmark = function (ow, ov) {
        var ox = new nm(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("edge") != null) {
            ox.setEdge(ow.attribute("edge"));
        } else {
            if (ou.getEdge() != null) {
                ox.setEdge(ou.getEdge());
            }
        }
        return ox;
    };
    fe.prototype.loadMaligngroup = function (ow, ov) {
        var ox = new dC(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("groupalign") != null) {
            ox.setGroupalign(ow.attribute("groupalign"));
        }
        return ox;
    };
    fe.prototype.loadMStack = function (ow, ov) {
        var ox = new hq(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("align") != null) {
            ox.setAlign(ow.attribute("align"));
        } else {
            if (ou.getAlign() != null) {
                ox.setAlign(ou.getAlign());
            }
        }
        if (ox.getAlign() == null) {
            ox.setAlign("baseline");
        }
        if (ow.attribute("stackalign") != null) {
            ox.setStackalign(ow.attribute("stackalign"));
        } else {
            if (ou.getStackalign() != null) {
                ox.setStackalign(ou.getStackalign());
            }
        }
        if (ox.getStackalign() == null) {
            ox.setStackalign(this.settings.getStackalign());
        }
        if (ow.attribute("charalign") != null) {
            ox.setCharalign(ow.attribute("charalign"));
        } else {
            if (ou.getCharalign() != null) {
                ox.setCharalign(ou.getCharalign());
            }
        }
        if (ox.getCharalign() == null) {
            ox.setCharalign(this.settings.getCharalign());
        }
        if (ow.attribute("charspacingcolumns") != null) {
            ox.setCharspacingH(ow.attribute("charspacingcolumns"));
        }
        if (ow.attribute("charspacinglines") != null) {
            ox.setCharspacingV(ow.attribute("charspacinglines"));
        }
        if (ow.attribute("charspacing") != null) {
            ox.setCharspacing(ow.attribute("charspacing"));
        } else {
            if (ou.getCharspacing() != null) {
                ox.setCharspacing(ou.getCharspacing());
            }
        }
        if (ox.getCharspacing() == null) {
            ox.setCharspacing(this.settings.getCharspacing());
        }
        if (ow.attribute("rowspacing") != null) {
            ox.setRowspacing(ow.attribute("rowspacing"));
        }
        if (ox.getRowspacing() == null) {
            ox.setRowspacing(this.settings.getMrowspacing());
        }
        return ox;
    };
    fe.prototype.loadMLongdiv = function (ow, ov) {
        var ox = new dF(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("charspacing") != null) {
            ox.setCharspacing(ow.attribute("charspacing"));
        } else {
            if (ou.getCharspacing() != null) {
                ox.setCharspacing(ou.getCharspacing());
            }
        }
        if (ox.getCharspacing() == null) {
            ox.setCharspacing(this.settings.getCharspacing());
        }
        if (ow.attribute("longdivstyle") != null) {
            ox.setLongdivstyle(ow.attribute("longdivstyle"));
        } else {
            if (ou.getLongdivstyle() != null) {
                ox.setLongdivstyle(ou.getLongdivstyle());
            }
        }
        ox.setLongdivstyleOld(ox.getLongdivstyle());
        return ox;
    };
    fe.prototype.loadMSGroup = function (ov, ou) {
        var ow = new n2(ou);
        if (ov.attribute("position") != null) {
            ow.setPosition(m2.getLength(ov.attribute("position"), 0));
        }
        if (ov.attribute("shift") != null) {
            ow.setShift(m2.getLength(ov.attribute("shift"), 0));
        }
        return ow;
    };
    fe.prototype.loadMSRow = function (ov, ou) {
        var ow = new aK(ou);
        if (ov.attribute("position") != null) {
            ow.setPosition(m2.getLength(ov.attribute("position"), 0));
        }
        return ow;
    };
    fe.prototype.loadMSCarries = function (ow, ov) {
        var ox = new lD(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("position") != null) {
            ox.setPosition(m2.getLength(ow.attribute("position"), 0));
        }
        if (ow.attribute("location") != null) {
            ox.setLocation(ow.attribute("location"));
        } else {
            if (ou.getLocation() != null) {
                ox.setLocation(ou.getLocation());
            }
        }
        if (ox.getLocation() == null) {
            ox.setLocation(this.settings.getLocation());
        }
        if (ow.attribute("crossout") != null) {
            ox.setCrossout(ow.attribute("crossout"));
        } else {
            if (ou.getCrossout() != null) {
                ox.setCrossout(ou.getCrossout());
            }
        }
        if (ox.getCrossout() == null) {
            ox.setCrossout(this.settings.getCrossout());
        }
        if (ow.attribute("carrythickness") != null) {
            ox.setCarrythickness(ow.attribute("carrythickness"));
        } else {
            if (ou.getCarrythickness() != null) {
                ox.setCarrythickness(ou.getCarrythickness());
            }
        }
        if (ox.getCarrythickness() == null) {
            ox.setCarrythickness(this.settings.getCarrythickness());
        }
        if (ow.attribute("scriptsizemultiplier") != null) {
            ox.setScriptsizemultiplierS(ow.attribute("scriptsizemultiplier"));
        }
        return ox;
    };
    fe.prototype.loadMSCarry = function (ov, ou) {
        var ow = new b0(ou);
        if (ov.attribute("location") != null) {
            ow.setLocation(ov.attribute("location"));
        }
        if (ov.attribute("crossout") != null) {
            ow.setCrossout(ov.attribute("crossout"));
        }
        if (ov.attribute("carrythickness") != null) {
            ow.setCarrythickness(ov.attribute("carrythickness"));
        }
        return ow;
    };
    fe.prototype.loadMSLine = function (ow, ov) {
        var ox = new kn(ov);
        var ou = ox.getCurrentDefStyle();
        if (ow.attribute("position") != null) {
            ox.setPosition(m2.getLength(ow.attribute("position"), 0));
        }
        if (ow.attribute("length") != null) {
            ox.setLength(m2.getLength(ow.attribute("length"), 0));
        }
        if (ow.attribute("leftoverhang") != null) {
            ox.setLeftoverhang(ow.attribute("leftoverhang"));
        } else {
            if (ou.getLeftoverhang() != null) {
                ox.setLeftoverhang(ou.getLeftoverhang());
            }
        }
        if (ow.attribute("rightoverhang") != null) {
            ox.setRightoverhang(ow.attribute("rightoverhang"));
        } else {
            if (ou.getRightoverhang() != null) {
                ox.setRightoverhang(ou.getRightoverhang());
            }
        }
        if (ow.attribute("mslinethickness") != null) {
            ox.setMslinethickness(ow.attribute("mslinethickness"));
        } else {
            if (ou.getMslinethickness() != null) {
                ox.setMslinethickness(ou.getMslinethickness());
            }
        }
        if (ox.getMslinethickness() == null) {
            ox.setMslinethickness(this.settings.getMslinethickness());
        }
        return ox;
    };
    fe.prototype.loadMaction = function (ov, ou) {
        var ow = new nn(ou);
        if (ov.attribute("actiontype") != null) {
            ow.setActiontype(ov.attribute("actiontype"));
        }
        if (ov.attribute("selection") != null) {
            ow.setSelection(ov.attribute("selection"));
        }
        return ow;
    };
    fe.prototype.loadApply = function (ow, ov) {
        if (ow.getChildren().length == 0) {
            return null;
        }
        var ou = ow.getChildren()[0].localName();
        if (ou == null) {
            return null;
        }
        ou = ou.toLowerCase();
        if (ou.indexOf(":") > -1) {
            ou = ou.substring(ou.indexOf(":") + 1, ou.length);
        }
        if ("plus" == ou) {
            var ox = new b6(ov);
            return ox;
        } else {
            if ("minus" == ou) {
                var ox = new eM(ov);
                return ox;
            } else {
                if ("times" == ou) {
                    var ox = new h9(ov);
                    return ox;
                } else {
                    if ("divide" == ou) {
                        var ox = new eX(ov);
                        this.loadMfracAttributes(ox, ow, ov);
                        return ox;
                    } else {
                        if ("power" == ou) {
                            var ox = new jq(ov);
                            this.loadMSupBeanAttributes(ox, ow, ov);
                            return ox;
                        } else {
                            if ("exp" == ou) {
                                var ox = new lK(ov);
                                this.loadMSupBeanAttributes(ox, ow, ov);
                                return ox;
                            } else {
                                if ("root" == ou) {
                                    if (ow.getChildren().length == 3) {
                                        var ox = new i0(ov);
                                        this.addMRootAttributes(ox, ow);
                                        return ox;
                                    } else {
                                        var ox = new f2(ov);
                                        this.addMSqrtAttributes(ox, ow);
                                        return ox;
                                    }
                                } else {
                                    if ("factorial" == ou) {
                                        var ox = new m1(ov);
                                        return ox;
                                    } else {
                                        if ("rem" == ou) {
                                            var ox = new gD(ov);
                                            return ox;
                                        } else {
                                            if ("min" == ou || "max" == ou) {
                                                var ox = new a5(ov, ou);
                                                return ox;
                                            } else {
                                                if (
                                                    "ln" == ou ||
                                                    "abs" == ou ||
                                                    "ceil" == ou ||
                                                    "floor" == ou ||
                                                    "round" == ou ||
                                                    "sin" == ou ||
                                                    "cos" == ou ||
                                                    "tan" == ou ||
                                                    "tg" == ou ||
                                                    "sec" == ou ||
                                                    "csc" == ou ||
                                                    "cot" == ou ||
                                                    "ctg" == ou ||
                                                    "sinh" == ou ||
                                                    "cosh" == ou ||
                                                    "tanh" == ou ||
                                                    "sech" == ou ||
                                                    "csch" == ou ||
                                                    "coth" == ou ||
                                                    "arcsin" == ou ||
                                                    "arccos" == ou ||
                                                    "arctan" == ou ||
                                                    "arcsec" == ou ||
                                                    "arccsc" == ou ||
                                                    "arccot" == ou ||
                                                    "arcsinh" == ou ||
                                                    "arccosh" == ou ||
                                                    "arctanh" == ou ||
                                                    "arcsech" == ou ||
                                                    "arccsch" == ou ||
                                                    "arccoth" == ou
                                                ) {
                                                    var ox = new jh(ov, ou);
                                                    return ox;
                                                } else {
                                                    if ("log" == ou) {
                                                        if (
                                                            ow.getChildren()
                                                                .length == 3
                                                        ) {
                                                            var ox = new kb(ov);
                                                            this.loadMSubBeanAttributes(
                                                                ox.getBase(),
                                                                ow,
                                                                ov,
                                                            );
                                                            return ox;
                                                        } else {
                                                            var ox = new jh(
                                                                ov,
                                                                ou,
                                                            );
                                                            return ox;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        var ox = new bv(ov);
        ox.setApplyOperation(ou);
        return ox;
    };
    fe.prototype.loadDegree = function (ov, ou) {
        var ow = new aT(ou);
        return ow;
    };
    fe.getOBean = function (ow, ox) {
        var ov = new av(ow);
        fe.addStyleToBean(ov, ow);
        var ou = new cO(ow);
        ou.setUnicodeText(gX.convertToUnicodeString(ox));
        fe.addStyleToBean(ou, ow);
        ov.addChild(ou);
        ov.copyParentStyle(ow.getStyle());
        return ov;
    };
    fe.getOnlyTBean = function (ow, ox) {
        var ou = new mu(ow);
        fe.addStyleToBean(ou, ow);
        var ov = new cO(ou);
        ov.setUnicodeText(gX.convertToUnicodeString(ox));
        fe.addStyleToBean(ov, ow);
        ou.addChild(ov);
        return ou;
    };
    fe.getTBean = function (ov, ow) {
        var ou = fe.getOnlyTBean(ov, ow);
        ou.copyParentStyle(ov.getStyle());
        return ou;
    };
    fe.getOnlyNBean = function (ow, ox) {
        var ou = new kq(ow);
        fe.addStyleToBean(ou, ow);
        var ov = new cO(ow);
        ov.setUnicodeText(gX.convertToUnicodeString(ox));
        fe.addStyleToBean(ov, ow);
        ou.addChild(ov);
        ou.copyParentStyle(ow.getStyle());
        return ou;
    };
    fe.getNBean = function (ov, ow) {
        var ou = fe.getOnlyNBean(ov, ow);
        ou.copyParentStyle(ov.getStyle());
        return ou;
    };
    fe.getCnBean = function (ov, ow) {
        var ou = fe.getOnlyCnBean(ov, ow);
        ou.copyParentStyle(ov.getStyle());
        return ou;
    };
    fe.getOnlyCnBean = function (ow, ox) {
        var ou = new l(ow);
        fe.addStyleToBean(ou, ow);
        var ov = new cO(ow);
        ov.setUnicodeText(gX.convertToUnicodeString(ox));
        fe.addStyleToBean(ov, ow);
        ou.addChild(ov);
        ou.copyParentStyle(ow.getStyle());
        return ou;
    };
    fe.getIBean = function (ow, ox) {
        var ou = new no(ow);
        fe.addStyleToBean(ou, ow);
        var ov = new cO(ow);
        ov.setUnicodeText(gX.convertToUnicodeString(ox));
        fe.addStyleToBean(ov, ow);
        ou.addChild(ov);
        ou.copyParentStyle(ow.getStyle());
        return ou;
    };
    fe.getCiBean = function (ow, ox) {
        var ou = new cI(ow);
        fe.addStyleToBean(ou, ow);
        var ov = new cO(ow);
        ov.setUnicodeText(gX.convertToUnicodeString(ox));
        fe.addStyleToBean(ov, ow);
        ou.addChild(ov);
        ou.copyParentStyle(ow.getStyle());
        return ou;
    };
    fe.getTextBean = function (ow, ox) {
        if (ox == null) {
            return null;
        }
        var ou = W.trim(ox);
        if (ou.length == 0) {
            return null;
        }
        var ov = new cO(ow);
        ov.setUnicodeText(gX.convertToUnicodeString(ox));
        fe.addStyleToBean(ov, ow);
        ov.copyParentStyle(ow.getStyle());
        return ov;
    };
    fe.addStyleToBean = function (ou, ov) {
        ou.getStyle().setDir(ov.getStyle().getDir());
        ou.getStyle().setDisplaystyle(ov.getStyle().isDisplaystyle());
        ou.getStyle().setScriptlevel(ov.getStyle().getScriptlevel());
        ou.setCurrentDefStyle(ov.getCurrentDefStyle());
    };
    fe.getNoneBean = function (ou) {
        var ov = new mx(ou);
        return ov;
    };

    function lc(ou) {
        this.type;
        this.type = ou;
        if (this.type == null) {
            this.type = hV;
        }
    }
    lc.getMathml = function (ou, ov, oy, ox) {
        var oz = new lc(ov);
        var ow = new iH(0, oy);
        var oA = oz.processBeans(ou, ow, ox);
        if (ov == hV) {
            oA = h.convToEntities(oA);
        } else {
            if (ov == aX) {
                oA = h.convToUnicode(oA);
            }
        }
        return oA;
    };
    lc.prototype.processBeans = function (ou, ov, ow) {
        if (ou.isMinimizedBean()) {
            ou = ou.getMinimizeReplace();
        }
        if (ou.isDynamicCreated() || ou.getAttribute("ignoreNode") != null) {
            return "";
        }
        if (ou instanceof gu) {
            return this.getGraphFunctionBean(ou, ov, ow);
        } else {
            if (ou instanceof k) {
                return this.getMathBean(ou, ov, ow);
            } else {
                if (ou instanceof eX) {
                    return this.getDivideApplyBean(ou, ov, ow);
                } else {
                    if (ou instanceof eM) {
                        return this.getMinusApplyBean(ou, ov, ow);
                    } else {
                        if (ou instanceof b6) {
                            return this.getPlusApplyBean(ou, ov, ow);
                        } else {
                            if (ou instanceof h9) {
                                return this.getTimesApplyBean(ou, ov, ow);
                            } else {
                                if (ou instanceof kb) {
                                    return this.getLogApplyBean(ou, ov, ow);
                                } else {
                                    if (ou instanceof jq) {
                                        return this.getPowerApplyBean(
                                            ou,
                                            ov,
                                            ow,
                                        );
                                    } else {
                                        if (ou instanceof lK) {
                                            return this.getExpApplyBean(
                                                ou,
                                                ov,
                                                ow,
                                            );
                                        } else {
                                            if (ou instanceof jh) {
                                                return this.getTrigoApplyBean(
                                                    ou,
                                                    ov,
                                                    ow,
                                                );
                                            } else {
                                                if (ou instanceof gD) {
                                                    return this.getRemApplyBean(
                                                        ou,
                                                        ov,
                                                        ow,
                                                    );
                                                } else {
                                                    if (ou instanceof m1) {
                                                        return this.getFactorialApplyBean(
                                                            ou,
                                                            ov,
                                                            ow,
                                                        );
                                                    } else {
                                                        if (ou instanceof i0) {
                                                            return this.getRootApplyBean(
                                                                ou,
                                                                ov,
                                                                ow,
                                                            );
                                                        } else {
                                                            if (
                                                                ou instanceof f2
                                                            ) {
                                                                return this.getSqrtApplyBean(
                                                                    ou,
                                                                    ov,
                                                                    ow,
                                                                );
                                                            } else {
                                                                if (
                                                                    ou instanceof
                                                                    a5
                                                                ) {
                                                                    return this.getMinMaxApplyBean(
                                                                        ou,
                                                                        ov,
                                                                        ow,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        ou instanceof
                                                                        bv
                                                                    ) {
                                                                        return this.getApplyBean(
                                                                            ou,
                                                                            ov,
                                                                            ow,
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            ou instanceof
                                                                            mx
                                                                        ) {
                                                                            return this.getMnoneBean(
                                                                                ou,
                                                                                ov,
                                                                                ow,
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                ou instanceof
                                                                                bh
                                                                            ) {
                                                                                return this.getEmptyBean(
                                                                                    ou,
                                                                                    ov,
                                                                                    ow,
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    ou instanceof
                                                                                    ae
                                                                                ) {
                                                                                    return this.getMGlyphBean(
                                                                                        ou,
                                                                                        ov,
                                                                                        ow,
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        ou instanceof
                                                                                        cI
                                                                                    ) {
                                                                                        return this.getCiBean(
                                                                                            ou,
                                                                                            ov,
                                                                                            ow,
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            ou instanceof
                                                                                            no
                                                                                        ) {
                                                                                            return this.getMiBean(
                                                                                                ou,
                                                                                                ov,
                                                                                                ow,
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                ou instanceof
                                                                                                l
                                                                                            ) {
                                                                                                return this.getCnBean(
                                                                                                    ou,
                                                                                                    ov,
                                                                                                    ow,
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    ou instanceof
                                                                                                    kq
                                                                                                ) {
                                                                                                    return this.getMnBean(
                                                                                                        ou,
                                                                                                        ov,
                                                                                                        ow,
                                                                                                    );
                                                                                                } else {
                                                                                                    if (
                                                                                                        ou instanceof
                                                                                                        jU
                                                                                                    ) {
                                                                                                        return this.getReplaceBean(
                                                                                                            ou,
                                                                                                            ov,
                                                                                                            ow,
                                                                                                        );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            ou instanceof
                                                                                                            av
                                                                                                        ) {
                                                                                                            return this.getMoBean(
                                                                                                                ou,
                                                                                                                ov,
                                                                                                                ow,
                                                                                                            );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                ou instanceof
                                                                                                                mu
                                                                                                            ) {
                                                                                                                return this.getMTBean(
                                                                                                                    ou,
                                                                                                                    ov,
                                                                                                                    ow,
                                                                                                                );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    ou instanceof
                                                                                                                    cO
                                                                                                                ) {
                                                                                                                    return this.getMTextBean(
                                                                                                                        ou,
                                                                                                                        ov,
                                                                                                                        ow,
                                                                                                                    );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        ou instanceof
                                                                                                                        cT
                                                                                                                    ) {
                                                                                                                        return this.getMSpaceBean(
                                                                                                                            ou,
                                                                                                                            ov,
                                                                                                                            ow,
                                                                                                                        );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            ou instanceof
                                                                                                                            g2
                                                                                                                        ) {
                                                                                                                            return this.getMsBean(
                                                                                                                                ou,
                                                                                                                                ov,
                                                                                                                                ow,
                                                                                                                            );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                ou instanceof
                                                                                                                                os
                                                                                                                            ) {
                                                                                                                                return this.getMFracBean(
                                                                                                                                    ou,
                                                                                                                                    ov,
                                                                                                                                    ow,
                                                                                                                                );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    ou instanceof
                                                                                                                                    a3
                                                                                                                                ) {
                                                                                                                                    return this.getMsqrtBean(
                                                                                                                                        ou,
                                                                                                                                        ov,
                                                                                                                                        ow,
                                                                                                                                    );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        ou instanceof
                                                                                                                                        gb
                                                                                                                                    ) {
                                                                                                                                        return this.getMrootBean(
                                                                                                                                            ou,
                                                                                                                                            ov,
                                                                                                                                            ow,
                                                                                                                                        );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            ou instanceof
                                                                                                                                            kj
                                                                                                                                        ) {
                                                                                                                                            return this.getMerrorBean(
                                                                                                                                                ou,
                                                                                                                                                ov,
                                                                                                                                                ow,
                                                                                                                                            );
                                                                                                                                        } else {
                                                                                                                                            if (
                                                                                                                                                ou instanceof
                                                                                                                                                lM
                                                                                                                                            ) {
                                                                                                                                                return this.getMpaddedBean(
                                                                                                                                                    ou,
                                                                                                                                                    ov,
                                                                                                                                                    ow,
                                                                                                                                                );
                                                                                                                                            } else {
                                                                                                                                                if (
                                                                                                                                                    ou instanceof
                                                                                                                                                    mC
                                                                                                                                                ) {
                                                                                                                                                    return this.getMphantomBean(
                                                                                                                                                        ou,
                                                                                                                                                        ov,
                                                                                                                                                        ow,
                                                                                                                                                    );
                                                                                                                                                } else {
                                                                                                                                                    if (
                                                                                                                                                        ou instanceof
                                                                                                                                                        hk
                                                                                                                                                    ) {
                                                                                                                                                        return this.getMfencedBean(
                                                                                                                                                            ou,
                                                                                                                                                            ov,
                                                                                                                                                            ow,
                                                                                                                                                        );
                                                                                                                                                    } else {
                                                                                                                                                        if (
                                                                                                                                                            ou instanceof
                                                                                                                                                            el
                                                                                                                                                        ) {
                                                                                                                                                            return this.getMencloseBean(
                                                                                                                                                                ou,
                                                                                                                                                                ov,
                                                                                                                                                                ow,
                                                                                                                                                            );
                                                                                                                                                        } else {
                                                                                                                                                            if (
                                                                                                                                                                ou instanceof
                                                                                                                                                                mY
                                                                                                                                                            ) {
                                                                                                                                                                return this.getMsubBean(
                                                                                                                                                                    ou,
                                                                                                                                                                    ov,
                                                                                                                                                                    ow,
                                                                                                                                                                );
                                                                                                                                                            } else {
                                                                                                                                                                if (
                                                                                                                                                                    ou instanceof
                                                                                                                                                                    m6
                                                                                                                                                                ) {
                                                                                                                                                                    return this.getMsupBean(
                                                                                                                                                                        ou,
                                                                                                                                                                        ov,
                                                                                                                                                                        ow,
                                                                                                                                                                    );
                                                                                                                                                                } else {
                                                                                                                                                                    if (
                                                                                                                                                                        ou instanceof
                                                                                                                                                                        cg
                                                                                                                                                                    ) {
                                                                                                                                                                        return this.getMsubsupBean(
                                                                                                                                                                            ou,
                                                                                                                                                                            ov,
                                                                                                                                                                            ow,
                                                                                                                                                                        );
                                                                                                                                                                    } else {
                                                                                                                                                                        if (
                                                                                                                                                                            ou instanceof
                                                                                                                                                                            aj
                                                                                                                                                                        ) {
                                                                                                                                                                            return this.getMunderBean(
                                                                                                                                                                                ou,
                                                                                                                                                                                ov,
                                                                                                                                                                                ow,
                                                                                                                                                                            );
                                                                                                                                                                        } else {
                                                                                                                                                                            if (
                                                                                                                                                                                ou instanceof
                                                                                                                                                                                nI
                                                                                                                                                                            ) {
                                                                                                                                                                                return this.getMoverBean(
                                                                                                                                                                                    ou,
                                                                                                                                                                                    ov,
                                                                                                                                                                                    ow,
                                                                                                                                                                                );
                                                                                                                                                                            } else {
                                                                                                                                                                                if (
                                                                                                                                                                                    ou instanceof
                                                                                                                                                                                    hF
                                                                                                                                                                                ) {
                                                                                                                                                                                    return this.getMunderoverBean(
                                                                                                                                                                                        ou,
                                                                                                                                                                                        ov,
                                                                                                                                                                                        ow,
                                                                                                                                                                                    );
                                                                                                                                                                                } else {
                                                                                                                                                                                    if (
                                                                                                                                                                                        ou instanceof
                                                                                                                                                                                        lr
                                                                                                                                                                                    ) {
                                                                                                                                                                                        return this.getMmultiscriptBean(
                                                                                                                                                                                            ou,
                                                                                                                                                                                            ov,
                                                                                                                                                                                            ow,
                                                                                                                                                                                        );
                                                                                                                                                                                    } else {
                                                                                                                                                                                        if (
                                                                                                                                                                                            ou instanceof
                                                                                                                                                                                            ds
                                                                                                                                                                                        ) {
                                                                                                                                                                                            return this.getMprescriptBean(
                                                                                                                                                                                                ou,
                                                                                                                                                                                                ov,
                                                                                                                                                                                                ow,
                                                                                                                                                                                            );
                                                                                                                                                                                        } else {
                                                                                                                                                                                            if (
                                                                                                                                                                                                ou instanceof
                                                                                                                                                                                                iF
                                                                                                                                                                                            ) {
                                                                                                                                                                                                return this.getMtableBean(
                                                                                                                                                                                                    ou,
                                                                                                                                                                                                    ov,
                                                                                                                                                                                                    ow,
                                                                                                                                                                                                );
                                                                                                                                                                                            } else {
                                                                                                                                                                                                if (
                                                                                                                                                                                                    ou instanceof
                                                                                                                                                                                                    e2
                                                                                                                                                                                                ) {
                                                                                                                                                                                                    return this.getMtableLabelBean(
                                                                                                                                                                                                        ou,
                                                                                                                                                                                                        ov,
                                                                                                                                                                                                        ow,
                                                                                                                                                                                                    );
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    if (
                                                                                                                                                                                                        ou instanceof
                                                                                                                                                                                                        ad
                                                                                                                                                                                                    ) {
                                                                                                                                                                                                        return this.getMtrlabelBean(
                                                                                                                                                                                                            ou,
                                                                                                                                                                                                            ov,
                                                                                                                                                                                                            ow,
                                                                                                                                                                                                        );
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                        if (
                                                                                                                                                                                                            ou instanceof
                                                                                                                                                                                                            au
                                                                                                                                                                                                        ) {
                                                                                                                                                                                                            return this.getMtrBean(
                                                                                                                                                                                                                ou,
                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                ow,
                                                                                                                                                                                                            );
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                            if (
                                                                                                                                                                                                                ou instanceof
                                                                                                                                                                                                                al
                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                return this.getMtdBean(
                                                                                                                                                                                                                    ou,
                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                    ow,
                                                                                                                                                                                                                );
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                if (
                                                                                                                                                                                                                    ou instanceof
                                                                                                                                                                                                                    dC
                                                                                                                                                                                                                ) {
                                                                                                                                                                                                                    return this.getMaligngroupBean(
                                                                                                                                                                                                                        ou,
                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                        ow,
                                                                                                                                                                                                                    );
                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                    if (
                                                                                                                                                                                                                        ou instanceof
                                                                                                                                                                                                                        nm
                                                                                                                                                                                                                    ) {
                                                                                                                                                                                                                        return this.getMalignmarkBean(
                                                                                                                                                                                                                            ou,
                                                                                                                                                                                                                            ov,
                                                                                                                                                                                                                            ow,
                                                                                                                                                                                                                        );
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                        if (
                                                                                                                                                                                                                            ou instanceof
                                                                                                                                                                                                                            hq
                                                                                                                                                                                                                        ) {
                                                                                                                                                                                                                            return this.getMstackBean(
                                                                                                                                                                                                                                ou,
                                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                                ow,
                                                                                                                                                                                                                            );
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                            if (
                                                                                                                                                                                                                                ou instanceof
                                                                                                                                                                                                                                dF
                                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                                return this.getMlongdivBean(
                                                                                                                                                                                                                                    ou,
                                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                                    ow,
                                                                                                                                                                                                                                );
                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                if (
                                                                                                                                                                                                                                    ou instanceof
                                                                                                                                                                                                                                    n2
                                                                                                                                                                                                                                ) {
                                                                                                                                                                                                                                    return this.getMsgroupBean(
                                                                                                                                                                                                                                        ou,
                                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                                        ow,
                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                    if (
                                                                                                                                                                                                                                        ou instanceof
                                                                                                                                                                                                                                        aK
                                                                                                                                                                                                                                    ) {
                                                                                                                                                                                                                                        return this.getMsrowBean(
                                                                                                                                                                                                                                            ou,
                                                                                                                                                                                                                                            ov,
                                                                                                                                                                                                                                            ow,
                                                                                                                                                                                                                                        );
                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                        if (
                                                                                                                                                                                                                                            ou instanceof
                                                                                                                                                                                                                                            bI
                                                                                                                                                                                                                                        ) {
                                                                                                                                                                                                                                            return this.getSDigitBean(
                                                                                                                                                                                                                                                ou,
                                                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                                                ow,
                                                                                                                                                                                                                                            );
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                            if (
                                                                                                                                                                                                                                                ou instanceof
                                                                                                                                                                                                                                                lD
                                                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                                                return this.getMscarriesBean(
                                                                                                                                                                                                                                                    ou,
                                                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                                                    ow,
                                                                                                                                                                                                                                                );
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                if (
                                                                                                                                                                                                                                                    ou instanceof
                                                                                                                                                                                                                                                    b0
                                                                                                                                                                                                                                                ) {
                                                                                                                                                                                                                                                    return this.getMscarryBean(
                                                                                                                                                                                                                                                        ou,
                                                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                                                        ow,
                                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                    if (
                                                                                                                                                                                                                                                        ou instanceof
                                                                                                                                                                                                                                                        kn
                                                                                                                                                                                                                                                    ) {
                                                                                                                                                                                                                                                        return this.getMslineBean(
                                                                                                                                                                                                                                                            ou,
                                                                                                                                                                                                                                                            ov,
                                                                                                                                                                                                                                                            ow,
                                                                                                                                                                                                                                                        );
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                        if (
                                                                                                                                                                                                                                                            ou instanceof
                                                                                                                                                                                                                                                            nn
                                                                                                                                                                                                                                                        ) {
                                                                                                                                                                                                                                                            return this.getMactionBean(
                                                                                                                                                                                                                                                                ou,
                                                                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                                                                ow,
                                                                                                                                                                                                                                                            );
                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                            if (
                                                                                                                                                                                                                                                                ou instanceof
                                                                                                                                                                                                                                                                iJ
                                                                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                                                                return this.getMStyleBean(
                                                                                                                                                                                                                                                                    ou,
                                                                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                                                                    ow,
                                                                                                                                                                                                                                                                );
                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                if (
                                                                                                                                                                                                                                                                    ou instanceof
                                                                                                                                                                                                                                                                    aT
                                                                                                                                                                                                                                                                ) {
                                                                                                                                                                                                                                                                    return this.getDegreeBean(
                                                                                                                                                                                                                                                                        ou,
                                                                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                                                                        ow,
                                                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                    if (
                                                                                                                                                                                                                                                                        ou instanceof
                                                                                                                                                                                                                                                                        bW
                                                                                                                                                                                                                                                                    ) {
                                                                                                                                                                                                                                                                        return this.getRowBean(
                                                                                                                                                                                                                                                                            ou,
                                                                                                                                                                                                                                                                            ov,
                                                                                                                                                                                                                                                                            ow,
                                                                                                                                                                                                                                                                        );
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return "";
    };
    lc.prototype.getMactionBean = function (ou, ow, ox) {
        var oz = ou;
        var oy = new fq("");
        var ov = this.loadCommunAttributes(oz, ox, true);
        ov = lc.addAttribute1(ov, "actiontype", oz.getActiontype());
        ov = lc.addAttribute1(ov, "selection", oz.getSelection());
        oy.append(W.addTabs(ow) + "<maction" + lc.getPrittyAtt(ov, ow));
        oy.append(this.getChildren(ou, ow, ox));
        oy.append(W.addTabs(ow) + "</maction" + W.addNewLine(">", ow));
        return oy.toString();
    };
    lc.prototype.getMnoneBean = function (ou, ov, ow) {
        var ox = ou;
        var oy = new fq("");
        oy.append(W.addTabs(ov) + "<none></none" + W.addNewLine(">", ov));
        return oy.toString();
    };
    lc.prototype.getMslineBean = function (ou, ox, oy) {
        var ow = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(ow, oy, true);
        ov = lc.addAttribute3(ov, "position", ow.getPosition() + "", "0");
        ov = lc.addAttribute3(ov, "length", ow.getLength() + "", "0");
        ov = lc.addAttribute3(
            ov,
            "leftoverhang",
            ow.getLeftoverhang(),
            ow.getCurrentDefStyle().getLeftoverhang(),
        );
        ov = lc.addAttribute3(
            ov,
            "rightoverhang",
            ow.getRightoverhang(),
            ow.getCurrentDefStyle().getRightoverhang(),
        );
        ov = lc.addAttribute6(
            ov,
            "mslinethickness",
            ow.getMslinethickness(),
            ow.getCurrentDefStyle().getMslinethickness(),
            oy.getMslinethickness(),
        );
        oz.append(
            W.addTabs(ox) +
                "<msline" +
                lc.getAtt(ov) +
                "></msline" +
                W.addNewLine(">", ox),
        );
        return oz.toString();
    };
    lc.prototype.getMscarryBean = function (ow, oy, oz) {
        var ou = ow;
        var ov = ow.getParentBean();
        var oA = new fq("");
        var ox = this.loadCommunAttributes(ou, oz, true);
        ox = lc.addAttribute3(
            ox,
            "location",
            ou.getLocation(),
            ov.getLocation(),
        );
        ox = lc.addAttribute3(
            ox,
            "crossout",
            ou.getCrossout(),
            ov.getCrossout(),
        );
        ox = lc.addAttribute3(
            ox,
            "carrythickness",
            ou.getCarrythickness() + "",
            ov.getCarrythickness(),
        );
        oA.append(W.addTabs(oy) + "<mscarry" + lc.getPrittyAtt(ox, oy));
        oA.append(this.getChildren(ow, oy, oz));
        oA.append(W.addTabs(oy) + "</mscarry" + W.addNewLine(">", oy));
        return oA.toString();
    };
    lc.prototype.getMscarriesBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loadCommunAttributes(ou, oy, true);
        ow = lc.addAttribute4(ow, "position", ou.getPosition(), 0);
        ow = lc.addAttribute6(
            ow,
            "location",
            ou.getLocation(),
            ou.getCurrentDefStyle().getLocation(),
            oy.getLocation(),
        );
        ow = lc.addAttribute6(
            ow,
            "crossout",
            ou.getCrossout(),
            ou.getCurrentDefStyle().getCrossout(),
            oy.getCrossout(),
        );
        ow = lc.addAttribute6(
            ow,
            "carrythickness",
            ou.getCarrythickness() + "",
            ou.getCurrentDefStyle().getCarrythickness(),
            oy.getCarrythickness(),
        );
        ow = lc.addAttribute1(
            ow,
            "scriptsizemultiplier",
            ou.getScriptsizemultiplierS(),
        );
        oz.append(W.addTabs(ox) + "<mscarries" + lc.getPrittyAtt(ow, ox));
        oz.append(this.getChildren(ov, ox, oy));
        oz.append(W.addTabs(ox) + "</mscarries" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMsrowBean = function (ou, ox, oy) {
        var oB = ou;
        var oA = new fq("");
        var ov = this.loadCommunAttributes(oB, oy, true);
        ov = lc.addAttribute4(ov, "position", oB.getPosition(), 0);
        oA.append(W.addTabs(ox) + "<msrow" + lc.getPrittyAtt(ov, ox));
        for (var ow = 0; ow < oB.getChildren().size(); ow++) {
            var oz = oB.getChildren().get(ow);
            oA.append(this.processBeans(oz, ox.incSetLevel(1), oy));
        }
        oA.append(W.addTabs(ox) + "</msrow" + W.addNewLine(">", ox));
        return oA.toString();
    };
    lc.prototype.getSDigitBean = function (ou, ox, oy) {
        var oB = ou;
        var oA = new fq("");
        var ov = this.loadCommunAttributes(oB, oy, true);
        var ow = oB.getChildren();
        if (ow.size() == 1) {
            var oz = ow.get(0);
            oA.append(this.processBeans(oz, ox, oy));
        }
        return oA.toString();
    };
    lc.prototype.getMsgroupBean = function (ou, ox, oy) {
        var ow = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(ow, oy, true);
        ov = lc.addAttribute4(ov, "position", ow.getPosition(), 0);
        ov = lc.addAttribute4(ov, "shift", ow.getShift(), 0);
        oz.append(W.addTabs(ox) + "<msgroup" + lc.getPrittyAtt(ov, ox));
        oz.append(this.getChildren(ou, ox, oy));
        oz.append(W.addTabs(ox) + "</msgroup" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMlongdivBean = function (ou, oy, oz) {
        var ow = ou;
        var oA = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        ov = lc.addAttribute6(
            ov,
            "charspacing",
            ow.getCharspacing(),
            ow.getCurrentDefStyle().getCharspacing(),
            oz.getCharspacing(),
        );
        ov = lc.addAttribute3(
            ov,
            "longdivstyle",
            ow.getLongdivstyle(),
            ow.getCurrentDefStyle().getLongdivstyle(),
        );
        oA.append(W.addTabs(oy) + "<mlongdiv" + lc.getPrittyAtt(ov, oy));
        if (ow.getDivisor() != null) {
            oA.append(
                this.processBeans(ow.getDivisor(), oy.incSetLevel(1), oz),
            );
        }
        if (ow.getResult() != null) {
            oA.append(this.processBeans(ow.getResult(), oy.incSetLevel(1), oz));
        }
        var ox = ow.getLongdivstyleOld();
        if ("lefttop" == ox || "righttop" == ox || "stackedleftlinetop" == ox) {
            oA.append(this.getChildrenExcept(ow.getmStack(), oy, oz, 0));
        } else {
            oA.append(this.getChildren(ow.getmStack(), oy, oz));
        }
        oA.append(W.addTabs(oy) + "</mlongdiv" + W.addNewLine(">", oy));
        return oA.toString();
    };
    lc.prototype.getMstackBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loadCommunAttributes(ou, oy, true);
        ow = lc.addAttribute3(ow, "align", ou.getAlign(), "baseline");
        ow = lc.addAttribute6(
            ow,
            "stackalign",
            ou.getStackalign(),
            ou.getCurrentDefStyle().getStackalign(),
            oy.getStackalign(),
        );
        ow = lc.addAttribute6(
            ow,
            "charalign",
            ou.getCharalign(),
            ou.getCurrentDefStyle().getCharalign(),
            oy.getCharalign(),
        );
        ow = lc.addAttribute6(
            ow,
            "charspacing",
            ou.getCharspacing(),
            ou.getCurrentDefStyle().getCharspacing(),
            oy.getCharspacing(),
        );
        ow = lc.addAttribute3(
            ow,
            "rowspacing",
            ou.getRowspacing(),
            oy.getMrowspacing(),
        );
        oz.append(W.addTabs(ox) + "<mstack" + lc.getPrittyAtt(ow, ox));
        oz.append(this.getChildren(ov, ox, oy));
        oz.append(W.addTabs(ox) + "</mstack" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMalignmarkBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(oy, ox, true);
        ov = lc.addAttribute3(
            ov,
            "edge",
            oy.getEdge(),
            oy.getCurrentDefStyle().getEdge(),
        );
        oz.append(
            W.addTabs(ow) +
                "<malignmark" +
                lc.getAtt(ov) +
                W.addNewLine("/>", ow),
        );
        return oz.toString();
    };
    lc.prototype.getMaligngroupBean = function (ou, ox, oy) {
        var ow = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(ow, oy, true);
        ov = lc.addAttribute3(
            ov,
            "groupalign",
            ow.getGroupalign(),
            ow.getCurrentDefStyle().getGroupalign(),
        );
        oz.append(
            W.addTabs(ox) +
                "<maligngroup" +
                lc.getAtt(ov) +
                W.addNewLine("/>", ox),
        );
        return oz.toString();
    };
    lc.prototype.getMtdBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loadMrowAttributes(ou, oy);
        ow = lc.addAttribute1(ow, "columnalign", ou.getColumnalign());
        ow = lc.addAttribute1(ow, "rowspan", ou.getRowspan());
        ow = lc.addAttribute1(ow, "columnspan", ou.getColumnspan());
        ow = lc.addAttribute3(
            ow,
            "groupalign",
            ou.getGroupalign(),
            ou.getCurrentDefStyle().getGroupalign(),
        );
        oz.append(W.addTabs(ox) + "<mtd" + lc.getPrittyAtt(ow, ox));
        oz.append(this.getRowChildren(ov, ox, oy));
        oz.append(W.addTabs(ox) + "</mtd" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMtrBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadMTrAttributes(oy, ox);
        oz.append(W.addTabs(ow) + "<mtr" + lc.getPrittyAtt(ov, ow));
        oz.append(this.getRowChildren(ou, ow, ox));
        oz.append(W.addTabs(ow) + "</mtr" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getMtrlabelBean = function (ou, ow, oy) {
        var ox = ou;
        var oz = new fq("");
        var ov = this.loadMTrAttributes(ox, oy);
        oz.append(W.addTabs(ow) + "<mlabeledtr" + lc.getPrittyAtt(ov, ow));
        oz.append(this.processBeans(ox.getLabel(), ow.incSetLevel(1), oy));
        oz.append(this.getRowChildren(ou, ow, oy));
        oz.append(W.addTabs(ow) + "</mlabeledtr" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.loadMTrAttributes = function (ow, ov) {
        var ou = this.loadCommunAttributes(ow, ov, true);
        ou = lc.addAttribute1(ou, "rowalign", ow.getRowalign());
        ou = lc.addAttribute1(ou, "columnalign", ow.getColumnalign());
        ou = lc.addAttribute1(ou, "columnspacing", ow.getColumnspacing());
        return ou;
    };
    lc.prototype.getMtableLabelBean = function (ou, ov, ow) {
        var ox = new fq("");
        ox.append(this.getChildren(ou, ov.incSetLevel(-1), ow));
        return ox.toString();
    };
    lc.prototype.getMtableBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loadCommunAttributes(ou, oy, false);
        ow = lc.addAttribute6(
            ow,
            "align",
            ou.getAlign(),
            ou.getCurrentDefStyle().getAlign(),
            "axis",
        );
        ow = lc.addAttribute6(
            ow,
            "rowalign",
            ou.getRowalign(),
            ou.getCurrentDefStyle().getRowalign(),
            "baseline",
        );
        ow = lc.addAttribute3(
            ow,
            "columnalign",
            ou.getColumnalign(),
            ou.getCurrentDefStyle().getColumnalign(),
        );
        ow = lc.addAttribute3(
            ow,
            "groupalign",
            ou.getGroupalign(),
            ou.getCurrentDefStyle().getGroupalign(),
        );
        ow = lc.addAttribute3(
            ow,
            "alignmentscope",
            ou.getAlignmentscope(),
            ou.getCurrentDefStyle().getAlignmentscope(),
        );
        ow = lc.addAttribute3(ow, "columnwidth", ou.getColumnwidth(), "auto");
        ow = lc.addAttribute1(ow, "width", ou.getWidth());
        ow = lc.addAttribute1(ow, "height", ou.getHeight());
        ow = lc.addAttribute6(
            ow,
            "rowspacing",
            ou.getRowspacing(),
            ou.getCurrentDefStyle().getRowspacing(),
            oy.getRowspacing(),
        );
        ow = lc.addAttribute6(
            ow,
            "columnspacing",
            ou.getColumnspacing(),
            ou.getCurrentDefStyle().getColumnspacing(),
            oy.getColumnspacing(),
        );
        ow = lc.addAttribute6(
            ow,
            "rowlines",
            ou.getRowlines(),
            ou.getCurrentDefStyle().getRowlines(),
            oy.getRowlines(),
        );
        ow = lc.addAttribute3(
            ow,
            "rowlinescolor",
            ou.getRowlinescolor(),
            ou.getStyle().getColor(),
        );
        ow = lc.addAttribute3(
            ow,
            "rowlineswidth",
            ou.getRowlinesthickness(),
            oy.getRowlinesthickness(),
        );
        ow = lc.addAttribute6(
            ow,
            "columnlines",
            ou.getColumnlines(),
            ou.getCurrentDefStyle().getColumnlines(),
            oy.getColumnlines(),
        );
        ow = lc.addAttribute3(
            ow,
            "columnlinescolor",
            ou.getColumnlinescolor(),
            ou.getStyle().getColor(),
        );
        ow = lc.addAttribute3(
            ow,
            "columnlineswidth",
            ou.getColumnlinesthickness(),
            oy.getColumnlinesthickness(),
        );
        ow = lc.addAttribute6(
            ow,
            "frame",
            ou.getFrame(),
            ou.getCurrentDefStyle().getFrame(),
            oy.getFrame(),
        );
        ow = lc.addAttribute3(
            ow,
            "framecolor",
            ou.getFramecolor(),
            ou.getStyle().getColor(),
        );
        ow = lc.addAttribute3(
            ow,
            "framewidth",
            ou.getFramethickness(),
            oy.getFramelinesthickness(),
        );
        ow = lc.addAttribute6(
            ow,
            "framespacing",
            ou.getFramespacing(),
            ou.getCurrentDefStyle().getFramespacing(),
            oy.getFramespacing(),
        );
        ow = lc.addAttribute6(
            ow,
            "equalrows",
            ou.getEqualrows(),
            ou.getCurrentDefStyle().getEqualrows(),
            "false",
        );
        ow = lc.addAttribute6(
            ow,
            "equalcolumns",
            ou.getEqualcolumns(),
            ou.getCurrentDefStyle().getEqualcolumns(),
            "false",
        );
        ow = lc.addAttribute6(
            ow,
            "side",
            ou.getSide(),
            ou.getCurrentDefStyle().getSide(),
            oy.getSide(),
        );
        ow = lc.addAttribute6(
            ow,
            "minlabelspacing",
            ou.getMinlabelspacing(),
            ou.getCurrentDefStyle().getMinlabelspacing(),
            oy.getMinlabelspacing(),
        );
        oz.append(W.addTabs(ox) + "<mtable" + lc.getPrittyAtt(ow, ox));
        oz.append(this.getChildren(ov, ox, oy));
        oz.append(W.addTabs(ox) + "</mtable" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMprescriptBean = function (ou, ov, ow) {
        var ox = new fq("");
        ox.append(W.addTabs(ov) + "<mprescripts/" + W.addNewLine(">", ov));
        return ox.toString();
    };
    lc.prototype.getMmultiscriptBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(oy, ox, true);
        ov = lc.addAttribute3(
            ov,
            "superscriptshift",
            oy.getSupscriptshift(),
            oy.getCurrentDefStyle().getSuperscriptshift(),
        );
        ov = lc.addAttribute3(
            ov,
            "subscriptshift",
            oy.getSubscriptshift(),
            oy.getCurrentDefStyle().getSubscriptshift(),
        );
        oz.append(W.addTabs(ow) + "<mmultiscripts" + lc.getPrittyAtt(ov, ow));
        oz.append(this.getChildren(ou, ow, ox));
        oz.append(W.addTabs(ow) + "</mmultiscripts" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getMunderoverBean = function (oB, ou, ow) {
        var ov = oB;
        var oy = new fq("");
        var ox = this.loadCommunAttributes(ov, ow, true);
        var oz = ov.getCurrentDefStyle().getAccentunder();
        if (oz != null) {
            var oC = ov.isAccentunder() + "";
            if (!oz == oC) {
                ox = ox + 'accentunder="' + oC + '" ';
            }
        } else {
            if (ov.isAccentunder()) {
                if (!ov.getSub().isAccent()) {
                    ox = ox + 'accentunder="' + ov.isAccentunder() + '" ';
                }
            }
        }
        var oD = ov.getCurrentDefStyle().getAccent();
        if (oD != null) {
            var oA = ov.isAccent() + "";
            if (!oD == oA) {
                ox = ox + 'accent="' + oA + '" ';
            }
        } else {
            if (ov.isAccent()) {
                if (!ov.getExp().isAccent()) {
                    ox = ox + 'accent="' + ov.isAccent() + '" ';
                }
            }
        }
        ox = lc.addAttribute3(
            ox,
            "align",
            ov.getAlign(),
            ov.getCurrentDefStyle().getAlign(),
        );
        ox = lc.addAttribute3(
            ox,
            "underspace",
            ov.getUnderSpace(),
            ov.getCurrentDefStyle().getUnderSpace(),
        );
        ox = lc.addAttribute3(
            ox,
            "overspace",
            ov.getOverSpace(),
            ov.getCurrentDefStyle().getOverSpace(),
        );
        oy.append(W.addTabs(ou) + "<munderover" + lc.getPrittyAtt(ox, ou));
        oy.append(this.processBeans(ov.getBase(), ou.incSetLevel(1), ow));
        oy.append(this.processBeans(ov.getSub(), ou.incSetLevel(1), ow));
        oy.append(this.processBeans(ov.getExp(), ou.incSetLevel(1), ow));
        oy.append(W.addTabs(ou) + "</munderover" + W.addNewLine(">", ou));
        return oy.toString();
    };
    lc.prototype.getMoverBean = function (ov, oy, oz) {
        var oA = ov;
        var oB = new fq("");
        var ox = this.loadCommunAttributes(oA, oz, true);
        var ou = oA.getCurrentDefStyle().getAccent();
        if (ou != null) {
            var ow = oA.isAccent() + "";
            if (!ou == ow) {
                ox = ox + 'accent="' + ow + '" ';
            }
        } else {
            if (oA.isAccent()) {
                if (!oA.getExp().isAccent()) {
                    ox = ox + 'accent="' + oA.isAccent() + '" ';
                }
            }
        }
        ox = lc.addAttribute3(
            ox,
            "align",
            oA.getAlign(),
            oA.getCurrentDefStyle().getAlign(),
        );
        ox = lc.addAttribute3(
            ox,
            "overspace",
            oA.getOverSpace(),
            oA.getCurrentDefStyle().getOverSpace(),
        );
        oB.append(W.addTabs(oy) + "<mover" + lc.getPrittyAtt(ox, oy));
        oB.append(this.processBeans(oA.getBase(), oy.incSetLevel(1), oz));
        oB.append(this.processBeans(oA.getExp(), oy.incSetLevel(1), oz));
        oB.append(W.addTabs(oy) + "</mover" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getMunderBean = function (ou, ox, oy) {
        var oz = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(oz, oy, true);
        var oA = oz.getCurrentDefStyle().getAccentunder();
        if (oA != null) {
            var ow = oz.isAccent() + "";
            if (!oA == ow) {
                ov = ov + 'accentunder="' + ow + '" ';
            }
        } else {
            if (oz.isAccent()) {
                if (!oz.getSub().isAccent()) {
                    ov = ov + 'accentunder="' + oz.isAccent() + '" ';
                }
            }
        }
        ov = lc.addAttribute3(
            ov,
            "align",
            oz.getAlign(),
            oz.getCurrentDefStyle().getAlign(),
        );
        ov = lc.addAttribute3(
            ov,
            "underspace",
            oz.getUnderSpace(),
            oz.getCurrentDefStyle().getUnderSpace(),
        );
        oB.append(W.addTabs(ox) + "<munder" + lc.getPrittyAtt(ov, ox));
        oB.append(this.processBeans(oz.getBase(), ox.incSetLevel(1), oy));
        oB.append(this.processBeans(oz.getSub(), ox.incSetLevel(1), oy));
        oB.append(W.addTabs(ox) + "</munder" + W.addNewLine(">", ox));
        return oB.toString();
    };
    lc.prototype.getMsubsupBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(oy, ox, true);
        ov = lc.addAttribute3(
            ov,
            "superscriptshift",
            oy.getSuperscriptshift(),
            oy.getCurrentDefStyle().getSuperscriptshift(),
        );
        ov = lc.addAttribute3(
            ov,
            "subscriptshift",
            oy.getSubscriptshift(),
            oy.getCurrentDefStyle().getSubscriptshift(),
        );
        oz.append(W.addTabs(ow) + "<msubsup" + lc.getPrittyAtt(ov, ow));
        oz.append(this.processBeans(oy.getBase(), ow.incSetLevel(1), ox));
        oz.append(this.processBeans(oy.getSub(), ow.incSetLevel(1), ox));
        oz.append(this.processBeans(oy.getExp(), ow.incSetLevel(1), ox));
        oz.append(W.addTabs(ow) + "</msubsup" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getMsupBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loaddMsupBeanAttributes(ou, oy);
        oz.append(W.addTabs(ox) + "<msup" + lc.getPrittyAtt(ow, ox));
        oz.append(this.processBeans(ou.getBase(), ox.incSetLevel(1), oy));
        oz.append(this.processBeans(ou.getExp(), ox.incSetLevel(1), oy));
        oz.append(W.addTabs(ox) + "</msup" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.loaddMsupBeanAttributes = function (ou, ow) {
        var ov = this.loadCommunAttributes(ou, ow, true);
        ov = lc.addAttribute3(
            ov,
            "superscriptshift",
            ou.getSuperscriptshift(),
            ou.getCurrentDefStyle().getSuperscriptshift(),
        );
        return ov;
    };
    lc.prototype.getMsubBean = function (ou, ow, oy) {
        var ox = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(ox, oy, true);
        ov = lc.addAttribute3(
            ov,
            "subscriptshift",
            ox.getSubscriptshift(),
            ox.getCurrentDefStyle().getSubscriptshift(),
        );
        oz.append(W.addTabs(ow) + "<msub" + lc.getPrittyAtt(ov, ow));
        oz.append(this.processBeans(ox.getBase(), ow.incSetLevel(1), oy));
        oz.append(this.processBeans(ox.getSub(), ow.incSetLevel(1), oy));
        oz.append(W.addTabs(ow) + "</msub" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getMencloseBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadMrowAttributes(oy, ox);
        ov = lc.addAttribute6(
            ov,
            "notation",
            oy.getNotation(),
            oy.getCurrentDefStyle().getNotation(),
            ox.getNotation(),
        );
        ov = lc.addAttribute6(
            ov,
            "linethickness",
            oy.getLinethickness(),
            oy.getCurrentDefStyle().getEnclosethickness(),
            ox.getEnclosethickness(),
        );
        ov = lc.addAttribute6(
            ov,
            "radius",
            oy.getRadius(),
            oy.getCurrentDefStyle().getEncloseradius(),
            ox.getEncloseradius(),
        );
        oz.append(W.addTabs(ow) + "<menclose" + lc.getPrittyAtt(ov, ow));
        oz.append(this.getRowChildren(ou, ow, ox));
        oz.append(W.addTabs(ow) + "</menclose" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getMfencedBean = function (ou, ox, oy) {
        var ow = ou;
        var oz = new fq("");
        var ov = this.loadMrowAttributes(ow, oy);
        if (ow.getCurrentDefStyle().getOpen() == null) {
            ov = lc.addAttribute3(ov, "open", ow.getOpen(), "(");
        } else {
            ov = lc.addAttribute3(
                ov,
                "open",
                ow.getOpen(),
                ow.getCurrentDefStyle().getOpen(),
            );
        }
        if (ow.getCurrentDefStyle().getClose() == null) {
            ov = lc.addAttribute3(ov, "close", ow.getClose(), ")");
        } else {
            ov = lc.addAttribute3(
                ov,
                "close",
                ow.getClose(),
                ow.getCurrentDefStyle().getClose(),
            );
        }
        oz.append(W.addTabs(ox) + "<mfenced" + lc.getPrittyAtt(ov, ox));
        oz.append(this.getRowChildren(ou, ox, oy));
        oz.append(W.addTabs(ox) + "</mfenced" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMphantomBean = function (ou, ow, ox) {
        var oz = ou;
        var oy = new fq("");
        var ov = this.loadMrowAttributes(oz, ox);
        oy.append(W.addTabs(ow) + "<mphantom" + lc.getPrittyAtt(ov, ow));
        oy.append(this.getRowChildren(ou, ow, ox));
        oy.append(W.addTabs(ow) + "</mphantom" + W.addNewLine(">", ow));
        return oy.toString();
    };
    lc.prototype.getMpaddedBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadMrowAttributes(oy, ox);
        ov = lc.addAttribute1(ov, "width", oy.getWidth());
        ov = lc.addAttribute1(ov, "lspace", oy.getLspace());
        ov = lc.addAttribute1(ov, "height", oy.getHeight());
        ov = lc.addAttribute1(ov, "depth", oy.getDepth());
        ov = lc.addAttribute1(ov, "voffset", oy.getVoffset());
        oz.append(W.addTabs(ow) + "<mpadded" + lc.getPrittyAtt(ov, ow));
        oz.append(this.getRowChildren(ou, ow, ox));
        oz.append(W.addTabs(ow) + "</mpadded" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getMerrorBean = function (ou, oy, oz) {
        var ow = ou;
        var oA = new fq("");
        var ov = this.loadMrowAttributes(ow, oz);
        var ox = 'mathcolor="' + oz.getErrorColor() + '"';
        if (ov.indexOf(ox) > -1) {
            ov = W.replace(ov, ox, "");
        }
        oA.append(W.addTabs(oy) + "<merror" + lc.getPrittyAtt(ov, oy));
        oA.append(this.getRowChildren(ou, oy, oz));
        oA.append(W.addTabs(oy) + "</merror" + W.addNewLine(">", oy));
        return oA.toString();
    };
    lc.prototype.getMrootBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.getMRootAttributes(oy, ow, ox);
        oz.append(W.addTabs(ow) + "<mroot" + lc.getPrittyAtt(ov, ow));
        oz.append(this.processBeans(oy.getBase(), ow.incSetLevel(1), ox));
        oz.append(this.processBeans(oy.getIndex(), ow.incSetLevel(1), ox));
        oz.append(W.addTabs(ow) + "</mroot" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getMRootAttributes = function (ox, ov, ow) {
        var ou = this.loadCommunAttributes(ox, ow, true);
        if (ox.isClosed() != ow.isSqrtClosed()) {
            ou = ou + 'closed="' + ox.isClosed() + '" ';
        }
        if (ox.isClosed()) {
            ou = lc.addAttribute3(
                ou,
                "closedlength",
                ox.getClosedLength(),
                ow.getSqrtClosedLength(),
            );
        }
        ou = lc.addAttribute3(
            ou,
            "thickness",
            ox.getThickness(),
            ow.getSqrtThickness(),
        );
        return ou;
    };
    lc.prototype.getMsqrtBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.getMSqrtAttributes(ou, ox, oy);
        oz.append(W.addTabs(ox) + "<msqrt" + lc.getPrittyAtt(ow, ox));
        oz.append(this.getRowChildren(ov, ox, oy));
        oz.append(W.addTabs(ox) + "</msqrt" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMSqrtAttributes = function (ou, ow, ox) {
        var ov = this.loadMrowAttributes(ou, ox);
        if (ou.isClosed() != ox.isSqrtClosed()) {
            ov = ov + 'closed="' + ou.isClosed() + '" ';
        }
        if (ou.isClosed()) {
            ov = lc.addAttribute3(
                ov,
                "closedlength",
                ou.getClosedLength(),
                ox.getSqrtClosedLength(),
            );
        }
        ov = lc.addAttribute3(
            ov,
            "thickness",
            ou.getThickness(),
            ox.getSqrtThickness(),
        );
        return ov;
    };
    lc.prototype.getMFracBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.getMFracAttributes(ou, oy);
        oz.append(W.addTabs(ox) + "<mfrac" + lc.getPrittyAtt(ow, ox));
        oz.append(this.processBeans(ou.getNum(), ox.incSetLevel(1), oy));
        oz.append(this.processBeans(ou.getDenum(), ox.incSetLevel(1), oy));
        oz.append(W.addTabs(ox) + "</mfrac" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getMFracAttributes = function (ou, ow) {
        var ov = this.loadCommunAttributes(ou, ow, true);
        ov = lc.addAttribute6(
            ov,
            "linethickness",
            ou.getLinethickness(),
            ou.getCurrentDefStyle().getLinethickness(),
            ow.getLinethickness(),
        );
        ov = lc.addAttribute3(
            ov,
            "space",
            ou.getSpace(),
            ow.getFractionSpace(),
        );
        var ox = ou.getCurrentDefStyle().getBevelled();
        if (ox != null) {
            var oy = ou.isBevelled() + "";
            if (!(ox == oy)) {
                ov = ov + 'bevelled="' + oy + '" ';
            }
        } else {
            if (ou.isBevelled()) {
                ov = ov + 'bevelled="' + ou.isBevelled() + '" ';
            }
        }
        ov = lc.addAttribute3(
            ov,
            "numalign",
            ou.getNumalign(),
            ou.getCurrentDefStyle().getNumalign(),
        );
        ov = lc.addAttribute3(
            ov,
            "denomalign",
            ou.getDenomalign(),
            ou.getCurrentDefStyle().getDenomalign(),
        );
        return ov;
    };
    lc.prototype.getMsBean = function (ou, ow, ox) {
        var oy = ou;
        var oA = new fq("");
        var ov = this.loadCommunAttributes(oy, ox, true);
        if (!('"' == oy.getLquote())) {
            ov = lc.addAttribute3(
                ov,
                "lquote",
                oy.getLquote(),
                oy.getCurrentDefStyle().getLquote(),
            );
        }
        if (!('"' == oy.getRquote())) {
            ov = lc.addAttribute3(
                ov,
                "rquote",
                oy.getRquote(),
                oy.getCurrentDefStyle().getRquote(),
            );
        }
        var oz = this.getChildren(ou, ow, ox);
        oz = oz.substring(
            oy.getLquote().length,
            oz.length - oy.getRquote().length,
        );
        oA.append(
            W.addTabs(ow) +
                "<ms" +
                lc.getAtt(ov) +
                ">" +
                oz +
                "</ms" +
                W.addNewLine(">", ow),
        );
        return oA.toString();
    };
    lc.prototype.getMSpaceBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loadIndent(ou, oy);
        ow = lc.addAttribute3(
            ow,
            "width",
            ou.getCssstyle().getWidthS(),
            ou.getCurrentDefStyle().getWidth(),
        );
        ow = lc.addAttribute3(
            ow,
            "height",
            ou.getCssstyle().getHeightS(),
            ou.getCurrentDefStyle().getHeight(),
        );
        ow = lc.addAttribute3(
            ow,
            "depth",
            ou.getDepth(),
            ou.getCurrentDefStyle().getDepth(),
        );
        oz.append(
            W.addTabs(ox) +
                "<mspace" +
                lc.getAtt(ow) +
                "></mspace" +
                W.addNewLine(">", ox),
        );
        return oz.toString();
    };
    lc.prototype.getMTextBean = function (ou, ow, ox) {
        var ov = ou;
        return lc.replaceXML(ov.getUnicodeText().toString());
    };
    lc.replaceXML = function (ou) {
        ou = W.replace(ou, "<", "&lt;");
        ou = W.replace(ou, ">", "&gt;");
        return ou;
    };
    lc.prototype.getMTBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loadCommunAttributes(ou, oy, true);
        oz.append(
            W.addTabs(ox) +
                "<mtext" +
                lc.getAtt(ow) +
                ">" +
                this.getChildren(ov, ox, oy) +
                "</mtext" +
                W.addNewLine(">", ox),
        );
        return oz.toString();
    };
    lc.prototype.getMoBean = function (ou, ox, oy) {
        var ow = ou;
        var oz = false;
        if (ou.getParentBean() instanceof bI) {
            oz = true;
        }
        var oA = new fq("");
        var ov = this.loadIndent(ow, oy);
        ov = lc.addAttribute3(
            ov,
            "form",
            ow.getFormS(),
            ow.getCurrentDefStyle().getForm(),
        );
        ov = lc.addAttribute3(
            ov,
            "fence",
            ow.getFenceS(),
            ow.getCurrentDefStyle().getFence(),
        );
        ov = lc.addAttribute3(
            ov,
            "separator",
            ow.getSeparatorS(),
            ow.getCurrentDefStyle().getSeparator(),
        );
        if (oz) {
            ov = lc.addAttribute3(ov, "lspace", ow.getLspaceS(), "0");
            ov = lc.addAttribute3(ov, "rspace", ow.getRspaceS(), "0");
        } else {
            ov = lc.addAttribute3(
                ov,
                "lspace",
                ow.getLspaceS(),
                ow.getCurrentDefStyle().getLspace(),
            );
            ov = lc.addAttribute3(
                ov,
                "rspace",
                ow.getRspaceS(),
                ow.getCurrentDefStyle().getRspace(),
            );
        }
        ov = lc.addAttribute3(
            ov,
            "accent",
            ow.getAccentS(),
            ow.getCurrentDefStyle().getAccent(),
        );
        ov = lc.addAttribute3(
            ov,
            "stretchy",
            ow.getStretchyS(),
            ow.getCurrentDefStyle().getStretchy(),
        );
        ov = lc.addAttribute3(
            ov,
            "maxsize",
            ow.getMaxsize(),
            ow.getCurrentDefStyle().getMaxsize(),
        );
        ov = lc.addAttribute3(
            ov,
            "minsize",
            ow.getMinsize(),
            ow.getCurrentDefStyle().getMinsize(),
        );
        ov = lc.addAttribute3(
            ov,
            "largeop",
            ow.getLargeopS(),
            ow.getCurrentDefStyle().getLargeop(),
        );
        ov = lc.addAttribute3(
            ov,
            "movablelimits",
            ow.getMovablelimitsS(),
            ow.getCurrentDefStyle().getMovablelimits(),
        );
        ov = lc.addAttribute3(
            ov,
            "linebreakmultchar",
            ow.getLinebreakmultchar(),
            ow.getCurrentDefStyle().getLinebreakmultchar(),
        );
        oA.append(
            W.addTabs(ox) +
                "<mo" +
                lc.getAtt(ov) +
                ">" +
                this.getChildren(ou, ox, oy) +
                "</mo" +
                W.addNewLine(">", ox),
        );
        return oA.toString();
    };
    lc.addAttribute1 = function (ow, ou, ov) {
        if (ov != null) {
            ow = ow + ou + '="' + ov + '" ';
        }
        return ow;
    };
    lc.addAttribute3 = function (ox, ou, ow, ov) {
        if (ow != null) {
            if (!(ow == ov)) {
                ox = ox + ou + '="' + ow + '" ';
            }
        }
        return ox;
    };
    lc.addAttribute4 = function (ox, ou, ow, ov) {
        if (ow != ov) {
            ox = ox + ou + '="' + ow + '" ';
        }
        return ox;
    };
    lc.addAttribute5 = function (oy, ov, ox, ow, ou) {
        if (ox != ow && ox != ou) {
            oy = oy + ov + '="' + ox + '" ';
        }
        return oy;
    };
    lc.addAttribute6 = function (oy, ov, ox, ow, ou) {
        if (ox != null) {
            if (ow == null) {
                return lc.addAttribute3(oy, ov, ox, ou);
            } else {
                if (ox == ow) {
                    return oy;
                } else {
                    oy = oy + ov + '="' + ox + '" ';
                }
            }
        }
        return oy;
    };
    lc.prototype.loadIndent = function (ov, ox) {
        var ow = this.loadCommunAttributes(ov, ox, true);
        ow = lc.addAttribute3(
            ow,
            "linebreak",
            ov.getLinebreak(),
            ov.getCurrentDefStyle().getLinebreak(),
        );
        ow = lc.addAttribute3(
            ow,
            "lineleading",
            ov.getLineleading(),
            ov.getCurrentDefStyle().getLineleading(),
        );
        if (ov.getLinebreakstyle() != null) {
            var ou = ov.getLinebreakstyle();
            var oy = ov.getCurrentDefStyle().getInfixlinebreakstyle();
            var oz = ov.getCurrentDefStyle().getLinebreakstyle();
            if (ou == oy) {
                ow = ow + 'linebreakstyle="infixlinebreakstyle" ';
            } else {
                if (!ou == oz) {
                    ow = ow + 'linebreakstyle="' + ou + '" ';
                }
            }
        }
        ow = lc.addAttribute3(
            ow,
            "indentalign",
            ov.getIndentalign(),
            ov.getCurrentDefStyle().getIndentalign(),
        );
        ow = lc.addAttribute3(
            ow,
            "indentshift",
            ov.getIndentshift(),
            ov.getCurrentDefStyle().getIndentshift(),
        );
        ow = lc.addAttribute3(
            ow,
            "indenttarget",
            ov.getIndenttarget(),
            ov.getCurrentDefStyle().getIndenttarget(),
        );
        ow = lc.addAttribute3(
            ow,
            "indentalignfirst",
            ov.getIndentalignfirst(),
            ov.getCurrentDefStyle().getIndentalignfirst(),
        );
        ow = lc.addAttribute3(
            ow,
            "indentshiftfirst",
            ov.getIndentshiftfirst(),
            ov.getCurrentDefStyle().getIndentshiftfirst(),
        );
        ow = lc.addAttribute3(
            ow,
            "indentalignlast",
            ov.getIndentalignlast(),
            ov.getCurrentDefStyle().getIndentalignlast(),
        );
        ow = lc.addAttribute3(
            ow,
            "indentshiftlast",
            ov.getIndentshiftlast(),
            ov.getCurrentDefStyle().getIndentshiftlast(),
        );
        return ow;
    };
    lc.prototype.getReplaceBean = function (ou, ov, ow) {
        var ox = ou;
        return ox.getMathml();
    };
    lc.prototype.getCnBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(oy, ox, true);
        oz.append(
            W.addTabs(ow) +
                "<cn" +
                lc.getAtt(ov) +
                ">" +
                this.getChildren(ou, ow, ox) +
                "</cn" +
                W.addNewLine(">", ow),
        );
        return oz.toString();
    };
    lc.prototype.getMnBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(oy, ox, true);
        oz.append(
            W.addTabs(ow) +
                "<mn" +
                lc.getAtt(ov) +
                ">" +
                this.getChildren(ou, ow, ox) +
                "</mn" +
                W.addNewLine(">", ow),
        );
        return oz.toString();
    };
    lc.prototype.getMiBean = function (ov, ox, oy) {
        var ou = ov;
        var oA = new fq("");
        var ow = "";
        var oz = ou.getAttribute("mathvariant");
        if (!ou.isHasMathvariant()) {
            ou.clearAttribute("mathvariant");
        }
        ow = this.loadCommunAttributes(ou, oy, true);
        oA.append(
            W.addTabs(ox) +
                "<mi" +
                lc.getAtt(ow) +
                ">" +
                this.getChildren(ov, ox, oy) +
                "</mi" +
                W.addNewLine(">", ox),
        );
        ou.setAttribute("mathvariant", oz);
        return oA.toString();
    };
    lc.prototype.getCiBean = function (ov, ox, oy) {
        var ou = ov;
        var oA = new fq("");
        var ow = "";
        var oz = ou.getAttribute("mathvariant");
        if (!ou.isHasMathvariant()) {
            ou.clearAttribute("mathvariant");
        }
        ow = this.loadCommunAttributes(ou, oy, true);
        oA.append(
            W.addTabs(ox) +
                "<ci" +
                lc.getAtt(ow) +
                ">" +
                this.getChildren(ov, ox, oy) +
                "</ci" +
                W.addNewLine(">", ox),
        );
        ou.setAttribute("mathvariant", oz);
        return oA.toString();
    };
    lc.prototype.getEmptyBean = function (ou, ow, ox) {
        var oy = new fq("");
        var ov = "";
        if (ou.getAttribute("editorSelected") != null) {
            ov = lc.addAttribute1(
                ov,
                "editorSelected",
                ou.getAttribute("editorSelected"),
            );
        }
        oy.append(
            W.addTabs(ow) +
                "<empty" +
                lc.getAtt(ov) +
                W.addNewLine("></empty>", ow),
        );
        return oy.toString();
    };
    lc.prototype.getMGlyphBean = function (ou, ow, ox) {
        var oy = ou;
        var ov = this.loadCommunAttributes(oy, ox, false);
        ov = lc.addAttribute1(ov, "src", oy.getSrc());
        ov = lc.addAttribute1(ov, "width", oy.getWidth());
        ov = lc.addAttribute1(ov, "height", oy.getHeight());
        ov = lc.addAttribute1(ov, "valign", oy.getValign());
        ov = lc.addAttribute1(ov, "alt", oy.getAlt());
        var oz = new fq("");
        oz.append(
            W.addTabs(ow) +
                "<mglyph" +
                lc.getAtt(ov) +
                W.addNewLine("></mglyph>", ow),
        );
        return oz.toString();
    };
    lc.prototype.getMStyleBean = function (ou, ox, oy) {
        var ow = ou;
        var oz = new fq("");
        var ov = this.loadMrowAttributes(ow, oy);
        ov = ov + lc.addStyleAttributes(ow, oy);
        oz.append(W.addTabs(ox) + "<mstyle" + lc.getPrittyAtt(ov, ox));
        oz.append(this.getRowChildren(ou, ox, oy));
        oz.append(W.addTabs(ox) + "</mstyle" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getRowBean = function (ov, ox, oy) {
        var ou = ov;
        var oz = new fq("");
        var ow = this.loadMrowAttributes(ou, oy);
        oz.append(W.addTabs(ox) + "<mrow" + lc.getPrittyAtt(ow, ox));
        oz.append(this.getRowChildren(ov, ox, oy));
        oz.append(W.addTabs(ox) + "</mrow" + W.addNewLine(">", ox));
        return oz.toString();
    };
    lc.prototype.getDivideApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.getMFracAttributes(ow, oz);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getMinusApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getPlusApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getTimesApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getPowerApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loaddMsupBeanAttributes(ow, oz);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getExpApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loaddMsupBeanAttributes(ow, oz);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getRootApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.getMRootAttributes(ow, oy, oz);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<root/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getSqrtApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.getMSqrtAttributes(ow, oy, oz);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<root/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getLogApplyBean = function (oC, ou, ox) {
        var oz = oC;
        var ov = oz.getBase();
        var oB = new fq("");
        var oA = this.loadCommunAttributes(oz, ox, true);
        oA = lc.addAttribute3(
            oA,
            "subscriptshift",
            ov.getSubscriptshift(),
            ov.getCurrentDefStyle().getSubscriptshift(),
        );
        oB.append(W.addTabs(ou) + "<apply" + lc.getPrittyAttNoNewLine(oA, ou));
        oB.append("<log/" + W.addNewLine(">", ou));
        for (var oy = 0; oy < oz.getApplyRealChildren().size(); oy++) {
            var ow = oz.getApplyRealChildren().get(oy);
            oB.append(this.processBeans(ow, ou.incSetLevel(1), ox));
        }
        oB.append(W.addTabs(ou) + "</apply" + W.addNewLine(">", ou));
        return oB.toString();
    };
    lc.prototype.getTrigoApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getRemApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getFactorialApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getMinMaxApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getApplyBean = function (ou, oy, oz) {
        var ow = ou;
        var oB = new fq("");
        var ov = this.loadCommunAttributes(ow, oz, true);
        oB.append(W.addTabs(oy) + "<apply" + lc.getPrittyAttNoNewLine(ov, oy));
        oB.append("<" + ow.getApplyOperation() + "/" + W.addNewLine(">", oy));
        for (var ox = 0; ox < ow.getApplyRealChildren().size(); ox++) {
            var oA = ow.getApplyRealChildren().get(ox);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        oB.append(W.addTabs(oy) + "</apply" + W.addNewLine(">", oy));
        return oB.toString();
    };
    lc.prototype.getDegreeBean = function (ou, ow, ox) {
        var oy = ou;
        var oz = new fq("");
        var ov = this.loadCommunAttributes(oy, ox, true);
        oz.append(W.addTabs(ow) + "<degree" + lc.getPrittyAttNoNewLine(ov, ow));
        ow.setPrettyFormat(false);
        oz.append(this.getChildren(ou, ow, ox));
        ow.setPrettyFormat(true);
        oz.append("</degree" + W.addNewLine(">", ow));
        return oz.toString();
    };
    lc.prototype.getGraphFunctionBean = function (ou, ow, oy) {
        var ox = ou;
        var oz = new fq("");
        var ov = "";
        ov = lc.addAttribute1(ov, "name", ox.getName());
        ov = lc.addAttribute1(ov, "variable", ox.getVariables());
        oz.append(W.addTabs(ow) + "<function" + lc.getPrittyAtt(ov, ow));
        if (ox.getFunctionValue() != null) {
            oz.append(
                this.processBeans(ox.getFunctionValue(), ow.incSetLevel(1), oy),
            );
        }
        oz.append(W.addTabs(ow) + "</function>");
        return oz.toString();
    };
    lc.prototype.getMathBean = function (ou, ox, oz) {
        var oy = ou;
        var oA = new fq("");
        var ow = this.loadMrowAttributes(oy, oz);
        ow = ow + lc.addStyleAttributes(oy, oz);
        var ov = oy.getCurrentDefStyle().getDisplaystyle();
        if (ov != null) {
            if ("false" == ov) {
            } else {
                ow = ow + 'display="block" ';
            }
        }
        oA.append(W.addTabs(ox) + "<math" + lc.getPrittyAtt(ow, ox));
        oA.append(this.getRowChildren(ou, ox, oz));
        oA.append(W.addTabs(ox) + "</math>");
        return oA.toString();
    };
    lc.prototype.loadMrowAttributes = function (ou, ow) {
        var ov = this.loadCommunAttributes(ou, ow, true);
        ov = lc.addAttribute1(ov, "rowalign", ou.getRowalign());
        ov = lc.addAttribute1(ov, "linestyle", ou.getLinestyle());
        ov = lc.addAttribute3(
            ov,
            "lineleading",
            ou.getLineleading(),
            ow.getLineleading(),
        );
        return ov;
    };
    lc.prototype.loadCommunAttributes = function (ou, oz, oy) {
        var ov = this.loadMathML1Attributes(ou, oz);
        if (ou.getAttribute("id") != null) {
            ov = ov + 'id="' + ou.getAttribute("id") + '" ';
        }
        ov = lc.addAttribute1(ov, "xref", ou.getXref());
        ov = lc.addAttribute1(ov, "href", ou.getHref());
        if (!lc.existAttributeInStyle(ou, "color")) {
            ov = lc.addAttribute1(
                ov,
                "mathcolor",
                ou.getAttribute("mathcolor"),
            );
        }
        if (!lc.existAttributeInStyle(ou, "background")) {
            ov = lc.addAttribute1(
                ov,
                "mathbackground",
                ou.getAttribute("mathbackground"),
            );
        }
        var ox = ou.getParentBean();
        if (ox == null) {
            ov = lc.addAttribute3(ov, "dir", ou.getStyle().getDir(), "ltr");
        } else {
            ov = lc.addAttribute6(
                ov,
                "dir",
                ou.getStyle().getDir(),
                ox.getStyle().getDir(),
                "ltr",
            );
        }
        var ow = ou.getCssstyle().getStringStyle(oy);
        ov = lc.addAttribute1(ov, "style", ow);
        if (ou.getAttribute("editorSelected") != null) {
            ov = lc.addAttribute1(
                ov,
                "editorSelected",
                ou.getAttribute("editorSelected"),
            );
        }
        if (ou.isToBeMinimized()) {
            ov = lc.addAttribute1(ov, "minimize", "true");
        }
        if (ou.getAttribute("content") != null) {
            ov = lc.addAttribute1(ov, "content", ou.getAttribute("content"));
        }
        if (ou.getCssstyle().getMaxWidth() != null) {
            ov = lc.addAttribute1(
                ov,
                "maxwidth",
                ou.getCssstyle().getMaxWidth(),
            );
        }
        if (ou.getCssstyle().getOverflow() != null) {
            ov = lc.addAttribute1(
                ov,
                "overflow",
                ou.getCssstyle().getOverflow(),
            );
        }
        if (ou.getStyle().isDrawAxisline()) {
            ov = lc.addAttribute1(
                ov,
                "axisline",
                ou.getStyle().isDrawAxisline() + "",
            );
        }
        if (ou.getStyle().isDrawBaseline()) {
            ov = lc.addAttribute1(
                ov,
                "baseline",
                ou.getStyle().isDrawBaseline() + "",
            );
        }
        return ov;
    };
    lc.existAttributeInStyle = function (ou, ow) {
        var ov = ou.getAttribute("style");
        if (ov == null || ov.length == 0) {
            return false;
        }
        if (ov.indexOf(ow + ":") == 0) {
            return true;
        }
        if (ov.indexOf(";" + ow + ":") > -1) {
            return true;
        }
        return false;
    };
    lc.prototype.loadMathML1Attributes = function (ou, ow) {
        var ov = "";
        ov = lc.addAttribute1(
            ov,
            "mathvariant",
            ou.getAttribute("mathvariant"),
        );
        ov = lc.addAttribute1(ov, "fontweight", ou.getAttribute("fontweight"));
        ov = lc.addAttribute1(ov, "fontstyle", ou.getAttribute("fontstyle"));
        ov = lc.addAttribute1(ov, "mathsize", ou.getAttribute("mathsize"));
        return ov;
    };
    lc.prototype.getRowChildren = function (ou, ox, oy) {
        var oA = new fq("");
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            oA.append(this.getChildren(oz, ox, oy));
        }
        return oA.toString();
    };
    lc.prototype.getOnlyOneChildren = function (ou) {
        var ov = ou.getChildren();
        if (ov.size() == 1) {
            var ox = ov.get(0);
            if (ox instanceof jt) {
                var ow = ox.getChildren();
                if (ow.size() == 1) {
                    return ow.get(0);
                }
            }
        }
        return null;
    };
    lc.prototype.getChildByIndex = function (ou, ov) {
        var ow = ou.getChildren();
        if (ow.size() == 1) {
            var oy = ow.get(0);
            if (oy instanceof jt) {
                var ox = oy.getChildren();
                if (ox.size() > ov) {
                    return ox.get(ov);
                }
            }
        }
        return null;
    };
    lc.prototype.getChildren = function (ou, ox, oy) {
        var oA = new fq("");
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            oA.append(this.processBeans(oz, ox.incSetLevel(1), oy));
        }
        return oA.toString();
    };
    lc.prototype.getChildrenExcept = function (ou, oy, oz, ov) {
        var oB = new fq("");
        var ox = ou.getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            if (ow == ov) {
                continue;
            }
            var oA = ox.get(ow);
            oB.append(this.processBeans(oA, oy.incSetLevel(1), oz));
        }
        return oB.toString();
    };
    lc.addStyleAttributes = function (ou, oy) {
        var ox = ou.getCurrentDefStyle();
        var ow = new kf();
        if (ou.getParentBean() != null) {
            var oz = ou.getParentBean();
            ow = oz.getCurrentDefStyle();
        }
        var ov = "";
        ov = lc.addAttribute3(
            ov,
            "scriptlevel",
            ox.getScriptlevel(),
            ow.getScriptlevel(),
        );
        ov = lc.addAttribute3(
            ov,
            "displaystyle",
            ox.getDisplaystyle(),
            ow.getDisplaystyle(),
        );
        ov = lc.addAttribute5(
            ov,
            "scriptsizemultiplier",
            ox.getScriptsizemultiplier(),
            ow.getScriptsizemultiplier(),
            oy.getScriptsizemultiplier(),
        );
        ov = lc.addAttribute6(
            ov,
            "scriptminsize",
            ox.getScriptminsize(),
            ow.getScriptminsize(),
            oy.getScriptminsize() + "",
        );
        ov = lc.addAttribute3(
            ov,
            "infixlinebreakstyle",
            ox.getInfixlinebreakstyle(),
            ow.getInfixlinebreakstyle(),
        );
        ov = lc.addAttribute6(
            ov,
            "decimalpoint",
            ox.getDecimalpoint(),
            ow.getDecimalpoint(),
            oy.getDecimalpoint(),
        );
        ov = lc.addAttribute3(ov, "accent", ox.getAccent(), ow.getAccent());
        ov = lc.addAttribute3(
            ov,
            "accentunder",
            ox.getAccentunder(),
            ow.getAccentunder(),
        );
        ov = lc.addAttribute3(ov, "align", ox.getAlign(), ow.getAlign());
        ov = lc.addAttribute3(
            ov,
            "alignmentscope",
            ox.getAlignmentscope(),
            ow.getAlignmentscope(),
        );
        ov = lc.addAttribute3(
            ov,
            "bevelled",
            ox.getBevelled(),
            ow.getBevelled(),
        );
        ov = lc.addAttribute3(
            ov,
            "charalign",
            ox.getCharalign(),
            ow.getCharalign(),
        );
        ov = lc.addAttribute3(
            ov,
            "charspacing",
            ox.getCharspacing(),
            ow.getCharspacing(),
        );
        ov = lc.addAttribute3(ov, "close", ox.getClose(), ow.getClose());
        ov = lc.addAttribute3(
            ov,
            "columnalign",
            ox.getColumnalign(),
            ow.getColumnalign(),
        );
        ov = lc.addAttribute3(
            ov,
            "columnlines",
            ox.getColumnlines(),
            ow.getColumnlines(),
        );
        ov = lc.addAttribute3(
            ov,
            "columnspacing",
            ox.getColumnspacing(),
            ow.getColumnspacing(),
        );
        ov = lc.addAttribute3(
            ov,
            "columnspan",
            ox.getColumnspan(),
            ow.getColumnspan(),
        );
        ov = lc.addAttribute3(
            ov,
            "columnwidth",
            ox.getColumnwidth(),
            ow.getColumnwidth(),
        );
        ov = lc.addAttribute3(
            ov,
            "crossout",
            ox.getCrossout(),
            ow.getCrossout(),
        );
        ov = lc.addAttribute3(
            ov,
            "denomalign",
            ox.getDenomalign(),
            ow.getDenomalign(),
        );
        ov = lc.addAttribute3(ov, "depth", ox.getDepth(), ow.getDepth());
        ov = lc.addAttribute3(ov, "edge", ox.getEdge(), ow.getEdge());
        ov = lc.addAttribute3(
            ov,
            "equalcolumns",
            ox.getEqualcolumns(),
            ow.getEqualcolumns(),
        );
        ov = lc.addAttribute3(
            ov,
            "equalrows",
            ox.getEqualrows(),
            ow.getEqualrows(),
        );
        ov = lc.addAttribute3(ov, "fence", ox.getFence(), ow.getFence());
        ov = lc.addAttribute3(ov, "form", ox.getForm(), ow.getForm());
        ov = lc.addAttribute3(ov, "frame", ox.getFrame(), ow.getFrame());
        ov = lc.addAttribute3(
            ov,
            "framespacing",
            ox.getFramespacing(),
            ow.getFramespacing(),
        );
        ov = lc.addAttribute3(
            ov,
            "groupalign",
            ox.getGroupalign(),
            ow.getGroupalign(),
        );
        ov = lc.addAttribute3(
            ov,
            "indentalign",
            ox.getIndentalign(),
            ow.getIndentalign(),
        );
        ov = lc.addAttribute3(
            ov,
            "indentalignfirst",
            ox.getIndentalignfirst(),
            ow.getIndentalignfirst(),
        );
        ov = lc.addAttribute3(
            ov,
            "indentalignlast",
            ox.getIndentalignlast(),
            ow.getIndentalignlast(),
        );
        ov = lc.addAttribute3(
            ov,
            "indentshift",
            ox.getIndentshift(),
            ow.getIndentshift(),
        );
        ov = lc.addAttribute3(
            ov,
            "indentshiftfirst",
            ox.getIndentshiftfirst(),
            ow.getIndentshiftfirst(),
        );
        ov = lc.addAttribute3(
            ov,
            "indentshiftlast",
            ox.getIndentshiftlast(),
            ow.getIndentshiftlast(),
        );
        ov = lc.addAttribute3(
            ov,
            "indenttarget",
            ox.getIndenttarget(),
            ow.getIndenttarget(),
        );
        ov = lc.addAttribute3(ov, "largeop", ox.getLargeop(), ow.getLargeop());
        ov = lc.addAttribute3(
            ov,
            "leftoverhang",
            ox.getLeftoverhang(),
            ow.getLeftoverhang(),
        );
        ov = lc.addAttribute3(ov, "length", ox.getLength(), ow.getLength());
        ov = lc.addAttribute3(
            ov,
            "linebreak",
            ox.getLinebreak(),
            ow.getLinebreak(),
        );
        ov = lc.addAttribute3(
            ov,
            "linebreakmultchar",
            ox.getLinebreakmultchar(),
            ow.getLinebreakmultchar(),
        );
        ov = lc.addAttribute3(
            ov,
            "linebreakstyle",
            ox.getLinebreakstyle(),
            ow.getLinebreakstyle(),
        );
        ov = lc.addAttribute3(
            ov,
            "lineleading",
            ox.getLineleading(),
            ow.getLineleading(),
        );
        ov = lc.addAttribute3(
            ov,
            "linethickness",
            ox.getLinethickness(),
            ow.getLinethickness(),
        );
        ov = lc.addAttribute3(
            ov,
            "location",
            ox.getLocation(),
            ow.getLocation(),
        );
        ov = lc.addAttribute3(
            ov,
            "longdivstyle",
            ox.getLongdivstyle(),
            ow.getLongdivstyle(),
        );
        ov = lc.addAttribute6(
            ov,
            "lquote",
            ox.getLquote(),
            ow.getLquote(),
            oy.getLquote(),
        );
        ov = lc.addAttribute3(ov, "lspace", ox.getLspace(), ow.getLspace());
        ov = lc.addAttribute3(ov, "maxsize", ox.getMaxsize(), ow.getMaxsize());
        ov = lc.addAttribute3(
            ov,
            "minlabelspacing",
            ox.getMinlabelspacing(),
            ow.getMinlabelspacing(),
        );
        ov = lc.addAttribute3(ov, "minsize", ox.getMinsize(), ow.getMinsize());
        ov = lc.addAttribute3(
            ov,
            "movablelimits",
            ox.getMovablelimits(),
            ow.getMovablelimits(),
        );
        ov = lc.addAttribute3(
            ov,
            "mslinethickness",
            ox.getMslinethickness(),
            ow.getMslinethickness(),
        );
        ov = lc.addAttribute3(
            ov,
            "notation",
            ox.getNotation(),
            ow.getNotation(),
        );
        ov = lc.addAttribute3(
            ov,
            "numalign",
            ox.getNumalign(),
            ow.getNumalign(),
        );
        ov = lc.addAttribute3(ov, "open", ox.getOpen(), ow.getOpen());
        ov = lc.addAttribute3(
            ov,
            "position",
            ox.getPosition(),
            ow.getPosition(),
        );
        ov = lc.addAttribute3(
            ov,
            "rightoverhang",
            ox.getRightoverhang(),
            ow.getRightoverhang(),
        );
        ov = lc.addAttribute3(
            ov,
            "rowalign",
            ox.getRowalign(),
            ow.getRowalign(),
        );
        ov = lc.addAttribute3(
            ov,
            "rowlines",
            ox.getRowlines(),
            ow.getRowlines(),
        );
        ov = lc.addAttribute3(
            ov,
            "rowspacing",
            ox.getRowspacing(),
            ow.getRowspacing(),
        );
        ov = lc.addAttribute3(ov, "rowspan", ox.getRowspan(), ow.getRowspan());
        ov = lc.addAttribute6(
            ov,
            "rquote",
            ox.getRquote(),
            ow.getRquote(),
            oy.getRquote(),
        );
        ov = lc.addAttribute3(ov, "rspace", ox.getRspace(), ow.getRspace());
        ov = lc.addAttribute3(
            ov,
            "selection",
            ox.getSelection(),
            ow.getSelection(),
        );
        ov = lc.addAttribute3(
            ov,
            "separators",
            ox.getSeparators(),
            ow.getSeparators(),
        );
        ov = lc.addAttribute3(ov, "shift", ox.getShift(), ow.getShift());
        ov = lc.addAttribute3(ov, "side", ox.getSide(), ow.getSide());
        ov = lc.addAttribute3(
            ov,
            "stackalign",
            ox.getStackalign(),
            ow.getStackalign(),
        );
        ov = lc.addAttribute3(
            ov,
            "stretchy",
            ox.getStretchy(),
            ow.getStretchy(),
        );
        ov = lc.addAttribute3(
            ov,
            "subscriptshift",
            ox.getSubscriptshift(),
            ow.getSubscriptshift(),
        );
        ov = lc.addAttribute3(
            ov,
            "superscriptshift",
            ox.getSuperscriptshift(),
            ow.getSuperscriptshift(),
        );
        ov = lc.addAttribute3(
            ov,
            "symmetric",
            ox.getSymmetric(),
            ow.getSymmetric(),
        );
        ov = lc.addAttribute3(ov, "valign", ox.getValign(), ow.getValign());
        ov = lc.addAttribute3(ov, "voffset", ox.getVoffset(), ow.getVoffset());
        ov = lc.addAttribute3(ov, "width", ox.getWidth(), ow.getWidth());
        ov = lc.addAttribute3(ov, "height", ox.getHeight(), ow.getHeight());
        ov = lc.addAttribute3(
            ov,
            "enclosethickness",
            ox.getEnclosethickness(),
            ow.getEnclosethickness(),
        );
        ov = lc.addAttribute3(
            ov,
            "encloseradius",
            ox.getEncloseradius(),
            ow.getEncloseradius(),
        );
        return ov;
    };
    lc.getPrittyAtt = function (ow, ov) {
        var ou = W.trim(ow);
        if (ou.length > 0) {
            ou = " " + ou;
        }
        ou = ou + W.addNewLine(">", ov);
        return ou;
    };
    lc.getPrittyAttNoNewLine = function (ow, ov) {
        var ou = W.trim(ow);
        if (ou.length > 0) {
            ou = " " + ou;
        }
        ou = ou + ">";
        return ou;
    };
    lc.getAtt = function (ov) {
        var ou = W.trim(ov);
        if (ou.length > 0) {
            ou = " " + ou;
        }
        return ou;
    };

    function i9() {
        this.paddingDefaut;
        this.padding_bottom;
        this.padding_left;
        this.padding_right;
        this.padding_top;
        this.border_width_bottom;
        this.border_width_left;
        this.border_width_right;
        this.border_width_top;
        this.border_style_bottom;
        this.border_style_left;
        this.border_style_right;
        this.border_style_top;
        this.border_color_bottom;
        this.border_color_left;
        this.border_color_right;
        this.border_color_top;
        this.margin_bottom;
        this.margin_left;
        this.margin_right;
        this.margin_top;
        this.width;
        this.height;
        this.widthInt;
        this.heightInt;
        this.maxWidth;
        this.maxWidthInt;
        this.maxHeight;
        this.maxHeightInt;
        this.overflow;
        this.align;
        this.valign;
        this.contentVerticalAlign = "middle";
        this.contentHorizontalAlign = "center";
    }
    i9.prototype.getContentVerticalAlign = function () {
        return this.contentVerticalAlign;
    };
    i9.prototype.setContentVerticalAlign = function (ou) {
        this.contentVerticalAlign = this.contentVerticalAlign;
    };
    i9.prototype.getContentHorizontalAlign = function () {
        return this.contentHorizontalAlign;
    };
    i9.prototype.setContentHorizontalAlign = function (ou) {
        this.contentHorizontalAlign = this.contentHorizontalAlign;
    };
    i9.prototype.borderWidthSet = function () {
        return (
            this.border_width_bottom != null ||
            this.border_width_left != null ||
            this.border_width_right != null ||
            this.border_width_top != null
        );
    };
    i9.prototype.borderAllWidthSet = function () {
        return (
            this.border_width_bottom != null &&
            this.border_width_left != null &&
            this.border_width_right != null &&
            this.border_width_top != null
        );
    };
    i9.prototype.borderTopWidthSet = function () {
        return this.border_width_top != null;
    };
    i9.prototype.borderBottomWidthSet = function () {
        return this.border_width_bottom != null;
    };
    i9.prototype.borderLeftWidthSet = function () {
        return this.border_width_left != null;
    };
    i9.prototype.borderRightWidthSet = function () {
        return this.border_width_right != null;
    };
    i9.prototype.marginSet = function () {
        return (
            this.margin_bottom != null ||
            this.margin_left != null ||
            this.margin_right != null ||
            this.margin_top != null
        );
    };
    i9.prototype.marginAllSet = function () {
        return (
            this.margin_bottom != null &&
            this.margin_left != null &&
            this.margin_right != null &&
            this.margin_top != null
        );
    };
    i9.prototype.marginBottomSet = function () {
        return this.margin_bottom != null;
    };
    i9.prototype.marginTopSet = function () {
        return this.margin_top != null;
    };
    i9.prototype.marginLeftSet = function () {
        return this.margin_left != null;
    };
    i9.prototype.marginRightSet = function () {
        return this.margin_right != null;
    };
    i9.prototype.paddingSet = function () {
        return (
            this.padding_bottom != null ||
            this.padding_left != null ||
            this.padding_right != null ||
            this.padding_top != null
        );
    };
    i9.prototype.paddingAllSet = function () {
        return (
            this.padding_bottom != null &&
            this.padding_left != null &&
            this.padding_right != null &&
            this.padding_top != null
        );
    };
    i9.prototype.paddingBottomSet = function () {
        return this.padding_bottom != null;
    };
    i9.prototype.paddingTopSet = function () {
        return this.padding_top != null;
    };
    i9.prototype.paddingLeftSet = function () {
        return this.padding_left != null;
    };
    i9.prototype.paddingRightSet = function () {
        return this.padding_right != null;
    };
    i9.prototype.setBorder = function (ow) {
        if (ow == null) {
            ow = "";
        }
        ow = ow.toLowerCase();
        ow = W.trim(ow);
        var ou = null;
        if (ow.length > 0) {
            ou = this.verifyValues(ow.split(" "));
        }
        if (ou == null) {
            this.border_width_bottom = null;
            this.border_width_top = null;
            this.border_width_left = null;
            this.border_width_right = null;
            this.border_style_bottom = null;
            this.border_style_top = null;
            this.border_style_left = null;
            this.border_style_right = null;
            this.border_color_bottom = null;
            this.border_color_top = null;
            this.border_color_left = null;
            this.border_color_right = null;
        } else {
            if (ou.length == 1) {
                if (m2.isLength(ou[0])) {
                    this.border_width_bottom = ou[0];
                    this.border_width_top = ou[0];
                    this.border_width_left = ou[0];
                    this.border_width_right = ou[0];
                } else {
                    if (kT.indexOf("," + ou[0] + ",") > -1) {
                        this.border_width_bottom = "medium";
                        this.border_width_top = "medium";
                        this.border_width_left = "medium";
                        this.border_width_right = "medium";
                        this.border_style_bottom = ou[0];
                        this.border_style_top = ou[0];
                        this.border_style_left = ou[0];
                        this.border_style_right = ou[0];
                    } else {
                        this.border_width_bottom = "medium";
                        this.border_width_top = "medium";
                        this.border_width_left = "medium";
                        this.border_width_right = "medium";
                        this.border_color_bottom = c2.getColor(ou[0], 0);
                        this.border_color_top = c2.getColor(ou[0], 0);
                        this.border_color_left = c2.getColor(ou[0], 0);
                        this.border_color_right = c2.getColor(ou[0], 0);
                    }
                }
            } else {
                if (ou.length == 2) {
                    if (m2.isLength(ou[0])) {
                        this.border_width_bottom = ou[0];
                        this.border_width_top = ou[0];
                        this.border_width_left = ou[0];
                        this.border_width_right = ou[0];
                        if (kT.indexOf("," + ou[1] + ",") > -1) {
                            this.border_style_bottom = ou[1];
                            this.border_style_top = ou[1];
                            this.border_style_left = ou[1];
                            this.border_style_right = ou[1];
                        } else {
                            this.border_color_bottom = c2.getColor(ou[1], 0);
                            this.border_color_top = c2.getColor(ou[1], 0);
                            this.border_color_left = c2.getColor(ou[1], 0);
                            this.border_color_right = c2.getColor(ou[1], 0);
                        }
                    } else {
                        this.border_width_bottom = "medium";
                        this.border_width_top = "medium";
                        this.border_width_left = "medium";
                        this.border_width_right = "medium";
                        var ov = ou[0];
                        this.border_style_bottom = ov;
                        this.border_style_top = ov;
                        this.border_style_left = ov;
                        this.border_style_right = ov;
                        this.border_color_bottom = c2.getColor(ou[1], 0);
                        this.border_color_top = c2.getColor(ou[1], 0);
                        this.border_color_left = c2.getColor(ou[1], 0);
                        this.border_color_right = c2.getColor(ou[1], 0);
                    }
                } else {
                    if (ou.length >= 3) {
                        this.border_width_bottom = ou[0];
                        this.border_width_top = ou[0];
                        this.border_width_left = ou[0];
                        this.border_width_right = ou[0];
                        var ov = ou[1];
                        this.border_style_bottom = ov;
                        this.border_style_top = ov;
                        this.border_style_left = ov;
                        this.border_style_right = ov;
                        this.border_color_bottom = c2.getColor(ou[2], 0);
                        this.border_color_top = c2.getColor(ou[2], 0);
                        this.border_color_left = c2.getColor(ou[2], 0);
                        this.border_color_right = c2.getColor(ou[2], 0);
                    }
                }
            }
        }
    };
    i9.prototype.verifyValues = function (ou) {
        var oy = new fM();
        for (var ow = 0; ow < ou.length; ow++) {
            var ox = ou[ow];
            if (ox == null) {
                continue;
            }
            ox = W.trim(ox);
            if (ox.length == 0) {
                continue;
            }
            if (m2.isLength(ox)) {
                oy.add(ox);
            } else {
                if (kT.indexOf("," + ox + ",") > -1) {
                    oy.add(ox);
                } else {
                    if (ox.charAt(0) == "#") {
                        oy.add(ox);
                    } else {
                        if (c2.existColorCode(ox)) {
                            oy.add(ox);
                        }
                    }
                }
            }
        }
        var oz = oy.size();
        var ov = new Array(oz);
        for (var ow = 0; ow < oy.size(); ow++) {
            ov[ow] = oy.get(ow);
        }
        return ov;
    };
    i9.prototype.setBorderTop = function (ow) {
        if (ow == null) {
            ow = "";
        }
        ow = ow.toLowerCase();
        ow = W.trim(ow);
        var ou = null;
        if (ow.length > 0) {
            ou = this.verifyValues(ow.split(" "));
        }
        if (ou == null) {
            this.border_width_top = null;
            this.border_style_top = null;
            this.border_color_top = null;
        } else {
            if (ou.length == 1) {
                if (m2.isLength(ou[0])) {
                    this.border_width_top = ou[0];
                } else {
                    if (kT.indexOf("," + ou[0] + ",") > -1) {
                        this.border_width_top = "medium";
                        this.border_style_top = ou[0];
                    } else {
                        this.border_width_top = "medium";
                        this.border_color_top = c2.getColor(ou[0], 0);
                    }
                }
            } else {
                if (ou.length == 2) {
                    if (m2.isLength(ou[0])) {
                        this.border_width_top = ou[0];
                        if (kT.indexOf("," + ou[1] + ",") > -1) {
                            this.border_style_top = ou[1];
                        } else {
                            this.border_color_top = c2.getColor(ou[1], 0);
                        }
                    } else {
                        this.border_width_top = "medium";
                        var ov = ou[0];
                        this.border_style_top = ov;
                        this.border_color_top = c2.getColor(ou[1], 0);
                    }
                } else {
                    if (ou.length >= 3) {
                        this.border_width_top = ou[0];
                        var ov = ou[1];
                        this.border_style_top = ov;
                        this.border_color_top = c2.getColor(ou[2], 0);
                    }
                }
            }
        }
    };
    i9.prototype.setBorderBottom = function (ow) {
        if (ow == null) {
            ow = "";
        }
        ow = ow.toLowerCase();
        ow = W.trim(ow);
        var ou = null;
        if (ow.length > 0) {
            ou = this.verifyValues(ow.split(" "));
        }
        if (ou == null) {
            this.border_width_bottom = null;
            this.border_style_bottom = null;
            this.border_color_bottom = null;
        } else {
            if (ou.length == 1) {
                if (m2.isLength(ou[0])) {
                    this.border_width_bottom = ou[0];
                } else {
                    if (kT.indexOf("," + ou[0] + ",") > -1) {
                        this.border_width_bottom = "medium";
                        this.border_style_bottom = ou[0];
                    } else {
                        this.border_width_bottom = "medium";
                        this.border_color_bottom = c2.getColor(ou[0], 0);
                    }
                }
            } else {
                if (ou.length == 2) {
                    if (m2.isLength(ou[0])) {
                        this.border_width_bottom = ou[0];
                        if (kT.indexOf("," + ou[1] + ",") > -1) {
                            this.border_style_bottom = ou[1];
                        } else {
                            this.border_color_bottom = c2.getColor(ou[1], 0);
                        }
                    } else {
                        this.border_width_bottom = "medium";
                        this.border_style_bottom = ou[0];
                        this.border_color_bottom = c2.getColor(ou[1], 0);
                    }
                } else {
                    if (ou.length >= 3) {
                        this.border_width_bottom = ou[0];
                        var ov = ou[1];
                        this.border_style_bottom = ov;
                        this.border_color_bottom = c2.getColor(ou[2], 0);
                    }
                }
            }
        }
    };
    i9.prototype.setBorderLeft = function (ow) {
        if (ow == null) {
            ow = "";
        }
        ow = ow.toLowerCase();
        ow = W.trim(ow);
        var ou = null;
        if (ow.length > 0) {
            ou = this.verifyValues(ow.split(" "));
        }
        if (ou == null) {
            this.border_width_left = null;
            this.border_style_left = null;
            this.border_color_left = null;
        } else {
            if (ou.length == 1) {
                if (m2.isLength(ou[0])) {
                    this.border_width_left = ou[0];
                } else {
                    if (kT.indexOf("," + ou[0] + ",") > -1) {
                        this.border_width_left = "medium";
                        this.border_style_left = ou[0];
                    } else {
                        this.border_width_left = "medium";
                        this.border_color_left = c2.getColor(ou[0], 0);
                    }
                }
            } else {
                if (ou.length == 2) {
                    if (m2.isLength(ou[0])) {
                        this.border_width_left = ou[0];
                        if (kT.indexOf("," + ou[1] + ",") > -1) {
                            this.border_style_left = ou[1];
                        } else {
                            this.border_color_left = c2.getColor(ou[1], 0);
                        }
                    } else {
                        this.border_width_left = "medium";
                        var ov = ou[0];
                        this.border_style_left = ov;
                        this.border_color_left = c2.getColor(ou[1], 0);
                    }
                } else {
                    if (ou.length >= 3) {
                        this.border_width_left = ou[0];
                        var ov = ou[1];
                        this.border_style_left = ov;
                        this.border_color_left = c2.getColor(ou[2], 0);
                    }
                }
            }
        }
    };
    i9.prototype.setBorderRight = function (ow) {
        if (ow == null) {
            ow = "";
        }
        ow = ow.toLowerCase();
        ow = W.trim(ow);
        var ou = null;
        if (ow.length > 0) {
            ou = this.verifyValues(ow.split(" "));
        }
        if (ou == null) {
            this.border_width_right = null;
            this.border_style_right = null;
            this.border_color_right = null;
        } else {
            if (ou.length == 1) {
                if (m2.isLength(ou[0])) {
                    this.border_width_right = ou[0];
                } else {
                    if (kT.indexOf("," + ou[0] + ",") > -1) {
                        this.border_width_right = "medium";
                        this.border_style_right = ou[0];
                    } else {
                        this.border_width_right = "medium";
                        this.border_color_right = c2.getColor(ou[0], 0);
                    }
                }
            } else {
                if (ou.length == 2) {
                    if (m2.isLength(ou[0])) {
                        this.border_width_right = ou[0];
                        if (kT.indexOf("," + ou[1] + ",") > -1) {
                            this.border_style_right = ou[1];
                        } else {
                            this.border_color_right = c2.getColor(ou[1], 0);
                        }
                    } else {
                        this.border_width_right = "medium";
                        var ov = ou[0];
                        this.border_style_right = ov;
                        this.border_color_right = c2.getColor(ou[1], 0);
                    }
                } else {
                    if (ou.length >= 3) {
                        this.border_width_right = ou[0];
                        var ov = ou[1];
                        this.border_style_right = ov;
                        this.border_color_right = c2.getColor(ou[2], 0);
                    }
                }
            }
        }
    };
    i9.prototype.setBorderTopColor = function (ou) {
        this.border_color_top = c2.getColor(ou, 0);
    };
    i9.prototype.setBorderBottomColor = function (ou) {
        this.border_color_bottom = c2.getColor(ou, 0);
    };
    i9.prototype.setBorderLeftColor = function (ou) {
        this.border_color_left = c2.getColor(ou, 0);
    };
    i9.prototype.setBorderRightColor = function (ou) {
        this.border_color_right = c2.getColor(ou, 0);
    };
    i9.prototype.setBorderTopStyle = function (ou) {
        this.border_style_top = ou;
    };
    i9.prototype.setBorderBottomStyle = function (ou) {
        this.border_style_bottom = ou;
    };
    i9.prototype.setBorderLeftStyle = function (ou) {
        this.border_style_left = ou;
    };
    i9.prototype.setBorderRightStyle = function (ou) {
        this.border_style_right = ou;
    };
    i9.prototype.setBorderTopWidth = function (ou) {
        this.border_width_top = ou;
    };
    i9.prototype.setBorderBottomWidth = function (ou) {
        this.border_width_bottom = ou;
    };
    i9.prototype.setBorderLeftWidth = function (ou) {
        this.border_width_left = ou;
    };
    i9.prototype.setBorderRightWidth = function (ou) {
        this.border_width_right = ou;
    };
    i9.prototype.setBorderColor = function (ov) {
        if (ov == null) {
            ov = "";
        }
        var ou = ov.split(" ");
        if (ou.length == 1) {
            this.border_color_bottom = c2.getColor(ou[0], 0);
            this.border_color_top = c2.getColor(ou[0], 0);
            this.border_color_left = c2.getColor(ou[0], 0);
            this.border_color_right = c2.getColor(ou[0], 0);
        } else {
            if (ou.length == 2) {
                this.border_color_bottom = c2.getColor(ou[0], 0);
                this.border_color_top = c2.getColor(ou[0], 0);
                this.border_color_left = c2.getColor(ou[1], 0);
                this.border_color_right = c2.getColor(ou[1], 0);
            } else {
                if (ou.length == 3) {
                    this.border_color_bottom = c2.getColor(ou[2], 0);
                    this.border_color_top = c2.getColor(ou[0], 0);
                    this.border_color_left = c2.getColor(ou[1], 0);
                    this.border_color_right = c2.getColor(ou[1], 0);
                } else {
                    if (ou.length > 3) {
                        this.border_color_bottom = c2.getColor(ou[2], 0);
                        this.border_color_top = c2.getColor(ou[0], 0);
                        this.border_color_left = c2.getColor(ou[3], 0);
                        this.border_color_right = c2.getColor(ou[1], 0);
                    }
                }
            }
        }
    };
    i9.prototype.setBorderStyle = function (ov) {
        if (ov == null) {
            ov = "";
        }
        var ou = ov.split(" ");
        if (ou.length == 1) {
            this.border_style_bottom = ou[0];
            this.border_style_top = ou[0];
            this.border_style_left = ou[0];
            this.border_style_right = ou[0];
        } else {
            if (ou.length == 2) {
                this.border_style_bottom = ou[0];
                this.border_style_top = ou[0];
                this.border_style_left = ou[1];
                this.border_style_right = ou[1];
            } else {
                if (ou.length == 3) {
                    this.border_style_bottom = ou[2];
                    this.border_style_top = ou[0];
                    this.border_style_left = ou[1];
                    this.border_style_right = ou[1];
                } else {
                    if (ou.length > 3) {
                        this.border_style_bottom = ou[2];
                        this.border_style_top = ou[0];
                        this.border_style_left = ou[3];
                        this.border_style_right = ou[1];
                    }
                }
            }
        }
    };
    i9.prototype.setBorderWidth = function (ov) {
        if (ov == null) {
            ov = "";
        }
        var ou = ov.split(" ");
        if (ou.length == 1) {
            this.border_width_bottom = ou[0];
            this.border_width_top = ou[0];
            this.border_width_left = ou[0];
            this.border_width_right = ou[0];
        } else {
            if (ou.length == 2) {
                this.border_width_bottom = ou[0];
                this.border_width_top = ou[0];
                this.border_width_left = ou[1];
                this.border_width_right = ou[1];
            } else {
                if (ou.length == 3) {
                    this.border_width_bottom = ou[2];
                    this.border_width_top = ou[0];
                    this.border_width_left = ou[1];
                    this.border_width_right = ou[1];
                } else {
                    if (ou.length > 3) {
                        this.border_width_bottom = ou[2];
                        this.border_width_top = ou[0];
                        this.border_width_left = ou[3];
                        this.border_width_right = ou[1];
                    }
                }
            }
        }
    };
    i9.prototype.setMargin = function (ov) {
        if (ov == null) {
            ov = "";
        }
        var ou = ov.split(" ");
        if (ou.length == 1) {
            this.margin_bottom = ou[0];
            this.margin_top = ou[0];
            this.margin_left = ou[0];
            this.margin_right = ou[0];
        } else {
            if (ou.length == 2) {
                this.margin_bottom = ou[0];
                this.margin_top = ou[0];
                this.margin_left = ou[1];
                this.margin_right = ou[1];
            } else {
                if (ou.length == 3) {
                    this.margin_bottom = ou[2];
                    this.margin_top = ou[0];
                    this.margin_left = ou[1];
                    this.margin_right = ou[1];
                } else {
                    if (ou.length > 3) {
                        this.margin_bottom = ou[2];
                        this.margin_top = ou[0];
                        this.margin_left = ou[3];
                        this.margin_right = ou[1];
                    }
                }
            }
        }
    };
    i9.prototype.setMarginTop = function (ou) {
        this.margin_top = ou;
    };
    i9.prototype.setMarginBottom = function (ou) {
        this.margin_bottom = ou;
    };
    i9.prototype.setMarginRight = function (ou) {
        this.margin_right = ou;
    };
    i9.prototype.setMarginLeft = function (ou) {
        this.margin_left = ou;
    };
    i9.prototype.setPadding = function (ov) {
        if (ov == null) {
            ov = "";
        }
        var ou = ov.split(" ");
        if (ou.length == 1) {
            this.padding_bottom = ou[0];
            this.padding_top = ou[0];
            this.padding_left = ou[0];
            this.padding_right = ou[0];
        } else {
            if (ou.length == 2) {
                this.padding_bottom = ou[0];
                this.padding_top = ou[0];
                this.padding_left = ou[1];
                this.padding_right = ou[1];
            } else {
                if (ou.length == 3) {
                    this.padding_bottom = ou[2];
                    this.padding_top = ou[0];
                    this.padding_left = ou[1];
                    this.padding_right = ou[1];
                } else {
                    if (ou.length > 3) {
                        this.padding_bottom = ou[2];
                        this.padding_top = ou[0];
                        this.padding_left = ou[3];
                        this.padding_right = ou[1];
                    }
                }
            }
        }
    };
    i9.prototype.setPaddingTop = function (ou) {
        this.padding_top = ou;
    };
    i9.prototype.setPaddingBottom = function (ou) {
        this.padding_bottom = ou;
    };
    i9.prototype.setPaddingRight = function (ou) {
        this.padding_right = ou;
    };
    i9.prototype.setPaddingLeft = function (ou) {
        this.padding_left = ou;
    };
    i9.prototype.getBorder_style_bottom = function () {
        if (this.border_style_bottom != null) {
            return this.border_style_bottom.toLowerCase();
        }
        return this.border_style_bottom;
    };
    i9.prototype.setBorder_style_bottom = function (ou) {
        this.border_style_bottom = ou;
    };
    i9.prototype.getBorder_width_bottom = function (ou) {
        return m2.getLength(this.border_width_bottom, ou);
    };
    i9.prototype.getBorder_style_left = function () {
        if (this.border_style_left != null) {
            return this.border_style_left.toLowerCase();
        }
        return this.border_style_left;
    };
    i9.prototype.setBorder_style_left = function (ou) {
        this.border_style_left = ou;
    };
    i9.prototype.getBorder_width_left = function (ou) {
        return m2.getLength(this.border_width_left, ou);
    };
    i9.prototype.getBorder_style_right = function () {
        if (this.border_style_right != null) {
            return this.border_style_right.toLowerCase();
        }
        return this.border_style_right;
    };
    i9.prototype.setBorder_style_right = function (ou) {
        this.border_style_right = ou;
    };
    i9.prototype.getBorder_width_right = function (ou) {
        return m2.getLength(this.border_width_right, ou);
    };
    i9.prototype.getBorder_style_top = function () {
        if (this.border_style_top != null) {
            return this.border_style_top.toLowerCase();
        }
        return this.border_style_top;
    };
    i9.prototype.setBorder_style_top = function (ou) {
        this.border_style_top = ou;
    };
    i9.prototype.getBorder_width_top = function (ou) {
        return m2.getLength(this.border_width_top, ou);
    };
    i9.prototype.getMargin_bottom = function (ou) {
        return m2.getLength(this.margin_bottom, ou);
    };
    i9.prototype.getMargin_left = function (ou) {
        return m2.getLength(this.margin_left, ou);
    };
    i9.prototype.getMargin_right = function (ou) {
        return m2.getLength(this.margin_right, ou);
    };
    i9.prototype.getMargin_top = function (ou) {
        return m2.getLength(this.margin_top, ou);
    };
    i9.prototype.getMargin_topS = function () {
        return this.margin_top;
    };
    i9.prototype.getMargin_bottomS = function () {
        return this.margin_bottom;
    };
    i9.prototype.getMargin_leftS = function () {
        return this.margin_left;
    };
    i9.prototype.getMargin_rightS = function () {
        return this.margin_right;
    };
    i9.prototype.getPadding_bottom = function (ou) {
        return m2.getLength(this.padding_bottom, ou);
    };
    i9.prototype.getPadding_left = function (ou) {
        return m2.getLength(this.padding_left, ou);
    };
    i9.prototype.getPadding_right = function (ou) {
        return m2.getLength(this.padding_right, ou);
    };
    i9.prototype.getPadding_top = function (ou) {
        return m2.getLength(this.padding_top, ou);
    };
    i9.prototype.getPadding_topS = function () {
        return this.padding_top;
    };
    i9.prototype.getPadding_bottomS = function () {
        return this.padding_bottom;
    };
    i9.prototype.getPadding_leftS = function () {
        return this.padding_left;
    };
    i9.prototype.getPadding_rightS = function () {
        return this.padding_right;
    };
    i9.prototype.getBorder_color_bottom = function () {
        return this.border_color_bottom;
    };
    i9.prototype.setBorder_color_bottom = function (ou) {
        this.border_color_bottom = ou;
    };
    i9.prototype.getBorder_color_left = function () {
        return this.border_color_left;
    };
    i9.prototype.setBorder_color_left = function (ou) {
        this.border_color_left = ou;
    };
    i9.prototype.getBorder_color_right = function () {
        return this.border_color_right;
    };
    i9.prototype.setBorder_color_right = function (ou) {
        this.border_color_right = ou;
    };
    i9.prototype.getBorder_color_top = function () {
        return this.border_color_top;
    };
    i9.prototype.setBorder_color_top = function (ou) {
        this.border_color_top = ou;
    };
    i9.prototype.getBorder_width_bottom_S = function () {
        return this.border_width_bottom;
    };
    i9.prototype.getBorder_width_left_S = function () {
        return this.border_width_left;
    };
    i9.prototype.getBorder_width_right_S = function () {
        return this.border_width_right;
    };
    i9.prototype.getBorder_width_top_S = function () {
        return this.border_width_top;
    };
    i9.prototype.getStringStyle = function (ow) {
        var ov = "";
        if (this.borderWidthSet()) {
            if (
                this.equalsString(
                    this.border_width_top,
                    this.border_width_bottom,
                ) &&
                this.equalsString(
                    this.border_width_top,
                    this.border_width_left,
                ) &&
                this.equalsString(
                    this.border_width_top,
                    this.border_width_right,
                ) &&
                this.equalsString(
                    this.border_style_top,
                    this.border_style_bottom,
                ) &&
                this.equalsString(
                    this.border_style_top,
                    this.border_style_left,
                ) &&
                this.equalsString(
                    this.border_style_top,
                    this.border_style_right,
                ) &&
                this.equalsColor(
                    this.border_color_top,
                    this.border_color_bottom,
                ) &&
                this.equalsColor(
                    this.border_color_top,
                    this.border_color_left,
                ) &&
                this.equalsColor(this.border_color_top, this.border_color_right)
            ) {
                var ou = this.addBorderStyle(
                    this.border_width_top,
                    this.border_style_top,
                    this.border_color_top,
                );
                if (ou.length > 0) {
                    ov = ov + "border:" + ou + ";";
                }
            } else {
                var ou = this.addBorderStyle(
                    this.border_width_top,
                    this.border_style_top,
                    this.border_color_top,
                );
                if (ou.length > 0) {
                    ov = ov + "border-top:" + ou + ";";
                }
                ou = this.addBorderStyle(
                    this.border_width_bottom,
                    this.border_style_bottom,
                    this.border_color_bottom,
                );
                if (ou.length > 0) {
                    ov = ov + "border-bottom:" + ou + ";";
                }
                ou = this.addBorderStyle(
                    this.border_width_left,
                    this.border_style_left,
                    this.border_color_left,
                );
                if (ou.length > 0) {
                    ov = ov + "border-left:" + ou + ";";
                }
                ou = this.addBorderStyle(
                    this.border_width_right,
                    this.border_style_right,
                    this.border_color_right,
                );
                if (ou.length > 0) {
                    ov = ov + "border-right:" + ou + ";";
                }
            }
        }
        if (this.marginSet()) {
            if (
                this.equalsString(this.margin_top, this.margin_bottom) &&
                this.equalsString(this.margin_top, this.margin_left) &&
                this.equalsString(this.margin_top, this.margin_right)
            ) {
                var ox = this.margin_top;
                if (ox != null && ox.length > 0) {
                    ov = ov + "margin:" + ox + ";";
                }
            } else {
                var ox = this.margin_top;
                if (ox != null && ox.length > 0) {
                    ov = ov + "margin-top:" + ox + ";";
                }
                ox = this.margin_bottom;
                if (ox != null && ox.length > 0) {
                    ov = ov + "margin-bottom:" + ox + ";";
                }
                ox = this.margin_left;
                if (ox != null && ox.length > 0) {
                    ov = ov + "margin-left:" + ox + ";";
                }
                ox = this.margin_right;
                if (ox != null && ox.length > 0) {
                    ov = ov + "margin-right:" + ox + ";";
                }
            }
        }
        if (this.paddingSet()) {
            if (
                this.equalsString(this.padding_top, this.padding_bottom) &&
                this.equalsString(this.padding_top, this.padding_left) &&
                this.equalsString(this.padding_top, this.padding_right)
            ) {
                var oy = this.padding_top;
                if (
                    oy != null &&
                    oy.length > 0 &&
                    !(oy == this.paddingDefaut)
                ) {
                    ov = ov + "padding:" + oy + ";";
                }
            } else {
                var oy = this.padding_top;
                if (
                    oy != null &&
                    oy.length > 0 &&
                    !(oy == this.paddingDefaut)
                ) {
                    ov = ov + "padding-top:" + oy + ";";
                }
                oy = this.padding_bottom;
                if (
                    oy != null &&
                    oy.length > 0 &&
                    !(oy == this.paddingDefaut)
                ) {
                    ov = ov + "padding-bottom:" + oy + ";";
                }
                oy = this.padding_left;
                if (
                    oy != null &&
                    oy.length > 0 &&
                    !(oy == this.paddingDefaut)
                ) {
                    ov = ov + "padding-left:" + oy + ";";
                }
                oy = this.padding_right;
                if (
                    oy != null &&
                    oy.length > 0 &&
                    !(oy == this.paddingDefaut)
                ) {
                    ov = ov + "padding-right:" + oy + ";";
                }
            }
        }
        if (ow) {
            if (this.getWidth() > 0) {
                ov = ov + "width:" + this.getWidth() + ";";
            }
            if (this.getHeight() > 0) {
                ov = ov + "height:" + this.getHeight() + ";";
            }
        }
        ov = W.trim(ov);
        if (ov.length == 0) {
            return null;
        }
        return ov;
    };
    i9.prototype.addBorderStyle = function (ou, ox, oy) {
        var ow = "";
        if (ou != null && !(ou == "medium")) {
            ow = ou;
        }
        if (ox != null) {
            ow = ow + " " + ox;
        }
        if (oy != null) {
            var ov = oy.getHex();
            if (!(ov == "#000000")) {
                ow = ow + " " + ov;
            }
        }
        ow = W.trim(ow);
        return ow;
    };
    i9.prototype.equalsColor = function (ov, ou) {
        if (ov == null && ou == null) {
            return true;
        }
        if (ov == null || ou == null) {
            return false;
        }
        return ov.getRgb() == ou.getRgb();
    };
    i9.prototype.equalsString = function (ov, ou) {
        if (ov == null && ou == null) {
            return true;
        }
        if (ov == null || ou == null) {
            return false;
        }
        return ov == ou;
    };
    i9.prototype.getWidthCalc = function (ov, ou) {
        if (this.width == null) {
            return 0;
        }
        if (m2.isLengthEmEx(this.width)) {
            return m2.getLength(this.width, ou);
        } else {
            return m2.getLength(this.width, ov);
        }
    };
    i9.prototype.getMaxWidthCalc = function (ov, ou) {
        if (this.maxWidth == null) {
            return 0;
        }
        if (m2.isLengthEmEx(this.maxWidth)) {
            return m2.getLength(this.maxWidth, ou);
        } else {
            return m2.getLength(this.maxWidth, ov);
        }
    };
    i9.prototype.setWidth = function (ou) {
        if ("auto" == ou) {
            return;
        }
        this.width = ou;
    };
    i9.prototype.getWidth = function () {
        return this.widthInt;
    };
    i9.prototype.getHeightCalc = function (ov, ou) {
        if (this.height == null) {
            return 0;
        }
        if (m2.isLengthEmEx(this.height)) {
            return m2.getLength(this.height, ou);
        } else {
            return m2.getLength(this.height, ov);
        }
    };
    i9.prototype.setHeight = function (ou) {
        if ("auto" == ou) {
            return;
        }
        this.height = ou;
    };
    i9.prototype.getHeight = function () {
        return this.heightInt;
    };
    i9.prototype.getWidthS = function () {
        return this.width;
    };
    i9.prototype.getHeightS = function () {
        return this.height;
    };
    i9.prototype.initDimensions = function (ox, ou) {
        var ow = 0;
        var ov = 0;
        if (ox != null) {
            ow = ox.getCssstyle().getWidth();
            ov = ox.getCssstyle().getHeight();
        }
        this.widthInt = this.getWidthCalc(ow, ou);
        this.heightInt = this.getHeightCalc(ov, ou);
        this.maxWidthInt = this.getMaxWidthCalc(ow, ou);
    };
    i9.prototype.initDimensionsLikeSpace = function (ou) {
        this.widthInt = this.getWidthCalc(ou, ou);
        this.heightInt = this.getHeightCalc(ou, ou);
        this.maxWidthInt = this.getMaxWidthCalc(ou, ou);
    };
    i9.prototype.getAlign = function () {
        return this.align;
    };
    i9.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    i9.prototype.getValign = function () {
        return this.valign;
    };
    i9.prototype.setValign = function (ou) {
        this.valign = ou;
    };
    i9.prototype.getWidthInt = function () {
        return this.widthInt;
    };
    i9.prototype.getHeightInt = function () {
        return this.heightInt;
    };
    i9.prototype.getMaxWidth = function () {
        return this.maxWidth;
    };
    i9.prototype.setMaxWidth = function (ou) {
        this.maxWidth = ou;
    };
    i9.prototype.getMaxWidthInt = function () {
        return this.maxWidthInt;
    };
    i9.prototype.getMaxHeight = function () {
        return this.maxHeight;
    };
    i9.prototype.setMaxHeight = function (ou) {
        this.maxHeight = ou;
    };
    i9.prototype.getMaxHeightInt = function () {
        return this.maxHeightInt;
    };
    i9.prototype.getOverflow = function () {
        return this.overflow;
    };
    i9.prototype.setOverflow = function (ou) {
        this.overflow = ou;
    };
    i9.prototype.setPaddingDefaut = function (ou) {
        this.paddingDefaut = ou;
    };
    i9.prototype.getPaddingDefaut = function () {
        return this.paddingDefaut;
    };

    function c2() {}
    c2.getColor = function (ov, ox) {
        if (ov == null) {
            return null;
        }
        var ow = ov;
        if (ow.charAt(0) != "#") {
            ow = c2.getColorCode(ov);
        }
        ow = ow.substring(1, ow.length);
        var ou = c2.getColorName(ow);
        return new kH(ow, ou);
    };
    c2.getColorCode = function (ov) {
        if (ov == null) {
            return "#000000";
        }
        if (ov.charAt(0) == "#") {
            return ov;
        }
        ov = ov.toLowerCase();
        var ow = jj;
        if (ow.indexOf(";" + ov + "=") > -1) {
            var ou = ow.indexOf(";" + ov + "=");
            var ox = ow.indexOf(";", ou + 1);
            return "#" + ow.substring(ou + 2 + ov.length, ox);
        }
        return "#000000";
    };
    c2.existColorCode = function (ov) {
        if (ov == null) {
            return false;
        }
        ov = ov.toLowerCase();
        var ow = jj;
        if (ow.indexOf(";" + ov + "=") > -1) {
            var ou = ow.indexOf(";" + ov + "=");
            var ox = ow.indexOf(";", ou + 1);
            return true;
        }
        return false;
    };
    c2.getColorName = function (ov) {
        if (ov == null) {
            return null;
        }
        if (ov.charAt(0) == "#") {
            ov = ov.substring(1, ov.length);
        }
        ov = ov.toUpperCase();
        var ow = jj;
        if (ow.indexOf("=" + ov + ";") > -1) {
            var ou = ow.indexOf("=" + ov + ";");
            var ox = ow.lastIndexOf(";", ou);
            return ow.substring(ox + 1, ou);
        }
        return ov;
    };

    function cW() {}
    cW.hasSymbolsStartWith = function (ov) {
        var ou = kS;
        return ou.indexOf("|" + ov) > -1;
    };
    cW.hasSymbol = function (ov) {
        var ou = kS;
        return ou.indexOf("|" + ov + "|") > -1;
    };
    cW.getUnicodeCharForCode = function (ou) {
        var ov = cW.getUnicodeValueForCode(ou);
        if (ov == null) {
            return null;
        }
        return lv.getCharFromHexCode(ov);
    };
    cW.getUnicodeValueForCode = function (ow) {
        var ov = kS;
        var ou = ov.indexOf("|" + ow + "|");
        if (ou == -1) {
            return null;
        }
        var ox = ov.lastIndexOf("|", ou - 1);
        return ov.substring(ox + 1, ou);
    };
    cW.getCodeFromUnicodeChar = function (ow) {
        if (ow.length < 1) {
            return "";
        }
        var ou = ow.charCodeAt(0);
        var ov = lv.getHexCodeFromInt(ou).toUpperCase();
        return cW.getCodeFromUnicodeValue(ov);
    };
    cW.getCodeFromUnicodeValue = function (ov) {
        while (ov.indexOf("0") == 0) {
            ov = ov.substring(1, ov.length);
        }
        if (aQ.size() == 0) {
            var ou = cF.split(",");
            var oz = lz.split(",");
            for (var oy = 0; oy < ou.length; oy++) {
                var oB = h.getUnicode(ou[oy]);
                aQ.add(oB);
                f1.add(oz[oy]);
            }
        }
        for (var oy = 0; oy < aQ.size(); oy++) {
            if (ov == aQ.get(oy)) {
                return "\\" + f1.get(oy);
            }
        }
        var ox = kS;
        var ow = ox.indexOf("|" + ov + "|");
        if (ow == -1) {
            return "";
        }
        ow = ow + ov.length + 2;
        var oA = ox.indexOf("|", ow);
        return ox.substring(ow, oA);
    };
    cW.isBrace = function (ow) {
        if (ow == null || ow.length > 1) {
            return false;
        }
        var ou = ow.charCodeAt(0);
        var ov = lv.getHexCodeFromInt(ou).toUpperCase();
        if ("23DF" == ov || "FE38" == ov) {
            return true;
        }
        if ("23DE" == ov || "FE37" == ov) {
            return true;
        }
        return false;
    };
    cW.isBracket = function (ou) {
        if (ou == null || ou.length < 1) {
            return false;
        }
        if (ou == "\\tbrk") {
            return true;
        }
        if (ou == "\\bbrk") {
            return true;
        }
        return false;
    };
    cW.isVector = function (ov) {
        if (ov == null || ov.length < 1) {
            return false;
        }
        if (ov == "\\to") {
            return true;
        }
        var ou = ov.charCodeAt(0);
        if (ou == 8594) {
            return true;
        }
        return false;
    };
    cW.isDot = function (ou) {
        if (ou == null || ou.length < 1) {
            return false;
        }
        if (ou == ".") {
            return true;
        }
        return false;
    };
    cW.convToEntities = function (oz) {
        if (oz == null) {
            return "";
        }
        var oy = new fq("");
        for (var ow = 0; ow < oz.length; ow++) {
            var ov = oz.charAt(ow);
            var ou = oz.charCodeAt(ow);
            if (ou == 160) {
                ou = 32;
                ov = " ";
            }
            if (ou == 8739) {
                oy.append(ov + "");
                continue;
            }
            if (ou > 127) {
                var ox = cW.getCodeFromUnicodeChar(ov + "");
                if (ox.length > 0) {
                    oy.append(ox);
                } else {
                    ox = h.getFirstCodeForNumber(ou);
                    if (ox.length > 0) {
                        oy.append("\\" + ox);
                    } else {
                        oy.append(ov + "");
                    }
                }
            } else {
                oy.append(ov + "");
            }
        }
        return oy.toString();
    };

    function h() {}
    h.getCodesForNumber = function (ou) {
        var ov = lv.getHexCodeFromInt(ou).toUpperCase();
        return h.getCodesForUnicode(ov);
    };
    h.getFirstCodeForNumber = function (ou) {
        var ov = h.getCodesForNumber(ou);
        if (ov.size() == 0) {
            return "";
        }
        return ov.get(0);
    };
    h.getFirstCodeForUnicode = function (ou) {
        var ov = h.getCodesForUnicode(ou);
        if (ov.size() == 0) {
            return "";
        }
        return ov.get(0);
    };
    h.changeCharForCode = function (ov) {
        var ou = "";
        if (ov.indexOf("&#x") == 0 && ov.indexOf(";") == ov.length - 1) {
            ov = ov.substring(3, ov.length - 1);
            ou = lv.getCharFromHexCode(ov);
        } else {
            if (ov.indexOf("&#") == 0 && ov.indexOf(";") == ov.length - 1) {
                ov = ov.substring(2, ov.length - 1);
                ou = lv.getCharFromHexCode(ov);
            } else {
                if (ov.indexOf("&") == 0 && ov.indexOf(";") == ov.length - 1) {
                    ou = h.getChar(ov.substring(1, ov.length - 1));
                }
            }
        }
        return ou;
    };
    h.convertToChars = function (ou) {
        if (ou == null || ou.length == 0) {
            return ou;
        }
        ou = h.replaceDoubleChars(ou);
        ou = h.replaceEntitiesAndHexCode(ou, "");
        ou = h.replaceIEBug(ou);
        ou = h.collapsingWhitespace(ou);
        return ou;
    };
    h.replaceDoubleChars = function (ou) {
        ou = W.replace(ou, "|||", "&#x2980;");
        ou = W.replace(ou, "||", "&#x2016;");
        return ou;
    };
    h.convertToCharsNoCollapsingNBSP = function (ou) {
        if (ou == null || ou.length == 0) {
            return ou;
        }
        ou = h.replaceEntitiesAndHexCode(ou, "");
        ou = h.replaceIEBug(ou);
        ou = h.collapsingWhitespaceNoNBSP(ou);
        return ou;
    };
    h.convToEntities = function (oz) {
        if (oz == null) {
            return "";
        }
        var oy = new fq("");
        for (var ow = 0; ow < oz.length; ow++) {
            var ov = oz.charAt(ow);
            var ou = oz.charCodeAt(ow);
            if (ou > 127) {
                var ox = h.getFirstCodeForNumber(ou);
                if (ox.length > 0) {
                    oy.append("&" + ox + ";");
                } else {
                    oy.append(ov + "");
                }
            } else {
                oy.append(ov + "");
            }
        }
        return oy.toString();
    };
    h.convToUnicode = function (oz) {
        if (oz == null) {
            return "";
        }
        var oy = new fq("");
        for (var ow = 0; ow < oz.length; ow++) {
            var ov = oz.charAt(ow);
            var ou = oz.charCodeAt(ow);
            if (ou > 127) {
                var ox = lv.getHexCodeFromInt(ov);
                ox = ox.toUpperCase();
                oy.append("&#x" + ox + ";");
            } else {
                oy.append(ov + "");
            }
        }
        return oy.toString();
    };
    h.getUnicode = function (ox) {
        if (ox == null || ox == "") {
            return "";
        }
        var ou = "";
        var ow = hn;
        var ov = ow.indexOf("=" + ox + ";");
        if (ov > -1) {
            var oB = ow.lastIndexOf(";", ov);
            var oA = ow.indexOf("=", oB);
            ou = ow.substring(oB + 1, oA);
        } else {
            ov = ow.indexOf("=" + ox + "=");
            if (ov > -1) {
                var oz = ow.lastIndexOf(";", ov);
                var oy = ow.indexOf("=", oz);
                ou = ow.substring(oz + 1, oy);
            }
        }
        if (ou == "") {
            return "";
        }
        return ou;
    };
    h.getChar = function (ov) {
        var ou = h.getUnicode(ov);
        if (ou == "") {
            return "";
        }
        return lv.getCharFromHexCode(ou);
    };
    h.getCodesForUnicode = function (ou) {
        var oz = new fM();
        if (ou == "") {
            return oz;
        }
        while (ou.indexOf("0") == 0) {
            ou = ou.substring(1, ou.length);
        }
        ou = ou.toUpperCase();
        if (ou == "20D7") {
            ou = "2192";
        } else {
            if (ou == "8407") {
                ou = "8594";
            }
        }
        if (ou.length == 4 && ou.substring(0, 1) == "D") {
            ou = "1" + ou;
        }
        var oy = hn;
        var ow = oy.indexOf(";" + ou + "=");
        if (ow > -1) {
            ow = ow + 2 + ou.length;
            var ov = oy.substring(ow, oy.indexOf(";", ow)).split("=");
            for (var ox = 0; ox < ov.length; ox++) {
                oz.add(ov[ox]);
            }
        }
        return oz;
    };
    h.collapsingWhitespaceNoNBSP = function (ou) {
        ou = W.replace(ou, lv.getCharFromHexCode("2002"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2003"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2004"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2005"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2006"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2007"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2008"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2009"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("200A"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("200B"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("205F"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2061"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("2062"), " ");
        ou = W.replace(ou, "\t", " ");
        ou = W.replace(ou, "\n", " ");
        ou = W.replace(ou, "\r", " ");
        while (ou.indexOf("  ") > -1) {
            ou = W.replace(ou, "  ", " ");
        }
        ou = W.trim(ou);
        return ou;
    };
    h.collapsingWhitespace = function (ou) {
        ou = h.collapsingWhitespaceNoNBSP(ou);
        ou = W.replace(ou, lv.getCharFromHexCode("A0"), " ");
        ou = W.replace(ou, lv.getCharFromHexCode("FFA0"), " ");
        ou = W.trim(ou);
        return ou;
    };
    h.getParentOperator = function (oC) {
        if (oC == null || oC.length != 4 || oC.indexOf("E") != 0) {
            return null;
        }
        var ov = e7;
        if (ov.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, ov);
        }
        var oB = og;
        if (oB.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, oB);
        }
        var oA = od;
        if (oA.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, oA);
        }
        var ox = oa;
        if (ox.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, ox);
        }
        var ow = jx;
        if (ow.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, ow);
        }
        var ou = dl;
        if (ou.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, ou);
        }
        var oz = c4;
        if (oz.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, oz);
        }
        var oy = eT;
        if (oy.indexOf("=" + oC + ";") > -1) {
            return h.getParentForDoubleChars(oC, oy);
        }
        return null;
    };
    h.getParentForDoubleChars = function (ow, ou) {
        var ov = ou.indexOf("=" + ow + ";");
        var ox = ou.lastIndexOf(";", ov);
        return ou.substring(ox + 1, ov);
    };
    h.replaceEntitiesAndHexCode = function (oy, ou) {
        var ov = -1;
        while (oy.indexOf("&", ov) > -1) {
            ov = oy.indexOf("&", ov);
            var oz = oy.indexOf(";", ov);
            if (oz > -1) {
                var ox = oy.substring(ov, oz + 1);
                var ow = h.changeCharForCode(ox);
                if (ow.length > 0 && ou.indexOf("," + ox + ",") == -1) {
                    oy = oy.substring(0, ov) + ow + oy.substring(oz + 1);
                } else {
                    ov++;
                }
            } else {
                ov++;
            }
        }
        return oy;
    };
    h.replaceIEBug = function (ov) {
        for (var ou = 0; ou < ov.length; ou++) {
            ov = h.replaceIEBugTag(ov, ou, 247, "ontimes;", "&divide");
            ov = h.replaceIEBugTag(ov, ou, 62, "cc;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "cir;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "dot;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "lPar;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "quest;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "rapprox;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "rarr;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "rdot;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "reqless;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "reqqless;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "rless;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 62, "rsim;", "&gt");
            ov = h.replaceIEBugTag(ov, ou, 60, "cc;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "cir;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "dot;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "hree;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "imes;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "larr;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "quest;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "ri;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "rie;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "rif;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 60, "rPar;", "&lt");
            ov = h.replaceIEBugTag(ov, ou, 172, "indot;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "inE;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "inva;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "invb;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "invc;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "niva;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "nivb;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "nivc;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 172, "ni;", "&not");
            ov = h.replaceIEBugTag(ov, ou, 182, "llel;", "&para");
            ov = h.replaceIEBugTag(ov, ou, 215, "b;", "&times");
            ov = h.replaceIEBugTag(ov, ou, 215, "bar;", "&times");
            ov = h.replaceIEBugTag(ov, ou, 215, "d;", "&times");
            ov = h.replaceIEBugTag(ov, ou, 162, "erdot;", "&cent");
            ov = h.replaceIEBugTag(ov, ou, 169, "sr;", "&copy");
        }
        return ov;
    };
    h.replaceIEBugTag = function (ow, ov, oy, oz, ox) {
        var ou = ow.charCodeAt(ov);
        if (!(ou == oy)) {
            return ow;
        }
        if (ow.length < ov + 1 + oz.length) {
            return ow;
        }
        if (ow.substring(ov + 1, ov + 1 + oz.length) == oz) {
            return (
                ow.substring(0, ov) +
                ox +
                oz +
                ow.substring(ov + 1 + oz.length, ow.length)
            );
        }
        return ow;
    };

    function ac() {}
    ac.changeChar = function (ov) {
        var ou = 0;
        if (ov >= 119808 && ov <= 119833) {
            ou = 65 + ov - 119808;
        }
        if (ov >= 119834 && ov <= 119859) {
            ou = 97 + ov - 119834;
        }
        if (ov >= 120782 && ov <= 120791) {
            ou = 48 + ov - 120782;
        }
        if ((ov >= 119808 && ov <= 119859) || (ov >= 120782 && ov <= 120791)) {
            return "bold:" + lv.getCharFromInt(ou);
        }
        if (ov >= 119860 && ov <= 119885) {
            ou = 65 + ov - 119860;
        }
        if (ov >= 119886 && ov <= 119911) {
            ou = 97 + ov - 119886;
        }
        if (ov >= 119860 && ov <= 119911) {
            return "italic:" + lv.getCharFromInt(ou);
        }
        if (ov >= 119912 && ov <= 119937) {
            ou = 65 + ov - 119912;
        }
        if (ov >= 119938 && ov <= 119963) {
            ou = 97 + ov - 119938;
        }
        if (ov >= 119912 && ov <= 119963) {
            return "bold-italic:" + lv.getCharFromInt(ou);
        }
        if (ov >= 119964 && ov <= 119989) {
            ou = 65 + ov - 119964;
        }
        if (ov >= 119990 && ov <= 120015) {
            ou = 97 + ov - 119990;
        }
        if (ov >= 119964 && ov <= 120015) {
            return "script:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120016 && ov <= 120041) {
            ou = 65 + ov - 120016;
        }
        if (ov >= 120042 && ov <= 120067) {
            ou = 97 + ov - 120042;
        }
        if (ov >= 120016 && ov <= 120067) {
            return "bold-script:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120068 && ov <= 120093) {
            ou = 65 + ov - 120068;
        }
        if (ov >= 120094 && ov <= 120119) {
            ou = 97 + ov - 120094;
        }
        if (ov >= 120068 && ov <= 120119) {
            return "fraktur:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120120 && ov <= 120145) {
            ou = 65 + ov - 120120;
        }
        if (ov >= 120146 && ov <= 120171) {
            ou = 97 + ov - 120146;
        }
        if (ov >= 120792 && ov <= 120801) {
            ou = 48 + ov - 120792;
        }
        if ((ov >= 120120 && ov <= 120171) || (ov >= 120792 && ov <= 120801)) {
            return "double-struck:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120172 && ov <= 120197) {
            ou = 65 + ov - 120172;
        }
        if (ov >= 120198 && ov <= 120223) {
            ou = 97 + ov - 120198;
        }
        if (ov >= 120172 && ov <= 120223) {
            return "bold-fraktur:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120224 && ov <= 120249) {
            ou = 65 + ov - 120224;
        }
        if (ov >= 120250 && ov <= 120275) {
            ou = 97 + ov - 120250;
        }
        if (ov >= 120802 && ov <= 120811) {
            ou = 48 + ov - 120802;
        }
        if ((ov >= 120224 && ov <= 120275) || (ov >= 120802 && ov <= 120811)) {
            return "sans-serif:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120276 && ov <= 120301) {
            ou = 65 + ov - 120276;
        }
        if (ov >= 120302 && ov <= 120327) {
            ou = 97 + ov - 120302;
        }
        if (ov >= 120812 && ov <= 120821) {
            ou = 48 + ov - 120812;
        }
        if ((ov >= 120276 && ov <= 120327) || (ov >= 120812 && ov <= 120821)) {
            return "bold-sans-serif:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120328 && ov <= 120353) {
            ou = 65 + ov - 120328;
        }
        if (ov >= 120354 && ov <= 120379) {
            ou = 97 + ov - 120354;
        }
        if (ov >= 120328 && ov <= 120379) {
            return "sans-serif-italic:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120380 && ov <= 120405) {
            ou = 65 + ov - 120380;
        }
        if (ov >= 120406 && ov <= 120431) {
            ou = 97 + ov - 120406;
        }
        if (ov >= 120380 && ov <= 120431) {
            return "sans-serif-bold-italic:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120432 && ov <= 120457) {
            ou = 65 + ov - 120432;
        }
        if (ov >= 120458 && ov <= 120483) {
            ou = 97 + ov - 120458;
        }
        if (ov >= 120822 && ov <= 120831) {
            ou = 48 + ov - 120822;
        }
        if ((ov >= 120432 && ov <= 120483) || (ov >= 120822 && ov <= 120831)) {
            return "monospace:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120488 && ov <= 120512 && ov != 120505) {
            ou = 913 + ov - 120488;
        }
        if (ov == 120505) {
            ou = 1012;
        }
        if (ov == 120513) {
            ou = 8711;
        }
        if (ov >= 120514 && ov <= 120538) {
            ou = 945 + ov - 120514;
        }
        if (ov == 120539) {
            ou = 8706;
        }
        if (ov == 120540) {
            ou = 8714;
        }
        if (ov == 120541) {
            ou = 977;
        }
        if (ov == 120542) {
            ou = 1008;
        }
        if (ov == 120543) {
            ou = 981;
        }
        if (ov == 120544) {
            ou = 1009;
        }
        if (ov == 120545) {
            ou = 982;
        }
        if (ov >= 120488 && ov <= 120545) {
            return "bold:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120546 && ov <= 120570 && ov != 120563) {
            ou = 913 + ov - 120546;
        }
        if (ov == 120563) {
            ou = 1012;
        }
        if (ov == 120571) {
            ou = 8711;
        }
        if (ov >= 120572 && ov <= 120596) {
            ou = 945 + ov - 120572;
        }
        if (ov == 120597) {
            ou = 8706;
        }
        if (ov == 120598) {
            ou = 8714;
        }
        if (ov == 120599) {
            ou = 977;
        }
        if (ov == 120600) {
            ou = 1008;
        }
        if (ov == 120601) {
            ou = 981;
        }
        if (ov == 120602) {
            ou = 1009;
        }
        if (ov == 120603) {
            ou = 982;
        }
        if (ov >= 120546 && ov <= 120603) {
            return "italic:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120604 && ov <= 120628 && ov != 120621) {
            ou = 913 + ov - 120604;
        }
        if (ov == 120621) {
            ou = 1012;
        }
        if (ov == 120629) {
            ou = 8711;
        }
        if (ov >= 120630 && ov <= 120654) {
            ou = 945 + ov - 120630;
        }
        if (ov == 120655) {
            ou = 8706;
        }
        if (ov == 120656) {
            ou = 8714;
        }
        if (ov == 120657) {
            ou = 977;
        }
        if (ov == 120658) {
            ou = 1008;
        }
        if (ov == 120659) {
            ou = 981;
        }
        if (ov == 120660) {
            ou = 1009;
        }
        if (ov == 120661) {
            ou = 982;
        }
        if (ov >= 120604 && ov <= 120661) {
            return "bold-italic:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120662 && ov <= 120686 && ov != 120679) {
            ou = 913 + ov - 120662;
        }
        if (ov == 120679) {
            ou = 1012;
        }
        if (ov == 120687) {
            ou = 8711;
        }
        if (ov >= 120688 && ov <= 120712) {
            ou = 945 + ov - 120688;
        }
        if (ov == 120713) {
            ou = 8706;
        }
        if (ov == 120714) {
            ou = 8714;
        }
        if (ov == 120715) {
            ou = 977;
        }
        if (ov == 120716) {
            ou = 1008;
        }
        if (ov == 120717) {
            ou = 981;
        }
        if (ov == 120718) {
            ou = 1009;
        }
        if (ov == 120719) {
            ou = 982;
        }
        if (ov >= 120662 && ov <= 120719) {
            return "bold-sans-serif:" + lv.getCharFromInt(ou);
        }
        if (ov >= 120720 && ov <= 120744 && ov != 120737) {
            ou = 913 + ov - 120720;
        }
        if (ov == 120737) {
            ou = 1012;
        }
        if (ov == 120745) {
            ou = 8711;
        }
        if (ov >= 120746 && ov <= 120770) {
            ou = 945 + ov - 120746;
        }
        if (ov == 120771) {
            ou = 8706;
        }
        if (ov == 120772) {
            ou = 8714;
        }
        if (ov == 120773) {
            ou = 977;
        }
        if (ov == 120774) {
            ou = 1008;
        }
        if (ov == 120775) {
            ou = 981;
        }
        if (ov == 120776) {
            ou = 1009;
        }
        if (ov == 120777) {
            ou = 982;
        }
        if (ov >= 120720 && ov <= 120777) {
            return "sans-serif-bold-italic:" + lv.getCharFromInt(ou);
        }
        return null;
    };

    function mX() {}
    mX.replacePreferedValue = function (oB) {
        var oy = -1;
        while (oB.indexOf("&", oy) > -1) {
            oy = oB.indexOf("&", oy);
            var oA = oB.indexOf(";", oy);
            if (oA > -1) {
                var ou = oB.substring(oy, oA + 1);
                var oC = mX.changePreferedCode(ou);
                oB = oB.substring(0, oy) + oC + oB.substring(oA + 1);
                oy = oA;
            } else {
                oy++;
            }
        }
        var ox = "";
        for (var ow = 0; ow < oB.length; ow++) {
            var ov = oB.charCodeAt(ow);
            if (ov == 8722) {
                ov = 45;
            }
            if (ov == 774) {
                ov = 9181;
            }
            if (ov == 8193) {
                ov = 32;
            }
            if (ov == 771) {
                ov = 126;
            }
            var oz = lv.getCharFromInt(ov);
            ox = ox + oz;
        }
        return ox;
    };
    mX.changePreferedCode = function (ou) {
        if (ou == "&minus;") {
            return "-";
        }
        if (ou == "&mid;") {
            return "|";
        }
        if (ou == "&emsp13;") {
            return " ";
        }
        if (ou == "&par;") {
            return "&Verbar;";
        }
        if (ou == "&#65279;") {
            return "";
        }
        return ou;
    };

    function eF() {}
    eF.getListOperators = function () {
        var oz = new fM();
        var ou = -1;
        var ov = jA;
        while ((ou = ov.indexOf("=", ou)) > -1) {
            var oA = ov.lastIndexOf(";", ou);
            var oy = ov.substring(oA + 1, ou);
            var ox = eF.getDefaultStyleForOperator();
            ox.setOperator(oy);
            var ow = eF.getSettingsFor(oy);
            ox.openFromString(ow);
            oz.add(ox);
            ou = ou + 1;
        }
        return oz;
    };
    eF.getAllOperators = function () {
        var oy = new fq("");
        oy.append(oo);
        var ou = -1;
        var ov = jA;
        while ((ou = ov.indexOf("=", ou)) > -1) {
            var ox = ov.lastIndexOf(";", ou);
            var ow = ov.substring(ox + 1, ou);
            if (ow.indexOf(" ") == -1) {
                oy.append(lv.getCharFromHexCode(ow) + ";");
            }
            ou = ou + 1;
        }
        return oy.toString();
    };
    eF.getStyleForOperator = function (oz) {
        var ow = eF.getDefaultStyleForOperator();
        var ov = "";
        if (eF.isMultiCharOperator(oz)) {
            for (var ou = 0; ou < oz.length; ou++) {
                var oy = oz.codePointAt(ou);
                ov = ov + " " + lv.getHexCodeFromInt(oy);
            }
            ov = W.trim(ov);
        } else {
            if (oz.length == 1) {
                var oy = oz.codePointAt(0);
                ov = lv.getHexCodeFromInt(oy);
            }
        }
        if (ov.length > 0) {
            var ox = eF.getSettingsFor(ov);
            if (ox == null) {
                ov = h.getParentOperator(ov);
                if (ov != null) {
                    ox = eF.getSettingsFor(ov);
                }
            }
            if (ox != null) {
                ow.openFromString(ox);
            }
            ow.setOperatorMaxInfo(eF.getMaxInfoLineForUnicode(ov));
        }
        ow.setIntegral(eF.isIntegral(oz));
        ow.setInvisible(eF.isInvisible(oz));
        return ow;
    };
    eF.getLengthForOperatorSpace = function (ow, ou) {
        var ov = "0";
        if (ow == 1) {
            ov = "0.0555556em";
        } else {
            if (ow == 2) {
                ov = "0.111111em";
            } else {
                if (ow == 3) {
                    ov = "0.166667em";
                } else {
                    if (ow == 4) {
                        ov = "0.222222em";
                    } else {
                        if (ow == 5) {
                            ov = "0.277778em";
                        } else {
                            if (ow == 6) {
                                ov = "0.333333em";
                            } else {
                                if (ow == 7) {
                                    ov = "0.388889em";
                                }
                            }
                        }
                    }
                }
            }
        }
        return m2.getLength(ov, ou);
    };
    eF.getDefaultStyleForOperator = function () {
        var ou = new fH();
        ou.setForm("infix");
        return ou;
    };
    eF.isIntegral = function (ou) {
        if (ou == null || ou.length == 0 || ou.length > 1) {
            return false;
        }
        var ox = ou.codePointAt(0);
        var ow = lv.getHexCodeFromInt(ox);
        if (ow.length != 4) {
            return false;
        }
        var ov = k1;
        return ov.indexOf(";" + ow + ";") > -1;
    };
    eF.isOperator = function (ou) {
        if (ou == null || ou.length == 0 || ou.length > 1) {
            return false;
        }
        var ow = ou.codePointAt(0);
        var ov = lv.getHexCodeFromInt(ow);
        if (ov.length != 4) {
            return false;
        }
        return eF.getSettingsFor(ov) != null;
    };
    eF.isInvisible = function (ou) {
        if (ou == null || ou.length == 0 || ou.length > 1) {
            return false;
        }
        var ox = ou.codePointAt(0);
        var ow = lv.getHexCodeFromInt(ox);
        if (ow.length != 4) {
            return false;
        }
        var ov = o;
        return ov.indexOf(";" + ow + ";") > -1;
    };
    eF.getSettingsFor = function (ov) {
        var ox = ";" + ov + "=";
        var ow = jA;
        var ou = ow.indexOf(ox);
        if (ou > -1) {
            var oy = ow.indexOf(";", ou + ox.length);
            return ow.substring(ou + ox.length, oy);
        }
        return null;
    };
    eF.isMultiCharOperator = function (ov) {
        var ou = oo;
        return ou.indexOf(";" + ov + ";") > -1;
    };
    eF.getWidth = function (oz, ov) {
        var ow = eF.getTokensForChar(oz);
        if (ow == null) {
            return -1;
        }
        var oy = ow[2].split("/");
        var ox = lv.getDoubleValue(oy[0], 0);
        var ou = lv.getDoubleValue(oy[1], 0);
        return (ox / ou) * ov;
    };
    eF.getHeight = function (oz, ow) {
        var ov = eF.getTokensForChar(oz);
        if (ov == null) {
            return -1;
        }
        var oy = ov[2].split("/");
        var ox = lv.getDoubleValue(oy[0], 0);
        var ou = lv.getDoubleValue(oy[1], 0);
        return (ou / ox) * ow;
    };
    eF.isStretchy = function (ou) {
        if (eF.isHStretchy(ou)) {
            return true;
        }
        if (eF.isVStretchy(ou)) {
            return true;
        }
        return false;
    };
    eF.isHStretchy = function (ov) {
        var ou = eF.getTokensForChar(ov);
        if (ou == null) {
            return false;
        }
        return ou[1].indexOf("SH") == 0 || ou[1].indexOf("SB") == 0;
    };
    eF.isVStretchy = function (ov) {
        var ou = eF.getTokensForChar(ov);
        if (ou == null) {
            return false;
        }
        return ou[1].indexOf("SV") == 0 || ou[1].indexOf("SB") == 0;
    };
    eF.hasImplementation = function (ov) {
        if (ov == null || ov.length > 1) {
            return false;
        }
        var ou = eF.getLine(ov, 1);
        if (ou == null) {
            return false;
        }
        return true;
    };
    eF.getTokensForChar = function (ow) {
        if (ow == null || ow.length > 1) {
            return null;
        }
        var ou = eF.getLine(ow, 1);
        if (ou == null) {
            return null;
        }
        var ov = ou.split(" ");
        if (ov[1] == "eq") {
            ou = eF.getLineForUnicode(ov[2], 1);
            ov = ou.split(" ");
        }
        if (ov[1].indexOf("sym") == 0 || ov[1].indexOf("eqs") == 0) {
            ou = eF.getLineForUnicode(ov[2], 1);
            ov = ou.split(" ");
        }
        return ov;
    };
    eF.getLine = function (ov, ou) {
        return eF.getLineForUnicode(eF.getUnicode(ov), ou);
    };
    eF.getUnicode = function (ox) {
        var ow = ox.codePointAt(0);
        var ou = lv.getHexCodeFromInt(ow);
        for (var ov = ou.length; ov < 4; ov++) {
            ou = "0" + ou;
        }
        return ou;
    };
    eF.getLineForUnicode = function (ow, oy) {
        if ("0028" == ow && oy <= 2) {
            ow = ow + "N";
        }
        var ov = -1;
        var ou = f;
        if ((ov = ou.indexOf(";" + ow + " ")) > -1) {
            var ox = ou.indexOf(";", ov + 1);
            return ou.substring(ov, ox);
        }
        return null;
    };
    eF.getMaxInfoLineForUnicode = function (oy) {
        var oA = new eZ();
        if (oy == null) {
            return oA;
        }
        for (var oz = oy.length; oz < 4; oz++) {
            oy = "0" + oy;
        }
        var ov = eF.getLineForUnicode(oy, 1);
        if (ov == null) {
            return oA;
        }
        var ou = mK;
        var ox = -1;
        if ((ox = ou.indexOf(";" + oy + " ")) > -1) {
            eF.loadMaxInfo(ou, ox, oA);
            return oA;
        }
        var ow = ov.split(" ");
        if (
            ow[1].indexOf("sym") == 0 ||
            ow[1] == "eq" ||
            ow[1].indexOf("eqs") == 0
        ) {
            oy = ow[2];
        }
        if ((ox = ou.indexOf(";" + oy + " ")) > -1) {
            eF.loadMaxInfo(ou, ox, oA);
        }
        return oA;
    };
    eF.loadMaxInfo = function (ou, ow, ox) {
        var oz = ou.indexOf(";", ow + 1);
        var oy = ou.substring(ow, oz);
        var ov = oy.split(" ");
        if (ov.length == 3) {
            ox.setPercentGrow(lv.getIntegerValue(ov[1], 20));
            ox.setAcceptedWidth(ov[2]);
        }
    };

    function m2() {}
    m2.getPxCm = function () {
        return eO;
    };
    m2.setPxCm = function (ou) {
        eO = ou;
    };
    m2.isPercent = function (ou) {
        if (ou == null) {
            return false;
        }
        return ou.indexOf("%") == ou.length - 1;
    };
    m2.isLength = function (ov) {
        if (ov == null || ov == "") {
            return false;
        }
        ov = ov.toLowerCase();
        if (ov.indexOf("em") > -1) {
            return m2.isNumberUnit(ov, "em");
        } else {
            if (ov.indexOf("%") > -1) {
                return m2.isNumberUnit(ov, "%");
            } else {
                if (ov.indexOf("ex") > -1) {
                    return m2.isNumberUnit(ov, "ex");
                } else {
                    if (ov.indexOf("px") > -1) {
                        return m2.isNumberUnit(ov, "px");
                    } else {
                        if (ov.indexOf("in") > -1) {
                            return m2.isNumberUnit(ov, "in");
                        } else {
                            if (ov.indexOf("cm") > -1) {
                                return m2.isNumberUnit(ov, "cm");
                            } else {
                                if (ov.indexOf("mm") > -1) {
                                    return m2.isNumberUnit(ov, "mm");
                                } else {
                                    if (ov.indexOf("pt") > -1) {
                                        return m2.isNumberUnit(ov, "pt");
                                    } else {
                                        if (ov.indexOf("pc") > -1) {
                                            return m2.isNumberUnit(ov, "pc");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (m2.isLengthNamedspace(ov)) {
            return true;
        }
        if (ov != null && ov.indexOf(".") == 0) {
            ov = "0" + ov;
        }
        var ou = lv.getNumber(ov);
        return lv.isNumber(ou);
    };
    m2.normalizeLength = function (ov) {
        if (ov == null || ov == "") {
            return ov;
        }
        ov = ov.toLowerCase();
        if (ov.indexOf(" ") > -1) {
            return ov;
        }
        if (ov.indexOf("em") > -1) {
            return m2.normalizeNumberUnit(ov, "em");
        } else {
            if (ov.indexOf("%") > -1) {
                return m2.normalizeNumberUnit(ov, "%");
            } else {
                if (ov.indexOf("ex") > -1) {
                    return m2.normalizeNumberUnit(ov, "ex");
                } else {
                    if (ov.indexOf("px") > -1) {
                        return m2.normalizeNumberUnit(ov, "px");
                    } else {
                        if (ov.indexOf("in") > -1) {
                            return m2.normalizeNumberUnit(ov, "in");
                        } else {
                            if (ov.indexOf("cm") > -1) {
                                return m2.normalizeNumberUnit(ov, "cm");
                            } else {
                                if (ov.indexOf("mm") > -1) {
                                    return m2.normalizeNumberUnit(ov, "mm");
                                } else {
                                    if (ov.indexOf("pt") > -1) {
                                        return m2.normalizeNumberUnit(ov, "pt");
                                    } else {
                                        if (ov.indexOf("pc") > -1) {
                                            return m2.normalizeNumberUnit(
                                                ov,
                                                "pc",
                                            );
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (m2.isLengthNamedspace(ov)) {
            return ov;
        }
        var ou = lv.getNumber(ov);
        if (lv.isNumber(ou)) {
            return ou + "";
        }
        return ov;
    };
    m2.getLineThickness = function (ox, ow) {
        var ov = 0;
        if ("thin" == ox) {
            ov = m2.getLength("0.035em", ow);
        } else {
            if ("medium" == ox) {
                ov = m2.getLength("0.09em", ow);
            } else {
                if ("thick" == ox) {
                    ov = m2.getLength("0.18em", ow);
                } else {
                    if (ox.indexOf("%") > -1) {
                        var ou = m2.getLength("0.09em", ow);
                        ov =
                            m2.getIntFromDouble(
                                m2.getNumberUnit(ox, "%") * ou,
                            ) / 100;
                    } else {
                        ov = m2.getLength(ox, ow);
                    }
                }
            }
        }
        if ("thin" == ox || "medium" == ox || "thick" == ox) {
            if (ov < 1) {
                ov = 1;
            }
        }
        return ov;
    };
    m2.isLengthEmEx = function (ou) {
        ou = m2.getLengthNamedspace(ou);
        if (ou.indexOf("em") > -1) {
            return true;
        }
        if (ou.indexOf("ex") > -1) {
            return true;
        }
        return false;
    };
    m2.getLength = function (ow, ou) {
        var ov = m2.getDoubleLength(ow, ou);
        return lv.getIntFromDouble(ov);
    };
    m2.getDoubleLength = function (ov, ou) {
        if (ov == null || ov == "") {
            return 0;
        }
        ov = ov.toLowerCase();
        ov = m2.getLengthNamedspace(ov);
        if (ov.indexOf("em") > -1) {
            return m2.getIntFromDouble(m2.getNumberUnit(ov, "em") * ou * 0.7);
        } else {
            if (ov.indexOf("%") > -1) {
                return (
                    m2.getIntFromDouble(m2.getNumberUnit(ov, "%") * ou) / 100
                );
            } else {
                if (ov.indexOf("ex") > -1) {
                    return m2.getIntFromDouble(
                        m2.getNumberUnit(ov, "ex") * ou * 0.35,
                    );
                } else {
                    if (ov.indexOf("px") > -1) {
                        return m2.getIntFromDouble(m2.getNumberUnit(ov, "px"));
                    } else {
                        if (ov.indexOf("in") > -1) {
                            return m2.getIntFromDouble(
                                m2.getNumberUnit(ov, "in") * 2.54 * eO,
                            );
                        } else {
                            if (ov.indexOf("cm") > -1) {
                                return m2.getIntFromDouble(
                                    m2.getNumberUnit(ov, "cm") * eO,
                                );
                            } else {
                                if (ov.indexOf("mm") > -1) {
                                    return m2.getIntFromDouble(
                                        (m2.getNumberUnit(ov, "mm") * eO) / 10,
                                    );
                                } else {
                                    if (ov.indexOf("pt") > -1) {
                                        return m2.getIntFromDouble(
                                            (m2.getNumberUnit(ov, "pt") *
                                                2.54 *
                                                eO) /
                                                72,
                                        );
                                    } else {
                                        if (ov.indexOf("pc") > -1) {
                                            return m2.getIntFromDouble(
                                                (m2.getNumberUnit(ov, "pc") *
                                                    12 *
                                                    2.54 *
                                                    eO) /
                                                    72,
                                            );
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return lv.getDoubleValue(ov, 0);
    };
    m2.getIntFromDouble = function (ou) {
        return Math.round(ou);
    };
    m2.getLengthNamedspace = function (ou) {
        if (ou == null) {
            return null;
        }
        if (ou == "small") {
            ou = "80%";
        } else {
            if (ou == "normal") {
                ou = "100%";
            } else {
                if (ou == "big") {
                    ou = "120%";
                } else {
                    if (ou == "veryverythin" || ou == "veryverythinmathspace") {
                        ou = "0.0555556em";
                    } else {
                        if (
                            ou == "tight" ||
                            ou == "verythin" ||
                            ou == "verythinmathspace"
                        ) {
                            ou = "0.111111em";
                        } else {
                            if (ou == "thin" || ou == "thinmathspace") {
                                ou = "0.166667em";
                            } else {
                                if (ou == "medium" || ou == "mediummathspace") {
                                    ou = "0.222222em";
                                } else {
                                    if (
                                        ou == "thick" ||
                                        ou == "thickmathspace"
                                    ) {
                                        ou = "0.277778em";
                                    } else {
                                        if (
                                            ou == "loose" ||
                                            ou == "verythick" ||
                                            ou == "verythickmathspace"
                                        ) {
                                            ou = "0.333333em";
                                        } else {
                                            if (
                                                ou == "veryverythick" ||
                                                ou == "veryverythickmathspace"
                                            ) {
                                                ou = "0.388889em";
                                            } else {
                                                if (
                                                    ou ==
                                                        "negativeveryverythin" ||
                                                    ou ==
                                                        "negativeveryverythinmathspace"
                                                ) {
                                                    ou = "-0.0555556em";
                                                } else {
                                                    if (
                                                        ou ==
                                                            "negativeverythin" ||
                                                        ou ==
                                                            "negativeverythinmathspace"
                                                    ) {
                                                        ou = "-0.111111em";
                                                    } else {
                                                        if (
                                                            ou ==
                                                                "negativethin" ||
                                                            ou ==
                                                                "negativethinmathspace"
                                                        ) {
                                                            ou = "-0.166667em";
                                                        } else {
                                                            if (
                                                                ou ==
                                                                    "negativemedium" ||
                                                                ou ==
                                                                    "negativemediummathspace"
                                                            ) {
                                                                ou =
                                                                    "-0.222222em";
                                                            } else {
                                                                if (
                                                                    ou ==
                                                                        "negativethick" ||
                                                                    ou ==
                                                                        "negativethickmathspace"
                                                                ) {
                                                                    ou =
                                                                        "-0.277778em";
                                                                } else {
                                                                    if (
                                                                        ou ==
                                                                            "negativeverythick" ||
                                                                        ou ==
                                                                            "negativeverythickmathspace"
                                                                    ) {
                                                                        ou =
                                                                            "-0.333333em";
                                                                    } else {
                                                                        if (
                                                                            ou ==
                                                                                "negativeveryverythick" ||
                                                                            ou ==
                                                                                "negativeveryverythickmathspace"
                                                                        ) {
                                                                            ou =
                                                                                "-0.388889em";
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ou;
    };
    m2.isLengthNamedspace = function (ou) {
        if (ou == null) {
            return false;
        }
        ou = ou.toLowerCase();
        if (ou == "small") {
            return true;
        } else {
            if (ou == "normal") {
                return true;
            } else {
                if (ou == "big") {
                    return true;
                } else {
                    if (ou == "veryverythin" || ou == "veryverythinmathspace") {
                        return true;
                    } else {
                        if (
                            ou == "tight" ||
                            ou == "verythin" ||
                            ou == "verythinmathspace"
                        ) {
                            return true;
                        } else {
                            if (ou == "thin" || ou == "thinmathspace") {
                                return true;
                            } else {
                                if (ou == "medium" || ou == "mediummathspace") {
                                    return true;
                                } else {
                                    if (
                                        ou == "thick" ||
                                        ou == "thickmathspace"
                                    ) {
                                        return true;
                                    } else {
                                        if (
                                            ou == "loose" ||
                                            ou == "verythick" ||
                                            ou == "verythickmathspace"
                                        ) {
                                            return true;
                                        } else {
                                            if (
                                                ou == "veryverythick" ||
                                                ou == "veryverythickmathspace"
                                            ) {
                                                return true;
                                            } else {
                                                if (
                                                    ou ==
                                                        "negativeveryverythin" ||
                                                    ou ==
                                                        "negativeveryverythinmathspace"
                                                ) {
                                                    return true;
                                                } else {
                                                    if (
                                                        ou ==
                                                            "negativeverythin" ||
                                                        ou ==
                                                            "negativeverythinmathspace"
                                                    ) {
                                                        return true;
                                                    } else {
                                                        if (
                                                            ou ==
                                                                "negativethin" ||
                                                            ou ==
                                                                "negativethinmathspace"
                                                        ) {
                                                            return true;
                                                        } else {
                                                            if (
                                                                ou ==
                                                                    "negativemedium" ||
                                                                ou ==
                                                                    "negativemediummathspace"
                                                            ) {
                                                                return true;
                                                            } else {
                                                                if (
                                                                    ou ==
                                                                        "negativethick" ||
                                                                    ou ==
                                                                        "negativethickmathspace"
                                                                ) {
                                                                    return true;
                                                                } else {
                                                                    if (
                                                                        ou ==
                                                                            "negativeverythick" ||
                                                                        ou ==
                                                                            "negativeverythickmathspace"
                                                                    ) {
                                                                        return true;
                                                                    } else {
                                                                        if (
                                                                            ou ==
                                                                                "negativeveryverythick" ||
                                                                            ou ==
                                                                                "negativeveryverythickmathspace"
                                                                        ) {
                                                                            return true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    m2.isAbsoluteUnit = function (ou) {
        if (ou.indexOf("em") > -1) {
            return true;
        } else {
            if (ou.indexOf("%") > -1) {
                return false;
            } else {
                if (ou.indexOf("ex") > -1) {
                    return true;
                } else {
                    if (ou.indexOf("px") > -1) {
                        return true;
                    } else {
                        if (ou.indexOf("in") > -1) {
                            return true;
                        } else {
                            if (ou.indexOf("cm") > -1) {
                                return true;
                            } else {
                                if (ou.indexOf("mm") > -1) {
                                    return true;
                                } else {
                                    if (ou.indexOf("pt") > -1) {
                                        return true;
                                    } else {
                                        if (ou.indexOf("pc") > -1) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    m2.getNumberUnit = function (ow, ou) {
        var ov = ow.substring(0, ow.indexOf(ou));
        return lv.getDoubleValue(ov, 0);
    };
    m2.isNumberUnit = function (ow, ou) {
        var ov = ow.substring(0, ow.indexOf(ou));
        var ox = lv.getDoubleValue(ov, 0);
        return lv.isNumber(ox);
    };
    m2.normalizeNumberUnit = function (ox, ov) {
        var ow = ox.substring(0, ox.indexOf(ov));
        var ou = lv.getDoubleValue(ow, 0);
        if (lv.isNumber(ou)) {
            return ou + ov;
        }
        return ox;
    };

    function ke() {}

    function aM(ou) {
        this.id = null;
        this.xref = null;
        this.href;
        this.klass;
        this.parentBean = null;
        this.children = new fM();
        this.attributes = new aR();
        this.parentBean = ou;
    }
    aM.prototype.getId = function () {
        return this.id;
    };
    aM.prototype.setId = function (ou) {
        this.id = ou;
    };
    aM.prototype.addChild = function (ou) {
        ou.setParentBean(this);
        this.children.add(ou);
    };
    aM.prototype.removeLastChild = function () {
        if (this.children.size() == 0) {
            return;
        }
        this.children.remove(this.children.size() - 1);
    };
    aM.prototype.addIndexChild = function (ou, ov) {
        ou.setParentBean(this);
        this.children.addTo(ov, ou);
    };
    aM.prototype.getChildren = function () {
        return this.children;
    };
    aM.prototype.getMathBean = function () {
        return this.getRootBean(this);
    };
    aM.prototype.getRootBean = function (ou) {
        if (ou.getParentBean() == null) {
            return ou;
        }
        return this.getRootBean(ou.getParentBean());
    };
    aM.prototype.getBean = function (ou) {
        if (ou < 0 || ou > this.children.size() - 1) {
            return null;
        }
        return this.children.get(ou);
    };
    aM.prototype.setChildren = function (ow) {
        this.children = ow;
        for (var ov = 0; ov < ow.size(); ov++) {
            var ou = ow.get(ov);
            ou.setParentBean(this);
        }
    };
    aM.prototype.clearChildren = function () {
        this.children.clear();
    };
    aM.prototype.getParentBean = function () {
        return this.parentBean;
    };
    aM.prototype.setParentBean = function (ou) {
        this.parentBean = ou;
    };
    aM.prototype.hasAttributes = function () {
        return this.attributes.hasAttributes();
    };
    aM.prototype.clearAttributes = function () {
        this.attributes.clearAttributes();
    };
    aM.prototype.clearAttribute = function (ou) {
        this.attributes.clearAttribute(ou);
    };
    aM.prototype.setAttribute = function (ou, ov) {
        this.attributes.setAttribute(ou, ov);
    };
    aM.prototype.getAttribute = function (ou) {
        return this.attributes.getAttribute(ou);
    };
    aM.prototype.getIntAttribute = function (ou, ow) {
        var ov = this.getAttribute(ou);
        return lv.getIntegerValue(ov, ow);
    };
    aM.prototype.getXref = function () {
        return this.xref;
    };
    aM.prototype.setXref = function (ou) {
        this.xref = ou;
    };
    aM.prototype.getHref = function () {
        return this.href;
    };
    aM.prototype.setHref = function (ou) {
        this.href = ou;
    };
    aM.prototype.getKlass = function () {
        return this.klass;
    };
    aM.prototype.setKlass = function (ou) {
        this.klass = ou;
    };
    aM.prototype.copyAttributes = function (ou) {
        ou.setId(this.getId() + "-copy");
        ou.setXref(this.xref);
        ou.setHref(this.href);
        ou.setParentBean(this.parentBean);
        this.copyOnlyAttributes(ou);
    };
    aM.prototype.copyOnlyAttributes = function (ou) {
        for (var ow = 0; ow < this.attributes.getKeys().size(); ow++) {
            var ov = this.attributes.getKeys().get(ow);
            var ox = this.getAttribute(ov);
            ou.setAttribute(ov, ox);
        }
    };
    aM.prototype.isApplyBean = function () {
        return false;
    };
    aM.prototype.isEmptyBean = function (ou) {
        return ou instanceof bh;
    };
    aM.prototype.getSelectedEmptyBean = function (ov) {
        var ou = new bh(ov);
        ou.setAttribute("editorSelected", "true");
        return ou;
    };
    aM.prototype.getRowBean = function (ov) {
        var ou = new bW(ov);
        return ou;
    };
    aM.prototype.canBeDeleted = function () {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.canDeleteChild(this);
        }
        return false;
    };
    aM.prototype.canDeleteChild = function (ou) {
        return false;
    };
    aM.prototype.deleteMe = function () {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.deleteChild(this);
        }
        return false;
    };
    aM.prototype.deleteChild = function (ou) {
        return false;
    };
    aM.prototype.canInsertMathMLLeft = function (ov, ow, ou) {
        var ox = fe.getBeanNotMath(ow, ou);
        return this.canInsertChildLeft(ov, ox);
    };
    aM.prototype.canInsertChildLeft = function (ou, ov) {
        return false;
    };
    aM.prototype.insertMathMLLeft = function (ov, ow, ou) {
        var ox = fe.getBeanNotMath(ow, ou);
        return this.insertChildLeft(ov, ox);
    };
    aM.prototype.insertChildLeft = function (ou, ov) {
        return false;
    };
    aM.prototype.canInsertMathMLRight = function (ov, ow, ou) {
        var ox = fe.getBeanNotMath(ow, ou);
        return this.canInsertChildRight(ov, ox);
    };
    aM.prototype.canInsertChildRight = function (ou, ov) {
        return false;
    };
    aM.prototype.insertMathMLRight = function (ov, ow, ou) {
        var ox = fe.getBeanNotMath(ow, ou);
        return this.insertChildRight(ov, ox);
    };
    aM.prototype.insertChildRight = function (ou, ov) {
        return false;
    };
    aM.prototype.canReplaceMathML = function (ov, ow, ou) {
        var ox = fe.getBeanNotMath(ow, ou);
        return this.canReplaceChild(ov, ox);
    };
    aM.prototype.canReplaceChild = function (ou, ov) {
        return false;
    };
    aM.prototype.replaceMathML = function (ov, ow, ou) {
        var ox = fe.getBeanNotMath(ow, ou);
        return this.replaceChild(ov, ox);
    };
    aM.prototype.replaceChild = function (ou, ov) {
        return false;
    };
    aM.prototype.getFixChildLeft = function (ov, ow) {
        ov.clearAttribute("editorSelected");
        ow.setAttribute("editorSelected", "true");
        if (this.isEmptyBean(ov)) {
            return ow;
        }
        var ou = this.getRowBean(this);
        ou.addChild(ow);
        ou.addChild(ov);
        return ou;
    };
    aM.prototype.getFixChildRight = function (ov, ow) {
        ov.clearAttribute("editorSelected");
        ow.setAttribute("editorSelected", "true");
        if (this.isEmptyBean(ov)) {
            ow.setParentBean(this);
            return ow;
        }
        var ou = this.getRowBean(this);
        ou.addChild(ov);
        ou.addChild(ow);
        return ou;
    };

    function gK(ov) {
        this.dynamicCreated = false;
        this.canBeMinimizated = true;
        this.toBeMinimized = false;
        this.minimized = false;
        this.minimizeReplace;
        this.style = new fC();
        this.cssstyle = new i9();
        this.currentDefStyle;
        this.applyOperation;
        this.minChildren = 0;
        this.maxChildren = 0;
        this.applyRealChildren = new fM();
        this.applyAllChildrenOnOneLine = true;
        this.dKq = aM;
        this.dKq(ov);
        var ou = ov;
        if (ou != null && ou.getCurrentDefStyle() != null) {
            this.currentDefStyle = ou.getCurrentDefStyle().getCopy();
        } else {
            this.currentDefStyle = new kf();
        }
    }
    ga(gK, aM);
    gK.prototype.initChildren = function () {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            ow.initChildren();
        }
    };
    gK.prototype.copyParentStyle = function (oz) {
        if (this.getAttribute("dir") != null) {
            this.style.setDir(this.getAttribute("dir"));
        } else {
            if (oz.getDir() != null) {
                this.style.setDir(oz.getDir());
            } else {
                this.style.setDir(this.currentDefStyle.getDir());
            }
        }
        if (
            this.getAttribute("mathvariant") == null &&
            oz.getMathvariant() != null
        ) {
            this.style.setMathvariant(oz.getMathvariant().getCopy());
        } else {
            this.style
                .getMathvariant()
                .setMathvariant(this.getAttribute("mathvariant"));
        }
        if (this.getAttribute("fontweight") != null) {
            if (this.getAttribute("fontweight") == "bold") {
                this.style.setBold(true);
            } else {
                this.style.setBold(false);
            }
        }
        if (this.getAttribute("fontstyle") != null) {
            if (this.getAttribute("fontstyle") == "italic") {
                this.style.setItalic(true);
            } else {
                this.style.setItalic(false);
            }
        }
        if ("transparent" == this.getAttribute("mathcolor")) {
            this.clearAttribute("mathcolor");
        }
        if (this.getAttribute("mathcolor") != null) {
            this.style.setColor(this.getAttribute("mathcolor"));
        } else {
            if (oz.getColor() != null && this.style.getColor() == null) {
                this.style.setColor(oz.getColor());
            }
        }
        var oy = c2.getColor(this.style.getColor(), 0);
        if (this.cssstyle.getBorder_color_bottom() == null) {
            this.cssstyle.setBorder_color_bottom(oy);
        }
        if (this.cssstyle.getBorder_color_left() == null) {
            this.cssstyle.setBorder_color_left(oy);
        }
        if (this.cssstyle.getBorder_color_right() == null) {
            this.cssstyle.setBorder_color_right(oy);
        }
        if (this.cssstyle.getBorder_color_top() == null) {
            this.cssstyle.setBorder_color_top(oy);
        }
        if ("transparent" == this.getAttribute("mathbackground")) {
            this.clearAttribute("mathbackground");
        }
        if (this.getAttribute("mathbackground") != null) {
            this.style.setBgcolor(this.getAttribute("mathbackground"));
        }
        var ow = oz.getMathsize();
        if (this.getAttribute("mathsize") != null) {
            this.style.setMathsize(
                m2.getLength(this.getAttribute("mathsize"), ow),
            );
        } else {
            var ox = Math.pow(
                this.getScriptsizemultiplier(),
                this.style.getScriptlevel() - oz.getScriptlevel(),
            );
            var oB = lv.getIntFromDouble(ow * ox);
            this.style.setMathsize(oB);
        }
        var oD = m2.getLength(this.currentDefStyle.getScriptminsize(), 8);
        if (this.style.getMathsize() < oD) {
            this.style.setMathsize(oD);
        }
        this.cssstyle.initDimensions(
            this.getParentBean(),
            this.style.getMathsize(),
        );
        var ov = this.getChildren();
        for (var oA = 0; oA < ov.size(); oA++) {
            var ou = ov.get(oA);
            if (ou.isToBeMinimized()) {
                var oC = this.getBeanForParent();
                oC.setAttribute("mathbackground", "white");
                oC.getCssstyle().setHeight("0.5em");
                oC.setMinimized(true);
                oC.setMinimizeReplace(ou);
                ou.copyParentStyle(this.style);
                ov.addTo(oA, oC);
                ov.remove(oA + 1);
            }
        }
        for (var oA = 0; oA < ov.size(); oA++) {
            var ou = ov.get(oA);
            ou.copyParentStyle(this.style);
        }
        if (this.getHref() != null) {
            var oC = fe.getOnlyTBean(this, this.getHref());
            oC.setAttribute("mathsize", "20");
            oC.setAttribute("mathcolor", "blue");
            oC.setAttribute("mathbackground", "white");
            oC.getCssstyle().setPadding("2px");
            oC.getCssstyle().setBorder("1px");
            oC.getCssstyle().setBorderColor("blue");
            oC.copyParentStyle(this.getStyle());
            this.getMathBean().addTooltip(this.getId(), oC);
        }
    };
    gK.prototype.replaceChildren = function () {};
    gK.prototype.getBeanForParent = function () {
        var ov = fe.getOnlyTBean(this, h.convertToChars("&#x2026;"));
        if (this instanceof hq || this instanceof n2) {
            var ou = new aK(this);
            ou.addChild(ov);
            return ou;
        }
        return ov;
    };
    gK.prototype.modifyScriptlevel = function (ou) {
        this.style.setScriptlevel(this.style.getScriptlevel() + ou);
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            ox.modifyScriptlevel(ou);
        }
    };
    gK.prototype.setScriptlevel = function (ow) {
        this.style.setScriptlevel(ow);
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            ox.setScriptlevel(ow);
        }
    };
    gK.prototype.modifyDisplay = function (ow) {
        this.style.setDisplaystyle(ow);
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            ox.modifyDisplay(ow);
        }
    };
    gK.prototype.getScriptsizemultiplier = function () {
        return this.currentDefStyle.getScriptsizemultiplier();
    };
    gK.prototype.getCurrentDefStyle = function () {
        return this.currentDefStyle;
    };
    gK.prototype.setCurrentDefStyle = function (ou) {
        this.currentDefStyle = ou;
    };
    gK.prototype.getStyle = function () {
        return this.style;
    };
    gK.prototype.setStyle = function (ou) {
        this.style = ou;
    };
    gK.prototype.getCssstyle = function () {
        return this.cssstyle;
    };
    gK.prototype.isAccent = function () {
        return false;
    };
    gK.prototype.isAccentunder = function () {
        return false;
    };
    gK.prototype.getMovablelimits = function () {
        return false;
    };
    gK.prototype.isDynamicCreated = function () {
        return this.dynamicCreated;
    };
    gK.prototype.setDynamicCreated = function (ou) {
        this.dynamicCreated = ou;
    };
    gK.prototype.copyAttributes = function (ou) {
        aM.prototype.copyAttributes.call(this, ou);
        ou.style = this.style.getCopy();
        fe.loadStyleAttributesForBox(this.cssstyle.getStringStyle(true), ou);
        ou.setCurrentDefStyle(this.getCurrentDefStyle());
    };
    gK.findIsBigOperator = function (oy) {
        if (oy instanceof av) {
            var ow = oy;
            return ow.getOperatorStyle().isLargeop();
        } else {
            if (oy instanceof bW) {
                var ov = oy;
                var ou = ov.getChildren();
                if (ou.size() == 1) {
                    var ox = ou.get(0);
                    return gK.findIsBigOperator(ox);
                }
            }
        }
        return false;
    };
    gK.findIsIntegrale = function (oy) {
        if (oy instanceof av) {
            var ow = oy;
            return ow.getOperatorStyle().isIntegral();
        } else {
            if (oy instanceof bW) {
                var ov = oy;
                var ou = ov.getChildren();
                if (ou.size() == 1) {
                    var ox = ou.get(0);
                    return gK.findIsIntegrale(ox);
                }
            }
        }
        return false;
    };
    gK.isOperator = function (oz, ox) {
        if (oz instanceof av) {
            var ow = oz;
            return ox == ow.getText();
        } else {
            if (oz instanceof bW) {
                var ov = oz;
                var ou = ov.getChildren();
                if (ou.size() == 1) {
                    var oy = ou.get(0);
                    return gK.isOperator(oy, ox);
                }
            }
        }
        return false;
    };
    gK.isOperatorValue = function (oB, oy) {
        if (oB instanceof av) {
            var ox = oB;
            var oz = ox.getText();
            if (oz == null || oz.length == 0 || oz.length > 1) {
                return false;
            }
            var ow = oz.charCodeAt(0);
            return ow == oy;
        } else {
            if (oB instanceof bW) {
                var ov = oB;
                var ou = ov.getChildren();
                if (ou.size() == 1) {
                    var oA = ou.get(0);
                    return gK.isOperatorValue(oA, oy);
                }
            }
        }
        return false;
    };
    gK.prototype.toString = function (ou) {
        return lc.getMathml(this, hV, true, ou);
    };
    gK.prototype.isCanBeMinimizated = function () {
        return this.canBeMinimizated;
    };
    gK.prototype.setCanBeMinimizated = function (ou) {
        this.canBeMinimizated = ou;
    };
    gK.prototype.isToBeMinimized = function () {
        return this.toBeMinimized;
    };
    gK.prototype.setToBeMinimized = function (ou) {
        this.toBeMinimized = ou;
    };
    gK.prototype.isMinimizedBean = function () {
        return this.minimized;
    };
    gK.prototype.setMinimized = function (ou) {
        this.minimized = ou;
    };
    gK.prototype.getMinimizeReplace = function () {
        return this.minimizeReplace;
    };
    gK.prototype.setMinimizeReplace = function (ou) {
        this.minimizeReplace = ou;
    };
    gK.prototype.addDefaultPadding = function (ow) {
        if (this.currentDefStyle.getDefaultPadding() == 0) {
            return;
        }
        if (this.isInsideStackElement(this)) {
            return;
        }
        var ov =
            lv.getIntFromDouble(
                (ow * this.currentDefStyle.getDefaultPadding()) / 100,
            ) + 1;
        var ou = ov + "";
        this.getCssstyle().setPaddingDefaut(ou);
        if (this.getCssstyle().getPadding_bottomS() == null) {
            this.getCssstyle().setPaddingBottom(ou);
        }
        if (this.getCssstyle().getPadding_topS() == null) {
            this.getCssstyle().setPaddingTop(ou);
        }
        if (this.getCssstyle().getPadding_leftS() == null) {
            this.getCssstyle().setPaddingLeft(ou);
        }
        if (this.getCssstyle().getPadding_rightS() == null) {
            this.getCssstyle().setPaddingRight(ou);
        }
    };
    gK.prototype.isInsideStackElement = function (ou) {
        if (ou instanceof hq || ou instanceof dF) {
            return true;
        }
        var ov = ou.getParentBean();
        if (ov == null) {
            return false;
        }
        return this.isInsideStackElement(ov);
    };
    gK.prototype.removeDefaultPadding = function (ow) {
        if (this.currentDefStyle.getDefaultPadding() == 0) {
            return;
        }
        if (this.getCssstyle().getPaddingDefaut() == null) {
            return;
        }
        var ov =
            lv.getIntFromDouble(
                (ow * this.currentDefStyle.getDefaultPadding()) / 100,
            ) + 1;
        var ou = ov + "";
        this.getCssstyle().setPaddingDefaut(null);
        if (this.getCssstyle().getPadding_bottomS() == ou) {
            this.getCssstyle().setPaddingBottom(null);
        }
        if (this.getCssstyle().getPadding_topS() == ou) {
            this.getCssstyle().setPaddingTop(null);
        }
        if (this.getCssstyle().getPadding_leftS() == ou) {
            this.getCssstyle().setPaddingLeft(null);
        }
        if (this.getCssstyle().getPadding_rightS() == ou) {
            this.getCssstyle().setPaddingRight(null);
        }
    };
    gK.prototype.isSpaceLikeElement = function () {
        return false;
    };
    gK.prototype.isMinimized = function () {
        return this.minimized;
    };
    gK.prototype.getApplyOperation = function () {
        return this.applyOperation;
    };
    gK.prototype.setApplyOperation = function (ou) {
        this.applyOperation = ou;
    };
    gK.prototype.isApplyUnary = function () {
        return this.maxChildren == 1;
    };
    gK.prototype.getApplyRealChildren = function () {
        return this.applyRealChildren;
    };
    gK.prototype.addApplyRealChild = function (ou) {
        this.applyRealChildren.add(ou);
    };
    gK.prototype.isApplyAllChildrenOnOneLine = function () {
        return this.applyAllChildrenOnOneLine;
    };
    gK.prototype.setApplyAllChildrenOnOneLine = function (ou) {
        this.applyAllChildrenOnOneLine = ou;
    };
    gK.prototype.isApplyCanAddNewChild = function () {
        return this.maxChildren == -1;
    };
    gK.prototype.createParanthesis = function (ov) {
        var ow = fe.getOBean(this, ov);
        ow.setDynamicCreated(true);
        var ou = this.haveMoreLines(this);
        if (!ou) {
            ow.setMaxsize("1");
        }
        return ow;
    };
    gK.prototype.haveMoreLines = function (oy) {
        var ov = oy.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox instanceof eX || ox instanceof lK || ox instanceof jq) {
                return true;
            }
            if (ox.isApplyBean()) {
                var ow = this.haveMoreLines(ox);
                if (ow) {
                    return ow;
                }
            }
        }
        return false;
    };
    gK.prototype.setAllChildrenOnOneLineParent = function (ou, ow) {
        var ov = ou.getParentBean();
        if (ov == null) {
            return;
        }
        if (ov.isApplyBean()) {
            ov.setApplyAllChildrenOnOneLine(ow);
        }
        this.setAllChildrenOnOneLineParent(ov, ow);
    };
    gK.prototype.getMinChildren = function () {
        return this.minChildren;
    };
    gK.prototype.setMinChildren = function (ou) {
        this.minChildren = ou;
    };
    gK.prototype.getMaxChildren = function () {
        return this.maxChildren;
    };
    gK.prototype.setMaxChildren = function (ou) {
        this.maxChildren = ou;
    };
    gK.prototype.addFunctionConstant = function (ox, ou) {
        var ow = this.getApplyRealChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy.isDynamicCreated()) {
                continue;
            }
            oy.addFunctionConstant(ox, ou);
        }
    };
    gK.prototype.calculateResult = function (ov, ow) {
        var ou = new hQ();
        ou.setError(true);
        return ou;
    };
    gK.prototype.setDoubleResult = function (ou, ov) {
        ov.setNanError(isNaN(ou));
        ov.setInfinity(!isFinite(ou));
        ou = parseFloat(ou.toFixed(15));
        ov.setValue(ou);
    };
    gK.prototype.getApplyLikeText = function (ou) {
        return "";
    };
    gK.prototype.addIndexApplyChild = function (ou, ov) {
        ou.setParentBean(this);
        this.applyRealChildren.addTo(ov, ou);
    };

    function os(ou) {
        this.num;
        this.denum;
        this.numalign;
        this.denomalign;
        this.linethickness;
        this.space;
        this.bevelled = false;
        this.dKr = gK;
        this.dKr(ou);
        this.setMaxChildren(2);
    }
    ga(os, gK);
    os.prototype.copyParentStyle = function (ou) {
        this.replaceChildren();
        this.addDefaultPadding(ou.getMathsize());
        gK.prototype.copyParentStyle.call(this, ou);
    };
    os.prototype.replaceChildren = function () {
        this.num = this.getChildren().get(0);
        this.denum = this.getChildren().get(1);
    };
    os.prototype.getNum = function () {
        return this.num;
    };
    os.prototype.getDenum = function () {
        return this.denum;
    };
    os.prototype.getNumalign = function () {
        return this.numalign;
    };
    os.prototype.setNumalign = function (ou) {
        this.numalign = ou;
    };
    os.prototype.getDenomalign = function () {
        return this.denomalign;
    };
    os.prototype.setDenomalign = function (ou) {
        this.denomalign = ou;
    };
    os.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    os.prototype.setLinethickness = function (ou) {
        this.linethickness = ou;
    };
    os.prototype.isBevelled = function () {
        return this.bevelled;
    };
    os.prototype.setBevelled = function (ou) {
        this.bevelled = ou;
    };
    os.prototype.getSpace = function () {
        return this.space;
    };
    os.prototype.setSpace = function (ou) {
        this.space = ou;
    };
    os.prototype.canDeleteChild = function (ou) {
        if (this.num != ou && this.denum != ou) {
            return false;
        }
        return !this.isEmptyBean(ou);
    };
    os.prototype.deleteChild = function (ou) {
        if (this.num == ou) {
            this.num = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.denum == ou) {
            this.denum = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    os.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    os.prototype.insertChildLeft = function (ou, ov) {
        ov.setParentBean(this);
        if (this.num == ou) {
            this.num = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.denum == ou) {
            this.denum = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    os.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    os.prototype.insertChildRight = function (ou, ov) {
        ov.setParentBean(this);
        if (this.num == ou) {
            this.num = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.denum == ou) {
            this.denum = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    os.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    os.prototype.replaceChild = function (ou, ov) {
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this.num == ou) {
            this.num = ov;
            return true;
        }
        if (this.denum == ou) {
            this.denum = ov;
            return true;
        }
        return false;
    };

    function eX(ou) {
        this.dKs = os;
        this.dKs(ou);
        this.setApplyOperation("divide");
        this.setMinChildren(2);
        this.setMaxChildren(2);
        this.setApplyAllChildrenOnOneLine(false);
        this.setAllChildrenOnOneLineParent(this, false);
    }
    ga(eX, os);
    eX.prototype.isApplyBean = function () {
        return true;
    };
    eX.prototype.addChild = function (ou) {
        if (this.getApplyRealChildren().size() < 2) {
            this.addApplyRealChild(ou);
            aM.prototype.addChild.call(this, ou);
        }
    };
    eX.prototype.calculateResult = function (oz, oA) {
        var ow = this.getApplyRealChildren();
        if (ow.size() != 2) {
            var ov = new hQ();
            ov.setValue(0);
            ov.setError(true);
            return ov;
        }
        var ov = new hQ();
        ov.setValue(0);
        var oy = ow.get(0);
        var ou = oy.calculateResult(oz, oA);
        if (!ou.isError()) {
            var ox = ow.get(1);
            var oB = ox.calculateResult(oz, oA);
            if (!oB.isError()) {
                if (oB.getValue() == 0) {
                    ov.setInfinity(true);
                    return ov;
                }
                this.setDoubleResult(ou.getValue() / oB.getValue(), ov);
                return ov;
            }
        }
        ov.setError(true);
        return ov;
    };
    eX.prototype.getApplyLikeText = function (oy) {
        var ou = "";
        var ov = this.getApplyRealChildren();
        if (ov.size() == 2) {
            var ox = ov.get(0);
            var ow = ov.get(1);
            return ox.getApplyLikeText(oy) + "/" + ow.getApplyLikeText(oy);
        }
        return ou;
    };
    eX.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    eX.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    eX.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    eX.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    eX.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    eX.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    eX.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    eX.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function m6(ou) {
        this._base;
        this.exp;
        this.superscriptshift;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(m6, gK);
    m6.prototype.copyParentStyle = function (ou) {
        this.exp.modifyScriptlevel(1);
        this.exp.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
    };
    m6.prototype.initChildren = function () {
        if (this._base == null) {
            this.replaceChildren();
        }
        gK.prototype.initChildren.call(this);
    };
    m6.prototype.replaceChildren = function () {
        this._base = this.getChildren().get(0);
        this.exp = this.getChildren().get(1);
    };
    m6.prototype.getBase = function () {
        return this._base;
    };
    m6.prototype.getExp = function () {
        return this.exp;
    };
    m6.prototype.getSuperscriptshift = function () {
        return this.superscriptshift;
    };
    m6.prototype.setSuperscriptshift = function (ou) {
        this.superscriptshift = ou;
    };
    m6.prototype.canDeleteChild = function (ou) {
        if (this._base != ou && this.exp != ou) {
            return false;
        }
        return !this.isEmptyBean(ou);
    };
    m6.prototype.deleteChild = function (ou) {
        if (this._base == ou) {
            this._base = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    m6.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    m6.prototype.insertChildLeft = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    m6.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    m6.prototype.insertChildRight = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    m6.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    m6.prototype.replaceChild = function (ou, ov) {
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = ov;
            return true;
        }
        if (this.exp == ou) {
            this.exp = ov;
            return true;
        }
        return false;
    };

    function lK(ov) {
        this.dKt = m6;
        this.dKt(ov);
        this.setApplyOperation("exp");
        this.setMinChildren(1);
        this.setMaxChildren(1);
        this.setApplyAllChildrenOnOneLine(false);
        this.setAllChildrenOnOneLineParent(this, false);
        var ou = fe.getCnBean(this, "e");
        ou.setDynamicCreated(true);
        aM.prototype.addChild.call(this, ou);
    }
    ga(lK, m6);
    lK.prototype.isApplyBean = function () {
        return true;
    };
    lK.prototype.addChild = function (ou) {
        if (this.getApplyRealChildren().size() < 1) {
            this.addApplyRealChild(ou);
            aM.prototype.addChild.call(this, ou);
        }
    };
    lK.prototype.calculateResult = function (ow, ox) {
        var ov = this.getApplyRealChildren();
        if (ov.size() != 1) {
            var ou = new hQ();
            ou.setValue(0);
            ou.setError(true);
            return ou;
        }
        var ou = new hQ();
        ou.setValue(0);
        var oz = ov.get(0);
        var oy = oz.calculateResult(ow, ox);
        if (!oy.isError()) {
            this.setDoubleResult(Math.exp(oy.getValue()), ou);
        } else {
            oy.setValue(0);
            return oy;
        }
        return ou;
    };
    lK.prototype.getApplyLikeText = function (ow) {
        var ou = "";
        var ov = this.getApplyRealChildren();
        if (ov.size() == 1) {
            var ox = ov.get(0);
            return "e^" + ox.getApplyLikeText(ow);
        }
        return ou;
    };
    lK.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    lK.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    lK.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    lK.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    lK.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    lK.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    lK.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    lK.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function bW(ou) {
        this.rowalign;
        this.linestyle;
        this.lineleading;
        this.indentalignfirst;
        this.indentshiftfirst;
        this.indenttargetfirst;
        this.indentalignlast;
        this.indentshiftlast;
        this.indenttargetlast;
        this.lastRow;
        this.currentIdLine = 1;
        this.dKr = gK;
        this.dKr(ou);
        this.lastRow = this.createAddLine(null);
        this.setMaxChildren(-1);
    }
    ga(bW, gK);
    bW.prototype.copyParentStyle = function (ou) {
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            if (ox.getChildren().size() == 0) {
                ow.remove(ov);
                ov = ov - 1;
            }
        }
        gK.prototype.copyParentStyle.call(this, ou);
        this.setTargetFirstLast();
    };
    bW.prototype.setTargetFirstLast = function () {
        var ov = this.getChildren();
        if (ov.size() > 0) {
            var ou = ov.get(0);
            if (this.indentalignfirst != null) {
                ou.setIndentalign(this.indentalignfirst);
            }
            if (this.indentshiftfirst != null) {
                ou.setIndentshift(this.indentshiftfirst);
            }
            if (this.indenttargetfirst != null) {
                ou.setIndenttarget(this.indenttargetfirst);
            }
        }
        if (ov.size() > 1) {
            var ou = ov.get(ov.size() - 1);
            if (this.indentalignlast != null) {
                ou.setIndentalign(this.indentalignlast);
            }
            if (this.indentshiftlast != null) {
                ou.setIndentshift(this.indentshiftlast);
            }
            if (this.indenttargetlast != null) {
                ou.setIndenttarget(this.indenttargetlast);
            }
        }
    };
    bW.prototype.addChild = function (ou) {
        if (ou instanceof lY) {
            var ov = ou;
            if (ov.getLinebreak() != null) {
                if (ov instanceof av) {
                    var ow = ov;
                    ow.updateLinebreakmultchar();
                }
                if ("after" == ov.getLinebreakstyle()) {
                    this.lastRow.addChild(ou);
                    this.lastRow = this.createAddLine(ov);
                    return;
                } else {
                    if ("duplicate" == ov.getLinebreakstyle()) {
                        this.lastRow.addChild(ou);
                        this.lastRow = this.createAddLine(ov);
                    } else {
                        this.lastRow = this.createAddLine(ov);
                    }
                }
            }
        }
        this.lastRow.addChild(ou);
    };
    bW.prototype.removeLastChild = function (ou) {
        this.lastRow.removeLastChild();
    };
    bW.prototype.createAddLine = function (ov) {
        var ou = new jt(this);
        ou.setId(this.getId() + "l" + this.currentIdLine);
        this.currentIdLine = this.currentIdLine + 1;
        ou.setCurrentDefStyle(this.getCurrentDefStyle());
        ou.setStyle(this.getStyle().getCopy());
        fe.loadStyleAttributes(this.linestyle, ou);
        if (ov != null) {
            ou.setIndentBean(ov);
            ou.setLineleading(ov.getLineleading());
            ou.setIndentalign(ov.getIndentalign());
            ou.setIndentshift(ov.getIndentshift());
            ou.setIndenttarget(ov.getIndenttarget());
            if (ov.getIndentalignfirst() != null) {
                this.indentalignfirst = ov.getIndentalignfirst();
                this.indentshiftfirst = ov.getIndentshiftfirst();
                this.indenttargetfirst = ov.getIndenttarget();
            }
            if (ov.getIndentalignlast() != null) {
                this.indentalignlast = ov.getIndentalignlast();
                this.indentshiftlast = ov.getIndentshiftlast();
                this.indenttargetlast = ov.getIndenttarget();
            }
        }
        aM.prototype.addChild.call(this, ou);
        return ou;
    };
    bW.prototype.getRowalign = function () {
        return this.rowalign;
    };
    bW.prototype.setRowalign = function (ou) {
        if (ou == null) {
            return;
        }
        ou = ou.toLowerCase();
        if (
            ou == "top" ||
            ou == "center" ||
            ou == "bottom" ||
            ou == "baseline" ||
            ou == "axis"
        ) {
            this.rowalign = ou;
        }
    };
    bW.prototype.isAccent = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ov = ou.get(0);
            return ov.isAccent();
        }
        return false;
    };
    bW.prototype.isAccentunder = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ov = ou.get(0);
            return ov.isAccentunder();
        }
        return false;
    };
    bW.prototype.getMovablelimits = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ov = ou.get(0);
            return ov.getMovablelimits();
        }
        return false;
    };
    bW.prototype.getIndentalignfirst = function () {
        return this.indentalignfirst;
    };
    bW.prototype.setIndentalignfirst = function (ou) {
        this.indentalignfirst = ou;
    };
    bW.prototype.getIndentshiftfirst = function () {
        return this.indentshiftfirst;
    };
    bW.prototype.setIndentshiftfirst = function (ou) {
        this.indentshiftfirst = ou;
    };
    bW.prototype.getIndentalignlast = function () {
        return this.indentalignlast;
    };
    bW.prototype.setIndentalignlast = function (ou) {
        this.indentalignlast = ou;
    };
    bW.prototype.getIndentshiftlast = function () {
        return this.indentshiftlast;
    };
    bW.prototype.setIndentshiftlast = function (ou) {
        this.indentshiftlast = ou;
    };
    bW.prototype.setLinestyle = function (ou) {
        this.linestyle = ou;
    };
    bW.prototype.getLinestyle = function () {
        return this.linestyle;
    };
    bW.prototype.getIndenttargetfirst = function () {
        return this.indenttargetfirst;
    };
    bW.prototype.getIndenttargetlast = function () {
        return this.indenttargetlast;
    };
    bW.prototype.getLineleading = function () {
        return this.lineleading;
    };
    bW.prototype.setLineleading = function (ou) {
        this.lineleading = ou;
    };
    bW.prototype.getLastRow = function () {
        return this.lastRow;
    };
    bW.prototype.resetChildren = function () {
        this.getChildren().clear();
        this.currentIdLine = 1;
        this.lastRow = this.createAddLine(null);
    };
    bW.prototype.isSpaceLikeElement = function () {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (!ow.isSpaceLikeElement()) {
                return false;
            }
        }
        return true;
    };
    bW.prototype.canDeleteChild = function (ou) {
        var oy = false;
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            if (ox == ou) {
                oy = true;
                break;
            }
        }
        if (!oy) {
            return false;
        }
        if (ow.size() > 1) {
            return true;
        }
        return this.getParentBean().canDeleteChild(this);
    };
    bW.prototype.deleteChild = function (ou) {
        var ow = this.getChildren();
        if (ow.size() > 1) {
            for (var ov = 0; ov < ow.size(); ov++) {
                var ox = ow.get(ov);
                if (ox == ou) {
                    ow.remove(ov);
                    return true;
                }
            }
        } else {
            return this.getParentBean().deleteChild(this);
        }
        return false;
    };
    bW.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    bW.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    bW.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };

    function m1(ou) {
        this.dKu = bW;
        this.dKu(ou);
        this.setApplyOperation("factorial");
        this.setMinChildren(1);
        this.setMaxChildren(1);
    }
    ga(m1, bW);
    m1.prototype.isApplyBean = function () {
        return true;
    };
    m1.prototype.calculateResult = function (ow, ox) {
        var ov = this.getApplyRealChildren();
        if (ov.size() != 1) {
            var ou = new hQ();
            ou.setValue(0);
            ou.setError(true);
            return ou;
        }
        var ou = new hQ();
        ou.setValue(0);
        var oz = ov.get(0);
        var oy = oz.calculateResult(ow, ox);
        if (!oy.isError()) {
            this.setDoubleResult(Math.exp(oy.getValue()), ou);
        } else {
            oy.setValue(0);
            return oy;
        }
        return ou;
    };
    m1.prototype.getApplyLikeText = function (ow) {
        var ou = "";
        var ov = this.getApplyRealChildren();
        if (ov.size() == 1) {
            var ox = ov.get(0);
            return ox.getApplyLikeText(ow) + "!";
        }
        return ou;
    };
    m1.prototype.addChild = function (ou) {
        var ow = this.getChildren().get(0);
        if (ow.getChildren().size() == 1) {
            return;
        }
        var oz = true;
        if (ou instanceof cI || ou instanceof l) {
            oz = false;
        }
        this.addApplyRealChild(ou);
        if (oz) {
            var oy = this.createParanthesis("(");
            ow.addChild(oy);
        }
        ow.addChild(ou);
        if (oz) {
            var ox = this.createParanthesis(")");
            ow.addChild(ox);
        }
        var ov = fe.getOnlyTBean(this, "!");
        ov.setDynamicCreated(true);
        ow.addChild(ov);
    };
    m1.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    m1.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    m1.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    m1.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    m1.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    m1.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    m1.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    m1.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function kb(ov) {
        this.tBean;
        this.base;
        this.dKu = bW;
        this.dKu(ov);
        this.setApplyOperation("log");
        this.setMinChildren(2);
        this.setMaxChildren(2);
        this.setApplyAllChildrenOnOneLine(false);
        this.setAllChildrenOnOneLineParent(this, false);
        this.base = new mY(ov);
        this.base.setDynamicCreated(true);
        this.tBean = fe.getOnlyTBean(this, "log");
        this.tBean.setDynamicCreated(true);
        this.base.addChild(this.tBean);
        var ou = fe.getCnBean(this, "10");
        ou.setDynamicCreated(true);
        this.base.addChild(ou);
        bW.prototype.addChild.call(this, this.base);
    }
    ga(kb, bW);
    kb.prototype.isApplyBean = function () {
        return true;
    };
    kb.prototype.addChild = function (ou) {
        if (this.getApplyRealChildren().size() == 0) {
            this.addApplyRealChild(ou);
            var ow = this.createParanthesis("(");
            bW.prototype.addChild.call(this, ow);
            bW.prototype.addChild.call(this, ou);
            var ov = this.createParanthesis(")");
            bW.prototype.addChild.call(this, ov);
        } else {
            if (this.getApplyRealChildren().size() == 1) {
                this.base.getChildren().clear();
                this.base.addChild(this.tBean);
                this.base.addChild(ou);
                this.base.replaceChildren();
                this.addApplyRealChild(ou);
            }
        }
    };
    kb.prototype.getBase = function () {
        return this.base;
    };
    kb.prototype.calculateResult = function (oD, ov) {
        var oF = new hQ();
        var ou = this.getApplyRealChildren();
        var oA = this.getApplyOperation();
        if (ou.size() > 0) {
            var oB = ou.get(0);
            var ox = oB.calculateResult(oD, ov);
            if (!ox.isError()) {
                if (ou.size() > 1) {
                    var oz = ou.get(1);
                    var ow = oz.calculateResult(oD, ov);
                    if (!ow.isError()) {
                        var oy =
                            Math.log(ox.getValue()) / Math.log(ow.getValue());
                        this.setDoubleResult(oy, oF);
                        return oF;
                    }
                } else {
                    var oC = ox.getValue();
                    var oE = Math.log10(oC);
                    this.setDoubleResult(oE, oF);
                    return oF;
                }
            }
        }
        oF.setError(true);
        return oF;
    };
    kb.prototype.getApplyLikeText = function (ow) {
        var ou = this.getApplyRealChildren();
        if (ou.size() != 1) {
            return "";
        }
        var ox = ou.get(0);
        var ov = ox.getApplyLikeText(ow);
        if (ov.length == 0) {
            return "";
        }
        return this.getApplyOperation() + "(" + ov + ")";
    };
    kb.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    kb.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    kb.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    kb.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    kb.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    kb.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    kb.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    kb.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function a5(ov, ou) {
        this.dKu = bW;
        this.dKu(ov);
        this.setApplyOperation(ou);
        this.setMinChildren(2);
        this.setMaxChildren(-1);
    }
    ga(a5, bW);
    a5.prototype.isApplyBean = function () {
        return true;
    };
    a5.prototype.initChildren = function () {
        var ou = this.getChildren().get(0);
        var ov = this.createParanthesis(")");
        ou.addChild(ov);
    };
    a5.prototype.addChild = function (ou) {
        var ow = this.getChildren().get(0);
        if (ow.getChildren().size() == 0) {
            this.addApplyRealChild(ou);
            var ov = fe.getOnlyTBean(this, this.getApplyOperation());
            ov.setDynamicCreated(true);
            ow.addChild(ov);
            var ox = this.createParanthesis("(");
            ow.addChild(ox);
            ow.addChild(ou);
        } else {
            var ov = fe.getOnlyTBean(this, ",");
            ov.setDynamicCreated(true);
            ow.addChild(ov);
            ow.addChild(ou);
            this.addApplyRealChild(ou);
        }
    };
    a5.prototype.calculateResult = function (oC, ox) {
        var ow = this.getApplyRealChildren();
        if (ow.size() != 2) {
            var oD = new hQ();
            oD.setValue(0);
            oD.setError(true);
            return oD;
        }
        var oD = null;
        var oA = this.getApplyOperation();
        var oy = oA == "min";
        var oB = oA == "max";
        if (oy) {
            for (var oz = 0; oz < ow.size(); oz++) {
                var ov = ow.get(oz);
                var ou = ov.calculateResult(oC, ox);
                if (ou.isError()) {
                    oD = new hQ();
                    oD.setValue(0);
                    oD.setError(true);
                    return oD;
                }
                if (oD == null) {
                    oD = ou;
                } else {
                    if (oD.getValue() > ou.getValue()) {
                        oD = ou;
                    }
                }
            }
        }
        if (oB) {
            for (var oz = 0; oz < ow.size(); oz++) {
                var ov = ow.get(oz);
                var ou = ov.calculateResult(oC, ox);
                if (ou.isError()) {
                    oD = new hQ();
                    oD.setValue(0);
                    oD.setError(true);
                    return oD;
                }
                if (oD == null) {
                    oD = ou;
                } else {
                    if (oD.getValue() < ou.getValue()) {
                        oD = ou;
                    }
                }
            }
        }
        if (oD == null) {
            oD = new hQ();
            oD.setValue(0);
            oD.setError(true);
            return oD;
        }
        return oD;
    };
    a5.prototype.getApplyLikeText = function (oy) {
        var ou = this.getApplyOperation() + "(";
        var ow = this.getApplyRealChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            if (ov > 0) {
                ou = ou + ",";
            }
            var ox = ow.get(ov);
            ou = ou + ox.getApplyLikeText(oy);
        }
        return ou + ")";
    };
    a5.prototype.canDeleteChild = function (ov) {
        if (!this.isEmptyBean(ov)) {
            return true;
        }
        var ou = this.getApplyRealChildren();
        return ou.size() > 2;
    };
    a5.prototype.deleteChild = function (ow) {
        var ov = this.getApplyRealChildren();
        if (ov.size() > 2) {
            for (var ou = 0; ou < ov.size(); ou++) {
                var ox = ov.get(ou);
                if (ox == ow) {
                    ov.remove(ou);
                    jt.selectNextChild(ov, ou);
                    return true;
                }
            }
        } else {
            if (!this.isEmptyBean(ow)) {
                return this.replaceChild(ow, this.getSelectedEmptyBean(this));
            }
        }
        return false;
    };
    a5.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    a5.prototype.insertChildLeft = function (ow, oy) {
        if (this.isEmptyBean(ow)) {
            return this.replaceChild(ow, oy);
        }
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    a5.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    a5.prototype.insertChildRight = function (ow, oy) {
        if (this.isEmptyBean(ow)) {
            return this.replaceChild(ow, oy);
        }
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou + 1, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    a5.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    a5.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function eM(ou) {
        this.signApplied = false;
        this.child;
        this.childIsUnary = false;
        this.dKu = bW;
        this.dKu(ou);
        this.setApplyOperation("minus");
        this.setMinChildren(1);
        this.setMaxChildren(1);
    }
    ga(eM, bW);
    eM.prototype.isApplyBean = function () {
        return true;
    };
    eM.prototype.addChild = function (ou) {
        var ov = this.getChildren().get(0);
        if (this.getApplyRealChildren().size() == 0) {
            if (!this.signApplied) {
                var ox = fe.getOBean(this, "-");
                ox.setDynamicCreated(true);
                ov.addChild(ox);
            }
            this.childIsUnary = false;
            if (
                ou instanceof cI ||
                ou instanceof l ||
                ou instanceof ae ||
                ou instanceof eX ||
                ou instanceof lK ||
                ou instanceof m1 ||
                ou instanceof kb ||
                ou instanceof jq ||
                ou instanceof gD ||
                ou instanceof a5 ||
                ou instanceof i0 ||
                ou instanceof f2 ||
                ou instanceof h9 ||
                ou instanceof jh
            ) {
                this.childIsUnary = true;
            }
            this.addApplyRealChild(ou);
            this.child = ou;
            if (!this.childIsUnary) {
                var oy = this.createParanthesis("(");
                ov.addChild(oy);
            }
            ov.addChild(ou);
            if (!this.childIsUnary) {
                var ow = this.createParanthesis(")");
                ov.addChild(ow);
            }
        }
    };
    eM.prototype.isSignApplied = function () {
        return this.signApplied;
    };
    eM.prototype.setSignApplied = function (ov) {
        this.signApplied = ov;
        var ou = this.getChildren().get(0);
        ou.getChildren().clear();
        this.getApplyRealChildren().clear();
        this.addChild(this.child);
    };
    eM.prototype.calculateResult = function (ox, oy) {
        var ow = this.getApplyRealChildren();
        if (ow.size() != 1) {
            var ou = new hQ();
            ou.setValue(0);
            ou.setError(true);
            return ou;
        }
        var ou = new hQ();
        ou.setValue(0);
        var ov = this.child;
        var oz = ov.calculateResult(ox, oy);
        if (!oz.isError()) {
            this.setDoubleResult(-oz.getValue(), ou);
        } else {
            oz.setValue(0);
            return oz;
        }
        return ou;
    };
    eM.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    eM.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    eM.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    eM.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    eM.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    eM.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    eM.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    eM.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    eM.prototype.getChild = function () {
        return this.child;
    };

    function b6(ou) {
        this.dKu = bW;
        this.dKu(ou);
        this.setApplyOperation("plus");
        this.setMinChildren(2);
        this.setMaxChildren(-1);
    }
    ga(b6, bW);
    b6.prototype.isApplyBean = function () {
        return true;
    };
    b6.prototype.addChild = function (ou) {
        var ow = this.getChildren().get(0);
        if (ow.getChildren().size() > 0) {
            var ov = "+";
            if (ou instanceof eM) {
                var oy = ou;
                oy.setSignApplied(true);
                ov = "-";
            }
            var ox = fe.getOBean(this, ov);
            ox.setDynamicCreated(true);
            ow.addChild(ox);
        }
        ow.addChild(ou);
        this.addApplyRealChild(ou);
    };
    b6.prototype.calculateResult = function (oy, oz) {
        var ou = new hQ();
        ou.setValue(0);
        var ow = this.getApplyRealChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oB = ow.get(ov);
            var oA = oB.calculateResult(oy, oz);
            if (!oA.isError()) {
                var ox = oA.getValue();
                this.setDoubleResult(ou.getValue() + ox, ou);
            } else {
                oA.setValue(0);
                return oA;
            }
        }
        return ou;
    };
    b6.prototype.getApplyLikeText = function (oy) {
        var ou = "";
        var ow = this.getApplyRealChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            var ox = oz.getApplyLikeText(oy);
            if (ox == "0") {
                continue;
            }
            if (ou.length > 0) {
                ou = ou + "+";
            }
            ou = ou + ox;
        }
        return ou;
    };
    b6.prototype.canDeleteChild = function (ov) {
        if (!this.isEmptyBean(ov)) {
            return true;
        }
        var ou = this.getApplyRealChildren();
        return ou.size() > 2;
    };
    b6.prototype.deleteChild = function (ow) {
        var ov = this.getApplyRealChildren();
        if (ov.size() > 2) {
            for (var ou = 0; ou < ov.size(); ou++) {
                var ox = ov.get(ou);
                if (ox == ow) {
                    ov.remove(ou);
                    jt.selectNextChild(ov, ou);
                    return true;
                }
            }
        } else {
            if (!this.isEmptyBean(ow)) {
                return this.replaceChild(ow, this.getSelectedEmptyBean(this));
            }
        }
        return false;
    };
    b6.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    b6.prototype.insertChildLeft = function (ow, oy) {
        if (this.isEmptyBean(ow)) {
            return this.replaceChild(ow, oy);
        }
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    b6.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    b6.prototype.insertChildRight = function (ow, oy) {
        if (this.isEmptyBean(ow)) {
            return this.replaceChild(ow, oy);
        }
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou + 1, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    b6.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    b6.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function jq(ou) {
        this.dKt = m6;
        this.dKt(ou);
        this.setApplyOperation("power");
        this.setMinChildren(2);
        this.setMaxChildren(2);
        this.setApplyAllChildrenOnOneLine(false);
        this.setAllChildrenOnOneLineParent(this, false);
    }
    ga(jq, m6);
    jq.prototype.isApplyBean = function () {
        return true;
    };
    jq.prototype.addChild = function (ou) {
        if (this.getApplyRealChildren().size() == 0) {
            this.addApplyRealChild(ou);
            if (this.needsParanthesis(ou)) {
                var ov = new bW(this);
                ov.setDynamicCreated(true);
                var ox = this.createParanthesis("(");
                ov.addChild(ox);
                ov.addChild(ou);
                var ow = this.createParanthesis(")");
                ov.addChild(ow);
                aM.prototype.addChild.call(this, ov);
            } else {
                aM.prototype.addChild.call(this, ou);
            }
        } else {
            if (this.getApplyRealChildren().size() < 2) {
                this.addApplyRealChild(ou);
                aM.prototype.addChild.call(this, ou);
            }
        }
    };
    jq.prototype.needsParanthesis = function (ou) {
        if (ou instanceof b6 || ou instanceof eM) {
            return true;
        }
        return false;
    };
    jq.prototype.calculateResult = function (oz, oA) {
        var ou = new hQ();
        ou.setValue(1);
        var ov = this.getApplyRealChildren();
        if (ov.size() == 2) {
            var oy = ov.get(0);
            var ox = oy.calculateResult(oz, oA);
            if (!ox.isError()) {
                var oB = ov.get(1);
                var ow = oB.calculateResult(oz, oA);
                if (!ow.isError()) {
                    this.setDoubleResult(
                        Math.pow(ox.getValue(), ow.getValue()),
                        ou,
                    );
                    ou.setError(false);
                    return ou;
                }
            }
        }
        ou.setError(true);
        return ou;
    };
    jq.prototype.getApplyLikeText = function (ox) {
        var ou = "";
        var ov = this.getApplyRealChildren();
        if (ov.size() == 2) {
            var ow = ov.get(0);
            var oy = ov.get(1);
            return ow.getApplyLikeText(ox) + "^" + oy.getApplyLikeText(ox);
        }
        return ou;
    };
    jq.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    jq.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    jq.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    jq.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    jq.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    jq.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    jq.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    jq.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function gD(ou) {
        this.dKu = bW;
        this.dKu(ou);
        this.setApplyOperation("rem");
        this.setMinChildren(2);
        this.setMaxChildren(2);
    }
    ga(gD, bW);
    gD.prototype.isApplyBean = function () {
        return true;
    };
    gD.prototype.addChild = function (ou) {
        var ow = this.getChildren().get(0);
        if (ow.getChildren().size() == 0) {
            ow.addChild(ou);
            this.addApplyRealChild(ou);
            var ov = fe.getOnlyTBean(this, "mod");
            ov.getCssstyle().setMarginLeft("5px");
            ov.getCssstyle().setMarginRight("5px");
            ov.setDynamicCreated(true);
            ow.addChild(ov);
        } else {
            ow.addChild(ou);
            this.addApplyRealChild(ou);
        }
    };
    gD.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    gD.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    gD.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    gD.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    gD.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    gD.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    gD.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    gD.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function gb(ou) {
        this._base;
        this.index;
        this.closed = false;
        this.closedLength;
        this.thickness;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(gb, gK);
    gb.prototype.copyParentStyle = function (ou) {
        this.replaceChildren();
        this.index.modifyScriptlevel(2);
        this.index.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
    };
    gb.prototype.replaceChildren = function () {
        this._base = this.getChildren().get(0);
        this.index = this.getChildren().get(1);
    };
    gb.prototype.getBase = function () {
        return this._base;
    };
    gb.prototype.getIndex = function () {
        return this.index;
    };
    gb.prototype.isClosed = function () {
        return this.closed;
    };
    gb.prototype.setClosed = function (ou) {
        this.closed = ou;
    };
    gb.prototype.getClosedLength = function () {
        return this.closedLength;
    };
    gb.prototype.setClosedLength = function (ou) {
        this.closedLength = ou;
    };
    gb.prototype.getThickness = function () {
        return this.thickness;
    };
    gb.prototype.setThickness = function (ou) {
        this.thickness = ou;
    };
    gb.prototype.canDeleteChild = function (ou) {
        if (ou instanceof bW) {
            return true;
        }
        return false;
    };
    gb.prototype.deleteChild = function (ou) {
        if (this._base == ou) {
            this._base = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.index == ou) {
            this.index = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    gb.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    gb.prototype.insertChildLeft = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.index == ou) {
            this.index = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    gb.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    gb.prototype.insertChildRight = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.index == ou) {
            this.index = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    gb.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    gb.prototype.replaceChild = function (ou, ov) {
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = ov;
            return true;
        }
        if (this.index == ou) {
            this.index = ov;
            return true;
        }
        return false;
    };

    function i0(ou) {
        this.dKv = gb;
        this.dKv(ou);
        this.setApplyOperation("root");
        this.setMinChildren(2);
        this.setMaxChildren(2);
        this.setApplyAllChildrenOnOneLine(false);
        this.setAllChildrenOnOneLineParent(this, false);
    }
    ga(i0, gb);
    i0.prototype.isApplyBean = function () {
        return true;
    };
    i0.prototype.addChild = function (ou) {
        if (this.getApplyRealChildren().size() < 2) {
            this.addApplyRealChild(ou);
            aM.prototype.addChild.call(this, ou);
        }
    };
    i0.prototype.calculateResult = function (oB, ov) {
        var ou = this.getApplyRealChildren();
        if (ou.size() != 2) {
            var oC = new hQ();
            oC.setValue(0);
            oC.setError(true);
            return oC;
        }
        var oC = new hQ();
        oC.setValue(0);
        var oA = ou.get(0);
        var ox = oA.calculateResult(oB, ov);
        if (!ox.isError()) {
            var oz = ou.get(1);
            var ow = oz.calculateResult(oB, ov);
            if (!ow.isError()) {
                var oy = Math.pow(ox.getValue(), 1 / ow.getValue());
                this.setDoubleResult(oy, oC);
            } else {
                ow.setValue(0);
                return ow;
            }
        } else {
            ox.setValue(0);
            return ox;
        }
        return oC;
    };
    i0.prototype.getApplyLikeText = function (ox) {
        var ou = "";
        var ov = this.getApplyRealChildren();
        if (ov.size() == 2) {
            var ow = ov.get(0);
            var oy = ov.get(1);
            return (
                "sqrt(" +
                oy.getApplyLikeText(ox) +
                "," +
                ow.getApplyLikeText(ox) +
                ")"
            );
        }
        return ou;
    };
    i0.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    i0.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    i0.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    i0.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    i0.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    i0.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    i0.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    i0.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function a3(ou) {
        this.closed = false;
        this.closedLength;
        this.thickness;
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(a3, bW);
    a3.prototype.isClosed = function () {
        return this.closed;
    };
    a3.prototype.setClosed = function (ou) {
        this.closed = ou;
    };
    a3.prototype.getClosedLength = function () {
        return this.closedLength;
    };
    a3.prototype.setClosedLength = function (ou) {
        this.closedLength = ou;
    };
    a3.prototype.getThickness = function () {
        return this.thickness;
    };
    a3.prototype.setThickness = function (ou) {
        this.thickness = ou;
    };

    function f2(ou) {
        this.dKw = a3;
        this.dKw(ou);
        this.setApplyOperation("root");
        this.setMinChildren(1);
        this.setMaxChildren(1);
        this.setApplyAllChildrenOnOneLine(false);
        this.setAllChildrenOnOneLineParent(this, false);
    }
    ga(f2, a3);
    f2.prototype.isApplyBean = function () {
        return true;
    };
    f2.prototype.addChild = function (ou) {
        if (this.getApplyRealChildren().size() < 1) {
            this.addApplyRealChild(ou);
            bW.prototype.addChild.call(this, ou);
        }
    };
    f2.prototype.calculateResult = function (oz, oA) {
        var ow = this.getApplyRealChildren();
        if (ow.size() != 1) {
            var ov = new hQ();
            ov.setValue(0);
            ov.setError(true);
            return ov;
        }
        var ov = new hQ();
        ov.setValue(0);
        var oy = ow.get(0);
        var ou = oy.calculateResult(oz, oA);
        if (!ou.isError()) {
            var ox = Math.pow(ou.getValue(), 1 / 2);
            this.setDoubleResult(ox, ov);
        } else {
            ou.setValue(0);
            return ou;
        }
        return ov;
    };
    f2.prototype.getApplyLikeText = function (ow) {
        var ou = "";
        var ov = this.getApplyRealChildren();
        if (ov.size() == 1) {
            var ox = ov.get(0);
            return "sqrt(" + ox.getApplyLikeText(ow) + ")";
        }
        return ou;
    };
    f2.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    f2.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    f2.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    f2.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    f2.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    f2.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    f2.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    f2.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function h9(ou) {
        this.pointChar = lv.getCharFromHexCode("B7");
        this.dKu = bW;
        this.dKu(ou);
        this.setApplyOperation("times");
        this.setMinChildren(2);
        this.setMaxChildren(-1);
    }
    ga(h9, bW);
    h9.prototype.isApplyBean = function () {
        return true;
    };
    h9.prototype.addChild = function (ou) {
        var ow = this.getChildren().get(0);
        if (ow.getChildren().size() > 0) {
            var ov = this.getSignFor(this.getApplyRealChildren(), ou);
            if (ov.length > 0) {
                var ox = fe.getOBean(this, ov);
                ox.setDynamicCreated(true);
                ow.addChild(ox);
            }
        }
        this.addApplyRealChild(ou);
        if (ou instanceof b6 || ou instanceof eM) {
            var oy = this.createParanthesis("(");
            ow.addChild(oy);
        }
        ow.addChild(ou);
        if (ou instanceof b6 || ou instanceof eM) {
            var oy = this.createParanthesis(")");
            ow.addChild(oy);
        }
    };
    h9.prototype.getSignFor = function (ov, ou) {
        return this.pointChar;
    };
    h9.prototype.calculateResult = function (oB, ox) {
        var oC = new hQ();
        oC.setValue(1);
        var ow = this.getApplyRealChildren();
        for (var oy = 0; oy < ow.size(); oy++) {
            var ov = ow.get(oy);
            var ou = ov.calculateResult(oB, ox);
            if (!ou.isError()) {
                var oA = ou.getValue();
                if (oA == 0) {
                    oC.setValue(0);
                    return oC;
                }
                var oz = oC.getValue() * oA;
                this.setDoubleResult(oz, oC);
            } else {
                ou.setValue(1);
                ou.setError(true);
                return ou;
            }
        }
        oC.setError(false);
        return oC;
    };
    h9.prototype.getApplyLikeText = function (oy) {
        var ou = "";
        var ow = this.getApplyRealChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            var ox = oz.getApplyLikeText(oy);
            if (ox == "1") {
                continue;
            }
            if (ox == "0") {
                return "0";
            }
            if (ou.length > 0) {
                ou = ou + this.pointChar;
            }
            ou = ou + oz.getApplyLikeText(oy);
        }
        return ou;
    };
    h9.prototype.canDeleteChild = function (ov) {
        if (!this.isEmptyBean(ov)) {
            return true;
        }
        var ou = this.getApplyRealChildren();
        return ou.size() > 2;
    };
    h9.prototype.deleteChild = function (ow) {
        var ov = this.getApplyRealChildren();
        if (ov.size() > 2) {
            for (var ou = 0; ou < ov.size(); ou++) {
                var ox = ov.get(ou);
                if (ox == ow) {
                    ov.remove(ou);
                    jt.selectNextChild(ov, ou);
                    return true;
                }
            }
        } else {
            if (!this.isEmptyBean(ow)) {
                return this.replaceChild(ow, this.getSelectedEmptyBean(this));
            }
        }
        return false;
    };
    h9.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    h9.prototype.insertChildLeft = function (ow, oy) {
        if (this.isEmptyBean(ow)) {
            return this.replaceChild(ow, oy);
        }
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    h9.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    h9.prototype.insertChildRight = function (ow, oy) {
        if (this.isEmptyBean(ow)) {
            return this.replaceChild(ow, oy);
        }
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou + 1, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    h9.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    h9.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function jh(ov, ou) {
        this.dKu = bW;
        this.dKu(ov);
        this.setApplyOperation(ou);
        this.setMinChildren(1);
        this.setMaxChildren(1);
    }
    ga(jh, bW);
    jh.prototype.isApplyBean = function () {
        return true;
    };
    jh.prototype.addChild = function (ou) {
        var ow = this.getChildren().get(0);
        if (ow.getChildren().size() == 0) {
            this.addApplyRealChild(ou);
            var ov = fe.getOnlyTBean(this, this.getApplyOperation());
            ov.setDynamicCreated(true);
            ow.addChild(ov);
            var oy = this.createParanthesis("(");
            ow.addChild(oy);
            ow.addChild(ou);
            var ox = this.createParanthesis(")");
            ow.addChild(ox);
        }
    };
    jh.prototype.calculateResult = function (oA, ox) {
        var oC = new hQ();
        var ow = this.getApplyRealChildren();
        var oy = this.getApplyOperation();
        if ("sin" == oy) {
            if (ow.size() == 1) {
                var ov = ow.get(0);
                var ou = ov.calculateResult(oA, ox);
                if (!ou.isError()) {
                    var oz = ou.getValue();
                    var oB = Math.sin(oz);
                    this.setDoubleResult(oB, ou);
                    return ou;
                }
            }
        } else {
            if ("cos" == oy) {
                if (ow.size() == 1) {
                    var ov = ow.get(0);
                    var ou = ov.calculateResult(oA, ox);
                    if (!ou.isError()) {
                        var oz = ou.getValue();
                        var oB = Math.cos(oz);
                        this.setDoubleResult(oB, ou);
                        return ou;
                    }
                }
            } else {
                if ("tan" == oy || "tg" == oy) {
                    if (ow.size() == 1) {
                        var ov = ow.get(0);
                        var ou = ov.calculateResult(oA, ox);
                        if (!ou.isError()) {
                            var oz = ou.getValue();
                            var oB = Math.tan(oz);
                            this.setDoubleResult(oB, ou);
                            return ou;
                        }
                    }
                } else {
                    if ("sec" == oy) {
                        if (ow.size() == 1) {
                            var ov = ow.get(0);
                            var ou = ov.calculateResult(oA, ox);
                            if (!ou.isError()) {
                                var oz = ou.getValue();
                                var oB = 1 / Math.cos(oz);
                                this.setDoubleResult(oB, ou);
                                return ou;
                            }
                        }
                    } else {
                        if ("csc" == oy) {
                            if (ow.size() == 1) {
                                var ov = ow.get(0);
                                var ou = ov.calculateResult(oA, ox);
                                if (!ou.isError()) {
                                    var oz = ou.getValue();
                                    var oB = 1 / Math.sin(oz);
                                    this.setDoubleResult(oB, ou);
                                    return ou;
                                }
                            }
                        } else {
                            if ("cot" == oy || "ctg" == oy) {
                                if (ow.size() == 1) {
                                    var ov = ow.get(0);
                                    var ou = ov.calculateResult(oA, ox);
                                    if (!ou.isError()) {
                                        var oz = ou.getValue();
                                        var oB = 1 / Math.tan(oz);
                                        this.setDoubleResult(oB, ou);
                                        return ou;
                                    }
                                }
                            } else {
                                if ("ln" == oy) {
                                    if (ow.size() == 1) {
                                        var ov = ow.get(0);
                                        var ou = ov.calculateResult(oA, ox);
                                        if (!ou.isError()) {
                                            var oz = ou.getValue();
                                            var oB = Math.log(oz);
                                            this.setDoubleResult(oB, ou);
                                            return ou;
                                        }
                                    }
                                } else {
                                    if ("abs" == oy) {
                                        if (ow.size() == 1) {
                                            var ov = ow.get(0);
                                            var ou = ov.calculateResult(oA, ox);
                                            if (!ou.isError()) {
                                                var oz = ou.getValue();
                                                var oB = Math.abs(oz);
                                                this.setDoubleResult(oB, ou);
                                                return ou;
                                            }
                                        }
                                    } else {
                                        if ("ceil" == oy) {
                                            if (ow.size() == 1) {
                                                var ov = ow.get(0);
                                                var ou = ov.calculateResult(
                                                    oA,
                                                    ox,
                                                );
                                                if (!ou.isError()) {
                                                    var oz = ou.getValue();
                                                    var oB = Math.ceil(oz);
                                                    this.setDoubleResult(
                                                        oB,
                                                        ou,
                                                    );
                                                    return ou;
                                                }
                                            }
                                        } else {
                                            if ("floor" == oy) {
                                                if (ow.size() == 1) {
                                                    var ov = ow.get(0);
                                                    var ou = ov.calculateResult(
                                                        oA,
                                                        ox,
                                                    );
                                                    if (!ou.isError()) {
                                                        var oz = ou.getValue();
                                                        var oB = Math.floor(oz);
                                                        this.setDoubleResult(
                                                            oB,
                                                            ou,
                                                        );
                                                        return ou;
                                                    }
                                                }
                                            } else {
                                                if ("round" == oy) {
                                                    if (ow.size() == 1) {
                                                        var ov = ow.get(0);
                                                        var ou =
                                                            ov.calculateResult(
                                                                oA,
                                                                ox,
                                                            );
                                                        if (!ou.isError()) {
                                                            var oz =
                                                                ou.getValue();
                                                            var oB =
                                                                Math.round(oz);
                                                            this.setDoubleResult(
                                                                oB,
                                                                ou,
                                                            );
                                                            return ou;
                                                        }
                                                    }
                                                } else {
                                                    if ("log" == oy) {
                                                        if (ow.size() == 1) {
                                                            var ov = ow.get(0);
                                                            var ou =
                                                                ov.calculateResult(
                                                                    oA,
                                                                    ox,
                                                                );
                                                            if (!ou.isError()) {
                                                                var oz =
                                                                    ou.getValue();
                                                                var oB =
                                                                    Math.log10(
                                                                        oz,
                                                                    );
                                                                this.setDoubleResult(
                                                                    oB,
                                                                    ou,
                                                                );
                                                                return ou;
                                                            }
                                                        }
                                                    } else {
                                                        if ("arcsin" == oy) {
                                                            if (
                                                                ow.size() == 1
                                                            ) {
                                                                var ov =
                                                                    ow.get(0);
                                                                var ou =
                                                                    ov.calculateResult(
                                                                        oA,
                                                                        ox,
                                                                    );
                                                                if (
                                                                    !ou.isError()
                                                                ) {
                                                                    var oz =
                                                                        ou.getValue();
                                                                    var oB =
                                                                        Math.asin(
                                                                            oz,
                                                                        );
                                                                    this.setDoubleResult(
                                                                        oB,
                                                                        ou,
                                                                    );
                                                                    return ou;
                                                                }
                                                            }
                                                        } else {
                                                            if (
                                                                "arccos" == oy
                                                            ) {
                                                                if (
                                                                    ow.size() ==
                                                                    1
                                                                ) {
                                                                    var ov =
                                                                        ow.get(
                                                                            0,
                                                                        );
                                                                    var ou =
                                                                        ov.calculateResult(
                                                                            oA,
                                                                            ox,
                                                                        );
                                                                    if (
                                                                        !ou.isError()
                                                                    ) {
                                                                        var oz =
                                                                            ou.getValue();
                                                                        var oB =
                                                                            Math.acos(
                                                                                oz,
                                                                            );
                                                                        this.setDoubleResult(
                                                                            oB,
                                                                            ou,
                                                                        );
                                                                        return ou;
                                                                    }
                                                                }
                                                            } else {
                                                                if (
                                                                    "arctan" ==
                                                                        oy ||
                                                                    "arctg" ==
                                                                        oy
                                                                ) {
                                                                    if (
                                                                        ow.size() ==
                                                                        1
                                                                    ) {
                                                                        var ov =
                                                                            ow.get(
                                                                                0,
                                                                            );
                                                                        var ou =
                                                                            ov.calculateResult(
                                                                                oA,
                                                                                ox,
                                                                            );
                                                                        if (
                                                                            !ou.isError()
                                                                        ) {
                                                                            var oz =
                                                                                ou.getValue();
                                                                            var oB =
                                                                                Math.atan(
                                                                                    oz,
                                                                                );
                                                                            this.setDoubleResult(
                                                                                oB,
                                                                                ou,
                                                                            );
                                                                            return ou;
                                                                        }
                                                                    }
                                                                } else {
                                                                    if (
                                                                        "arcsec" ==
                                                                        oy
                                                                    ) {
                                                                        if (
                                                                            ow.size() ==
                                                                            1
                                                                        ) {
                                                                            var ov =
                                                                                ow.get(
                                                                                    0,
                                                                                );
                                                                            var ou =
                                                                                ov.calculateResult(
                                                                                    oA,
                                                                                    ox,
                                                                                );
                                                                            if (
                                                                                !ou.isError()
                                                                            ) {
                                                                                var oz =
                                                                                    ou.getValue();
                                                                                var oB =
                                                                                    Math.acos(
                                                                                        1 /
                                                                                            oz,
                                                                                    );
                                                                                this.setDoubleResult(
                                                                                    oB,
                                                                                    ou,
                                                                                );
                                                                                return ou;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if (
                                                                            "arccsc" ==
                                                                            oy
                                                                        ) {
                                                                            if (
                                                                                ow.size() ==
                                                                                1
                                                                            ) {
                                                                                var ov =
                                                                                    ow.get(
                                                                                        0,
                                                                                    );
                                                                                var ou =
                                                                                    ov.calculateResult(
                                                                                        oA,
                                                                                        ox,
                                                                                    );
                                                                                if (
                                                                                    !ou.isError()
                                                                                ) {
                                                                                    var oz =
                                                                                        ou.getValue();
                                                                                    var oB =
                                                                                        Math.asin(
                                                                                            1 /
                                                                                                oz,
                                                                                        );
                                                                                    this.setDoubleResult(
                                                                                        oB,
                                                                                        ou,
                                                                                    );
                                                                                    return ou;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if (
                                                                                "arccot" ==
                                                                                    oy ||
                                                                                "arcctg" ==
                                                                                    oy
                                                                            ) {
                                                                                if (
                                                                                    ow.size() ==
                                                                                    1
                                                                                ) {
                                                                                    var ov =
                                                                                        ow.get(
                                                                                            0,
                                                                                        );
                                                                                    var ou =
                                                                                        ov.calculateResult(
                                                                                            oA,
                                                                                            ox,
                                                                                        );
                                                                                    if (
                                                                                        !ou.isError()
                                                                                    ) {
                                                                                        var oz =
                                                                                            ou.getValue();
                                                                                        var oB =
                                                                                            Math.atan(
                                                                                                1 /
                                                                                                    oz,
                                                                                            );
                                                                                        this.setDoubleResult(
                                                                                            oB,
                                                                                            ou,
                                                                                        );
                                                                                        return ou;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if (
                                                                                    "sinh" ==
                                                                                    oy
                                                                                ) {
                                                                                    if (
                                                                                        ow.size() ==
                                                                                        1
                                                                                    ) {
                                                                                        var ov =
                                                                                            ow.get(
                                                                                                0,
                                                                                            );
                                                                                        var ou =
                                                                                            ov.calculateResult(
                                                                                                oA,
                                                                                                ox,
                                                                                            );
                                                                                        if (
                                                                                            !ou.isError()
                                                                                        ) {
                                                                                            var oz =
                                                                                                ou.getValue();
                                                                                            var oB =
                                                                                                Math.sinh(
                                                                                                    oz,
                                                                                                );
                                                                                            this.setDoubleResult(
                                                                                                oB,
                                                                                                ou,
                                                                                            );
                                                                                            return ou;
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if (
                                                                                        "cosh" ==
                                                                                        oy
                                                                                    ) {
                                                                                        if (
                                                                                            ow.size() ==
                                                                                            1
                                                                                        ) {
                                                                                            var ov =
                                                                                                ow.get(
                                                                                                    0,
                                                                                                );
                                                                                            var ou =
                                                                                                ov.calculateResult(
                                                                                                    oA,
                                                                                                    ox,
                                                                                                );
                                                                                            if (
                                                                                                !ou.isError()
                                                                                            ) {
                                                                                                var oz =
                                                                                                    ou.getValue();
                                                                                                var oB =
                                                                                                    Math.cosh(
                                                                                                        oz,
                                                                                                    );
                                                                                                this.setDoubleResult(
                                                                                                    oB,
                                                                                                    ou,
                                                                                                );
                                                                                                return ou;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        if (
                                                                                            "tanh" ==
                                                                                                oy ||
                                                                                            "tgh" ==
                                                                                                oy
                                                                                        ) {
                                                                                            if (
                                                                                                ow.size() ==
                                                                                                1
                                                                                            ) {
                                                                                                var ov =
                                                                                                    ow.get(
                                                                                                        0,
                                                                                                    );
                                                                                                var ou =
                                                                                                    ov.calculateResult(
                                                                                                        oA,
                                                                                                        ox,
                                                                                                    );
                                                                                                if (
                                                                                                    !ou.isError()
                                                                                                ) {
                                                                                                    var oz =
                                                                                                        ou.getValue();
                                                                                                    var oB =
                                                                                                        Math.tanh(
                                                                                                            oz,
                                                                                                        );
                                                                                                    this.setDoubleResult(
                                                                                                        oB,
                                                                                                        ou,
                                                                                                    );
                                                                                                    return ou;
                                                                                                }
                                                                                            }
                                                                                        } else {
                                                                                            if (
                                                                                                "sech" ==
                                                                                                oy
                                                                                            ) {
                                                                                                if (
                                                                                                    ow.size() ==
                                                                                                    1
                                                                                                ) {
                                                                                                    var ov =
                                                                                                        ow.get(
                                                                                                            0,
                                                                                                        );
                                                                                                    var ou =
                                                                                                        ov.calculateResult(
                                                                                                            oA,
                                                                                                            ox,
                                                                                                        );
                                                                                                    if (
                                                                                                        !ou.isError()
                                                                                                    ) {
                                                                                                        var oz =
                                                                                                            ou.getValue();
                                                                                                        var oB =
                                                                                                            1 /
                                                                                                            Math.cosh(
                                                                                                                oz,
                                                                                                            );
                                                                                                        this.setDoubleResult(
                                                                                                            oB,
                                                                                                            ou,
                                                                                                        );
                                                                                                        return ou;
                                                                                                    }
                                                                                                }
                                                                                            } else {
                                                                                                if (
                                                                                                    "csch" ==
                                                                                                    oy
                                                                                                ) {
                                                                                                    if (
                                                                                                        ow.size() ==
                                                                                                        1
                                                                                                    ) {
                                                                                                        var ov =
                                                                                                            ow.get(
                                                                                                                0,
                                                                                                            );
                                                                                                        var ou =
                                                                                                            ov.calculateResult(
                                                                                                                oA,
                                                                                                                ox,
                                                                                                            );
                                                                                                        if (
                                                                                                            !ou.isError()
                                                                                                        ) {
                                                                                                            var oz =
                                                                                                                ou.getValue();
                                                                                                            var oB =
                                                                                                                1 /
                                                                                                                Math.sinh(
                                                                                                                    oz,
                                                                                                                );
                                                                                                            this.setDoubleResult(
                                                                                                                oB,
                                                                                                                ou,
                                                                                                            );
                                                                                                            return ou;
                                                                                                        }
                                                                                                    }
                                                                                                } else {
                                                                                                    if (
                                                                                                        "coth" ==
                                                                                                            oy ||
                                                                                                        "ctgh" ==
                                                                                                            oy
                                                                                                    ) {
                                                                                                        if (
                                                                                                            ow.size() ==
                                                                                                            1
                                                                                                        ) {
                                                                                                            var ov =
                                                                                                                ow.get(
                                                                                                                    0,
                                                                                                                );
                                                                                                            var ou =
                                                                                                                ov.calculateResult(
                                                                                                                    oA,
                                                                                                                    ox,
                                                                                                                );
                                                                                                            if (
                                                                                                                !ou.isError()
                                                                                                            ) {
                                                                                                                var oz =
                                                                                                                    ou.getValue();
                                                                                                                var oB =
                                                                                                                    1 /
                                                                                                                    Math.tanh(
                                                                                                                        oz,
                                                                                                                    );
                                                                                                                this.setDoubleResult(
                                                                                                                    oB,
                                                                                                                    ou,
                                                                                                                );
                                                                                                                return ou;
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        if (
                                                                                                            "arcsinh" ==
                                                                                                            oy
                                                                                                        ) {
                                                                                                            if (
                                                                                                                ow.size() ==
                                                                                                                1
                                                                                                            ) {
                                                                                                                var ov =
                                                                                                                    ow.get(
                                                                                                                        0,
                                                                                                                    );
                                                                                                                var ou =
                                                                                                                    ov.calculateResult(
                                                                                                                        oA,
                                                                                                                        ox,
                                                                                                                    );
                                                                                                                if (
                                                                                                                    !ou.isError()
                                                                                                                ) {
                                                                                                                    var oz =
                                                                                                                        ou.getValue();
                                                                                                                    var oB = 0;
                                                                                                                    oB =
                                                                                                                        Math.asinh(
                                                                                                                            oz,
                                                                                                                        );
                                                                                                                    this.setDoubleResult(
                                                                                                                        oB,
                                                                                                                        ou,
                                                                                                                    );
                                                                                                                    return ou;
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            if (
                                                                                                                "arccosh" ==
                                                                                                                oy
                                                                                                            ) {
                                                                                                                if (
                                                                                                                    ow.size() ==
                                                                                                                    1
                                                                                                                ) {
                                                                                                                    var ov =
                                                                                                                        ow.get(
                                                                                                                            0,
                                                                                                                        );
                                                                                                                    var ou =
                                                                                                                        ov.calculateResult(
                                                                                                                            oA,
                                                                                                                            ox,
                                                                                                                        );
                                                                                                                    if (
                                                                                                                        !ou.isError()
                                                                                                                    ) {
                                                                                                                        var oz =
                                                                                                                            ou.getValue();
                                                                                                                        var oB = 0;
                                                                                                                        oB =
                                                                                                                            Math.acosh(
                                                                                                                                oz,
                                                                                                                            );
                                                                                                                        this.setDoubleResult(
                                                                                                                            oB,
                                                                                                                            ou,
                                                                                                                        );
                                                                                                                        return ou;
                                                                                                                    }
                                                                                                                }
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    "arctanh" ==
                                                                                                                        oy ||
                                                                                                                    "arctgh" ==
                                                                                                                        oy
                                                                                                                ) {
                                                                                                                    if (
                                                                                                                        ow.size() ==
                                                                                                                        1
                                                                                                                    ) {
                                                                                                                        var ov =
                                                                                                                            ow.get(
                                                                                                                                0,
                                                                                                                            );
                                                                                                                        var ou =
                                                                                                                            ov.calculateResult(
                                                                                                                                oA,
                                                                                                                                ox,
                                                                                                                            );
                                                                                                                        if (
                                                                                                                            !ou.isError()
                                                                                                                        ) {
                                                                                                                            var oz =
                                                                                                                                ou.getValue();
                                                                                                                            var oB = 0;
                                                                                                                            oB =
                                                                                                                                Math.atanh(
                                                                                                                                    oz,
                                                                                                                                );
                                                                                                                            this.setDoubleResult(
                                                                                                                                oB,
                                                                                                                                ou,
                                                                                                                            );
                                                                                                                            return ou;
                                                                                                                        }
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        "arcsech" ==
                                                                                                                        oy
                                                                                                                    ) {
                                                                                                                        if (
                                                                                                                            ow.size() ==
                                                                                                                            1
                                                                                                                        ) {
                                                                                                                            var ov =
                                                                                                                                ow.get(
                                                                                                                                    0,
                                                                                                                                );
                                                                                                                            var ou =
                                                                                                                                ov.calculateResult(
                                                                                                                                    oA,
                                                                                                                                    ox,
                                                                                                                                );
                                                                                                                            if (
                                                                                                                                !ou.isError()
                                                                                                                            ) {
                                                                                                                                var oz =
                                                                                                                                    ou.getValue();
                                                                                                                                var oB = 0;
                                                                                                                                oB =
                                                                                                                                    Math.acosh(
                                                                                                                                        1 /
                                                                                                                                            oz,
                                                                                                                                    );
                                                                                                                                this.setDoubleResult(
                                                                                                                                    oB,
                                                                                                                                    ou,
                                                                                                                                );
                                                                                                                                return ou;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            "arccsch" ==
                                                                                                                            oy
                                                                                                                        ) {
                                                                                                                            if (
                                                                                                                                ow.size() ==
                                                                                                                                1
                                                                                                                            ) {
                                                                                                                                var ov =
                                                                                                                                    ow.get(
                                                                                                                                        0,
                                                                                                                                    );
                                                                                                                                var ou =
                                                                                                                                    ov.calculateResult(
                                                                                                                                        oA,
                                                                                                                                        ox,
                                                                                                                                    );
                                                                                                                                if (
                                                                                                                                    !ou.isError()
                                                                                                                                ) {
                                                                                                                                    var oz =
                                                                                                                                        ou.getValue();
                                                                                                                                    var oB = 0;
                                                                                                                                    oB =
                                                                                                                                        Math.asinh(
                                                                                                                                            1 /
                                                                                                                                                oz,
                                                                                                                                        );
                                                                                                                                    this.setDoubleResult(
                                                                                                                                        oB,
                                                                                                                                        ou,
                                                                                                                                    );
                                                                                                                                    return ou;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                "arccoth" ==
                                                                                                                                    oy ||
                                                                                                                                "arcctgh" ==
                                                                                                                                    oy
                                                                                                                            ) {
                                                                                                                                if (
                                                                                                                                    ow.size() ==
                                                                                                                                    1
                                                                                                                                ) {
                                                                                                                                    var ov =
                                                                                                                                        ow.get(
                                                                                                                                            0,
                                                                                                                                        );
                                                                                                                                    var ou =
                                                                                                                                        ov.calculateResult(
                                                                                                                                            oA,
                                                                                                                                            ox,
                                                                                                                                        );
                                                                                                                                    if (
                                                                                                                                        !ou.isError()
                                                                                                                                    ) {
                                                                                                                                        var oz =
                                                                                                                                            ou.getValue();
                                                                                                                                        var oB = 0;
                                                                                                                                        oB =
                                                                                                                                            Math.atanh(
                                                                                                                                                1 /
                                                                                                                                                    oz,
                                                                                                                                            );
                                                                                                                                        this.setDoubleResult(
                                                                                                                                            oB,
                                                                                                                                            ou,
                                                                                                                                        );
                                                                                                                                        return ou;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        oC.setError(true);
        return oC;
    };
    jh.prototype.getApplyLikeText = function (ow) {
        var ou = this.getApplyRealChildren();
        if (ou.size() != 1) {
            return "";
        }
        var ox = ou.get(0);
        var ov = ox.getApplyLikeText(ow);
        if (ov.length == 0) {
            return "";
        }
        return this.getApplyOperation() + "(" + ov + ")";
    };
    jh.prototype.canDeleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    jh.prototype.deleteChild = function (ou) {
        if (!this.isEmptyBean(ou)) {
            return this.replaceChild(ou, this.getSelectedEmptyBean(this));
        }
        return false;
    };
    jh.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    jh.prototype.insertChildLeft = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    jh.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return true;
        }
        return false;
    };
    jh.prototype.insertChildRight = function (ou, ov) {
        if (this.isEmptyBean(ou)) {
            return this.replaceChild(ou, ov);
        }
        return false;
    };
    jh.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    jh.prototype.replaceChild = function (ow, oy) {
        var ov = this.getApplyRealChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };

    function bv(ou) {
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(bv, gK);
    bv.prototype.isApplyBean = function () {
        return true;
    };

    function aB(ou) {
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(aB, gK);
    aB.prototype.copyParentStyle = function (ou) {
        this.compactTextChildren();
        gK.prototype.copyParentStyle.call(this, ou);
        this.splitTextForFonts();
        var ov = this.getText();
        if (ov.length <= 3) {
            this.setCanBeMinimizated(false);
        }
    };
    aB.prototype.compactTextChildren = function () {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size() - 1; ou++) {
            var oz = ov.get(ou);
            var ox = ov.get(ou + 1);
            if (oz instanceof cO && ox instanceof cO) {
                var oy = oz;
                var ow = ox;
                oy.setText(
                    oy.getUnicodeText().toString() +
                        ow.getUnicodeText().toString(),
                );
                ov.remove(ou + 1);
                ou--;
            }
        }
    };
    aB.prototype.splitTextForFonts = function () {
        var ox = this.getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oB = ox.get(ow);
            if (oB instanceof cO) {
                var ov = oB;
                var oz = this.getListOfTextBean(ov);
                if (oz.size() > 0) {
                    var oA = oz.get(0);
                    ov.setText(oA.getUnicodeText().toString());
                    ov.getStyle().setMathvariant(
                        oA.getStyle().getMathvariant().getCopy(),
                    );
                    for (var ou = 1; ou < oz.size(); ou++) {
                        var oy = oz.get(ou);
                        this.addIndexChild(oy, ow + ou);
                    }
                    if (oz.size() > 1) {
                        ox = this.getChildren();
                    }
                }
            }
        }
    };
    aB.prototype.getListOfTextBean = function (oB) {
        var ow = new fM();
        var oz = oB.getStyle().getMathvariant().getMathvariant();
        var oA = oB.getUnicodeText();
        var oy = new gX();
        for (var ou = 0; ou < oA.size(); ou++) {
            var ox = oA.charUnicodeCharAt(ou);
            var oC = null;
            var ov = ac.changeChar(ox.getUnicodeInt());
            if (ov != null) {
                oC = ov.substring(0, ov.indexOf(":"));
                ox = eV.getUnicodeChar(
                    ov.substring(ov.indexOf(":") + 1, ov.length),
                );
            } else {
                oC = oB.getStyle().getMathvariant().getMathvariant();
            }
            if (oy.size() > 0) {
                if (!(oC == oz)) {
                    ow.add(this.createTextBeanForText(oy, oz, oB));
                    oy = new gX();
                }
            }
            oz = oC;
            oy.addUnicodeChar(ox);
        }
        if (oy.size() > 0) {
            ow.add(this.createTextBeanForText(oy, oz, oB));
        }
        return ow;
    };
    aB.prototype.createTextBeanForText = function (ow, ov, ou) {
        var ox = new cO(ou.getParentBean());
        ou.copyAttributes(ox);
        ox.getStyle().getMathvariant().setMathvariant(ov);
        ox.setUnicodeText(ow);
        return ox;
    };
    aB.prototype.getText = function () {
        var oy = "";
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox instanceof cO) {
                var ow = ox;
                oy = oy + ow.getUnicodeText().toString();
            }
        }
        return oy;
    };
    aB.prototype.getUnicodeText = function () {
        var oy = new gX();
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox instanceof cO) {
                var ow = ox;
                oy.addString(ow.getUnicodeText());
            }
        }
        return oy;
    };
    aB.prototype.setText = function (oy) {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox instanceof cO) {
                var ow = ox;
                ow.setText(oy);
                return;
            }
        }
    };
    aB.isTokenBean = function (ou) {
        if (ou instanceof aB) {
            if (ou instanceof cT) {
                return false;
            }
            return true;
        }
        return false;
    };

    function no(ou) {
        this.hasMathvariant = false;
        this.dKx = aB;
        this.dKx(ou);
    }
    ga(no, aB);
    no.prototype.copyParentStyle = function (ou) {
        if (this.getAttribute("mathvariant") != null) {
            this.hasMathvariant = true;
        }
        if (this.getAttribute("mathvariant") == null && this.hasOneCharText()) {
            this.getStyle().setMathvariant(ou.getMathvariant().getCopy());
            this.getStyle().setItalic(true);
            this.setAttribute(
                "mathvariant",
                this.getStyle().getMathvariant().getMathvariant(),
            );
        }
        this.addDefaultPadding(ou.getMathsize());
        aB.prototype.copyParentStyle.call(this, ou);
    };
    no.prototype.hasOneCharText = function () {
        var ov = this.getChildren();
        if (ov.size() == 1) {
            var ow = ov.get(0);
            if (ow instanceof cO) {
                var ou = ow;
                if (ou.getUnicodeText().size() == 1) {
                    return true;
                }
            }
        }
        return false;
    };
    no.prototype.isHasMathvariant = function () {
        return this.hasMathvariant;
    };
    no.prototype.setHasMathvariant = function (ou) {
        this.hasMathvariant = ou;
    };

    function cI(ou) {
        this.dKy = no;
        this.dKy(ou);
    }
    ga(cI, no);
    cI.prototype.addFunctionConstant = function (ov, ou) {
        var ow = this.getText();
        if (ow == null) {
            return;
        }
        ow = ow.trim();
        if (ow.length == 0) {
            return;
        }
        if (!lv.stringIsNumber(ow)) {
            if (!ou.hasKey(ow)) {
                ov.setAttribute(ow, "1");
            }
        }
    };
    cI.prototype.calculateResult = function (ow, oy) {
        var ou = new hQ();
        ou.setError(true);
        var ox = this.getText();
        if (ox == null) {
            return ou;
        }
        ox = ox.trim();
        if (ox.length == 0) {
            return ou;
        }
        if (lv.stringIsNumber(ox)) {
            ou.setError(false);
            ou.setValue(lv.getDoubleValue(ox, 0));
            return ou;
        } else {
            if (ow.getAttribute(ox) != null) {
                var ov = ow.getAttribute(ox);
                ou.setError(false);
                ou.setValue(lv.getDoubleValue(ov, 0));
                return ou;
            }
            if (oy.getAttribute(ox) != null) {
                var ov = oy.getAttribute(ox);
                ou.setError(false);
                ou.setValue(lv.getDoubleValue(ov, 0));
                return ou;
            }
        }
        return ou;
    };
    cI.prototype.getApplyLikeText = function (ov) {
        var ou = this.getText();
        if (ou == null) {
            return "";
        }
        ou = ou.trim();
        if (ou.length == 0) {
            return "";
        }
        if (!lv.stringIsNumber(ou)) {
            if (ov.getAttribute(ou) != null) {
                return ov.getAttribute(ou);
            }
        }
        return ou;
    };

    function kq(ou) {
        this.dKx = aB;
        this.dKx(ou);
    }
    ga(kq, aB);
    kq.prototype.copyParentStyle = function (ou) {
        this.addDefaultPadding(ou.getMathsize());
        aB.prototype.copyParentStyle.call(this, ou);
    };

    function l(ou) {
        this.dKz = kq;
        this.dKz(ou);
    }
    ga(l, kq);
    l.prototype.addFunctionConstant = function (ov, ou) {
        var ow = this.getText();
        if (ow == null) {
            return;
        }
        ow = ow.trim();
        if (ow.length == 0) {
            return;
        }
        if (!lv.stringIsNumber(ow)) {
            ov.setAttribute(ow, "1");
        }
    };
    l.prototype.isTextConstant = function () {
        var ou = this.getText();
        if (ou == "π") {
            return true;
        }
        if (ou == "𝜑") {
            return true;
        }
        if (ou == "γ") {
            return true;
        }
        if (ou == "𝜑") {
            return true;
        }
        return false;
    };
    l.prototype.calculateResult = function (ow, oy) {
        var ou = new hQ();
        ou.setError(true);
        var ox = this.getText();
        if (ox == null) {
            return ou;
        }
        ox = ox.trim();
        if (ox.length == 0) {
            return ou;
        }
        if (ox == "π") {
            ou.setError(false);
            ou.setValue(3.141592653589793);
            return ou;
        }
        if (ox == "e") {
            ou.setError(false);
            ou.setValue(2.718281828459045);
            return ou;
        }
        if (ox == "γ") {
            ou.setError(false);
            ou.setValue(0.5772156649015329);
            return ou;
        }
        if (ox == "φ") {
            ou.setError(false);
            ou.setValue(1.618033988749895);
            return ou;
        }
        if (ox.indexOf(".") == ox.length - 1) {
            ox = ox.substring(0, ox.length - 1);
        }
        if (lv.stringIsNumber(ox)) {
            ou.setError(false);
            ou.setValue(lv.getDoubleValue(ox, 0));
            return ou;
        } else {
            if (oy.getAttribute(ox) != null) {
                var ov = oy.getAttribute(ox);
                ou.setError(false);
                ou.setValue(lv.getDoubleValue(ov, 0));
                return ou;
            }
        }
        return ou;
    };
    l.prototype.getApplyLikeText = function (ov) {
        var ou = this.getText();
        if (ou == null) {
            return "";
        }
        ou = ou.trim();
        if (ou.length == 0) {
            return "";
        }
        if (!lv.stringIsNumber(ou)) {
            if (ov.getAttribute(ou) != null) {
                return ov.getAttribute(ou);
            }
        }
        return ou;
    };

    function aT(ou) {
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(aT, gK);

    function ir(ou) {
        this.limLoc = "subSup";
        this.chr = "";
        this.sub = null;
        this.subHide = false;
        this.sup;
        this.supHide = false;
        this.e = null;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(ir, gK);
    ir.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    ir.prototype.getLimLoc = function () {
        return this.limLoc;
    };
    ir.prototype.setLimLoc = function (ou) {
        this.limLoc = ou;
    };
    ir.prototype.getChr = function () {
        return this.chr;
    };
    ir.prototype.setChr = function (ou) {
        this.chr = ou;
    };
    ir.prototype.getSub = function () {
        return this.sub;
    };
    ir.prototype.setSub = function (ou) {
        this.sub = ou;
    };
    ir.prototype.isSubHide = function () {
        return this.subHide;
    };
    ir.prototype.setSubHide = function (ou) {
        this.subHide = ou;
    };
    ir.prototype.getSup = function () {
        return this.sup;
    };
    ir.prototype.setSup = function (ou) {
        this.sup = ou;
    };
    ir.prototype.isSupHide = function () {
        return this.supHide;
    };
    ir.prototype.setSupHide = function (ou) {
        this.supHide = ou;
    };
    ir.prototype.getE = function () {
        return this.e;
    };
    ir.prototype.setE = function (ou) {
        this.e = ou;
    };

    function jU(ou) {
        this.mathml = "";
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(jU, gK);
    jU.prototype.getMathml = function () {
        return this.mathml;
    };
    jU.prototype.setMathml = function (ou) {
        this.mathml = ou;
    };

    function hQ() {
        this.error = false;
        this.nanError = false;
        this.infinity = false;
        this.value = 0;
    }
    hQ.prototype.isError = function () {
        return this.error;
    };
    hQ.prototype.setError = function (ou) {
        this.error = ou;
    };
    hQ.prototype.getValue = function () {
        return this.value;
    };
    hQ.prototype.setValue = function (ou) {
        this.value = ou;
    };
    hQ.prototype.isInfinity = function () {
        return this.infinity;
    };
    hQ.prototype.setInfinity = function (ou) {
        this.infinity = ou;
        if (ou) {
            this.error = true;
        }
    };
    hQ.prototype.isNanError = function () {
        return this.nanError;
    };
    hQ.prototype.setNanError = function (ou) {
        this.nanError = ou;
        if (ou) {
            this.error = true;
        }
    };

    function gu(ou) {
        this.name = "f";
        this.variables = "x";
        this.functionValue;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(gu, gK);
    gu.prototype.addChild = function (ou) {
        if (this.functionValue != null) {
            return;
        }
        if (ou.isApplyBean() || ou instanceof cI || ou instanceof l) {
            this.functionValue = ou;
        }
    };
    gu.prototype.initChildren = function () {
        var ou = fe.getTBean(this, this.name);
        ou.getStyle().getMathvariant().setMathvariant("italic");
        aM.prototype.addChild.call(this, ou);
        var ow = fe.getOBean(this, "(");
        ow.setMaxsize("1");
        aM.prototype.addChild.call(this, ow);
        aM.prototype.addChild.call(this, fe.getIBean(this, this.variables));
        var ov = fe.getOBean(this, ")");
        ov.setMaxsize("1");
        aM.prototype.addChild.call(this, ov);
        aM.prototype.addChild.call(this, fe.getOBean(this, "="));
        if (this.functionValue != null) {
            aM.prototype.addChild.call(this, this.functionValue);
        }
    };
    gu.prototype.getName = function () {
        return this.name;
    };
    gu.prototype.setName = function (ou) {
        if (ou == null) {
            return;
        }
        ou = ou.trim();
        if (ou.length == 0) {
            return;
        }
        this.name = ou;
    };
    gu.prototype.getVariables = function () {
        return this.variables;
    };
    gu.prototype.setVariables = function (ou) {
        if (ou == null) {
            return;
        }
        ou = ou.trim();
        if (ou.length == 0) {
            return;
        }
        this.variables = ou;
    };
    gu.prototype.getVariableMap = function () {
        var ox = new aR();
        if (this.variables == null) {
            return ox;
        }
        this.variables = this.variables.trim();
        if (this.variables.length == 0) {
            return ox;
        }
        var ow = this.variables.split(",");
        for (var ov = 0; ov < ow.length; ov++) {
            var ou = ow[ov];
            if (ou == null) {
                continue;
            }
            ou = ou.trim();
            if (ou.length == 0) {
                continue;
            }
            ox.setAttribute(ou, "");
        }
        return ox;
    };
    gu.prototype.getConstantMap = function () {
        var ou = this.getVariableMap();
        var ov = new aR();
        if (this.functionValue != null) {
            this.functionValue.addFunctionConstant(ov, ou);
        }
        return ov;
    };
    gu.prototype.calculateResult = function (ou, ov) {
        if (this.functionValue != null) {
            return this.functionValue.calculateResult(ou, ov);
        }
        return new hQ();
    };
    gu.prototype.getFunctionValue = function () {
        return this.functionValue;
    };
    gu.prototype.getApplyLikeText = function (ou) {
        return this.functionValue.getApplyLikeText(ou);
    };
    gu.prototype.toString = function (ou) {
        return (
            this.getName() +
            "(" +
            this.variables +
            ") = " +
            this.getApplyLikeText(ou)
        );
    };

    function iJ(ou) {
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(iJ, bW);
    iJ.prototype.copyParentStyle = function (ou) {
        if (this.getCurrentDefStyle().getScriptlevel() != null) {
            var ow = this.getCurrentDefStyle().getScriptlevel();
            if (ow != null) {
                if (ow.indexOf("+") == 0) {
                    ow = ow.substring(1, ow.length);
                    var ov = lv.getIntegerValue(ow, 0);
                    this.modifyScriptlevel(ov);
                } else {
                    if (ow.indexOf("-") == 0) {
                        ow = ow.substring(1, ow.length);
                        var ov = lv.getIntegerValue(ow, 0);
                        this.modifyScriptlevel(-ov);
                    } else {
                        this.setScriptlevel(lv.getIntegerValue(ow, 0));
                    }
                }
            }
        }
        if (this.getCurrentDefStyle().getDisplaystyle() != null) {
            this.modifyDisplay(
                lv.getBooleanValue(
                    this.getCurrentDefStyle().getDisplaystyle(),
                    false,
                ),
            );
        }
        bW.prototype.copyParentStyle.call(this, ou);
    };

    function k(ou) {
        this.tooltipMap = new aR();
        this.dKA = iJ;
        this.dKA(ou);
    }
    ga(k, iJ);
    k.prototype.copyParentStyle = function (ou) {
        gK.prototype.initChildren.call(this);
        iJ.prototype.copyParentStyle.call(this, ou);
        this.addGeneralTooltip();
    };
    k.prototype.onlyCopyParentStyle = function (ou) {
        iJ.prototype.copyParentStyle.call(this, ou);
    };
    k.prototype.addGeneralTooltip = function () {
        var ou = fe.getOnlyTBean(this, "Tooltip");
        ou.setAttribute("mathsize", "16");
        ou.setAttribute("mathbackground", "white");
        ou.getCssstyle().setPadding("2px");
        ou.getCssstyle().setBorder("1px");
        ou.copyParentStyle(this.getStyle());
        this.addTooltip("TOOLTIP", ou);
    };
    k.prototype.addTooltip = function (ox, ou) {
        var ov = ou;
        var ow = new k(null);
        ow.setAttribute("mathbackground", "white");
        ow.getCssstyle().setPadding("2px");
        ow.getCssstyle().setBorder("1px");
        ow.setCurrentDefStyle(ov.getCurrentDefStyle());
        ow.onlyCopyParentStyle(this.getStyle());
        ow.addChild(ou);
        this.tooltipMap.setAttribute(ox, ow);
    };
    k.prototype.isBLock = function () {
        return this.getStyle().isDisplaystyle();
    };
    k.prototype.getTooltipBeans = function () {
        return this.tooltipMap.getValues();
    };
    k.prototype.getTooltipBean = function (ou) {
        return this.tooltipMap.getAttribute(ou);
    };
    k.prototype.canDeleteChild = function (ou) {
        var oy = false;
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            if (ox == ou) {
                oy = true;
                break;
            }
        }
        if (!oy) {
            return false;
        }
        if (ow.size() > 1) {
            return true;
        }
        return false;
    };
    k.prototype.deleteChild = function (ou) {
        var ow = this.getChildren();
        if (ow.size() > 1) {
            for (var ov = 0; ov < ow.size(); ov++) {
                var ox = ow.get(ov);
                if (ox == ou) {
                    ow.remove(ov);
                    return true;
                }
            }
        }
        return false;
    };
    k.prototype.canBeDeleted = function () {
        return true;
    };
    k.prototype.deleteMe = function () {
        this.resetChildren();
        var ou = new bh(this);
        ou.setAttribute("editorSelected", "true");
        this.addChild(ou);
        return true;
    };

    function ae(ou) {
        this.src;
        this.width;
        this.height;
        this.valign;
        this.alt;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(ae, gK);
    ae.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    ae.prototype.getSrc = function () {
        return this.src;
    };
    ae.prototype.setSrc = function (ou) {
        this.src = ou;
    };
    ae.prototype.getWidth = function () {
        return this.width;
    };
    ae.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    ae.prototype.getHeight = function () {
        return this.height;
    };
    ae.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    ae.prototype.getValign = function () {
        return this.valign;
    };
    ae.prototype.setValign = function (ou) {
        this.valign = ou;
    };
    ae.prototype.getAlt = function () {
        return this.alt;
    };
    ae.prototype.setAlt = function (ou) {
        this.alt = ou;
    };

    function mx(ou) {
        this.dKB = ae;
        this.dKB(ou);
        this.setWidth("0.66em");
        this.setHeight("1em");
    }
    ga(mx, ae);

    function nn(ou) {
        this.actiontype = "toggle";
        this.selection;
        this.childrenBackup = new fM();
        this.statusLine;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(nn, gK);
    nn.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
        if (this.actiontype == "tooltip") {
            if (this.getChildren().size() == 2) {
                var oz = this.getChildren().get(1);
                this.getMathBean().addTooltip(this.getId(), oz);
                this.getChildren().remove(1);
            } else {
                this.actiontype = "toggle";
            }
            this.setMaxChildren(2);
        } else {
            if (this.actiontype == "toggle") {
                var ow = lv.getIntegerValue(this.selection, 0);
                if (ow < 0 || ow > this.getChildren().size() - 1) {
                    ow = 0;
                    this.selection = "0";
                }
                var oA = this.getChildren().get(ow);
                this.childrenBackup.clear();
                for (var oy = 0; oy < this.getChildren().size(); oy++) {
                    var ov = this.getChildren().get(oy);
                    this.childrenBackup.add(ov);
                }
                this.getChildren().clear();
                this.addChild(oA);
                this.setMaxChildren(-1);
            } else {
                if (this.actiontype == "statusline") {
                    if (this.getChildren().size() == 2) {
                        var oA = this.getChildren().get(1);
                        if (oA instanceof aB) {
                            var ox = oA;
                            this.statusLine = ox.getText();
                        }
                        this.getChildren().remove(1);
                        this.setMaxChildren(2);
                    } else {
                        this.actiontype = "toggle";
                        this.setMaxChildren(-1);
                    }
                }
            }
        }
    };
    nn.prototype.restoreChildren = function () {
        this.getChildren().clear();
        for (var ov = 0; ov < this.childrenBackup.size(); ov++) {
            var ou = this.childrenBackup.get(ov);
            this.getChildren().add(ou);
        }
    };
    nn.prototype.getActiontype = function () {
        return this.actiontype;
    };
    nn.prototype.setActiontype = function (ou) {
        if ("toggle" == ou || "tooltip" == ou || "statusline" == ou) {
            this.actiontype = ou;
        }
    };
    nn.prototype.getSelection = function () {
        return this.selection;
    };
    nn.prototype.setSelection = function (ou) {
        this.selection = ou;
    };
    nn.prototype.isSpaceLikeElement = function () {
        return false;
    };
    nn.prototype.getStatusLine = function () {
        return this.statusLine;
    };

    function dC(ou) {
        this.groupalign;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(dC, gK);
    dC.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    dC.prototype.getGroupalign = function () {
        return this.groupalign;
    };
    dC.prototype.setGroupalign = function (ou) {
        this.groupalign = ou;
    };
    dC.prototype.isSpaceLikeElement = function () {
        return true;
    };

    function nm(ou) {
        this.edge;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(nm, gK);
    nm.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    nm.prototype.getEdge = function () {
        return this.edge;
    };
    nm.prototype.setEdge = function (ou) {
        this.edge = ou;
    };
    nm.prototype.isSpaceLikeElement = function () {
        return true;
    };

    function bh(ou) {
        this.dKB = ae;
        this.dKB(ou);
        this.setWidth("0.66em");
        this.setHeight("1em");
        this.getCssstyle().setBorder("1px");
    }
    ga(bh, ae);

    function kj(ou) {
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(kj, bW);

    function hk(ou) {
        this.open;
        this.close;
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(hk, bW);
    hk.prototype.copyParentStyle = function (ou) {
        if (this.open == null) {
            this.open = "(";
        }
        if (this.close == null) {
            this.close = ")";
        }
        this.open = W.trim(this.open);
        this.close = W.trim(this.close);
        var ox = 0;
        var ow = this.getChildren();
        for (var oz = 0; oz < ow.size(); oz++) {
            var ov = ow.get(oz);
            ox = ox + ov.getChildren().size();
        }
        if (this.getOpen().length > 0) {
            var oB = fe.getOBean(this, this.getOpen());
            oB.setFormOp("prefix");
            oB.setDynamicCreated(true);
            if (ow == null) {
                this.addChild(oB);
            } else {
                var ov = this.getChildren().get(0);
                ov.addIndexChild(oB, 0);
            }
        }
        if (this.getClose().length > 0) {
            var oA = fe.getOBean(this, this.getClose());
            oA.setFormOp("postfix");
            oA.setDynamicCreated(true);
            if (ow == null) {
                this.addChild(oA);
            } else {
                var oy = this.getChildren().size();
                var ov = this.getChildren().get(oy - 1);
                ov.addChild(oA);
            }
        }
        bW.prototype.copyParentStyle.call(this, ou);
    };
    hk.prototype.getOpen = function () {
        return this.open;
    };
    hk.prototype.setOpen = function (ou) {
        this.open = ou;
    };
    hk.prototype.getClose = function () {
        return this.close;
    };
    hk.prototype.setClose = function (ou) {
        this.close = ou;
    };

    function lY(ou) {
        this.linebreak;
        this.lineleading;
        this.linebreakstyle;
        this.indentalign;
        this.indentshift;
        this.indenttarget;
        this.indentalignfirst;
        this.indentshiftfirst;
        this.indentalignlast;
        this.indentshiftlast;
        this.dKx = aB;
        this.dKx(ou);
    }
    ga(lY, aB);
    lY.prototype.copyParentStyle = function (ou) {
        aB.prototype.copyParentStyle.call(this, ou);
    };
    lY.prototype.isLineBreak = function () {
        return this.linebreak != null;
    };
    lY.prototype.getLinebreak = function () {
        return this.linebreak;
    };
    lY.prototype.setLinebreak = function (ou) {
        if ("indentingnewline" == ou) {
            ou = "newline";
        }
        this.linebreak = ou;
    };
    lY.prototype.getIndentalign = function () {
        return this.indentalign;
    };
    lY.prototype.setIndentalign = function (ou) {
        this.indentalign = ou;
    };
    lY.prototype.getIndentshift = function () {
        return this.indentshift;
    };
    lY.prototype.setIndentshift = function (ou) {
        this.indentshift = ou;
    };
    lY.prototype.getIndenttarget = function () {
        return this.indenttarget;
    };
    lY.prototype.setIndenttarget = function (ou) {
        this.indenttarget = ou;
    };
    lY.prototype.getIndentalignfirst = function () {
        return this.indentalignfirst;
    };
    lY.prototype.setIndentalignfirst = function (ou) {
        this.indentalignfirst = ou;
    };
    lY.prototype.getIndentshiftfirst = function () {
        return this.indentshiftfirst;
    };
    lY.prototype.setIndentshiftfirst = function (ou) {
        this.indentshiftfirst = ou;
    };
    lY.prototype.getIndentalignlast = function () {
        return this.indentalignlast;
    };
    lY.prototype.setIndentalignlast = function (ou) {
        this.indentalignlast = ou;
    };
    lY.prototype.getIndentshiftlast = function () {
        return this.indentshiftlast;
    };
    lY.prototype.setIndentshiftlast = function (ou) {
        this.indentshiftlast = ou;
    };
    lY.prototype.getLineleading = function () {
        return this.lineleading;
    };
    lY.prototype.setLineleading = function (ou) {
        this.lineleading = ou;
    };
    lY.prototype.getLinebreakstyle = function () {
        return this.linebreakstyle;
    };
    lY.prototype.setLinebreakstyle = function (ou) {
        this.linebreakstyle = ou;
    };

    function el(ou) {
        this.notation;
        this.linethickness;
        this.radius;
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(el, bW);
    el.prototype.getNotation = function () {
        return this.notation;
    };
    el.prototype.setNotation = function (ou) {
        this.notation = ou;
    };
    el.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    el.prototype.setLinethickness = function (ou) {
        this.linethickness = ou;
    };
    el.prototype.getRadius = function () {
        return this.radius;
    };
    el.prototype.setRadius = function (ou) {
        this.radius = ou;
    };

    function dF(ou) {
        this.longdivstyle;
        this.longdivstyleOld;
        this.divisor;
        this.result;
        this.mStack;
        this.charspacing;
        this.realChildren = new fM();
        this.dKr = gK;
        this.dKr(ou);
        this.mStack = new hq(this);
        this.mStack.setStackalign("left");
        aM.prototype.addChild.call(this, this.mStack);
    }
    ga(dF, gK);
    dF.prototype.addChild = function (ou) {
        if (this.divisor == null) {
            this.divisor = this.getDigitRow(ou);
            aM.prototype.addChild.call(this, this.divisor);
        } else {
            if (this.result == null) {
                this.result = this.getDigitRow(ou);
                if (
                    "lefttop" == this.longdivstyle ||
                    "righttop" == this.longdivstyle ||
                    "stackedleftlinetop" == this.longdivstyle
                ) {
                    this.mStack.addChild(this.result);
                } else {
                    aM.prototype.addChild.call(this, this.result);
                }
            } else {
                var ov = this.getDigitRow(ou);
                this.mStack.addChild(ov);
            }
        }
    };
    dF.prototype.getDigitRow = function (ow) {
        if (ow instanceof aB) {
            var ou = ow;
            var oy = new aK(this);
            oy.setCurrentDefStyle(this.getCurrentDefStyle());
            ow.copyAttributes(oy);
            var oC = ou.getUnicodeText();
            for (var ov = 0; ov < oC.size(); ov++) {
                if (ov > 0) {
                    ow.clearAttribute("editorSelected");
                }
                var ox = oC.charUnicodeCharAt(ov);
                var oz = ox.toString();
                var oA = new kq(oy);
                oA.setCurrentDefStyle(this.getCurrentDefStyle());
                ow.copyAttributes(oA);
                var oB = new cO(oA);
                oB.setCurrentDefStyle(this.getCurrentDefStyle());
                var oD = new gX();
                oD.addUnicodeChar(ox);
                oB.setUnicodeText(oD);
                oA.addChild(oB);
                oy.addChild(oA);
            }
            return oy;
        }
        return ow;
    };
    dF.prototype.setCurrentDefStyle = function (ou) {
        gK.prototype.setCurrentDefStyle.call(this, ou);
        this.mStack.setCurrentDefStyle(ou);
    };
    dF.prototype.copyParentStyle = function (ou) {
        this.mStack.setCharspacing(this.charspacing);
        if ("left/\\right" == this.longdivstyle) {
            this.addTextChild("/");
            this.addTextChild("\\");
        } else {
            if ("left)(right" == this.longdivstyle) {
                this.addTextChild(")");
                this.addTextChild("(");
            } else {
                if (":right=right" == this.longdivstyle) {
                    this.addTextChild(":");
                    this.addTextChild("=");
                }
            }
        }
        if (this.mStack.getChildren().size() > 1) {
            if (
                "lefttop" == this.longdivstyle ||
                "righttop" == this.longdivstyle ||
                "stackedleftlinetop" == this.longdivstyle
            ) {
                var oA = this.mStack.getChildren().get(0);
                var ov = this.mStack.getChildren().get(1);
                if (oA instanceof aK && ov instanceof aK) {
                    var oz = oA;
                    var ox = ov;
                    var oy = oz.calculateDecimalLength();
                    var ow = ox.calculateDecimalLength();
                    if (oy > ow) {
                        this.addNoneTo(ox, oy - ow);
                    } else {
                        if (ow > oy) {
                            this.addNoneTo(oz, ow - oy);
                        }
                    }
                }
            }
        }
        gK.prototype.copyParentStyle.call(this, ou);
    };
    dF.prototype.addNoneTo = function (ow, ox) {
        for (var ov = 0; ov < ox; ov++) {
            var ou = new bI(ow);
            ou.setCurrentDefStyle(ow.getCurrentDefStyle());
            var oy = new mx(ou);
            ou.addChild(oy);
            ow.addIndexChild(ou, 0);
        }
    };
    dF.prototype.addTextChild = function (ov) {
        var ou = fe.getTextBean(this, ov);
        ou.setDynamicCreated(true);
        aM.prototype.addChild.call(this, ou);
    };
    dF.prototype.getLongdivstyle = function () {
        return this.longdivstyle;
    };
    dF.prototype.setLongdivstyle = function (ou) {
        this.longdivstyle = ou;
    };
    dF.prototype.getDivisor = function () {
        return this.divisor;
    };
    dF.prototype.getResult = function () {
        return this.result;
    };
    dF.prototype.getmStack = function () {
        return this.mStack;
    };
    dF.prototype.getCharspacing = function () {
        return this.charspacing;
    };
    dF.prototype.setCharspacing = function (ou) {
        this.charspacing = ou;
    };
    dF.prototype.getLongdivstyleOld = function () {
        return this.longdivstyleOld;
    };
    dF.prototype.setLongdivstyleOld = function (ou) {
        this.longdivstyleOld = ou;
    };

    function lr(ou) {
        this.preExp = new fM();
        this.preSub = new fM();
        this._base = null;
        this.postExp = new fM();
        this.postSub = new fM();
        this.supscriptshift;
        this.subscriptshift;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(lr, gK);
    lr.prototype.copyParentStyle = function (ou) {
        var ow = this.getChildren();
        for (var ov = 1; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            ox.modifyScriptlevel(1);
        }
        gK.prototype.copyParentStyle.call(this, ou);
    };
    lr.prototype.initChildren = function () {
        if (this._base == null) {
            this.replaceChildren();
        }
        gK.prototype.initChildren.call(this);
    };
    lr.prototype.replaceChildren = function () {
        var ow = this.getChildren();
        if (ow.size() == 0) {
            return;
        }
        this._base = ow.get(0);
        var ov = true;
        for (var ou = 1; ou < ow.size(); ou++) {
            var oz = ow.get(ou);
            if (oz instanceof ds) {
                ov = false;
                continue;
            }
            var oy = ow.get(ou);
            ou++;
            var ox = ow.get(ou);
            if (ov) {
                this.postSub.add(oy);
                this.postExp.add(ox);
            } else {
                this.preSub.add(oy);
                this.preExp.add(ox);
            }
        }
    };
    lr.prototype.rebuildChildren = function () {
        var ov = this.getChildren();
        ov.clear();
        ov.add(this._base);
        for (var ou = 0; ou < this.postSub.size(); ou++) {
            var ow = this.postSub.get(ou);
            if (ow == null) {
                ow = fe.getNoneBean(this);
            }
            var ox = this.postExp.get(ou);
            if (ox == null) {
                ox = fe.getNoneBean(this);
            }
            if (!(ox instanceof mx && ow instanceof mx)) {
                ov.add(ow);
                ov.add(ox);
            }
        }
        if (this.preSub.size() > 0) {
            ov.add(new ds(this));
        }
        for (var ou = 0; ou < this.preSub.size(); ou++) {
            var ow = this.preSub.get(ou);
            if (ow == null) {
                ow = fe.getNoneBean(this);
            }
            var ox = this.preExp.get(ou);
            if (ox == null) {
                ox = fe.getNoneBean(this);
            }
            if (!(ox instanceof mx && ow instanceof mx)) {
                ov.add(ow);
                ov.add(ox);
            }
        }
    };
    lr.prototype.getPreExp = function () {
        return this.preExp;
    };
    lr.prototype.getPreSub = function () {
        return this.preSub;
    };
    lr.prototype.getBase = function () {
        return this._base;
    };
    lr.prototype.getPostExp = function () {
        return this.postExp;
    };
    lr.prototype.getPostSub = function () {
        return this.postSub;
    };
    lr.prototype.getSubscriptshift = function () {
        return this.subscriptshift;
    };
    lr.prototype.getSupscriptshift = function () {
        return this.supscriptshift;
    };
    lr.prototype.setSupscriptshift = function (ou) {
        this.supscriptshift = ou;
    };
    lr.prototype.setSubscriptshift = function (ou) {
        this.subscriptshift = ou;
    };
    lr.prototype.canDeleteChild = function (ow) {
        if (this._base == ow) {
            return !this.isEmptyBean(ow);
        }
        for (var ou = 0; ou < this.preExp.size(); ou++) {
            var ov = this.preExp.get(ou);
            if (ov == ow) {
                return this.canDeleteChildFromList(this.preExp, ow);
            }
        }
        for (var ou = 0; ou < this.preSub.size(); ou++) {
            var ov = this.preSub.get(ou);
            if (ov == ow) {
                return this.canDeleteChildFromList(this.preSub, ow);
            }
        }
        for (var ou = 0; ou < this.postExp.size(); ou++) {
            var ov = this.postExp.get(ou);
            if (ov == ow) {
                return this.canDeleteChildFromList(this.postExp, ow);
            }
        }
        for (var ou = 0; ou < this.postSub.size(); ou++) {
            var ov = this.postSub.get(ou);
            if (ov == ow) {
                return this.canDeleteChildFromList(this.postSub, ow);
            }
        }
        return false;
    };
    lr.prototype.canDeleteChildFromList = function (ou, ov) {
        if (ou.size() > 1) {
            return true;
        }
        return !this.isEmptyBean(ov);
    };
    lr.prototype.deleteChild = function (ow) {
        if (this._base == ow) {
            this._base = this.getSelectedEmptyBean(this);
            this.rebuildChildren();
            return true;
        }
        for (var ou = 0; ou < this.preExp.size(); ou++) {
            var ov = this.preExp.get(ou);
            if (ov == ow) {
                return this.deleteChildFromList(
                    this.preExp,
                    this.preSub,
                    ou,
                    ow,
                );
            }
        }
        for (var ou = 0; ou < this.preSub.size(); ou++) {
            var ov = this.preSub.get(ou);
            if (ov == ow) {
                return this.deleteChildFromList(
                    this.preSub,
                    this.preExp,
                    ou,
                    ow,
                );
            }
        }
        for (var ou = 0; ou < this.postExp.size(); ou++) {
            var ov = this.postExp.get(ou);
            if (ov == ow) {
                return this.deleteChildFromList(
                    this.postExp,
                    this.postSub,
                    ou,
                    ow,
                );
            }
        }
        for (var ou = 0; ou < this.postSub.size(); ou++) {
            var ov = this.postSub.get(ou);
            if (ov == ow) {
                return this.deleteChildFromList(
                    this.postSub,
                    this.postExp,
                    ou,
                    ow,
                );
            }
        }
        return false;
    };
    lr.prototype.deleteChildFromList = function (ou, oy, ov, ox) {
        ou.remove(ov);
        if (ou.size() == 0) {
            ou.add(this.getSelectedEmptyBean(this));
        }
        this.selectNextInList(ou, ov);
        var ow = oy.get(ov);
        if (ow instanceof mx) {
            oy.remove(ov);
            if (oy.size() == 0) {
                oy.add(this.getSelectedEmptyBean(this));
            }
        }
        this.rebuildChildren();
        return true;
    };
    lr.prototype.selectNextInList = function (ow, ov) {
        if (ov < ow.size()) {
            var ou = ow.get(ov);
            if (ou instanceof mx) {
            } else {
                ou.setAttribute("editorSelected", "true");
            }
        } else {
            var ou = ow.get(ov - 1);
            ou.setAttribute("editorSelected", "true");
        }
    };
    lr.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    lr.prototype.insertChildLeft = function (ov, ox) {
        if (this._base == ov) {
            this._base = this.getFixChildLeft(ov, ox);
            this.rebuildChildren();
            return true;
        }
        for (var ou = 0; ou < this.preExp.size(); ou++) {
            var ow = this.preExp.get(ou);
            if (ow == ov) {
                return this.addToBothList(this.preExp, this.preSub, ou, ox);
            }
        }
        for (var ou = 0; ou < this.preSub.size(); ou++) {
            var ow = this.preSub.get(ou);
            if (ow == ov) {
                return this.addToBothList(this.preSub, this.preExp, ou, ox);
            }
        }
        for (var ou = 0; ou < this.postExp.size(); ou++) {
            var ow = this.postExp.get(ou);
            if (ow == ov) {
                return this.addToBothListPre(
                    this.postExp,
                    this.postSub,
                    ou,
                    ox,
                );
            }
        }
        for (var ou = 0; ou < this.postSub.size(); ou++) {
            var ow = this.postSub.get(ou);
            if (ow == ov) {
                return this.addToBothListPre(
                    this.postSub,
                    this.postExp,
                    ou,
                    ox,
                );
            }
        }
        return false;
    };
    lr.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    lr.prototype.insertChildRight = function (ov, ox) {
        if (this._base == ov) {
            this._base = this.getFixChildRight(ov, ox);
            this.rebuildChildren();
            return true;
        }
        for (var ou = 0; ou < this.preExp.size(); ou++) {
            var ow = this.preExp.get(ou);
            if (ow == ov) {
                return this.addToBothListPre(this.preExp, this.preSub, ou, ox);
            }
        }
        for (var ou = 0; ou < this.preSub.size(); ou++) {
            var ow = this.preSub.get(ou);
            if (ow == ov) {
                return this.addToBothListPre(this.preSub, this.preExp, ou, ox);
            }
        }
        for (var ou = 0; ou < this.postExp.size(); ou++) {
            var ow = this.postExp.get(ou);
            if (ow == ov) {
                return this.addToBothList(this.postExp, this.postSub, ou, ox);
            }
        }
        for (var ou = 0; ou < this.postSub.size(); ou++) {
            var ow = this.postSub.get(ou);
            if (ow == ov) {
                return this.addToBothList(this.postSub, this.postExp, ou, ox);
            }
        }
        return false;
    };
    lr.prototype.addToBothListPre = function (ou, oz, ov, oy) {
        var ox = ou.get(ov);
        if (this.isEmptyBean(ox)) {
            ou.remove(ov);
            this.addToList(ou, ov, oy);
        } else {
            if (ov > 0) {
                var ow = ou.get(ov - 1);
                if (ow instanceof mx) {
                    ou.remove(ov - 1);
                    this.addToList(ou, ov - 1, oy);
                } else {
                    this.addToList(ou, ov, oy);
                    this.addToList(oz, ov, fe.getNoneBean(this));
                }
            } else {
                this.addToList(ou, ov, oy);
                this.addToList(oz, ov, fe.getNoneBean(this));
            }
        }
        oy.setAttribute("editorSelected", "true");
        ox.clearAttribute("editorSelected");
        this.rebuildChildren();
        return true;
    };
    lr.prototype.addToBothList = function (ou, oz, ov, oy) {
        var ox = ou.get(ov);
        if (this.isEmptyBean(ox)) {
            ou.remove(ov);
            this.addToList(ou, ov, oy);
        } else {
            if (ov < ou.size() - 1) {
                var ow = ou.get(ov + 1);
                if (ow instanceof mx) {
                    ou.remove(ov + 1);
                    this.addToList(ou, ov + 1, oy);
                } else {
                    this.addToList(ou, ov + 1, oy);
                    this.addToList(oz, ov + 1, fe.getNoneBean(this));
                }
            } else {
                this.addToList(ou, ov + 1, oy);
                this.addToList(oz, ov + 1, fe.getNoneBean(this));
            }
        }
        oy.setAttribute("editorSelected", "true");
        ox.clearAttribute("editorSelected");
        this.rebuildChildren();
        return true;
    };
    lr.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    lr.prototype.replaceChild = function (ov, ox) {
        if (this._base == ov) {
            this._base = ox;
            this.rebuildChildren();
            return true;
        }
        for (var ou = 0; ou < this.preExp.size(); ou++) {
            var ow = this.preExp.get(ou);
            if (ow == ov) {
                return this.replaceChildFromList(this.preExp, ou, ov, ox);
            }
        }
        for (var ou = 0; ou < this.preSub.size(); ou++) {
            var ow = this.preSub.get(ou);
            if (ow == ov) {
                return this.replaceChildFromList(this.preSub, ou, ov, ox);
            }
        }
        for (var ou = 0; ou < this.postExp.size(); ou++) {
            var ow = this.postExp.get(ou);
            if (ow == ov) {
                return this.replaceChildFromList(this.postExp, ou, ov, ox);
            }
        }
        for (var ou = 0; ou < this.postSub.size(); ou++) {
            var ow = this.postSub.get(ou);
            if (ow == ov) {
                return this.replaceChildFromList(this.postSub, ou, ov, ox);
            }
        }
    };
    lr.prototype.replaceChildFromList = function (ow, ou, ov, ox) {
        ow.remove(ou);
        ow.addTo(ou, ox);
        ox.setParentBean(this);
        ox.setAttribute("editorSelected", "true");
        ov.clearAttribute("editorSelected");
        this.rebuildChildren();
        return true;
    };
    lr.prototype.addToList = function (ov, ou, ow) {
        ow.setParentBean(this);
        ov.addTo(ou, ow);
    };

    function av(ou) {
        this.operatorStyle;
        this.largeOpMultiplier;
        this.form;
        this.fence;
        this.separator;
        this.lspaceS;
        this.rspaceS;
        this.stretchy;
        this.symmetric;
        this.maxsize;
        this.minsize;
        this.largeop;
        this.movablelimits;
        this.accent;
        this.linebreakmultchar;
        this.dKC = lY;
        this.dKC(ou);
    }
    ga(av, lY);
    av.prototype.copyParentStyle = function (ov) {
        this.loadStyleOperatorInfo();
        if (!this.operatorStyle.isInvisible()) {
            this.addDefaultPadding(ov.getMathsize());
        }
        lY.prototype.copyParentStyle.call(this, ov);
        if (this.getLargeop()) {
            var ou = m2.getLength(
                this.largeOpMultiplier,
                this.getStyle().getMathsize(),
            );
            if (this.isIntegral()) {
                ou = lv.getIntFromDouble(ou * 1.2);
            }
            this.getStyle().setMathsize(ou);
            var ox = this.getChildren();
            for (var ow = 0; ow < ox.size(); ow++) {
                var oy = ox.get(ow);
                oy.getStyle().setMathsize(ou);
            }
        }
    };
    av.prototype.loadStyleOperatorInfo = function () {
        if (this.operatorStyle != null) {
            return;
        }
        var ow = null;
        var ov = this.getChildren();
        if (ov.size() == 1) {
            var oy = ov.get(0);
            if (oy instanceof cO) {
                var ou = oy;
                var ox = ou.getUnicodeText().toString();
                if (ox.length > 0) {
                    ow = eF.getStyleForOperator(ox);
                }
            }
        }
        if (ow == null) {
            ow = eF.getDefaultStyleForOperator();
        }
        this.setOperatorStyle(ow);
    };
    av.prototype.getFormS = function () {
        return this.form;
    };
    av.prototype.getForm = function () {
        return this.form;
    };
    av.prototype.setForm = function (ou) {
        this.form = ou;
    };
    av.prototype.setFormOp = function (ou) {
        if (this.form != null) {
            this.operatorStyle.setForm(this.form);
        } else {
            this.operatorStyle.setForm(ou);
        }
    };
    av.prototype.getFenceS = function () {
        return this.fence;
    };
    av.prototype.getFence = function () {
        if (this.fence != null) {
            return lv.getBooleanValue(this.fence, false);
        }
        return this.operatorStyle.isFence();
    };
    av.prototype.setFence = function (ou) {
        this.fence = ou;
    };
    av.prototype.getSeparatorS = function () {
        return this.separator;
    };
    av.prototype.getSeparator = function () {
        if (this.separator != null) {
            return lv.getBooleanValue(this.separator, false);
        }
        return this.operatorStyle.isSeparator();
    };
    av.prototype.setSeparator = function (ou) {
        this.separator = ou;
    };
    av.prototype.getLspaceS = function () {
        return this.lspaceS;
    };
    av.prototype.getLspace = function () {
        if (this.lspaceS != null) {
            return m2.getLength(this.lspaceS, this.getStyle().getMathsize());
        }
        var ou = this.operatorStyle.getFormStyle().getLspace();
        return eF.getLengthForOperatorSpace(ou, this.getStyle().getMathsize());
    };
    av.prototype.setLspace = function (ou) {
        this.lspaceS = ou;
    };
    av.prototype.getRspaceS = function () {
        return this.rspaceS;
    };
    av.prototype.getRspace = function () {
        if (this.rspaceS != null) {
            return m2.getLength(this.rspaceS, this.getStyle().getMathsize());
        }
        var ou = this.operatorStyle.getFormStyle().getRspace();
        return eF.getLengthForOperatorSpace(ou, this.getStyle().getMathsize());
    };
    av.prototype.setRspace = function (ou) {
        this.rspaceS = ou;
    };
    av.prototype.getStretchyS = function () {
        return this.stretchy;
    };
    av.prototype.getStretchy = function () {
        if (this.stretchy != null) {
            return lv.getBooleanValue(this.stretchy, false);
        }
        return this.operatorStyle.isStretchy();
    };
    av.prototype.setStretchy = function (ou) {
        if (ou.toLowerCase() == "true") {
            return;
        }
        this.stretchy = ou;
    };
    av.prototype.getSymmetricS = function () {
        return this.symmetric;
    };
    av.prototype.getSymmetric = function () {
        if (this.symmetric != null) {
            return lv.getBooleanValue(this.symmetric, false);
        }
        return this.operatorStyle.isSymmetric();
    };
    av.prototype.setSymmetric = function (ou) {
        this.symmetric = ou;
    };
    av.prototype.getMaxsize = function () {
        return this.maxsize;
    };
    av.prototype.setMaxsize = function (ou) {
        this.maxsize = ou;
    };
    av.prototype.getMinsize = function () {
        return this.minsize;
    };
    av.prototype.setMinsize = function (ou) {
        this.minsize = ou;
    };
    av.prototype.getLargeopS = function () {
        return this.largeop;
    };
    av.prototype.getLargeop = function () {
        if (!this.getStyle().isDisplaystyle()) {
            return false;
        }
        if (this.largeop != null) {
            return lv.getBooleanValue(this.largeop, false);
        }
        this.loadStyleOperatorInfo();
        return this.operatorStyle.isLargeop();
    };
    av.prototype.setLargeop = function (ou) {
        this.largeop = ou;
    };
    av.prototype.getMovablelimitsS = function () {
        return this.movablelimits;
    };
    av.prototype.getMovablelimits = function () {
        if (this.movablelimits != null) {
            return lv.getBooleanValue(this.movablelimits, false);
        }
        this.loadStyleOperatorInfo();
        return this.operatorStyle.isMovablelimits();
    };
    av.prototype.setMovablelimits = function (ou) {
        this.movablelimits = ou;
    };
    av.prototype.isAccent = function () {
        if (this.accent != null) {
            return lv.getBooleanValue(this.accent, false);
        }
        this.loadStyleOperatorInfo();
        return this.operatorStyle.getFormStyle().isAccent();
    };
    av.prototype.isAccentunder = function () {
        return this.isAccent();
    };
    av.prototype.getAccentS = function () {
        return this.accent;
    };
    av.prototype.getAccent = function () {
        return this.accent;
    };
    av.prototype.setAccent = function (ou) {
        this.accent = ou;
    };
    av.prototype.getOperatorStyle = function () {
        return this.operatorStyle;
    };
    av.prototype.setOperatorStyle = function (ou) {
        this.operatorStyle = ou;
    };
    av.prototype.getLinebreakmultchar = function () {
        return this.linebreakmultchar;
    };
    av.prototype.setLinebreakmultchar = function (ou) {
        this.linebreakmultchar = ou;
    };
    av.prototype.getLargeOpMultiplier = function () {
        return this.largeOpMultiplier;
    };
    av.prototype.setLargeOpMultiplier = function (ou) {
        this.largeOpMultiplier = ou;
    };
    av.prototype.isVerticalStretchy = function () {
        if (this.getChildren().size() != 1) {
            return false;
        }
        var ov = this.getChildren().get(0);
        if (!(ov instanceof cO)) {
            return false;
        }
        if (this.maxsize != null) {
            if (!("infinity" == this.maxsize)) {
                var ox = this.getSizeValue(this.maxsize);
                if (ox == 1) {
                    return false;
                }
            }
        }
        if (this.stretchy != null) {
            return lv.getBooleanValue(this.stretchy, false);
        }
        if (this.operatorStyle.isStretchy()) {
            var ou = this.getChildren().get(0);
            var ow = ou.getUnicodeText().toString();
            return eF.isVStretchy(ow);
        }
        return false;
    };
    av.prototype.getSizeValue = function (ou) {
        if (lv.stringIsNumber(ou)) {
            return lv.getDoubleValue(ou, 1);
        } else {
            return m2.getDoubleLength(ou, 1);
        }
    };
    av.prototype.isHorizontalStretchy = function () {
        if (this.getChildren().size() != 1) {
            return false;
        }
        var ov = this.getChildren().get(0);
        if (!(ov instanceof cO)) {
            return false;
        }
        if (this.maxsize != null) {
            if (!("infinity" == this.maxsize)) {
                var ox = this.getSizeValue(this.maxsize);
                if (ox == 1) {
                    return false;
                }
            }
        }
        if (this.stretchy != null) {
            return lv.getBooleanValue(this.stretchy, false);
        }
        if (this.operatorStyle.isStretchy()) {
            var ou = this.getChildren().get(0);
            var ow = ou.getUnicodeText().toString();
            return eF.isHStretchy(ow);
        }
        return false;
    };
    av.prototype.clone = function () {
        var ou = new av(this.getParentBean());
        ou.largeOpMultiplier = this.largeOpMultiplier;
        ou.form = this.form;
        ou.fence = this.fence;
        ou.separator = this.separator;
        ou.lspaceS = this.lspaceS;
        ou.rspaceS = this.rspaceS;
        ou.stretchy = this.stretchy;
        ou.symmetric = this.symmetric;
        ou.maxsize = this.maxsize;
        ou.minsize = this.minsize;
        ou.largeop = this.largeop;
        ou.movablelimits = this.movablelimits;
        ou.linebreakmultchar = this.linebreakmultchar;
        this.copyAttributes(ou);
        return ou;
    };
    av.prototype.updateLinebreakmultchar = function () {
        if (this.linebreakmultchar != null) {
            var ow = this.getChildren();
            if (ow.size() == 1) {
                var oz = ow.get(0);
                if (oz instanceof cO) {
                    var ov = oz;
                    var oy = ov.getUnicodeText();
                    var ou = oy.charUnicodeAt(0);
                    if (oy.size() == 1 && "2062" == ou) {
                        var ox = gX.convertToUnicodeString(
                            this.linebreakmultchar,
                        );
                        ov.setUnicodeText(ox);
                    }
                }
            }
        }
    };
    av.prototype.isIntegral = function () {
        return this.getOperatorStyle().isIntegral();
    };

    function nI(ou) {
        this._base;
        this.exp;
        this.accent = null;
        this.align;
        this.overSpace;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(nI, gK);
    nI.prototype.copyParentStyle = function (ou) {
        if (!this.isExpAccent()) {
            this.exp.modifyScriptlevel(1);
        }
        this.exp.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
    };
    nI.prototype.initChildren = function () {
        if (this._base == null) {
            this.replaceChildren();
        }
        gK.prototype.initChildren.call(this);
    };
    nI.prototype.replaceChildren = function () {
        this._base = this.getChildren().get(0);
        this.exp = this.getChildren().get(1);
    };
    nI.prototype.getBase = function () {
        return this._base;
    };
    nI.prototype.getExp = function () {
        return this.exp;
    };
    nI.prototype.isExpAccent = function () {
        if (this.accent != null) {
            return lv.getBooleanValue(this.accent, false);
        }
        return this.exp.isAccent();
    };
    nI.prototype.isAccent = function () {
        return this.isExpAccent() || this._base.isAccent();
    };
    nI.prototype.setAccent = function (ou) {
        this.accent = ou;
    };
    nI.prototype.getAlign = function () {
        return this.align;
    };
    nI.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    nI.prototype.getOverSpace = function () {
        return this.overSpace;
    };
    nI.prototype.setOverSpace = function (ou) {
        this.overSpace = ou;
    };
    nI.prototype.canDeleteChild = function (ou) {
        if (this._base != ou && this.exp != ou) {
            return false;
        }
        return !this.isEmptyBean(ou);
    };
    nI.prototype.deleteChild = function (ou) {
        if (this._base == ou) {
            this._base = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    nI.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    nI.prototype.insertChildLeft = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    nI.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    nI.prototype.insertChildRight = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    nI.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    nI.prototype.replaceChild = function (ou, ov) {
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = ov;
            return true;
        }
        if (this.exp == ou) {
            this.exp = ov;
            return true;
        }
        return false;
    };

    function lM(ou) {
        this.width;
        this.lspace;
        this.height;
        this.depth;
        this.voffset;
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(lM, bW);
    lM.prototype.getWidth = function () {
        return this.width;
    };
    lM.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    lM.prototype.getLspace = function () {
        return this.lspace;
    };
    lM.prototype.setLspace = function (ou) {
        this.lspace = ou;
    };
    lM.prototype.getHeight = function () {
        return this.height;
    };
    lM.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    lM.prototype.getDepth = function () {
        return this.depth;
    };
    lM.prototype.setDepth = function (ou) {
        this.depth = ou;
    };
    lM.prototype.getVoffset = function () {
        return this.voffset;
    };
    lM.prototype.setVoffset = function (ou) {
        this.voffset = ou;
    };

    function mC(ou) {
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(mC, bW);

    function ds(ou) {
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(ds, gK);

    function jt(ou) {
        this.rowBean;
        this.indentBean;
        this.lineleading;
        this.indentalign;
        this.indentshift;
        this.indenttarget;
        this.dKr = gK;
        this.dKr(ou);
        this.rowBean = ou;
    }
    ga(jt, gK);
    jt.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    jt.prototype.addChild = function (ou) {
        if (ou instanceof cT) {
            if (ou.getAttribute("linebreak") != null) {
                var ov = this.getChildren();
                if (ov.size() == 0) {
                    return;
                }
            }
        }
        aM.prototype.addChild.call(this, ou);
    };
    jt.prototype.isAccent = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ov = ou.get(0);
            return ov.isAccent();
        }
        return false;
    };
    jt.prototype.isAccentunder = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ov = ou.get(0);
            return ov.isAccentunder();
        }
        return false;
    };
    jt.prototype.getMovablelimits = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ov = ou.get(0);
            return ov.getMovablelimits();
        }
        return false;
    };
    jt.prototype.getRowBean = function () {
        return this.rowBean;
    };
    jt.prototype.getIndentalign = function () {
        return this.indentalign;
    };
    jt.prototype.setIndentalign = function (ou) {
        this.indentalign = ou;
    };
    jt.prototype.getIndentshift = function () {
        return this.indentshift;
    };
    jt.prototype.setIndentshift = function (ou) {
        this.indentshift = ou;
    };
    jt.prototype.getIndenttarget = function () {
        return this.indenttarget;
    };
    jt.prototype.setIndenttarget = function (ou) {
        this.indenttarget = ou;
    };
    jt.prototype.getLineleading = function () {
        return this.lineleading;
    };
    jt.prototype.setLineleading = function (ou) {
        this.lineleading = ou;
    };
    jt.prototype.getIndentBean = function () {
        return this.indentBean;
    };
    jt.prototype.setIndentBean = function (ou) {
        this.indentBean = ou;
    };
    jt.prototype.isSpaceLikeElement = function () {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (!ow.isSpaceLikeElement()) {
                return false;
            }
        }
        return true;
    };
    jt.prototype.canDeleteChild = function (ou) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().canDeleteChild(ou);
        }
        var oB = false;
        var oy = 0;
        var ox = null;
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oA = ow.get(ov);
            if (oA == ou) {
                oB = true;
            }
            if (oA.isDynamicCreated()) {
                continue;
            }
            oy = oy + 1;
            ox = oA;
        }
        if (!oB) {
            return false;
        }
        if (oy > 1) {
            return true;
        }
        if (!this.isEmptyBean(ox)) {
            return true;
        }
        var oz = this.rowBean.canDeleteChild(this);
        if (oz) {
            return true;
        }
        return !this.isEmptyBean(ou);
    };
    jt.prototype.deleteChild = function (ou) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().deleteChild(ou);
        }
        var ow = this.getChildren();
        var oy = 0;
        var ox = null;
        for (var ov = 0; ov < ow.size(); ov++) {
            var oA = ow.get(ov);
            if (oA.isDynamicCreated()) {
                continue;
            }
            oy = oy + 1;
            ox = oA;
        }
        if (oy > 1) {
            for (var ov = 0; ov < ow.size(); ov++) {
                var oA = ow.get(ov);
                if (oA.isDynamicCreated()) {
                    continue;
                }
                if (oA == ou) {
                    ow.remove(ov);
                    jt.selectNextChild(ow, ov);
                    return true;
                }
            }
        } else {
            if (!this.isEmptyBean(ox)) {
                ow.clear();
                this.addChild(this.getSelectedEmptyBean(this));
                return true;
            }
            var oz = this.rowBean.deleteChild(this);
            if (oz) {
                return true;
            }
            ow.clear();
            this.addChild(this.getSelectedEmptyBean(this));
            return true;
        }
        return false;
    };
    jt.selectNextChild = function (ov, ou) {
        if (ou < ov.size()) {
            var ow = ov.get(ou);
            if (ow.isDynamicCreated()) {
                ou = ou + 1;
                if (ou < ov.size()) {
                    jt.selectNextChild(ov, ou);
                } else {
                    ou = ou - 1;
                    if (ou > 0) {
                        jt.selectNextChild(ov, ou - 1);
                    }
                }
            } else {
                ow.setAttribute("editorSelected", "true");
            }
        } else {
            if (ou > 0) {
                jt.selectNextChild(ov, ou - 1);
            }
        }
    };
    jt.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().canInsertChildLeft(ou, ov);
        }
        return this.getParentBean().canInsertChildLeft(ou, ov);
    };
    jt.prototype.insertChildLeft = function (ow, oy) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().insertChildLeft(ow, oy);
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox.isDynamicCreated()) {
                continue;
            }
            if (ox == ow) {
                if (this.isEmptyBean(ow)) {
                    ov.remove(ou);
                }
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    jt.prototype.canInsertChildRight = function (ou, ov) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().canInsertChildRight(ou, ov);
        }
        return this.getParentBean().canInsertChildRight(ou, ov);
    };
    jt.prototype.insertChildRight = function (ow, oy) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().insertChildRight(ow, oy);
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox.isDynamicCreated()) {
                continue;
            }
            if (ox == ow) {
                if (this.isEmptyBean(ow)) {
                    ov.remove(ou);
                    ov.addTo(ou, oy);
                } else {
                    ov.addTo(ou + 1, oy);
                }
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    jt.prototype.canReplaceChild = function (ou, ov) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().canReplaceChild(ou, ov);
        }
        return this.getParentBean().canReplaceChild(ou, ov);
    };
    jt.prototype.replaceChild = function (ow, oy) {
        if (this.getParentBean().isApplyBean()) {
            return this.getParentBean().replaceChild(ow, oy);
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox.isDynamicCreated()) {
                continue;
            }
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    jt.prototype.getSelectedEmptyBean = function (ou) {
        return this.getParentBean().getSelectedEmptyBean(ou);
    };

    function g2(ou) {
        this.lquote;
        this.rquote;
        this.dKx = aB;
        this.dKx(ou);
    }
    ga(g2, aB);
    g2.prototype.copyParentStyle = function (ou) {
        if (this.lquote == null) {
            this.lquote = '"';
        }
        if (this.rquote == null) {
            this.rquote = '"';
        }
        this.lquote = this.lquote.trim();
        this.rquote = this.rquote.trim();
        if (this.lquote.length > 0) {
            var ow = fe.getTextBean(this, this.lquote);
            this.addIndexChild(ow, 0);
        }
        if (this.rquote.length > 0) {
            var ov = fe.getTextBean(this, this.rquote);
            this.addChild(ov);
        }
        this.addDefaultPadding(ou.getMathsize());
        aB.prototype.copyParentStyle.call(this, ou);
    };
    g2.prototype.getLquote = function () {
        return this.lquote;
    };
    g2.prototype.setLquote = function (ou) {
        this.lquote = ou;
    };
    g2.prototype.getRquote = function () {
        return this.rquote;
    };
    g2.prototype.setRquote = function (ou) {
        this.rquote = ou;
    };

    function lD(ou) {
        this.location;
        this.crossout;
        this.scriptsizemultiplier;
        this.scriptsizemultiplierDef = 0.6;
        this.carrythickness;
        this.position = 0;
        this.zeroBean;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(lD, gK);
    lD.prototype.addChild = function (ov) {
        if (ov instanceof b0) {
            aM.prototype.addChild.call(this, ov);
        } else {
            if (ov instanceof aB || ov instanceof mx) {
                var ou = new b0(this);
                ou.setCurrentDefStyle(this.getCurrentDefStyle());
                ov.copyAttributes(ou);
                ou.addChild(ov);
                aM.prototype.addChild.call(this, ou);
            }
        }
    };
    lD.prototype.copyParentStyle = function (ou) {
        this.modifyScriptlevel(1);
        this.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
        this.zeroBean = fe.getNBean(this, "1");
        this.zeroBean.copyParentStyle(this.getStyle());
    };
    lD.prototype.getScriptsizemultiplier = function () {
        if (this.scriptsizemultiplier != null) {
            return lv.getDoubleValue(
                this.scriptsizemultiplier,
                this.scriptsizemultiplierDef,
            );
        }
        return this.scriptsizemultiplierDef;
    };
    lD.prototype.getLocation = function () {
        return this.location;
    };
    lD.prototype.setLocation = function (ou) {
        this.location = ou;
    };
    lD.prototype.getCrossout = function () {
        return this.crossout;
    };
    lD.prototype.setCrossout = function (ou) {
        this.crossout = ou;
    };
    lD.prototype.getScriptsizemultiplierS = function () {
        return this.scriptsizemultiplier;
    };
    lD.prototype.setScriptsizemultiplierS = function (ou) {
        this.scriptsizemultiplier = ou;
    };
    lD.prototype.getCarrythickness = function () {
        return this.carrythickness;
    };
    lD.prototype.setCarrythickness = function (ou) {
        this.carrythickness = ou;
    };
    lD.prototype.getPosition = function () {
        return this.position;
    };
    lD.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    lD.prototype.getZeroBean = function () {
        return this.zeroBean;
    };
    lD.prototype.canBeDeleted = function () {
        return true;
    };
    lD.prototype.canDeleteChild = function (ox) {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (ow == ox) {
                return true;
            }
        }
        return false;
    };
    lD.prototype.deleteChild = function (oy) {
        var ov = this.getChildren();
        if (ov.size() > 1) {
            for (var ou = 0; ou < ov.size(); ou++) {
                var ox = ov.get(ou);
                if (ox == oy) {
                    ov.remove(ou);
                    this.selectNextChild(ov, ou);
                    return true;
                }
            }
        } else {
            var ow = this.getParentBean();
            if (ow != null) {
                return ow.deleteChild(this);
            }
        }
        return false;
    };
    lD.prototype.selectNextChild = function (ov, ou) {
        if (ou < ov.size()) {
            var ow = ov.get(ou);
            ow.setAttribute("editorSelected", "true");
        } else {
            if (ou > 0) {
                this.selectNextChild(ov, ou - 1);
            }
        }
    };
    lD.prototype.canInsertChildLeft = function (ow, oy) {
        if (oy instanceof b0 || oy instanceof aB || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    lD.prototype.insertChildLeft = function (ox, oz) {
        if (oz instanceof b0) {
        } else {
            if (oz instanceof aB || oz instanceof mx) {
                var ou = new b0(this);
                ou.addChild(oz);
                oz = ou;
            } else {
                return false;
            }
        }
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy == ox) {
                ow.addTo(ov, oz);
                oz.setParentBean(this);
                oz.setAttribute("editorSelected", "true");
                ox.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    lD.prototype.canInsertChildRight = function (ow, oy) {
        if (oy instanceof b0 || oy instanceof aB || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    lD.prototype.insertChildRight = function (ox, oz) {
        if (oz instanceof b0) {
        } else {
            if (oz instanceof aB || oz instanceof mx) {
                var ou = new b0(this);
                ou.addChild(oz);
                oz = ou;
            } else {
                return false;
            }
        }
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy == ox) {
                ow.addTo(ov + 1, oz);
                oz.setParentBean(this);
                oz.setAttribute("editorSelected", "true");
                ox.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    lD.prototype.canReplaceChild = function (ow, oy) {
        if (oy instanceof b0 || oy instanceof aB || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    lD.prototype.replaceChild = function (ox, oz) {
        if (oz instanceof b0) {
        } else {
            if (oz instanceof aB || oz instanceof mx) {
                var ou = new b0(this);
                ou.addChild(oz);
                oz = ou;
            } else {
                return false;
            }
        }
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy == ox) {
                ow.remove(ov);
                ow.addTo(ov, oz);
                oz.setParentBean(this);
                oz.setAttribute("editorSelected", "true");
                ox.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    lD.prototype.getSelectedEmptyBean = function (ov) {
        var ou = new b0(this);
        var ow = new mx(this);
        ou.setAttribute("editorSelected", "true");
        ou.addChild(ow);
        return ou;
    };
    lD.filterSCarriesBean = function (ou, ov) {
        if (ou instanceof aK && ov instanceof lD) {
            return ov;
        }
        return lD.replaceSCarriesWithRow(ov);
    };
    lD.replaceSCarriesWithRow = function (ov) {
        if (ov instanceof lD) {
            var ou = new bW(ov.getParentBean());
            var ox = ov.getChildren();
            for (var ow = 0; ow < ox.size(); ow++) {
                var oy = ox.get(ow);
                var oz = b0.replaceSCarryWithToken(oy);
                if (oz instanceof mx) {
                    continue;
                }
                ou.addChild(oz);
            }
            return ou;
        }
        return ov;
    };

    function b0(ou) {
        this.location;
        this.crossout;
        this.carrythickness = "medium";
        this.sCarriesBean;
        this.none = false;
        this.dKr = gK;
        this.dKr(ou);
        this.sCarriesBean = ou;
    }
    ga(b0, gK);
    b0.prototype.addChild = function (ou) {
        if (this.getChildren().size() > 0) {
            return;
        }
        if (ou instanceof aB || ou instanceof mx) {
            aM.prototype.addChild.call(this, ou);
        }
        if (ou instanceof mx) {
            this.none = true;
        }
    };
    b0.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    b0.prototype.getLocation = function () {
        return this.location;
    };
    b0.prototype.setLocation = function (ou) {
        this.location = ou;
    };
    b0.prototype.getCrossout = function () {
        return this.crossout;
    };
    b0.prototype.setCrossout = function (ou) {
        this.crossout = ou;
    };
    b0.prototype.getCarrythickness = function () {
        return this.carrythickness;
    };
    b0.prototype.setCarrythickness = function (ou) {
        this.carrythickness = ou;
    };
    b0.prototype.isNone = function () {
        return this.none;
    };
    b0.prototype.canDeleteChild = function (ou) {
        return true;
    };
    b0.prototype.deleteChild = function (ov) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.deleteChild(this);
        }
        return false;
    };
    b0.prototype.canInsertChildLeft = function (ow, ox) {
        var ov = this.getParentBean();
        if (ov != null) {
            var ou = this.getChildren();
            if (ou.size() == 0) {
                if (ox instanceof aB || ox instanceof mx) {
                    return true;
                }
            }
            if (ou.get(0) == ow) {
                return ov.canInsertChildLeft(this, ox);
            }
        }
        return false;
    };
    b0.prototype.insertChildLeft = function (ow, ox) {
        var ov = this.getParentBean();
        if (ov != null) {
            var ou = this.getChildren();
            if (ou.size() == 0) {
                if (ox instanceof aB || ox instanceof mx) {
                    this.addChild(ox);
                    return true;
                }
            }
            if (ou.get(0) == ow) {
                return ov.insertChildLeft(this, ox);
            }
        }
        return false;
    };
    b0.prototype.canInsertChildRight = function (ow, ox) {
        var ov = this.getParentBean();
        if (ov != null) {
            var ou = this.getChildren();
            if (ou.size() == 0) {
                if (ox instanceof aB || ox instanceof mx) {
                    return true;
                }
            }
            return ov.canInsertChildRight(this, ox);
        }
        return false;
    };
    b0.prototype.insertChildRight = function (ow, ox) {
        var ov = this.getParentBean();
        if (ov != null) {
            var ou = this.getChildren();
            if (ou.size() == 0) {
                if (ox instanceof aB || ox instanceof mx) {
                    this.addChild(ox);
                    return true;
                }
            }
            return ov.insertChildRight(this, ox);
        }
        return false;
    };
    b0.prototype.canReplaceChild = function (ow, ox) {
        var ov = this.getParentBean();
        if (ov != null) {
            var ou = this.getChildren();
            if (ox instanceof aB || ox instanceof mx) {
                return true;
            }
            return ov.canReplaceChild(this, ox);
        }
        return false;
    };
    b0.prototype.replaceChild = function (ow, ox) {
        var ov = this.getParentBean();
        if (ov != null) {
            var ou = this.getChildren();
            if (ox instanceof aB || ox instanceof mx) {
                this.getChildren().clear();
                this.addChild(ox);
                return true;
            }
            return ov.replaceChild(this, ox);
        }
        return false;
    };
    b0.prototype.getSelectedEmptyBean = function (ou) {
        var ov = new mx(this);
        ov.setAttribute("editorSelected", "true");
        return ov;
    };
    b0.filterSCarryBean = function (ou, ov) {
        if (ou instanceof lD && ov instanceof b0) {
            return ov;
        }
        return b0.replaceSCarryWithToken(ov);
    };
    b0.replaceSCarryWithToken = function (ou) {
        if (ou instanceof b0) {
            return ou.getChildren().get(0);
        }
        return ou;
    };

    function bI(ou) {
        this.decimalPoint = false;
        this.number = false;
        this.none = false;
        this.space = false;
        this.oldLspaceS;
        this.oldRspaceS;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(bI, gK);
    bI.prototype.addChild = function (ou) {
        if (this.getChildren().size() > 0) {
            return;
        }
        if (ou instanceof aB || ou instanceof mx) {
            aM.prototype.addChild.call(this, ou);
        }
    };
    bI.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    bI.prototype.isDecimalPoint = function () {
        return this.decimalPoint;
    };
    bI.prototype.setDecimalPoint = function (ou) {
        this.decimalPoint = ou;
    };
    bI.prototype.isNumber = function () {
        return this.number;
    };
    bI.prototype.setNumber = function (ou) {
        this.number = ou;
    };
    bI.prototype.isNone = function () {
        return this.none;
    };
    bI.prototype.setNone = function (ou) {
        this.none = ou;
    };
    bI.prototype.isSpace = function () {
        return this.space;
    };
    bI.prototype.setSpace = function (ou) {
        this.space = ou;
    };
    bI.prototype.getOldLspaceS = function () {
        return this.oldLspaceS;
    };
    bI.prototype.setOldLspaceS = function (ou) {
        this.oldLspaceS = ou;
    };
    bI.prototype.getOldRspaceS = function () {
        return this.oldRspaceS;
    };
    bI.prototype.setOldRspaceS = function (ou) {
        this.oldRspaceS = ou;
    };
    bI.prototype.canDeleteChild = function (ou) {
        return true;
    };
    bI.prototype.deleteChild = function (ov) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.deleteChild(this);
        }
        return false;
    };
    bI.prototype.canInsertChildLeft = function (ou, ov) {
        if (ov instanceof kq || ov instanceof av || ov instanceof mx) {
            return true;
        }
        return false;
    };
    bI.prototype.insertChildLeft = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.insertChildLeft(this, ow);
        }
        return false;
    };
    bI.prototype.canInsertChildRight = function (ou, ov) {
        if (ov instanceof kq || ov instanceof av || ov instanceof mx) {
            return true;
        }
        return false;
    };
    bI.prototype.insertChildRight = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.insertChildRight(this, ow);
        }
        return false;
    };
    bI.prototype.canReplaceChild = function (ou, ov) {
        if (ov instanceof kq || ov instanceof av || ov instanceof mx) {
            return true;
        }
        return false;
    };
    bI.prototype.replaceChild = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.replaceChild(this, ow);
        }
        return false;
    };
    bI.prototype.getSelectedEmptyBean = function (ou) {
        var ov = fe.getNBean(this, "0");
        ov.setAttribute("editorSelected", "true");
        return ov;
    };
    bI.filterSDigitBean = function (ou, ov) {
        if (ou instanceof aK && ov instanceof bI) {
            return ov;
        }
        return bI.replaceSDigitWithToken(ov);
    };
    bI.replaceSDigitWithToken = function (ou) {
        if (ou instanceof bI) {
            return ou.getChildren().get(0);
        }
        return ou;
    };

    function n2(ou) {
        this.shift = 0;
        this.charalign;
        this.rowspacing;
        this.position = 0;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(n2, gK);
    n2.prototype.addChild = function (ou) {
        if (
            ou instanceof aK ||
            ou instanceof n2 ||
            ou instanceof kn ||
            ou instanceof lD
        ) {
            aM.prototype.addChild.call(this, ou);
        } else {
            if (ou instanceof kq || ou instanceof av || ou instanceof mx) {
                var ow = ou;
                var ov = new aK(this);
                ov.setToBeMinimized(ow.isToBeMinimized());
                ow.setToBeMinimized(false);
                ov.setCurrentDefStyle(this.getCurrentDefStyle());
                ou.copyAttributes(ov);
                ov.addChild(ou);
                aM.prototype.addChild.call(this, ov);
            }
        }
    };
    n2.prototype.getCharalign = function () {
        return this.charalign;
    };
    n2.prototype.setCharalign = function (ou) {
        this.charalign = ou;
    };
    n2.prototype.getRowspacing = function () {
        return this.rowspacing;
    };
    n2.prototype.setRowspacing = function (ou) {
        this.rowspacing = ou;
    };
    n2.prototype.getShift = function () {
        return this.shift;
    };
    n2.prototype.setShift = function (ou) {
        this.shift = ou;
    };
    n2.prototype.getPosition = function () {
        return this.position;
    };
    n2.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    n2.prototype.canBeDeleted = function () {
        return true;
    };
    n2.prototype.canDeleteChild = function (ox) {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (ow == ox) {
                return true;
            }
        }
        return false;
    };
    n2.prototype.deleteChild = function (oy) {
        var ov = this.getChildren();
        if (ov.size() > 1) {
            for (var ou = 0; ou < ov.size(); ou++) {
                var ox = ov.get(ou);
                if (ox == oy) {
                    ov.remove(ou);
                    this.selectNextChild(ov, ou);
                    return true;
                }
            }
        } else {
            var ow = this.getParentBean();
            if (ow != null) {
                return ow.deleteChild(this);
            }
        }
        return false;
    };
    n2.prototype.selectNextChild = function (ov, ou) {
        if (ou < ov.size()) {
            var ow = ov.get(ou);
            ow.setAttribute("editorSelected", "true");
        } else {
            if (ou > 0) {
                this.selectNextChild(ov, ou - 1);
            }
        }
    };
    n2.prototype.canInsertChildLeft = function (ow, oy) {
        if (
            oy instanceof aK ||
            oy instanceof n2 ||
            oy instanceof kn ||
            oy instanceof lD
        ) {
        } else {
            if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
            } else {
                return false;
            }
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    n2.prototype.insertChildLeft = function (ox, oz) {
        if (
            oz instanceof aK ||
            oz instanceof n2 ||
            oz instanceof kn ||
            oz instanceof lD
        ) {
        } else {
            if (oz instanceof kq || oz instanceof av || oz instanceof mx) {
                var ou = new aK(this);
                ou.addChild(oz);
                oz = ou;
            } else {
                return false;
            }
        }
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy == ox) {
                ow.addTo(ov, oz);
                oz.setParentBean(this);
                oz.setAttribute("editorSelected", "true");
                ox.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    n2.prototype.canInsertChildRight = function (ow, oy) {
        if (
            oy instanceof aK ||
            oy instanceof n2 ||
            oy instanceof kn ||
            oy instanceof lD
        ) {
        } else {
            if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
            } else {
                return false;
            }
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    n2.prototype.insertChildRight = function (ox, oz) {
        if (
            oz instanceof aK ||
            oz instanceof n2 ||
            oz instanceof kn ||
            oz instanceof lD
        ) {
        } else {
            if (oz instanceof kq || oz instanceof av || oz instanceof mx) {
                var ou = new aK(this);
                ou.addChild(oz);
                oz = ou;
            } else {
                return false;
            }
        }
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy == ox) {
                ow.addTo(ov + 1, oz);
                oz.setParentBean(this);
                oz.setAttribute("editorSelected", "true");
                ox.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    n2.prototype.canReplaceChild = function (ow, oy) {
        if (
            oy instanceof aK ||
            oy instanceof n2 ||
            oy instanceof kn ||
            oy instanceof lD
        ) {
        } else {
            if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
            } else {
                return false;
            }
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    n2.prototype.replaceChild = function (ox, oz) {
        if (
            oz instanceof aK ||
            oz instanceof n2 ||
            oz instanceof kn ||
            oz instanceof lD
        ) {
        } else {
            if (oz instanceof kq || oz instanceof av || oz instanceof mx) {
                var ou = new aK(this);
                ou.addChild(oz);
                oz = ou;
            } else {
                return false;
            }
        }
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy == ox) {
                ow.remove(ov);
                ow.addTo(ov, oz);
                oz.setParentBean(this);
                oz.setAttribute("editorSelected", "true");
                ox.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    n2.prototype.getSelectedEmptyBean = function (ov) {
        var ou = new aK(this);
        var ow = fe.getNBean(ou, "1.0");
        ow.setAttribute("editorSelected", "true");
        ou.addChild(ow);
        return ou;
    };

    function kn(ou) {
        this.lineLength = 0;
        this.leftoverhang;
        this.rightoverhang;
        this.mslinethickness;
        this.position = 0;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(kn, gK);
    kn.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    kn.prototype.getLength = function () {
        return this.lineLength;
    };
    kn.prototype.setLength = function (ou) {
        this.lineLength = ou;
    };
    kn.prototype.getLeftoverhang = function () {
        return this.leftoverhang;
    };
    kn.prototype.setLeftoverhang = function (ou) {
        this.leftoverhang = ou;
    };
    kn.prototype.getRightoverhang = function () {
        return this.rightoverhang;
    };
    kn.prototype.setRightoverhang = function (ou) {
        this.rightoverhang = ou;
    };
    kn.prototype.getMslinethickness = function () {
        return this.mslinethickness;
    };
    kn.prototype.setMslinethickness = function (ou) {
        this.mslinethickness = ou;
    };
    kn.prototype.getPosition = function () {
        if (this.lineLength == 0) {
            return 0;
        }
        return this.position;
    };
    kn.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    kn.prototype.canDeleteChild = function (ou) {
        return true;
    };
    kn.prototype.deleteChild = function (ov) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.deleteChild(this);
        }
        return false;
    };

    function cT(ou) {
        this.depth;
        this.width;
        this.height;
        this.dKC = lY;
        this.dKC(ou);
    }
    ga(cT, lY);
    cT.prototype.copyParentStyle = function (ou) {
        lY.prototype.copyParentStyle.call(this, ou);
        this.getCssstyle().initDimensionsLikeSpace(
            this.getStyle().getMathsize(),
        );
    };
    cT.prototype.getDepth = function () {
        return this.depth;
    };
    cT.prototype.setDepth = function (ou) {
        this.depth = ou;
    };
    cT.prototype.getWidth = function () {
        return this.width;
    };
    cT.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    cT.prototype.getHeight = function () {
        return this.height;
    };
    cT.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    cT.prototype.clone = function () {
        var ou = new cT(this.getParentBean());
        ou.depth = this.depth;
        this.copyAttributes(ou);
        return ou;
    };
    cT.prototype.isSpaceLikeElement = function () {
        return true;
    };

    function aK(ou) {
        this.charalign;
        this.charspacing;
        this.position = 0;
        this.zeroBean;
        this.dKr = gK;
        this.dKr(ou);
        this.zeroBean = fe.getNBean(this, "0");
    }
    ga(aK, gK);
    aK.prototype.addChild = function (ow) {
        if (ow instanceof kq) {
            var oy = ow;
            var oE = oy.getUnicodeText();
            var ou = this.getCurrentDefStyle().getDecimalpoint();
            for (var ov = 0; ov < oE.size(); ov++) {
                if (ov > 0) {
                    oy.clearAttribute("editorSelected");
                }
                var oz = oE.charUnicodeCharAt(ov);
                var oC = oz.toString();
                var oA = new bI(oy.getParentBean());
                oA.setCurrentDefStyle(this.getCurrentDefStyle());
                if (oC == " ") {
                    var oB = new mx(oA);
                    oB.setCurrentDefStyle(this.getCurrentDefStyle());
                    oy.copyAttributes(oB);
                    oA.addChild(oB);
                    oA.setSpace(true);
                    oA.setNumber(false);
                    oA.setNone(true);
                } else {
                    var oB = new kq(oA);
                    oB.setCurrentDefStyle(this.getCurrentDefStyle());
                    oy.copyAttributes(oB);
                    var oD = new cO(oB);
                    oD.setCurrentDefStyle(this.getCurrentDefStyle());
                    var oF = new gX();
                    oF.addUnicodeChar(oz);
                    oD.setUnicodeText(oF);
                    oB.addChild(oD);
                    oA.addChild(oB);
                }
                oA.setNumber(true);
                if (oC == ou) {
                    oA.setDecimalPoint(true);
                    oA.setNumber(false);
                }
                if (oC == "." || oC == ",") {
                    oA.setNumber(false);
                }
                aM.prototype.addChild.call(this, oA);
            }
        } else {
            if (ow instanceof av || ow instanceof mx) {
                var oA = new bI(ow.getParentBean());
                oA.setCurrentDefStyle(this.getCurrentDefStyle());
                ow.copyOnlyAttributes(oA);
                oA.addChild(ow);
                if (ow instanceof av) {
                    var ox = ow;
                    oA.setOldLspaceS(ox.getLspaceS());
                    oA.setOldRspaceS(ox.getRspaceS());
                    ox.setLspace("0");
                    ox.setRspace("0");
                }
                if (ow instanceof mx) {
                    oA.setNone(true);
                }
                aM.prototype.addChild.call(this, oA);
            }
        }
    };
    aK.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
        if (this.zeroBean != null) {
            this.zeroBean.copyParentStyle(ou);
        }
    };
    aK.prototype.getDecimalPostion = function () {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (ow.isDecimalPoint()) {
                return ou;
            }
        }
        return ov.size();
    };
    aK.prototype.getCharalign = function () {
        return this.charalign;
    };
    aK.prototype.setCharalign = function (ou) {
        this.charalign = ou;
    };
    aK.prototype.getCharspacing = function () {
        return this.charspacing;
    };
    aK.prototype.setCharspacing = function (ou) {
        this.charspacing = ou;
    };
    aK.prototype.getPosition = function () {
        return this.position;
    };
    aK.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    aK.prototype.getZeroBean = function () {
        return this.zeroBean;
    };
    aK.prototype.setZeroBean = function (ou) {
        this.zeroBean = ou;
    };
    aK.prototype.calculateDecimalLength = function () {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (ow.isDecimalPoint()) {
                return ou - 1;
            }
        }
        for (var ou = ov.size() - 1; ou >= 0; ou--) {
            var ow = ov.get(ou);
            if (ow.isNumber()) {
                return ou;
            }
        }
        return ov.size() - 1;
    };
    aK.prototype.canBeDeleted = function () {
        return true;
    };
    aK.prototype.canDeleteChild = function (ox) {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (ow == ox) {
                return true;
            }
        }
        return false;
    };
    aK.prototype.deleteChild = function (oy) {
        var ov = this.getChildren();
        if (ov.size() > 1) {
            for (var ou = 0; ou < ov.size(); ou++) {
                var ox = ov.get(ou);
                if (ox == oy) {
                    ov.remove(ou);
                    this.selectNextChild(ov, ou);
                    return true;
                }
            }
        } else {
            var ow = this.getParentBean();
            if (ow != null) {
                return ow.deleteChild(this);
            }
        }
        return false;
    };
    aK.prototype.selectNextChild = function (ov, ou) {
        if (ou < ov.size()) {
            var ow = ov.get(ou);
            if (ow instanceof bI) {
                ow = ow.getChildren().get(0);
            }
            ow.setAttribute("editorSelected", "true");
        } else {
            if (ou > 0) {
                this.selectNextChild(ov, ou - 1);
            }
        }
    };
    aK.prototype.canInsertChildLeft = function (ow, oy) {
        if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    aK.prototype.insertChildLeft = function (ow, oy) {
        if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    aK.prototype.canInsertChildRight = function (ow, oy) {
        if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    aK.prototype.insertChildRight = function (ow, oy) {
        if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou + 1, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    aK.prototype.canReplaceChild = function (ow, oy) {
        if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                return true;
            }
        }
        return false;
    };
    aK.prototype.replaceChild = function (ow, oy) {
        if (oy instanceof kq || oy instanceof av || oy instanceof mx) {
        } else {
            return false;
        }
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    aK.prototype.getSelectedEmptyBean = function (ou) {
        var ov = fe.getNBean(this, "0");
        ov.setAttribute("editorSelected", "true");
        return ov;
    };
    aK.filterSRowBean = function (ou, ov) {
        if (ou instanceof n2 && ov instanceof aK) {
            return ov;
        }
        return aK.replaceSRowWithRow(ov);
    };
    aK.replaceSRowWithRow = function (ov) {
        if (ov instanceof aK) {
            var ou = new bW(ov.getParentBean());
            var ox = ov.getChildren();
            for (var ow = 0; ow < ox.size(); ow++) {
                var oy = ox.get(ow);
                if (oy.isNone()) {
                    continue;
                }
                ou.addChild(bI.replaceSDigitWithToken(oy));
            }
            return ou;
        }
        return ov;
    };

    function hq(ou) {
        this.align;
        this.stackalign;
        this.charspacing;
        this.charspacingV;
        this.charspacingH;
        this.dKD = n2;
        this.dKD(ou);
    }
    ga(hq, n2);
    hq.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    hq.prototype.getAlign = function () {
        return this.align;
    };
    hq.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    hq.prototype.getStackalign = function () {
        return this.stackalign;
    };
    hq.prototype.setStackalign = function (ou) {
        this.stackalign = ou;
    };
    hq.prototype.getCharspacing = function () {
        return this.charspacing;
    };
    hq.prototype.setCharspacing = function (ou) {
        this.charspacing = ou;
    };
    hq.prototype.getCharspacingV = function () {
        if (this.charspacingV == null) {
            return this.charspacing;
        }
        return this.charspacingV;
    };
    hq.prototype.setCharspacingV = function (ou) {
        this.charspacingV = ou;
    };
    hq.prototype.getCharspacingH = function () {
        if (this.charspacingH == null) {
            return this.charspacing;
        }
        return this.charspacingH;
    };
    hq.prototype.setCharspacingH = function (ou) {
        this.charspacingH = ou;
    };
    hq.prototype.getChildrenNoCarries = function () {
        var ow = new fM();
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox instanceof lD) {
                continue;
            }
            ow.add(ox);
        }
        return ow;
    };

    function mY(ou) {
        this._base;
        this.sub;
        this.subscriptshift;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(mY, gK);
    mY.prototype.copyParentStyle = function (ou) {
        this.sub.modifyScriptlevel(1);
        this.sub.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
    };
    mY.prototype.initChildren = function () {
        if (this._base == null) {
            this.replaceChildren();
        }
        gK.prototype.initChildren.call(this);
    };
    mY.prototype.replaceChildren = function () {
        this._base = this.getChildren().get(0);
        this.sub = this.getChildren().get(1);
    };
    mY.prototype.getBase = function () {
        return this._base;
    };
    mY.prototype.getSub = function () {
        return this.sub;
    };
    mY.prototype.getSubscriptshift = function () {
        return this.subscriptshift;
    };
    mY.prototype.setSubscriptshift = function (ou) {
        this.subscriptshift = ou;
    };
    mY.prototype.isPartOfLogApply = function () {
        var ou = this.getParentBean();
        if (ou instanceof jt) {
            ou = ou.getParentBean();
            if (ou.isApplyBean()) {
                return true;
            }
        }
        return false;
    };
    mY.prototype.getLogApply = function () {
        var ou = this.getParentBean();
        if (ou instanceof jt) {
            ou = ou.getParentBean();
            if (ou.isApplyBean()) {
                return ou;
            }
        }
        return null;
    };
    mY.prototype.canDeleteChild = function (ou) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().canDeleteChild(ou);
        }
        if (this._base != ou && this.sub != ou) {
            return false;
        }
        return !this.isEmptyBean(ou);
    };
    mY.prototype.deleteChild = function (ou) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().deleteChild(ou);
        }
        if (this._base == ou) {
            this._base = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    mY.prototype.canInsertChildLeft = function (ou, ov) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().canInsertChildLeft(ou, ov);
        }
        return true;
    };
    mY.prototype.insertChildLeft = function (ou, ov) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().insertChildLeft(ou, ov);
        }
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    mY.prototype.canInsertChildRight = function (ou, ov) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().canInsertChildRight(ou, ov);
        }
        return true;
    };
    mY.prototype.insertChildRight = function (ou, ov) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().insertChildRight(ou, ov);
        }
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    mY.prototype.canReplaceChild = function (ou, ov) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().canReplaceChild(ou, ov);
        }
        return true;
    };
    mY.prototype.replaceChild = function (ou, ov) {
        if (this.isPartOfLogApply()) {
            return this.getLogApply().replaceChild(ou, ov);
        }
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = ov;
            return true;
        }
        if (this.sub == ou) {
            this.sub = ov;
            return true;
        }
        return false;
    };

    function cg(ou) {
        this._base;
        this.sub;
        this.exp;
        this.superscriptshift;
        this.subscriptshift;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(cg, gK);
    cg.prototype.copyParentStyle = function (ou) {
        this.sub.modifyScriptlevel(1);
        this.sub.modifyDisplay(false);
        this.exp.modifyScriptlevel(1);
        this.exp.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
    };
    cg.prototype.initChildren = function () {
        if (this._base == null) {
            this.replaceChildren();
        }
        gK.prototype.initChildren.call(this);
    };
    cg.prototype.replaceChildren = function () {
        this._base = this.getChildren().get(0);
        this.sub = this.getChildren().get(1);
        this.exp = this.getChildren().get(2);
    };
    cg.prototype.getBase = function () {
        return this._base;
    };
    cg.prototype.getSub = function () {
        return this.sub;
    };
    cg.prototype.getExp = function () {
        return this.exp;
    };
    cg.prototype.getSuperscriptshift = function () {
        return this.superscriptshift;
    };
    cg.prototype.setSuperscriptshift = function (ou) {
        this.superscriptshift = ou;
    };
    cg.prototype.getSubscriptshift = function () {
        return this.subscriptshift;
    };
    cg.prototype.setSubscriptshift = function (ou) {
        this.subscriptshift = ou;
    };
    cg.prototype.canDeleteChild = function (ou) {
        if (this._base != ou && this.sub != ou && this.exp != ou) {
            return false;
        }
        return !this.isEmptyBean(ou);
    };
    cg.prototype.deleteChild = function (ou) {
        if (this._base == ou) {
            this._base = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    cg.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    cg.prototype.insertChildLeft = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    cg.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    cg.prototype.insertChildRight = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    cg.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    cg.prototype.replaceChild = function (ou, ov) {
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = ov;
            return true;
        }
        if (this.sub == ou) {
            this.sub = ov;
            return true;
        }
        if (this.exp == ou) {
            this.exp = ov;
            return true;
        }
        return false;
    };

    function iF(ou) {
        this.hasLabel = false;
        this.align;
        this.rowalign;
        this.columnalign;
        this.columnwidth;
        this.groupalign;
        this.alignmentscope;
        this.width;
        this.height;
        this.rowspacing;
        this.columnspacing;
        this.rowlines;
        this.rowlinescolor;
        this.rowlinesthickness;
        this.columnlines;
        this.columnlinescolor;
        this.columnlinesthickness;
        this.frame;
        this.framecolor;
        this.framethickness;
        this.framespacing;
        this.equalrows;
        this.equalcolumns;
        this.side;
        this.minlabelspacing;
        this.labelspacing;
        this.columns = 0;
        this.rows = 0;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(iF, gK);
    iF.prototype.copyParentStyle = function (ou) {
        this.addAlignmentGroupToEnd();
        gK.prototype.copyParentStyle.call(this, ou);
        if (this.getFrame() != null && !("none" == this.getFrame())) {
            var ov = this.getFramecolor();
            var oy = this.getFramethickness();
            this.getCssstyle().setBorderStyle(this.getFrame());
            if (ov != null) {
                this.getCssstyle().setBorderColor(ov);
            }
            this.getCssstyle().setBorderWidth(oy);
        }
        if (this.getFramecolor() == null) {
            this.setFramecolor(this.getStyle().getColor());
        }
        if (this.getRowlinescolor() == null) {
            this.setRowlinescolor(this.getStyle().getColor());
        }
        if (this.getColumnlinescolor() == null) {
            this.setColumnlinescolor(this.getStyle().getColor());
        }
        var ox = this.getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            if (ox.get(ow) instanceof ad) {
                this.hasLabel = true;
                break;
            }
        }
        this.setTdPosition(ox);
    };
    iF.prototype.hasAlignmentGroup = function (ov) {
        var ow = ov.getChildren();
        for (var ou = 0; ou < ow.size(); ou++) {
            var ox = ow.get(ou);
            if (ox instanceof dC) {
                return true;
            }
            if (ox instanceof iF) {
                continue;
            }
            if (this.hasAlignmentGroup(ox)) {
                return true;
            }
        }
        return false;
    };
    iF.prototype.addAlignmentGroupToEnd = function () {
        var oy = this.getChildren();
        for (var ox = 0; ox < oy.size(); ox++) {
            var oC = oy.get(ox);
            var oB = oC.getChildren().get(0);
            var oA = oB.getChildren();
            for (var ow = 0; ow < oA.size(); ow++) {
                var ov = oA.get(ow);
                if (this.hasAlignmentGroup(ov)) {
                    ov.setAlignmentGroup(true);
                    if (!this.lastChildIsAlignementGroup(ov)) {
                        var ou = new dC(ov);
                        var oz = ov.getCurrentDefStyle();
                        ou.setCurrentDefStyle(oz);
                        ov.addChild(ou);
                    }
                }
            }
        }
    };
    iF.prototype.lastChildIsAlignementGroup = function (ov) {
        var ou = this.getChildrenNoRowOrLine(ov);
        if (ou.size() == 0) {
            return false;
        }
        var ow = ou.get(ou.size() - 1);
        return ow instanceof dC;
    };
    iF.prototype.getChildrenNoRowOrLine = function (ou) {
        var oy = new fM();
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            if (ox instanceof bW) {
                oy.addAll(this.getChildrenNoRowOrLine(ox));
            } else {
                if (ox instanceof jt) {
                    oy.addAll(this.getChildrenNoRowOrLine(ox));
                } else {
                    if (ox instanceof iF) {
                    } else {
                        oy.add(ox);
                    }
                }
            }
        }
        return oy;
    };
    iF.prototype.setTdPosition = function (oz) {
        for (var ox = 0; ox < oz.size(); ox++) {
            var oC = oz.get(ox);
            var oy = 0;
            if (oC.getChildren().size() == 0) {
                oC.createAddLine(null);
                oC.addChild(new al(oC));
            }
            var oB = oC.getChildren().get(0);
            var oA = oB.getChildren();
            for (var ow = 0; ow < oA.size(); ow++) {
                var ov = oA.get(ow);
                ov.setColumnStart(oy);
                ov.setRowStart(ox);
                oy = oy + ov.getColumnspanInt();
            }
        }
        for (var ox = 0; ox < oz.size(); ox++) {
            var oC = oz.get(ox);
            var oB = oC.getChildren().get(0);
            var oA = oB.getChildren();
            for (var ow = 0; ow < oA.size(); ow++) {
                var ov = oA.get(ow);
                if (ov.getRowspanInt() > 1) {
                    this.incrementColumns(
                        oz,
                        ox,
                        ov.getColumnStart(),
                        ov.getRowspanInt(),
                        ov.getColumnspanInt(),
                    );
                }
            }
        }
        for (var ox = 0; ox < oz.size(); ox++) {
            var oC = oz.get(ox);
            var oB = oC.getChildren().get(0);
            var oA = oB.getChildren();
            var ou = 0;
            for (var ow = 0; ow < oA.size(); ow++) {
                var ov = oA.get(ow);
                ou = ou + ov.getColumnspanInt();
            }
            this.columns = Math.max(this.columns, ou);
            this.rows = this.rows + 1;
        }
    };
    iF.prototype.incrementColumns = function (ou, oA, ov, oy, oz) {
        for (var ow = 1; ow < oy; ow++) {
            var ox = this.getLine(ou, oA + ow);
            if (ox != null) {
                this.incrementTdsAfter(ox, ov, oz);
            }
        }
    };
    iF.prototype.incrementTdsAfter = function (ov, ow, oz) {
        var ou = ov.getChildren().get(0);
        var oy = ou.getChildren();
        for (var ox = 0; ox < oy.size(); ox++) {
            var oA = oy.get(ox);
            if (oA.getColumnspanInt() > 1) {
                if (oA.getColumnStart() < ow) {
                    if (oA.getColumnStart() + oA.getColumnspanInt() >= ow) {
                        return;
                    }
                }
            }
            if (oA.getColumnStart() >= ow) {
                oA.setColumnStart(oA.getColumnStart() + oz);
            }
        }
    };
    iF.prototype.getLine = function (ou, ov) {
        if (ov < ou.size()) {
            return ou.get(ov);
        }
        return null;
    };
    iF.prototype.getAlign = function () {
        return this.align;
    };
    iF.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    iF.prototype.getRowalign = function () {
        return this.rowalign;
    };
    iF.prototype.setRowalign = function (ou) {
        this.rowalign = ou;
    };
    iF.prototype.getColumnalign = function () {
        return this.columnalign;
    };
    iF.prototype.setColumnalign = function (ou) {
        this.columnalign = ou;
    };
    iF.prototype.getColumnwidth = function () {
        return this.columnwidth;
    };
    iF.prototype.setColumnwidth = function (ou) {
        this.columnwidth = ou;
    };
    iF.prototype.getGroupalign = function () {
        return this.groupalign;
    };
    iF.prototype.setGroupalign = function (ou) {
        this.groupalign = ou;
    };
    iF.prototype.getAlignmentscope = function () {
        return this.alignmentscope;
    };
    iF.prototype.setAlignmentscope = function (ou) {
        this.alignmentscope = ou;
    };
    iF.prototype.getWidth = function () {
        return this.width;
    };
    iF.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    iF.prototype.getRowspacing = function () {
        return this.rowspacing;
    };
    iF.prototype.setRowspacing = function (ou) {
        this.rowspacing = ou;
    };
    iF.prototype.getColumnspacing = function () {
        return this.columnspacing;
    };
    iF.prototype.setColumnspacing = function (ou) {
        this.columnspacing = ou;
    };
    iF.prototype.getRowlines = function () {
        return this.rowlines;
    };
    iF.prototype.setRowlines = function (ou) {
        this.rowlines = ou;
    };
    iF.prototype.getColumnlines = function () {
        return this.columnlines;
    };
    iF.prototype.setColumnlines = function (ou) {
        this.columnlines = ou;
    };
    iF.prototype.getFrame = function () {
        return this.frame;
    };
    iF.prototype.setFrame = function (ou) {
        this.frame = ou;
    };
    iF.prototype.getFramespacing = function () {
        return this.framespacing;
    };
    iF.prototype.setFramespacing = function (ou) {
        this.framespacing = ou;
    };
    iF.prototype.getEqualrows = function () {
        return this.equalrows;
    };
    iF.prototype.setEqualrows = function (ou) {
        this.equalrows = ou;
    };
    iF.prototype.getEqualcolumns = function () {
        return this.equalcolumns;
    };
    iF.prototype.setEqualcolumns = function (ou) {
        this.equalcolumns = ou;
    };
    iF.prototype.getSide = function () {
        return this.side;
    };
    iF.prototype.setSide = function (ou) {
        this.side = ou;
    };
    iF.prototype.getMinlabelspacing = function () {
        return this.minlabelspacing;
    };
    iF.prototype.setMinlabelspacing = function (ou) {
        this.minlabelspacing = ou;
    };
    iF.prototype.getHeight = function () {
        return this.height;
    };
    iF.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    iF.prototype.getColumnlinescolor = function () {
        return this.columnlinescolor;
    };
    iF.prototype.setColumnlinescolor = function (ou) {
        this.columnlinescolor = ou;
    };
    iF.prototype.getColumnlinesthickness = function () {
        return this.columnlinesthickness;
    };
    iF.prototype.setColumnlinesthickness = function (ou) {
        this.columnlinesthickness = ou;
    };
    iF.prototype.getFramecolor = function () {
        return this.framecolor;
    };
    iF.prototype.setFramecolor = function (ou) {
        this.framecolor = ou;
    };
    iF.prototype.getFramethickness = function () {
        return this.framethickness;
    };
    iF.prototype.setFramethickness = function (ou) {
        this.framethickness = ou;
    };
    iF.prototype.getRowlinescolor = function () {
        return this.rowlinescolor;
    };
    iF.prototype.setRowlinescolor = function (ou) {
        this.rowlinescolor = ou;
    };
    iF.prototype.getRowlinesthickness = function () {
        return this.rowlinesthickness;
    };
    iF.prototype.setRowlinesthickness = function (ou) {
        this.rowlinesthickness = ou;
    };
    iF.prototype.getHasLabel = function () {
        return this.hasLabel;
    };
    iF.prototype.getLabelspacing = function () {
        return this.labelspacing;
    };
    iF.prototype.setLabelspacing = function (ou) {
        this.labelspacing = ou;
    };
    iF.prototype.getNumberOfRows = function () {
        return this.rows;
    };
    iF.prototype.getNumberOfColumns = function () {
        return this.columns;
    };
    iF.prototype.canDeleteChild = function (ou) {
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            if (ox == ou) {
                return true;
            }
        }
        return false;
    };
    iF.prototype.deleteChild = function (ou) {
        var ow = this.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var ox = ow.get(ov);
            if (ox == ou) {
                ow.remove(ov);
                if (ow.size() > 0) {
                    this.selectNextChild(ow, ov);
                    return true;
                } else {
                    return this.getParentBean().deleteChild(this);
                }
            }
        }
        return false;
    };
    iF.prototype.selectNextChild = function (ov, ou) {
        if (ou < ov.size()) {
            var ow = ov.get(ou);
            ow.setAttribute("editorSelected", "true");
        } else {
            if (ou > 0) {
                this.selectNextChild(ov, ou - 1);
            }
        }
    };
    iF.prototype.canInsertChildLeft = function (ou, ov) {
        return ov instanceof au;
    };
    iF.prototype.insertChildLeft = function (ow, oy) {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    iF.prototype.canInsertChildRight = function (ou, ov) {
        return ov instanceof au;
    };
    iF.prototype.insertChildRight = function (ow, oy) {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.addTo(ou + 1, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    iF.prototype.canReplaceChild = function (ou, ov) {
        return ov instanceof au;
    };
    iF.prototype.replaceChild = function (ow, oy) {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox == ow) {
                ov.remove(ou);
                ov.addTo(ou, oy);
                oy.setParentBean(this);
                oy.setAttribute("editorSelected", "true");
                ow.clearAttribute("editorSelected");
                return true;
            }
        }
        return false;
    };
    iF.prototype.getSelectedEmptyBean = function (ox) {
        var oy = new au(this);
        oy.setAttribute("editorSelected", "true");
        for (var ow = 0; ow < this.getNumberOfColumns(); ow++) {
            var ou = new al(this);
            oy.addChild(ou);
            var ov = new bh(ou);
            ou.addChild(ov);
        }
        return oy;
    };

    function e2(ou) {
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(e2, gK);
    e2.prototype.canDeleteChild = function (ov) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.canDeleteChild(this);
        }
        return false;
    };
    e2.prototype.deleteChild = function (ov) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.deleteChild(this);
        }
        return false;
    };
    e2.prototype.canInsertChildLeft = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.canInsertChildLeft(this, ow);
        }
        return false;
    };
    e2.prototype.insertChildLeft = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.insertChildLeft(this, ow);
        }
        return false;
    };
    e2.prototype.canInsertChildRight = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.canInsertChildRight(this, ow);
        }
        return false;
    };
    e2.prototype.insertChildRight = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.insertChildRight(this, ow);
        }
        return false;
    };
    e2.prototype.canReplaceChild = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.canReplaceChild(this, ow);
        }
        return false;
    };
    e2.prototype.replaceChild = function (ov, ow) {
        var ou = this.getParentBean();
        if (ou != null) {
            return ou.replaceChild(this, ow);
        }
        return false;
    };

    function mu(ou) {
        this.dKx = aB;
        this.dKx(ou);
    }
    ga(mu, aB);
    mu.prototype.copyParentStyle = function (ou) {
        this.addDefaultPadding(ou.getMathsize());
        aB.prototype.copyParentStyle.call(this, ou);
    };

    function al(ou) {
        this.columnalign;
        this.groupalign;
        this.columnStart;
        this.rowStart;
        this.rowspan;
        this.columnspan;
        this.rowspanInt = 1;
        this.columnspanInt = 1;
        this.alignmentGroup = false;
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(al, bW);
    al.prototype.copyParentStyle = function (ou) {
        bW.prototype.copyParentStyle.call(this, ou);
        this.rowspanInt = lv.getIntegerValue(this.rowspan, 1);
        if (this.rowspanInt < 1) {
            this.rowspanInt = 1;
        }
        this.columnspanInt = lv.getIntegerValue(this.columnspan, 1);
        if (this.columnspanInt < 1) {
            this.columnspanInt = 1;
        }
    };
    al.prototype.getColumnalign = function () {
        return this.columnalign;
    };
    al.prototype.setColumnalign = function (ou) {
        this.columnalign = ou;
    };
    al.prototype.getRowspan = function () {
        return this.rowspan;
    };
    al.prototype.setRowspan = function (ou) {
        this.rowspan = ou;
    };
    al.prototype.getColumnspan = function () {
        return this.columnspan;
    };
    al.prototype.setColumnspan = function (ou) {
        this.columnspan = ou;
    };
    al.prototype.getGroupalign = function () {
        return this.groupalign;
    };
    al.prototype.setGroupalign = function (ou) {
        this.groupalign = ou;
    };
    al.prototype.getColumnStart = function () {
        return this.columnStart;
    };
    al.prototype.setColumnStart = function (ou) {
        this.columnStart = ou;
    };
    al.prototype.getRowStart = function () {
        return this.rowStart;
    };
    al.prototype.setRowStart = function (ou) {
        this.rowStart = ou;
    };
    al.prototype.getRowspanInt = function () {
        return this.rowspanInt;
    };
    al.prototype.setRowspanInt = function (ou) {
        this.rowspanInt = ou;
    };
    al.prototype.getColumnspanInt = function () {
        return this.columnspanInt;
    };
    al.prototype.setColumnspanInt = function (ou) {
        this.columnspanInt = ou;
    };
    al.prototype.isAlignmentGroup = function () {
        return this.alignmentGroup;
    };
    al.prototype.setAlignmentGroup = function (ou) {
        this.alignmentGroup = ou;
    };
    al.filterTdBean = function (ou, ov) {
        if (ou instanceof au && ov instanceof al) {
            return ov;
        }
        return al.replaceTDWithRow(ov);
    };
    al.replaceTDWithRow = function (ov) {
        if (ov instanceof al) {
            var ou = new bW(ov.getParentBean());
            var oy = ov.getChildren();
            for (var ox = 0; ox < oy.size(); ox++) {
                var oA = oy.get(ox);
                for (var ow = 0; ow < oA.getChildren().size(); ow++) {
                    var oz = oA.getChildren().get(ox);
                    ou.addChild(oz);
                }
            }
            return ou;
        }
        return ov;
    };

    function cO(ou) {
        this.text;
        this.shapeList = new fM();
        this.nbSpacesBefore = 0;
        this.nbSpacesAfter = 0;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(cO, gK);
    cO.prototype.copyParentStyle = function (ou) {
        gK.prototype.copyParentStyle.call(this, ou);
    };
    cO.prototype.getUnicodeText = function () {
        return this.text;
    };
    cO.prototype.setUnicodeText = function (ou) {
        this.text = ou;
    };
    cO.prototype.setText = function (ou) {
        var ov = gX.convertToUnicodeString(ou);
        this.setUnicodeText(ov);
    };
    cO.prototype.getShapeList = function () {
        return this.shapeList;
    };
    cO.prototype.getNbSpacesBefore = function () {
        return this.nbSpacesBefore;
    };
    cO.prototype.getNbSpacesAfter = function () {
        return this.nbSpacesAfter;
    };
    cO.prototype.calculateNbSpacesBefore = function (ow, ov) {
        if (ov != null && ov.length > 0) {
            var ou = ov.charAt(0) + "";
            this.nbSpacesBefore = ow.indexOf(ou + "");
        }
    };
    cO.prototype.calculateNbSpacesAfter = function (ow, ov) {
        if (ov != null && ov.length > 0) {
            var ou = ov.charAt(ov.length - 1) + "";
            this.nbSpacesAfter = ow.length - (ow.lastIndexOf(ou + "") + 1);
        }
    };

    function au(ou) {
        this.columnalign;
        this.columnspacing;
        this.groupalign;
        this.dKu = bW;
        this.dKu(ou);
    }
    ga(au, bW);
    au.prototype.getColumnalign = function () {
        return this.columnalign;
    };
    au.prototype.setColumnalign = function (ou) {
        this.columnalign = ou;
    };
    au.prototype.getColumnspacing = function () {
        return this.columnspacing;
    };
    au.prototype.setColumnspacing = function (ou) {
        this.columnspacing = ou;
    };
    au.prototype.getGroupalign = function () {
        return this.groupalign;
    };
    au.prototype.setGroupalign = function (ou) {
        this.groupalign = ou;
    };
    au.prototype.canInsertChildLeft = function (ou, ov) {
        return ov instanceof al;
    };
    au.prototype.insertChildLeft = function (ou, ov) {
        return false;
    };
    au.prototype.canInsertChildRight = function (ou, ov) {
        return ov instanceof al;
    };
    au.prototype.insertChildRight = function (ou, ov) {
        return false;
    };
    au.prototype.canReplaceChild = function (ou, ov) {
        return ov instanceof al;
    };
    au.prototype.replaceChild = function (ou, ov) {
        return false;
    };
    au.prototype.getSelectedEmptyBean = function (ow) {
        var ou = new al(this);
        var ov = new bh(ou);
        ov.setAttribute("editorSelected", "true");
        ou.addChild(ov);
        return ou;
    };

    function ad(ou) {
        this.label;
        this.dKE = au;
        this.dKE(ou);
    }
    ga(ad, au);
    ad.prototype.copyParentStyle = function (ou) {
        bW.prototype.copyParentStyle.call(this, ou);
        if (this.label != null) {
            this.label.copyParentStyle(ou);
        }
    };
    ad.prototype.addChild = function (ou) {
        if (this.label == null && ou instanceof al) {
            this.label = ou;
            return;
        }
        bW.prototype.addChild.call(this, ou);
    };
    ad.prototype.getLabel = function () {
        return this.label;
    };
    ad.prototype.setLabel = function (ou) {
        this.label = ou;
    };

    function aj(ou) {
        this._base;
        this.sub;
        this.accentunder = null;
        this.align;
        this.underSpace;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(aj, gK);
    aj.prototype.copyParentStyle = function (ou) {
        if (!this.isExpAccentunder()) {
            this.sub.modifyScriptlevel(1);
        }
        this.sub.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
    };
    aj.prototype.initChildren = function () {
        if (this._base == null) {
            this.replaceChildren();
        }
        gK.prototype.initChildren.call(this);
    };
    aj.prototype.replaceChildren = function () {
        this._base = this.getChildren().get(0);
        this.sub = this.getChildren().get(1);
    };
    aj.prototype.getBase = function () {
        return this._base;
    };
    aj.prototype.getSub = function () {
        return this.sub;
    };
    aj.prototype.isExpAccentunder = function () {
        if (this.accentunder != null) {
            return lv.getBooleanValue(this.accentunder, false);
        }
        return this.sub.isAccent();
    };
    aj.prototype.isAccent = function () {
        return this.isExpAccentunder() || this._base.isAccent();
    };
    aj.prototype.setAccentunder = function (ou) {
        this.accentunder = ou;
    };
    aj.prototype.getAlign = function () {
        return this.align;
    };
    aj.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    aj.prototype.getUnderSpace = function () {
        return this.underSpace;
    };
    aj.prototype.setUnderSpace = function (ou) {
        this.underSpace = ou;
    };
    aj.prototype.canDeleteChild = function (ou) {
        if (this._base != ou && this.sub != ou) {
            return false;
        }
        return !this.isEmptyBean(ou);
    };
    aj.prototype.deleteChild = function (ou) {
        if (this._base == ou) {
            this._base = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    aj.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    aj.prototype.insertChildLeft = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    aj.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    aj.prototype.insertChildRight = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    aj.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    aj.prototype.replaceChild = function (ou, ov) {
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = ov;
            return true;
        }
        if (this.sub == ou) {
            this.sub = ov;
            return true;
        }
        return false;
    };

    function hF(ou) {
        this._base;
        this.sub;
        this.exp;
        this.accent = null;
        this.accentunder = null;
        this.align;
        this.overSpace;
        this.underSpace;
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(hF, gK);
    hF.prototype.copyParentStyle = function (ou) {
        if (!this.isSubAccent()) {
            this.sub.modifyScriptlevel(1);
        }
        this.sub.modifyDisplay(false);
        if (!this.isExpAccent()) {
            this.exp.modifyScriptlevel(1);
        }
        this.exp.modifyDisplay(false);
        gK.prototype.copyParentStyle.call(this, ou);
    };
    hF.prototype.initChildren = function () {
        if (this._base == null) {
            this.replaceChildren();
        }
        gK.prototype.initChildren.call(this);
    };
    hF.prototype.replaceChildren = function () {
        this._base = this.getChildren().get(0);
        this.sub = this.getChildren().get(1);
        this.exp = this.getChildren().get(2);
    };
    hF.prototype.getBase = function () {
        return this._base;
    };
    hF.prototype.getSub = function () {
        return this.sub;
    };
    hF.prototype.getExp = function () {
        return this.exp;
    };
    hF.prototype.isAccent = function () {
        return this.isExpAccent() || this._base.isAccent();
    };
    hF.prototype.isAccentunder = function () {
        return this.isSubAccent() || this._base.isAccent();
    };
    hF.prototype.setAccent = function (ou) {
        this.accent = ou;
    };
    hF.prototype.isSubAccent = function () {
        if (this.accentunder != null) {
            return lv.getBooleanValue(this.accentunder, false);
        }
        return this.sub.isAccentunder();
    };
    hF.prototype.isExpAccent = function () {
        if (this.accent != null) {
            return lv.getBooleanValue(this.accent, false);
        }
        return this.exp.isAccent();
    };
    hF.prototype.setAccentunder = function (ou) {
        this.accentunder = ou;
    };
    hF.prototype.getAlign = function () {
        return this.align;
    };
    hF.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    hF.prototype.getOverSpace = function () {
        return this.overSpace;
    };
    hF.prototype.setOverSpace = function (ou) {
        this.overSpace = ou;
    };
    hF.prototype.getUnderSpace = function () {
        return this.underSpace;
    };
    hF.prototype.setUnderSpace = function (ou) {
        this.underSpace = ou;
    };
    hF.prototype.canDeleteChild = function (ou) {
        if (this._base != ou && this.sub != ou && this.exp != ou) {
            return false;
        }
        return !this.isEmptyBean(ou);
    };
    hF.prototype.deleteChild = function (ou) {
        if (this._base == ou) {
            this._base = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getSelectedEmptyBean(this);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getSelectedEmptyBean(this);
            return true;
        }
        return false;
    };
    hF.prototype.canInsertChildLeft = function (ou, ov) {
        return true;
    };
    hF.prototype.insertChildLeft = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildLeft(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildLeft(ou, ov);
            return true;
        }
        return false;
    };
    hF.prototype.canInsertChildRight = function (ou, ov) {
        return true;
    };
    hF.prototype.insertChildRight = function (ou, ov) {
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.sub == ou) {
            this.sub = this.getFixChildRight(ou, ov);
            return true;
        }
        if (this.exp == ou) {
            this.exp = this.getFixChildRight(ou, ov);
            return true;
        }
        return false;
    };
    hF.prototype.canReplaceChild = function (ou, ov) {
        return true;
    };
    hF.prototype.replaceChild = function (ou, ov) {
        ou.clearAttribute("editorSelected");
        ov.setAttribute("editorSelected", "true");
        ov.setParentBean(this);
        if (this._base == ou) {
            this._base = ov;
            return true;
        }
        if (this.sub == ou) {
            this.sub = ov;
            return true;
        }
        if (this.exp == ou) {
            this.exp = ov;
            return true;
        }
        return false;
    };

    function m3(ou) {
        this.dKr = gK;
        this.dKr(ou);
    }
    ga(m3, gK);

    function kf() {
        this.scriptlevel;
        this.displaystyle = "true";
        this.scriptsizemultiplier = 0;
        this.scriptminsize;
        this.infixlinebreakstyle;
        this.decimalpoint;
        this.accent;
        this.accentunder;
        this.align;
        this.alignmentscope;
        this.bevelled;
        this.charalign;
        this.charspacing;
        this.close;
        this.columnalign;
        this.columnlines;
        this.columnspacing;
        this.columnspan;
        this.columnwidth;
        this.crossout;
        this.carrythickness;
        this.denomalign;
        this.depth;
        this.dir;
        this.edge;
        this.equalcolumns;
        this.equalrows;
        this.fence;
        this.form;
        this.frame;
        this.framespacing;
        this.groupalign;
        this.height;
        this.indentalign;
        this.indentalignfirst;
        this.indentalignlast;
        this.indentshift;
        this.indentshiftfirst;
        this.indentshiftlast;
        this.indenttarget;
        this.largeop;
        this.leftoverhang;
        this.lineLength;
        this.linebreak;
        this.linebreakmultchar;
        this.linebreakstyle;
        this.lineleading;
        this.linethickness;
        this.location;
        this.longdivstyle;
        this.lquote;
        this.lspace;
        this.maxsize;
        this.minlabelspacing;
        this.minsize;
        this.movablelimits;
        this.mslinethickness;
        this.notation = "longdiv";
        this.numalign;
        this.open;
        this.position;
        this.rightoverhang;
        this.rowalign;
        this.rowlines;
        this.rowspacing;
        this.rowspan;
        this.rquote;
        this.rspace;
        this.selection;
        this.separator;
        this.separators;
        this.shift;
        this.side;
        this.stackalign;
        this.stretchy;
        this.subscriptshift = "0";
        this.superscriptshift = "0";
        this.symmetric;
        this.valign;
        this.voffset;
        this.width;
        this.zeroChar = "0";
        this.drawBaseline = false;
        this.drawAxisline = false;
        this.drawSuperscriptline = false;
        this.drawMaxwidthline = false;
        this.enclosethickness;
        this.encloseradius;
        this.sqrtClosed = false;
        this.sqrtClosedLength = "0.2em";
        this.sqrtThickness = "100%";
        this.overSpace = "0.1em";
        this.underSpace = "0.1em";
        this.defaultPadding = 2;
    }
    kf.prototype.getCopy = function () {
        var ou = new kf();
        ou.setScriptlevel(this.scriptlevel);
        ou.setDisplaystyle(this.displaystyle);
        ou.setScriptsizemultiplier(this.scriptsizemultiplier);
        ou.setScriptminsize(this.scriptminsize);
        ou.setInfixlinebreakstyle(this.infixlinebreakstyle);
        ou.setDecimalpoint(this.decimalpoint);
        ou.setAccent(this.accent);
        ou.setAccentunder(this.accentunder);
        ou.setAlign(this.align);
        ou.setAlignmentscope(this.alignmentscope);
        ou.setBevelled(this.bevelled);
        ou.setCharalign(this.charalign);
        ou.setCharspacing(this.charspacing);
        ou.setClose(this.close);
        ou.setColumnalign(this.columnalign);
        ou.setColumnlines(this.columnlines);
        ou.setColumnspacing(this.columnspacing);
        ou.setColumnspan(this.columnspan);
        ou.setColumnwidth(this.columnwidth);
        ou.setCrossout(this.crossout);
        ou.setDenomalign(this.denomalign);
        ou.setDepth(this.depth);
        ou.setDir(this.dir);
        ou.setEdge(this.edge);
        ou.setEqualcolumns(this.equalcolumns);
        ou.setEqualrows(this.equalrows);
        ou.setFence(this.fence);
        ou.setForm(this.form);
        ou.setFrame(this.frame);
        ou.setFramespacing(this.framespacing);
        ou.setGroupalign(this.groupalign);
        ou.setHeight(this.height);
        ou.setIndentalign(this.indentalign);
        ou.setIndentalignfirst(this.indentalignfirst);
        ou.setIndentalignlast(this.indentalignlast);
        ou.setIndentshift(this.indentshift);
        ou.setIndentshiftfirst(this.indentshiftfirst);
        ou.setIndentshiftlast(this.indentshiftlast);
        ou.setIndenttarget(this.indenttarget);
        ou.setLargeop(this.largeop);
        ou.setLeftoverhang(this.leftoverhang);
        ou.setLineLength(this.lineLength);
        ou.setLinebreak(this.linebreak);
        ou.setLinebreakmultchar(this.linebreakmultchar);
        ou.setLinebreakstyle(this.linebreakstyle);
        ou.setLineleading(this.lineleading);
        ou.setLinethickness(this.linethickness);
        ou.setLocation(this.location);
        ou.setLongdivstyle(this.longdivstyle);
        ou.setLquote(this.lquote);
        ou.setLspace(this.lspace);
        ou.setMaxsize(this.maxsize);
        ou.setMinlabelspacing(this.minlabelspacing);
        ou.setMinsize(this.minsize);
        ou.setMovablelimits(this.movablelimits);
        ou.setMslinethickness(this.mslinethickness);
        ou.setNotation(this.notation);
        ou.setNumalign(this.numalign);
        ou.setOpen(this.open);
        ou.setPosition(this.position);
        ou.setRightoverhang(this.rightoverhang);
        ou.setRowalign(this.rowalign);
        ou.setRowlines(this.rowlines);
        ou.setRowspacing(this.rowspacing);
        ou.setRowspan(this.rowspan);
        ou.setRquote(this.rquote);
        ou.setRspace(this.rspace);
        ou.setSelection(this.selection);
        ou.setSeparator(this.separator);
        ou.setSeparators(this.separators);
        ou.setShift(this.shift);
        ou.setSide(this.side);
        ou.setStackalign(this.stackalign);
        ou.setStretchy(this.stretchy);
        ou.setSubscriptshift(this.subscriptshift);
        ou.setSuperscriptshift(this.superscriptshift);
        ou.setSymmetric(this.symmetric);
        ou.setValign(this.valign);
        ou.setWidth(this.width);
        ou.setSqrtClosed(this.sqrtClosed);
        ou.setSqrtClosedLength(this.sqrtClosedLength);
        ou.setSqrtThickness(this.sqrtThickness);
        ou.setEncloseradius(this.encloseradius);
        ou.setEnclosethickness(this.enclosethickness);
        ou.setDefaultPadding(this.defaultPadding);
        return ou;
    };
    kf.prototype.getScriptlevel = function () {
        return this.scriptlevel;
    };
    kf.prototype.setScriptlevel = function (ou) {
        this.scriptlevel = ou;
    };
    kf.prototype.getDisplaystyle = function () {
        return this.displaystyle;
    };
    kf.prototype.setDisplaystyle = function (ou) {
        this.displaystyle = ou;
    };
    kf.prototype.getScriptsizemultiplier = function () {
        return this.scriptsizemultiplier;
    };
    kf.prototype.setScriptsizemultiplier = function (ou) {
        this.scriptsizemultiplier = ou;
    };
    kf.prototype.getScriptminsize = function () {
        return this.scriptminsize;
    };
    kf.prototype.setScriptminsize = function (ou) {
        this.scriptminsize = ou;
    };
    kf.prototype.getInfixlinebreakstyle = function () {
        return this.infixlinebreakstyle;
    };
    kf.prototype.setInfixlinebreakstyle = function (ou) {
        this.infixlinebreakstyle = ou;
    };
    kf.prototype.getDecimalpoint = function () {
        return this.decimalpoint;
    };
    kf.prototype.setDecimalpoint = function (ou) {
        this.decimalpoint = ou;
    };
    kf.prototype.getAccent = function () {
        return this.accent;
    };
    kf.prototype.setAccent = function (ou) {
        this.accent = ou;
    };
    kf.prototype.getAccentunder = function () {
        return this.accentunder;
    };
    kf.prototype.setAccentunder = function (ou) {
        this.accentunder = ou;
    };
    kf.prototype.getAlign = function () {
        return this.align;
    };
    kf.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    kf.prototype.getAlignmentscope = function () {
        return this.alignmentscope;
    };
    kf.prototype.setAlignmentscope = function (ou) {
        this.alignmentscope = ou;
    };
    kf.prototype.getBevelled = function () {
        return this.bevelled;
    };
    kf.prototype.setBevelled = function (ou) {
        this.bevelled = ou;
    };
    kf.prototype.getCharalign = function () {
        return this.charalign;
    };
    kf.prototype.setCharalign = function (ou) {
        this.charalign = ou;
    };
    kf.prototype.getCharspacing = function () {
        return this.charspacing;
    };
    kf.prototype.setCharspacing = function (ou) {
        this.charspacing = ou;
    };
    kf.prototype.getClose = function () {
        return this.close;
    };
    kf.prototype.setClose = function (ou) {
        this.close = ou;
    };
    kf.prototype.getColumnalign = function () {
        return this.columnalign;
    };
    kf.prototype.setColumnalign = function (ou) {
        this.columnalign = ou;
    };
    kf.prototype.getColumnlines = function () {
        return this.columnlines;
    };
    kf.prototype.setColumnlines = function (ou) {
        this.columnlines = ou;
    };
    kf.prototype.getColumnspacing = function () {
        return this.columnspacing;
    };
    kf.prototype.setColumnspacing = function (ou) {
        this.columnspacing = ou;
    };
    kf.prototype.getColumnspan = function () {
        return this.columnspan;
    };
    kf.prototype.setColumnspan = function (ou) {
        this.columnspan = ou;
    };
    kf.prototype.getColumnwidth = function () {
        return this.columnwidth;
    };
    kf.prototype.setColumnwidth = function (ou) {
        this.columnwidth = ou;
    };
    kf.prototype.getCrossout = function () {
        return this.crossout;
    };
    kf.prototype.setCrossout = function (ou) {
        this.crossout = ou;
    };
    kf.prototype.getDenomalign = function () {
        return this.denomalign;
    };
    kf.prototype.setDenomalign = function (ou) {
        this.denomalign = ou;
    };
    kf.prototype.getDepth = function () {
        return this.depth;
    };
    kf.prototype.setDepth = function (ou) {
        this.depth = ou;
    };
    kf.prototype.getDir = function () {
        return this.dir;
    };
    kf.prototype.setDir = function (ou) {
        this.dir = ou;
    };
    kf.prototype.getEdge = function () {
        return this.edge;
    };
    kf.prototype.setEdge = function (ou) {
        this.edge = ou;
    };
    kf.prototype.getEqualcolumns = function () {
        return this.equalcolumns;
    };
    kf.prototype.setEqualcolumns = function (ou) {
        this.equalcolumns = ou;
    };
    kf.prototype.getEqualrows = function () {
        return this.equalrows;
    };
    kf.prototype.setEqualrows = function (ou) {
        this.equalrows = ou;
    };
    kf.prototype.getFence = function () {
        return this.fence;
    };
    kf.prototype.setFence = function (ou) {
        this.fence = ou;
    };
    kf.prototype.getForm = function () {
        return this.form;
    };
    kf.prototype.setForm = function (ou) {
        this.form = ou;
    };
    kf.prototype.getFrame = function () {
        return this.frame;
    };
    kf.prototype.setFrame = function (ou) {
        this.frame = ou;
    };
    kf.prototype.getFramespacing = function () {
        return this.framespacing;
    };
    kf.prototype.setFramespacing = function (ou) {
        this.framespacing = ou;
    };
    kf.prototype.getGroupalign = function () {
        return this.groupalign;
    };
    kf.prototype.setGroupalign = function (ou) {
        this.groupalign = ou;
    };
    kf.prototype.getHeight = function () {
        return this.height;
    };
    kf.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    kf.prototype.getIndentalign = function () {
        return this.indentalign;
    };
    kf.prototype.setIndentalign = function (ou) {
        this.indentalign = ou;
    };
    kf.prototype.getIndentalignfirst = function () {
        return this.indentalignfirst;
    };
    kf.prototype.setIndentalignfirst = function (ou) {
        this.indentalignfirst = ou;
    };
    kf.prototype.getIndentalignlast = function () {
        return this.indentalignlast;
    };
    kf.prototype.setIndentalignlast = function (ou) {
        this.indentalignlast = ou;
    };
    kf.prototype.getIndentshift = function () {
        return this.indentshift;
    };
    kf.prototype.setIndentshift = function (ou) {
        this.indentshift = ou;
    };
    kf.prototype.getIndentshiftfirst = function () {
        return this.indentshiftfirst;
    };
    kf.prototype.setIndentshiftfirst = function (ou) {
        this.indentshiftfirst = ou;
    };
    kf.prototype.getIndentshiftlast = function () {
        return this.indentshiftlast;
    };
    kf.prototype.setIndentshiftlast = function (ou) {
        this.indentshiftlast = ou;
    };
    kf.prototype.getIndenttarget = function () {
        return this.indenttarget;
    };
    kf.prototype.setIndenttarget = function (ou) {
        this.indenttarget = ou;
    };
    kf.prototype.getLargeop = function () {
        return this.largeop;
    };
    kf.prototype.setLargeop = function (ou) {
        this.largeop = ou;
    };
    kf.prototype.getLeftoverhang = function () {
        return this.leftoverhang;
    };
    kf.prototype.setLeftoverhang = function (ou) {
        this.leftoverhang = ou;
    };
    kf.prototype.getLength = function () {
        return this.lineLength;
    };
    kf.prototype.setLength = function (ou) {
        this.lineLength = ou;
    };
    kf.prototype.getLinebreak = function () {
        return this.linebreak;
    };
    kf.prototype.setLinebreak = function (ou) {
        this.linebreak = ou;
    };
    kf.prototype.getLinebreakmultchar = function () {
        return this.linebreakmultchar;
    };
    kf.prototype.setLinebreakmultchar = function (ou) {
        this.linebreakmultchar = ou;
    };
    kf.prototype.getLinebreakstyle = function () {
        return this.linebreakstyle;
    };
    kf.prototype.setLinebreakstyle = function (ou) {
        this.linebreakstyle = ou;
    };
    kf.prototype.getLineleading = function () {
        return this.lineleading;
    };
    kf.prototype.setLineleading = function (ou) {
        this.lineleading = ou;
    };
    kf.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    kf.prototype.setLinethickness = function (ou) {
        this.linethickness = ou;
    };
    kf.prototype.getLocation = function () {
        return this.location;
    };
    kf.prototype.setLocation = function (ou) {
        this.location = ou;
    };
    kf.prototype.getLongdivstyle = function () {
        return this.longdivstyle;
    };
    kf.prototype.setLongdivstyle = function (ou) {
        this.longdivstyle = ou;
    };
    kf.prototype.getLquote = function () {
        return this.lquote;
    };
    kf.prototype.setLquote = function (ou) {
        this.lquote = ou;
    };
    kf.prototype.getLspace = function () {
        return this.lspace;
    };
    kf.prototype.setLspace = function (ou) {
        this.lspace = ou;
    };
    kf.prototype.getMaxsize = function () {
        return this.maxsize;
    };
    kf.prototype.setMaxsize = function (ou) {
        this.maxsize = ou;
    };
    kf.prototype.getMinlabelspacing = function () {
        return this.minlabelspacing;
    };
    kf.prototype.setMinlabelspacing = function (ou) {
        this.minlabelspacing = ou;
    };
    kf.prototype.getMinsize = function () {
        return this.minsize;
    };
    kf.prototype.setMinsize = function (ou) {
        this.minsize = ou;
    };
    kf.prototype.getMovablelimits = function () {
        return this.movablelimits;
    };
    kf.prototype.setMovablelimits = function (ou) {
        this.movablelimits = ou;
    };
    kf.prototype.getMslinethickness = function () {
        return this.mslinethickness;
    };
    kf.prototype.setMslinethickness = function (ou) {
        this.mslinethickness = ou;
    };
    kf.prototype.getNotation = function () {
        return this.notation;
    };
    kf.prototype.setNotation = function (ou) {
        this.notation = ou;
    };
    kf.prototype.getNumalign = function () {
        return this.numalign;
    };
    kf.prototype.setNumalign = function (ou) {
        this.numalign = ou;
    };
    kf.prototype.getOpen = function () {
        return this.open;
    };
    kf.prototype.setOpen = function (ou) {
        this.open = ou;
    };
    kf.prototype.getPosition = function () {
        return this.position;
    };
    kf.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    kf.prototype.getRightoverhang = function () {
        return this.rightoverhang;
    };
    kf.prototype.setRightoverhang = function (ou) {
        this.rightoverhang = ou;
    };
    kf.prototype.getRowalign = function () {
        return this.rowalign;
    };
    kf.prototype.setRowalign = function (ou) {
        this.rowalign = ou;
    };
    kf.prototype.getRowlines = function () {
        return this.rowlines;
    };
    kf.prototype.setRowlines = function (ou) {
        this.rowlines = ou;
    };
    kf.prototype.getRowspacing = function () {
        return this.rowspacing;
    };
    kf.prototype.setRowspacing = function (ou) {
        this.rowspacing = ou;
    };
    kf.prototype.getRowspan = function () {
        return this.rowspan;
    };
    kf.prototype.setRowspan = function (ou) {
        this.rowspan = ou;
    };
    kf.prototype.getRquote = function () {
        return this.rquote;
    };
    kf.prototype.setRquote = function (ou) {
        this.rquote = ou;
    };
    kf.prototype.getRspace = function () {
        return this.rspace;
    };
    kf.prototype.setRspace = function (ou) {
        this.rspace = ou;
    };
    kf.prototype.getSelection = function () {
        return this.selection;
    };
    kf.prototype.setSelection = function (ou) {
        this.selection = ou;
    };
    kf.prototype.getSeparator = function () {
        return this.separator;
    };
    kf.prototype.setSeparator = function (ou) {
        this.separator = ou;
    };
    kf.prototype.getSeparators = function () {
        return this.separators;
    };
    kf.prototype.setSeparators = function (ou) {
        this.separators = ou;
    };
    kf.prototype.getShift = function () {
        return this.shift;
    };
    kf.prototype.setShift = function (ou) {
        this.shift = ou;
    };
    kf.prototype.getSide = function () {
        return this.side;
    };
    kf.prototype.setSide = function (ou) {
        this.side = ou;
    };
    kf.prototype.getStackalign = function () {
        return this.stackalign;
    };
    kf.prototype.setStackalign = function (ou) {
        this.stackalign = ou;
    };
    kf.prototype.getStretchy = function () {
        return this.stretchy;
    };
    kf.prototype.setStretchy = function (ou) {
        this.stretchy = ou;
    };
    kf.prototype.getSubscriptshift = function () {
        return this.subscriptshift;
    };
    kf.prototype.setSubscriptshift = function (ou) {
        this.subscriptshift = ou;
    };
    kf.prototype.getSuperscriptshift = function () {
        return this.superscriptshift;
    };
    kf.prototype.setSuperscriptshift = function (ou) {
        this.superscriptshift = ou;
    };
    kf.prototype.getSymmetric = function () {
        return this.symmetric;
    };
    kf.prototype.setSymmetric = function (ou) {
        this.symmetric = ou;
    };
    kf.prototype.getValign = function () {
        return this.valign;
    };
    kf.prototype.setValign = function (ou) {
        this.valign = ou;
    };
    kf.prototype.getWidth = function () {
        return this.width;
    };
    kf.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    kf.prototype.isDrawBaseline = function () {
        return this.drawBaseline;
    };
    kf.prototype.setDrawBaseline = function (ou) {
        this.drawBaseline = ou;
    };
    kf.prototype.isDrawAxisline = function () {
        return this.drawAxisline;
    };
    kf.prototype.setDrawAxisline = function (ou) {
        this.drawAxisline = ou;
    };
    kf.prototype.isDrawSuperscriptline = function () {
        return this.drawSuperscriptline;
    };
    kf.prototype.setDrawSuperscriptline = function (ou) {
        this.drawSuperscriptline = ou;
    };
    kf.prototype.isDrawMaxwidthline = function () {
        return this.drawMaxwidthline;
    };
    kf.prototype.setDrawMaxwidthline = function (ou) {
        this.drawMaxwidthline = ou;
    };
    kf.prototype.getZeroChar = function () {
        return this.zeroChar;
    };
    kf.prototype.setZeroChar = function (ou) {
        this.zeroChar = ou;
    };
    kf.prototype.getCarrythickness = function () {
        return this.carrythickness;
    };
    kf.prototype.setCarrythickness = function (ou) {
        this.carrythickness = ou;
    };
    kf.prototype.getEnclosethickness = function () {
        return this.enclosethickness;
    };
    kf.prototype.setEnclosethickness = function (ou) {
        this.enclosethickness = ou;
    };
    kf.prototype.getVoffset = function () {
        return this.voffset;
    };
    kf.prototype.setVoffset = function (ou) {
        this.voffset = ou;
    };
    kf.prototype.getEncloseradius = function () {
        return this.encloseradius;
    };
    kf.prototype.setEncloseradius = function (ou) {
        this.encloseradius = ou;
    };
    kf.prototype.getLineLength = function () {
        return this.lineLength;
    };
    kf.prototype.setLineLength = function (ou) {
        this.lineLength = this.lineLength;
    };
    kf.prototype.isSqrtClosed = function () {
        return this.sqrtClosed;
    };
    kf.prototype.setSqrtClosed = function (ou) {
        this.sqrtClosed = ou;
    };
    kf.prototype.getSqrtClosedLength = function () {
        return this.sqrtClosedLength;
    };
    kf.prototype.setSqrtClosedLength = function (ou) {
        this.sqrtClosedLength = ou;
    };
    kf.prototype.getSqrtThickness = function () {
        return this.sqrtThickness;
    };
    kf.prototype.setSqrtThickness = function (ou) {
        this.sqrtThickness = ou;
    };
    kf.prototype.getOverSpace = function () {
        return this.overSpace;
    };
    kf.prototype.getUnderSpace = function () {
        return this.underSpace;
    };
    kf.prototype.setOverSpace = function (ou) {
        this.overSpace = ou;
    };
    kf.prototype.setUnderSpace = function (ou) {
        this.underSpace = ou;
    };
    kf.prototype.getDefaultPadding = function () {
        return this.defaultPadding;
    };
    kf.prototype.setDefaultPadding = function (ou) {
        this.defaultPadding = ou;
    };

    function nZ() {
        this.nextValue = 0;
    }
    nZ.prototype.nextId = function () {
        this.nextValue = this.nextValue + 1;
        return this.nextValue + "";
    };

    function n1() {
        this.form = "p";
        this.lspace = 5;
        this.rspace = 5;
        this.priority = 0;
        this.accent = false;
        this.stretchy = false;
    }
    n1.prototype.saveToString = function () {
        var ou = this.form + this.lspace + "" + this.rspace;
        if (this.priority < 10) {
            ou = ou + "0" + this.priority;
        } else {
            ou = ou + this.priority;
        }
        var ov = 0;
        if (this.accent) {
            ov = ov | 1;
        }
        if (this.stretchy) {
            ov = ov | 2;
        }
        return ou + ov;
    };
    n1.prototype.openFromString = function (ow) {
        if (ow.length != 6) {
            return;
        }
        this.form = ow.substring(0, 1);
        var oz = ow.substring(1, 2);
        this.lspace = lv.getIntegerValue(oz, 0);
        var ov = ow.substring(2, 3);
        this.rspace = lv.getIntegerValue(ov, 0);
        var oy = ow.substring(3, 5);
        this.priority = lv.getIntegerValue(oy, 0);
        var ou = ow.substring(5, 6);
        var ox = lv.getIntFromHexCode(ou);
        if ((ox & 1) == 0) {
            this.accent = false;
        } else {
            this.accent = true;
        }
        if ((ox & 2) == 0) {
            this.stretchy = false;
        } else {
            this.stretchy = true;
        }
    };
    n1.prototype.getForm = function () {
        return this.form;
    };
    n1.prototype.setForm = function (ou) {
        this.form = ou;
    };
    n1.prototype.getLspace = function () {
        return this.lspace;
    };
    n1.prototype.setLspace = function (ou) {
        this.lspace = ou;
    };
    n1.prototype.getRspace = function () {
        return this.rspace;
    };
    n1.prototype.setRspace = function (ou) {
        this.rspace = ou;
    };
    n1.prototype.getPriority = function () {
        return this.priority;
    };
    n1.prototype.setPriority = function (ou) {
        this.priority = ou;
    };
    n1.prototype.isAccent = function () {
        return this.accent;
    };
    n1.prototype.setAccent = function (ou) {
        this.accent = ou;
    };
    n1.prototype.isStretchy = function () {
        return this.stretchy;
    };
    n1.prototype.setStretchy = function (ou) {
        this.stretchy = ou;
    };

    function eZ() {
        this.percentGrow = 20;
        this.acceptedWidthInt = 5;
    }
    eZ.prototype.getPercentGrow = function () {
        return this.percentGrow;
    };
    eZ.prototype.setPercentGrow = function (ou) {
        this.percentGrow = ou;
    };
    eZ.prototype.setAcceptedWidth = function (ou) {
        this.acceptedWidthInt = lv.getIntegerValue(ou, 5);
    };
    eZ.prototype.getNearWidth = function (ou) {
        if (ou < this.acceptedWidthInt) {
            return this.acceptedWidthInt;
        }
        return ou;
    };

    function fH() {
        this._operator;
        this.fence = false;
        this.largeop = false;
        this.movablelimits = false;
        this.separator = false;
        this.symmetric = false;
        this.linebreakAfter = false;
        this.percentGrow = 20;
        this.acceptedWidth = "5";
        this.integral = false;
        this.invisible = true;
        this.spaces = new fM();
        this.operatorMaxInfo = new eZ();
    }
    fH.prototype.saveToString = function () {
        var ox = 0;
        if (this.fence) {
            ox = ox | 1;
        }
        if (this.largeop) {
            ox = ox | 2;
        }
        if (this.movablelimits) {
            ox = ox | 4;
        }
        if (this.separator) {
            ox = ox | 8;
        }
        if (this.symmetric) {
            ox = ox | 16;
        }
        if (this.linebreakAfter) {
            ox = ox | 32;
        }
        var ov = lv.getHexCodeFromInt(ox).toUpperCase();
        if (ov.length < 2) {
            ov = "0" + ov;
        }
        for (var ou = 0; ou < this.spaces.size(); ou++) {
            var ow = this.spaces.get(ou);
            ov = ov + ow.saveToString();
        }
        return ov;
    };
    fH.prototype.openFromString = function (ov) {
        if (ov.length < 2) {
            return;
        }
        var ou = ov.substring(0, 2);
        var ow = lv.getIntFromHexCode(ou);
        if ((ow & 1) == 0) {
            this.fence = false;
        } else {
            this.fence = true;
        }
        if ((ow & 2) == 0) {
            this.largeop = false;
        } else {
            this.largeop = true;
        }
        if ((ow & 4) == 0) {
            this.movablelimits = false;
        } else {
            this.movablelimits = true;
        }
        if ((ow & 8) == 0) {
            this.separator = false;
        } else {
            this.separator = true;
        }
        if ((ow & 16) == 0) {
            this.symmetric = false;
        } else {
            this.symmetric = true;
        }
        if ((ow & 32) == 0) {
            this.linebreakAfter = false;
        } else {
            this.linebreakAfter = true;
        }
        this.spaces.clear();
        ov = ov.substring(2, ov.length);
        while (ov.length > 5) {
            var ox = new n1();
            ox.openFromString(ov.substring(0, 6));
            this.spaces.add(ox);
            ov = ov.substring(6, ov.length);
        }
    };
    fH.prototype.isLinebreakAfter = function () {
        return this.linebreakAfter;
    };
    fH.prototype.setLinebreakAfter = function (ou) {
        this.linebreakAfter = ou;
    };
    fH.prototype.isFence = function () {
        return this.fence;
    };
    fH.prototype.setFence = function (ou) {
        this.fence = ou;
    };
    fH.prototype.isLargeop = function () {
        return this.largeop;
    };
    fH.prototype.setLargeop = function (ou) {
        this.largeop = ou;
    };
    fH.prototype.isMovablelimits = function () {
        return this.movablelimits;
    };
    fH.prototype.setMovablelimits = function (ou) {
        this.movablelimits = ou;
    };
    fH.prototype.isSeparator = function () {
        return this.separator;
    };
    fH.prototype.setSeparator = function (ou) {
        this.separator = ou;
    };
    fH.prototype.isSymmetric = function () {
        return this.symmetric;
    };
    fH.prototype.setSymmetric = function (ou) {
        this.symmetric = ou;
    };
    fH.prototype.isIntegral = function () {
        return this.integral;
    };
    fH.prototype.setIntegral = function (ou) {
        this.integral = ou;
    };
    fH.prototype.isInvisible = function () {
        return this.invisible;
    };
    fH.prototype.setInvisible = function (ou) {
        this.invisible = ou;
    };
    fH.prototype.getSpaces = function () {
        return this.spaces;
    };
    fH.prototype.setSpaces = function (ou) {
        this.spaces = ou;
    };
    fH.prototype.setForm = function (ox) {
        ox = this.getShortForm(ox);
        if (this.spaces.size() > 0) {
            var oy = null;
            var ou = null;
            for (var ow = 0; ow < this.spaces.size(); ow++) {
                var ov = this.spaces.get(ow);
                if (ov.getForm() == ox) {
                    oy = ov;
                } else {
                    if (ov.getForm() == "i") {
                        ou = ov;
                    }
                }
            }
            if (oy != null) {
                this.spaces.clear();
                this.spaces.add(oy);
            } else {
                if (ou != null) {
                    this.spaces.clear();
                    this.spaces.add(ou);
                }
            }
        }
        if (this.spaces.size() == 0) {
            var ov = new n1();
            ov.setForm(ox);
            this.spaces.add(ov);
        }
    };
    fH.prototype.getShortForm = function (ou) {
        if ("prefix" == ou) {
            return "p";
        }
        if ("infix" == ou) {
            return "i";
        }
        if ("postfix" == ou) {
            return "o";
        }
        return null;
    };
    fH.prototype.getForm = function () {
        if (this.spaces.size() == 0) {
            return null;
        }
        var ou = this.spaces.get(0);
        return this.getLongForm(ou.getForm());
    };
    fH.prototype.getFormStyle = function () {
        if (this.spaces.size() == 0) {
            return null;
        }
        return this.spaces.get(0);
    };
    fH.prototype.getLongForm = function (ou) {
        if ("p" == ou) {
            return "prefix";
        }
        if ("i" == ou) {
            return "infix";
        }
        if ("o" == ou) {
            return "postfix";
        }
        return null;
    };
    fH.prototype.setLspace = function (ow) {
        if (this.spaces.size() == 0) {
            var ou = new n1();
            this.spaces.add(ou);
        }
        for (var ov = 0; ov < this.spaces.size(); ov++) {
            var ou = this.spaces.get(ov);
            ou.setLspace(ow);
        }
    };
    fH.prototype.setRspace = function (ow) {
        if (this.spaces.size() == 0) {
            var ou = new n1();
            this.spaces.add(ou);
        }
        for (var ov = 0; ov < this.spaces.size(); ov++) {
            var ou = this.spaces.get(ov);
            ou.setRspace(ow);
        }
    };
    fH.prototype.setFenceString = function (ou) {
        this.fence = "true" == ou;
    };
    fH.prototype.setSeparatorString = function (ou) {
        this.separator = "true" == ou;
    };
    fH.prototype.setAccent = function (ow) {
        if (this.spaces.size() == 0) {
            var ou = new n1();
            this.spaces.add(ou);
        }
        for (var ov = 0; ov < this.spaces.size(); ov++) {
            var ou = this.spaces.get(ov);
            ou.setAccent("true" == ow);
        }
    };
    fH.prototype.setStretchy = function (ou) {
        if (this.spaces.size() == 0) {
            var ov = new n1();
            this.spaces.add(ov);
        }
        for (var ow = 0; ow < this.spaces.size(); ow++) {
            var ov = this.spaces.get(ow);
            ov.setStretchy("true" == ou);
        }
    };
    fH.prototype.setSymmetricString = function (ou) {
        this.symmetric = "true" == ou;
    };
    fH.prototype.setLargeopString = function (ou) {
        this.largeop = "true" == ou;
    };
    fH.prototype.setMovablelimitsString = function (ou) {
        this.movablelimits = "true" == ou;
    };
    fH.prototype.getOperator = function () {
        return this._operator;
    };
    fH.prototype.setOperator = function (ou) {
        this._operator = ou;
    };
    fH.prototype.getLspace = function () {
        var ou = this.getFormStyle();
        if (ou == null) {
            return 5;
        }
        return ou.getLspace();
    };
    fH.prototype.getRspace = function () {
        var ou = this.getFormStyle();
        if (ou == null) {
            return 5;
        }
        return ou.getRspace();
    };
    fH.prototype.isStretchy = function () {
        var ou = this.getFormStyle();
        if (ou == null) {
            return false;
        }
        return ou.isStretchy();
    };
    fH.prototype.getOperatorMaxInfo = function () {
        return this.operatorMaxInfo;
    };
    fH.prototype.setOperatorMaxInfo = function (ou) {
        this.operatorMaxInfo = ou;
    };

    function he() {
        this.errorColor = "#FF0000";
        this.scriptlevel = 0;
        this.displaystyle = true;
        this.scriptsizemultiplier = 0.65;
        this.mscriptsizemultiplier = 0.5;
        this.scriptminsize = 12;
        this.infixlinebreakstyle = "";
        this.decimalpoint = ".";
        this.accent = false;
        this.accentunder = false;
        this.align = "";
        this.alignmentscope = "";
        this.bevelled = false;
        this.charalign = "right";
        this.charspacing = "medium";
        this.close = ")";
        this.columnalign = "center";
        this.columnlines = "none";
        this.columnspacing = "0.8em";
        this.columnspan = 0;
        this.columnwidth = "";
        this.columnlinesthickness = "0.08em";
        this.crossout = "none";
        this.carrythickness = "medium";
        this.denomalign = "center";
        this.depth = "";
        this.dir;
        this.edge = "";
        this.equalcolumns = false;
        this.equalrows = false;
        this.fence = false;
        this.form;
        this.frame = "none";
        this.framespacing = "0.4em 0.5ex";
        this.framelinesthickness = "0.08em";
        this.groupalign = "";
        this.height = "";
        this.indentalign = "";
        this.indentalignfirst = "";
        this.indentalignlast = "";
        this.indentshift = "";
        this.indentshiftfirst = "";
        this.indentshiftlast = "";
        this.indenttarget = "";
        this.largeop = false;
        this.leftoverhang = "";
        this.length = 0;
        this.linebreak = "auto";
        this.linebreakmultchar = "";
        this.linebreakstyle = "";
        this.lineleading = "0.08em";
        this.linethickness = "medium";
        this.location = "n";
        this.longdivstyle = "";
        this.lquote = "&quot;";
        this.lspace = 0;
        this.mathsize = 40;
        this.mathvariant = "normal";
        this.maxsize = "";
        this.minlabelspacing = "0.8em";
        this.labelspacing = "200";
        this.minsize = "";
        this.movablelimits = false;
        this.mslinethickness = "medium";
        this.notation = "longdiv";
        this.numalign = "center";
        this.enclosethickness = "medium";
        this.encloseradius = "0.3em";
        this.open = "(";
        this.position = 0;
        this.rightoverhang = "";
        this.rowalign = "";
        this.rowlines = "none";
        this.rowspacing = "1.0ex";
        this.rowlinesthickness = "0.08em";
        this.mrowspacing = "0.25ex";
        this.rowspan = 0;
        this.rquote = "&quot;";
        this.rspace = 0;
        this.selection = 0;
        this.separator = false;
        this.separators = ",";
        this.shift = 0;
        this.side = "right";
        this.stackalign = "decimalpoint";
        this.stretchy = false;
        this.subscriptshift = "0";
        this.superscriptshift = "0";
        this.symmetric = false;
        this.valign = "";
        this.width = "";
        this.fractionLineCapMargin = "0.1em";
        this.fractionSpace = "0.1em";
        this.sqrtClosed = false;
        this.sqrtClosedLength = "0.25em";
        this.sqrtThickness = "100%";
        this.largeOpMultiplier = "150%";
        this.defaultPadding = 2;
        this.pixelsToMillimeterConversion = 37.79;
        this.cnPolarPres = "exp";
        this.cnENotationPres = "e";
        this.cnTrigArcDisplay = "text";
        this.convertContent = true;
    }
    he.prototype.getPixelsToMillimeterConversion = function () {
        return this.pixelsToMillimeterConversion;
    };
    he.prototype.setPixelsToMillimeterConversion = function (ou) {
        this.pixelsToMillimeterConversion = ou;
        m2.setPxCm(this.pixelsToMillimeterConversion);
    };
    he.prototype.getErrorColor = function () {
        return this.errorColor;
    };
    he.prototype.setErrorColor = function (ou) {
        this.errorColor = ou;
    };
    he.prototype.getScriptlevel = function () {
        return this.scriptlevel;
    };
    he.prototype.setScriptlevel = function (ou) {
        this.scriptlevel = ou;
    };
    he.prototype.isDisplaystyle = function () {
        return this.displaystyle;
    };
    he.prototype.getDisplaystyle = function () {
        return this.displaystyle;
    };
    he.prototype.setDisplaystyle = function (ou) {
        this.displaystyle = ou;
    };
    he.prototype.getScriptsizemultiplier = function () {
        return this.scriptsizemultiplier;
    };
    he.prototype.setScriptsizemultiplier = function (ou) {
        this.scriptsizemultiplier = ou;
    };
    he.prototype.getScriptminsize = function () {
        return this.scriptminsize;
    };
    he.prototype.setScriptminsize = function (ou) {
        this.scriptminsize = ou;
    };
    he.prototype.getInfixlinebreakstyle = function () {
        return this.infixlinebreakstyle;
    };
    he.prototype.setInfixlinebreakstyle = function (ou) {
        this.infixlinebreakstyle = ou;
    };
    he.prototype.getDecimalpoint = function () {
        return this.decimalpoint;
    };
    he.prototype.setDecimalpoint = function (ou) {
        this.decimalpoint = ou;
    };
    he.prototype.isAccent = function () {
        return this.accent;
    };
    he.prototype.setAccent = function (ou) {
        this.accent = ou;
    };
    he.prototype.isAccentunder = function () {
        return this.accentunder;
    };
    he.prototype.setAccentunder = function (ou) {
        this.accentunder = ou;
    };
    he.prototype.getAlign = function () {
        return this.align;
    };
    he.prototype.setAlign = function (ou) {
        this.align = ou;
    };
    he.prototype.getAlignmentscope = function () {
        return this.alignmentscope;
    };
    he.prototype.setAlignmentscope = function (ou) {
        this.alignmentscope = ou;
    };
    he.prototype.isBevelled = function () {
        return this.bevelled;
    };
    he.prototype.setBevelled = function (ou) {
        this.bevelled = ou;
    };
    he.prototype.getCharalign = function () {
        return this.charalign;
    };
    he.prototype.setCharalign = function (ou) {
        this.charalign = ou;
    };
    he.prototype.getCharspacing = function () {
        return this.charspacing;
    };
    he.prototype.setCharspacing = function (ou) {
        this.charspacing = ou;
    };
    he.prototype.getClose = function () {
        return this.close;
    };
    he.prototype.setClose = function (ou) {
        this.close = ou;
    };
    he.prototype.getColumnalign = function () {
        return this.columnalign;
    };
    he.prototype.setColumnalign = function (ou) {
        this.columnalign = ou;
    };
    he.prototype.getColumnlines = function () {
        return this.columnlines;
    };
    he.prototype.setColumnlines = function (ou) {
        this.columnlines = ou;
    };
    he.prototype.getColumnspacing = function () {
        return this.columnspacing;
    };
    he.prototype.setColumnspacing = function (ou) {
        this.columnspacing = ou;
    };
    he.prototype.getColumnspan = function () {
        return this.columnspan;
    };
    he.prototype.setColumnspan = function (ou) {
        this.columnspan = ou;
    };
    he.prototype.getColumnwidth = function () {
        return this.columnwidth;
    };
    he.prototype.setColumnwidth = function (ou) {
        this.columnwidth = ou;
    };
    he.prototype.getCrossout = function () {
        return this.crossout;
    };
    he.prototype.setCrossout = function (ou) {
        this.crossout = ou;
    };
    he.prototype.getDenomalign = function () {
        return this.denomalign;
    };
    he.prototype.setDenomalign = function (ou) {
        this.denomalign = ou;
    };
    he.prototype.getDepth = function () {
        return this.depth;
    };
    he.prototype.setDepth = function (ou) {
        this.depth = ou;
    };
    he.prototype.getDir = function () {
        return this.dir;
    };
    he.prototype.setDir = function (ou) {
        this.dir = ou;
    };
    he.prototype.getEdge = function () {
        return this.edge;
    };
    he.prototype.setEdge = function (ou) {
        this.edge = ou;
    };
    he.prototype.isEqualcolumns = function () {
        return this.equalcolumns;
    };
    he.prototype.setEqualcolumns = function (ou) {
        this.equalcolumns = ou;
    };
    he.prototype.isEqualrows = function () {
        return this.equalrows;
    };
    he.prototype.setEqualrows = function (ou) {
        this.equalrows = ou;
    };
    he.prototype.isFence = function () {
        return this.fence;
    };
    he.prototype.setFence = function (ou) {
        this.fence = ou;
    };
    he.prototype.getForm = function () {
        return this.form;
    };
    he.prototype.setForm = function (ou) {
        this.form = ou;
    };
    he.prototype.getFrame = function () {
        return this.frame;
    };
    he.prototype.setFrame = function (ou) {
        this.frame = ou;
    };
    he.prototype.getFramespacing = function () {
        return this.framespacing;
    };
    he.prototype.setFramespacing = function (ou) {
        this.framespacing = ou;
    };
    he.prototype.getGroupalign = function () {
        return this.groupalign;
    };
    he.prototype.setGroupalign = function (ou) {
        this.groupalign = ou;
    };
    he.prototype.getHeight = function () {
        return this.height;
    };
    he.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    he.prototype.getIndentalign = function () {
        return this.indentalign;
    };
    he.prototype.setIndentalign = function (ou) {
        this.indentalign = ou;
    };
    he.prototype.getIndentalignfirst = function () {
        return this.indentalignfirst;
    };
    he.prototype.setIndentalignfirst = function (ou) {
        this.indentalignfirst = ou;
    };
    he.prototype.getIndentalignlast = function () {
        return this.indentalignlast;
    };
    he.prototype.setIndentalignlast = function (ou) {
        this.indentalignlast = ou;
    };
    he.prototype.getIndentshift = function () {
        return this.indentshift;
    };
    he.prototype.setIndentshift = function (ou) {
        this.indentshift = ou;
    };
    he.prototype.getIndentshiftfirst = function () {
        return this.indentshiftfirst;
    };
    he.prototype.setIndentshiftfirst = function (ou) {
        this.indentshiftfirst = ou;
    };
    he.prototype.getIndentshiftlast = function () {
        return this.indentshiftlast;
    };
    he.prototype.setIndentshiftlast = function (ou) {
        this.indentshiftlast = ou;
    };
    he.prototype.getIndenttarget = function () {
        return this.indenttarget;
    };
    he.prototype.setIndenttarget = function (ou) {
        this.indenttarget = ou;
    };
    he.prototype.isLargeop = function () {
        return this.largeop;
    };
    he.prototype.setLargeop = function (ou) {
        this.largeop = ou;
    };
    he.prototype.getLeftoverhang = function () {
        return this.leftoverhang;
    };
    he.prototype.setLeftoverhang = function (ou) {
        this.leftoverhang = ou;
    };
    he.prototype.getLength = function () {
        return this.length;
    };
    he.prototype.setLength = function (ou) {
        this.length = ou;
    };
    he.prototype.getLinebreak = function () {
        return this.linebreak;
    };
    he.prototype.setLinebreak = function (ou) {
        this.linebreak = ou;
    };
    he.prototype.getLinebreakmultchar = function () {
        return this.linebreakmultchar;
    };
    he.prototype.setLinebreakmultchar = function (ou) {
        this.linebreakmultchar = ou;
    };
    he.prototype.getLinebreakstyle = function () {
        return this.linebreakstyle;
    };
    he.prototype.setLinebreakstyle = function (ou) {
        this.linebreakstyle = ou;
    };
    he.prototype.getLineleading = function () {
        return this.lineleading;
    };
    he.prototype.setLineleading = function (ou) {
        this.lineleading = ou;
    };
    he.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    he.prototype.setLinethickness = function (ou) {
        this.linethickness = ou;
    };
    he.prototype.getLocation = function () {
        return this.location;
    };
    he.prototype.setLocation = function (ou) {
        this.location = ou;
    };
    he.prototype.getLongdivstyle = function () {
        return this.longdivstyle;
    };
    he.prototype.setLongdivstyle = function (ou) {
        this.longdivstyle = ou;
    };
    he.prototype.getLquote = function () {
        return this.lquote;
    };
    he.prototype.setLquote = function (ou) {
        this.lquote = ou;
    };
    he.prototype.getLspace = function () {
        return this.lspace;
    };
    he.prototype.setLspace = function (ou) {
        this.lspace = ou;
    };
    he.prototype.getMathsize = function () {
        return this.mathsize;
    };
    he.prototype.setMathsize = function (ou) {
        this.mathsize = ou;
    };
    he.prototype.getMathvariant = function () {
        return this.mathvariant;
    };
    he.prototype.setMathvariant = function (ou) {
        this.mathvariant = ou;
    };
    he.prototype.getMaxsize = function () {
        return this.maxsize;
    };
    he.prototype.setMaxsize = function (ou) {
        this.maxsize = ou;
    };
    he.prototype.getMinlabelspacing = function () {
        return this.minlabelspacing;
    };
    he.prototype.setMinlabelspacing = function (ou) {
        this.minlabelspacing = ou;
    };
    he.prototype.getMinsize = function () {
        return this.minsize;
    };
    he.prototype.setMinsize = function (ou) {
        this.minsize = ou;
    };
    he.prototype.isMovablelimits = function () {
        return this.movablelimits;
    };
    he.prototype.setMovablelimits = function (ou) {
        this.movablelimits = ou;
    };
    he.prototype.getMslinethickness = function () {
        return this.mslinethickness;
    };
    he.prototype.setMslinethickness = function (ou) {
        this.mslinethickness = ou;
    };
    he.prototype.getNotation = function () {
        return this.notation;
    };
    he.prototype.setNotation = function (ou) {
        this.notation = ou;
    };
    he.prototype.getNumalign = function () {
        return this.numalign;
    };
    he.prototype.setNumalign = function (ou) {
        this.numalign = ou;
    };
    he.prototype.getOpen = function () {
        return this.open;
    };
    he.prototype.setOpen = function (ou) {
        this.open = ou;
    };
    he.prototype.getPosition = function () {
        return this.position;
    };
    he.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    he.prototype.getRightoverhang = function () {
        return this.rightoverhang;
    };
    he.prototype.setRightoverhang = function (ou) {
        this.rightoverhang = ou;
    };
    he.prototype.getRowalign = function () {
        return this.rowalign;
    };
    he.prototype.setRowalign = function (ou) {
        this.rowalign = ou;
    };
    he.prototype.getRowlines = function () {
        return this.rowlines;
    };
    he.prototype.setRowlines = function (ou) {
        this.rowlines = ou;
    };
    he.prototype.getRowspacing = function () {
        return this.rowspacing;
    };
    he.prototype.setRowspacing = function (ou) {
        this.rowspacing = ou;
    };
    he.prototype.getRowspan = function () {
        return this.rowspan;
    };
    he.prototype.setRowspan = function (ou) {
        this.rowspan = ou;
    };
    he.prototype.getRquote = function () {
        return this.rquote;
    };
    he.prototype.setRquote = function (ou) {
        this.rquote = ou;
    };
    he.prototype.getRspace = function () {
        return this.rspace;
    };
    he.prototype.setRspace = function (ou) {
        this.rspace = ou;
    };
    he.prototype.getSelection = function () {
        return this.selection;
    };
    he.prototype.setSelection = function (ou) {
        this.selection = ou;
    };
    he.prototype.isSeparator = function () {
        return this.separator;
    };
    he.prototype.setSeparator = function (ou) {
        this.separator = ou;
    };
    he.prototype.getSeparators = function () {
        return this.separators;
    };
    he.prototype.setSeparators = function (ou) {
        this.separators = ou;
    };
    he.prototype.getShift = function () {
        return this.shift;
    };
    he.prototype.setShift = function (ou) {
        this.shift = ou;
    };
    he.prototype.getSide = function () {
        return this.side;
    };
    he.prototype.setSide = function (ou) {
        this.side = ou;
    };
    he.prototype.getStackalign = function () {
        return this.stackalign;
    };
    he.prototype.setStackalign = function (ou) {
        this.stackalign = ou;
    };
    he.prototype.isStretchy = function () {
        return this.stretchy;
    };
    he.prototype.setStretchy = function (ou) {
        this.stretchy = ou;
    };
    he.prototype.getSubscriptshift = function () {
        return this.subscriptshift;
    };
    he.prototype.setSubscriptshift = function (ou) {
        this.subscriptshift = ou;
    };
    he.prototype.getSuperscriptshift = function () {
        return this.superscriptshift;
    };
    he.prototype.setSuperscriptshift = function (ou) {
        this.superscriptshift = ou;
    };
    he.prototype.isSymmetric = function () {
        return this.symmetric;
    };
    he.prototype.setSymmetric = function (ou) {
        this.symmetric = ou;
    };
    he.prototype.getValign = function () {
        return this.valign;
    };
    he.prototype.setValign = function (ou) {
        this.valign = ou;
    };
    he.prototype.getWidth = function () {
        return this.width;
    };
    he.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    he.prototype.getFractionLineCapMargin = function () {
        return this.fractionLineCapMargin;
    };
    he.prototype.setFractionLineCapMargin = function (ou) {
        this.fractionLineCapMargin = ou;
    };
    he.prototype.getFractionSpace = function () {
        return this.fractionSpace;
    };
    he.prototype.setFractionSpace = function (ou) {
        this.fractionSpace = ou;
    };
    he.prototype.isSqrtClosed = function () {
        return this.sqrtClosed;
    };
    he.prototype.setSqrtClosed = function (ou) {
        this.sqrtClosed = ou;
    };
    he.prototype.getSqrtClosedLength = function () {
        return this.sqrtClosedLength;
    };
    he.prototype.setSqrtClosedLength = function (ou) {
        this.sqrtClosedLength = ou;
    };
    he.prototype.getSqrtThickness = function () {
        return this.sqrtThickness;
    };
    he.prototype.setSqrtThickness = function (ou) {
        this.sqrtThickness = ou;
    };
    he.prototype.getLargeOpMultiplier = function () {
        return this.largeOpMultiplier;
    };
    he.prototype.setLargeOpMultiplier = function (ou) {
        this.largeOpMultiplier = ou;
    };
    he.prototype.getMrowspacing = function () {
        return this.mrowspacing;
    };
    he.prototype.setMrowspacing = function (ou) {
        this.mrowspacing = ou;
    };
    he.prototype.getMscriptsizemultiplier = function () {
        return this.mscriptsizemultiplier;
    };
    he.prototype.setMscriptsizemultiplier = function (ou) {
        this.mscriptsizemultiplier = ou;
    };
    he.prototype.getCarrythickness = function () {
        return this.carrythickness;
    };
    he.prototype.setCarrythickness = function (ou) {
        this.carrythickness = ou;
    };
    he.prototype.getEnclosethickness = function () {
        return this.enclosethickness;
    };
    he.prototype.setEnclosethickness = function (ou) {
        this.enclosethickness = ou;
    };
    he.prototype.getEncloseradius = function () {
        return this.encloseradius;
    };
    he.prototype.setEncloseradius = function (ou) {
        this.encloseradius = ou;
    };
    he.prototype.getLabelspacing = function () {
        return this.labelspacing;
    };
    he.prototype.setLabelspacing = function (ou) {
        this.labelspacing = ou;
    };
    he.prototype.getColumnlinesthickness = function () {
        return this.columnlinesthickness;
    };
    he.prototype.setColumnlinesthickness = function (ou) {
        this.columnlinesthickness = ou;
    };
    he.prototype.getRowlinesthickness = function () {
        return this.rowlinesthickness;
    };
    he.prototype.setRowlinesthickness = function (ou) {
        this.rowlinesthickness = ou;
    };
    he.prototype.getFramelinesthickness = function () {
        return this.framelinesthickness;
    };
    he.prototype.setFramelinesthickness = function (ou) {
        this.framelinesthickness = ou;
    };
    he.prototype.getCnPolarPres = function () {
        return this.cnPolarPres;
    };
    he.prototype.setCnPolarPres = function (ou) {
        this.cnPolarPres = this.cnPolarPres;
    };
    he.prototype.getCnENotationPres = function () {
        return this.cnENotationPres;
    };
    he.prototype.setCnENotationPres = function (ou) {
        this.cnENotationPres = this.cnENotationPres;
    };
    he.prototype.getCnTrigArcDisplay = function () {
        return this.cnTrigArcDisplay;
    };
    he.prototype.setCnTrigArcDisplay = function (ou) {
        this.cnTrigArcDisplay = this.cnTrigArcDisplay;
    };
    he.prototype.isConvertContent = function () {
        return this.convertContent;
    };
    he.prototype.setConvertContent = function (ou) {
        this.convertContent = ou;
    };
    he.prototype.getDefaultPadding = function () {
        return this.defaultPadding;
    };
    he.prototype.setDefaultPadding = function (ou) {
        this.defaultPadding = ou;
    };

    function eh() {
        this.scriptsizemultiplier = 0.583;
        this.superscriptPostion = "33%";
        this.subscriptPostion = "33%";
        this.dKF = he;
        this.dKF();
    }
    ga(eh, he);
    eh.prototype.getSuperscriptPostion = function () {
        return this.superscriptPostion;
    };
    eh.prototype.setSuperscriptPostion = function (ou) {
        this.superscriptPostion = ou;
    };
    eh.prototype.getScriptsizemultiplier = function () {
        return this.scriptsizemultiplier;
    };
    eh.prototype.setScriptsizemultiplier = function (ou) {
        this.scriptsizemultiplier = ou;
    };
    eh.prototype.getSubscriptPostion = function () {
        return this.subscriptPostion;
    };
    eh.prototype.setSubscriptPostion = function (ou) {
        this.subscriptPostion = ou;
    };

    function n() {
        this.superscriptPostion = "25%";
        this.subscriptPostion = "14%";
        this.dKF = he;
        this.dKF();
    }
    ga(n, he);
    n.prototype.getSuperscriptPostion = function () {
        return this.superscriptPostion;
    };
    n.prototype.setSuperscriptPostion = function (ou) {
        this.superscriptPostion = ou;
    };
    n.prototype.getSubscriptPostion = function () {
        return this.subscriptPostion;
    };
    n.prototype.setSubscriptPostion = function (ou) {
        this.subscriptPostion = ou;
    };

    function bt() {
        this.scriptsizemultiplier = 0.58;
        this.superscriptPostion = "33%";
        this.subscriptPostion = "33%";
        this.dKF = he;
        this.dKF();
    }
    ga(bt, he);
    bt.prototype.getSuperscriptPostion = function () {
        return this.superscriptPostion;
    };
    bt.prototype.setSuperscriptPostion = function (ou) {
        this.superscriptPostion = ou;
    };
    bt.prototype.getScriptsizemultiplier = function () {
        return this.scriptsizemultiplier;
    };
    bt.prototype.setScriptsizemultiplier = function (ou) {
        this.scriptsizemultiplier = ou;
    };
    bt.prototype.getSubscriptPostion = function () {
        return this.subscriptPostion;
    };
    bt.prototype.setSubscriptPostion = function (ou) {
        this.subscriptPostion = ou;
    };

    function be() {
        this.scriptsizemultiplier = 0.65;
        this.superscriptPostion = "35%";
        this.subscriptPostion = "14%";
        this.dKF = he;
        this.dKF();
    }
    ga(be, he);
    be.prototype.getSuperscriptPostion = function () {
        return this.superscriptPostion;
    };
    be.prototype.setSuperscriptPostion = function (ou) {
        this.superscriptPostion = ou;
    };
    be.prototype.getScriptsizemultiplier = function () {
        return this.scriptsizemultiplier;
    };
    be.prototype.setScriptsizemultiplier = function (ou) {
        this.scriptsizemultiplier = ou;
    };
    be.prototype.getSubscriptPostion = function () {
        return this.subscriptPostion;
    };
    be.prototype.setSubscriptPostion = function (ou) {
        this.subscriptPostion = ou;
    };

    function kd() {}

    function fC() {
        this.mathvariant = new kt();
        this.mathsize = 0;
        this.color;
        this.bgcolor;
        this.dir;
        this.displaystyle = true;
        this.scriptlevel = 0;
        this.alignmentScope = false;
        this.closed = false;
        this.drawBaseline = false;
        this.drawAxisline = false;
        this.drawSuperscriptline = false;
        this.drawMaxwidthline = false;
    }
    fC.prototype.getCopy = function () {
        var ou = new fC();
        ou.getMathvariant().setMathvariant(this.mathvariant.getMathvariant());
        ou.getMathvariant().setBold(this.mathvariant.isBold());
        ou.getMathvariant().setItalic(this.mathvariant.isItalic());
        ou.getMathvariant().setClientFont(this.mathvariant.isClientFont());
        ou.setMathsize(this.mathsize);
        ou.setColor(this.color);
        ou.setBgcolor(this.bgcolor);
        ou.setDir(this.dir);
        ou.setDisplaystyle(this.displaystyle);
        ou.setScriptlevel(this.scriptlevel);
        ou.setDrawAxisline(this.drawAxisline);
        ou.setDrawBaseline(this.drawBaseline);
        ou.setDrawMaxwidthline(this.drawMaxwidthline);
        ou.setDrawSuperscriptline(this.drawSuperscriptline);
        return ou;
    };
    fC.prototype.getMathvariant = function () {
        return this.mathvariant;
    };
    fC.prototype.getMathML_mathvariant = function () {
        return this.mathvariant;
    };
    fC.prototype.setMathvariant = function (ou) {
        this.mathvariant = ou;
    };
    fC.prototype.setMathML_mathvariant = function (ou) {
        this.setMathvariant(ou);
    };
    fC.prototype.setDefaultValues = function (ou) {
        var ov = new kt();
        ov.setMathvariant(ou.getMathvariant());
        this.mathvariant = ov;
        this.mathsize = ou.getMathsize();
        this.color = "black";
    };
    fC.prototype.setBold = function (ou) {
        this.mathvariant.setBold(ou);
    };
    fC.prototype.setItalic = function (ou) {
        this.mathvariant.setItalic(ou);
    };
    fC.prototype.getMathsize = function () {
        return this.mathsize;
    };
    fC.prototype.getMathML_mathsize = function () {
        return this.mathsize;
    };
    fC.prototype.setMathsize = function (ou) {
        this.mathsize = ou;
    };
    fC.prototype.setMathML_mathsize = function (ou) {
        this.mathsize = ou;
    };
    fC.prototype.getColor = function () {
        return this.color;
    };
    fC.prototype.getMathML_color = function () {
        return this.color;
    };
    fC.prototype.setColor = function (ou) {
        this.color = ou;
    };
    fC.prototype.setMathML_color = function (ou) {
        this.color = ou;
    };
    fC.prototype.getBgcolor = function () {
        return this.bgcolor;
    };
    fC.prototype.getMathML_bgcolor = function () {
        return this.bgcolor;
    };
    fC.prototype.setBgcolor = function (ou) {
        this.bgcolor = ou;
    };
    fC.prototype.setMathML_bgcolor = function (ou) {
        this.bgcolor = ou;
    };
    fC.prototype.isDrawBaseline = function () {
        return this.drawBaseline;
    };
    fC.prototype.setDrawBaseline = function (ou) {
        this.drawBaseline = ou;
    };
    fC.prototype.isDrawAxisline = function () {
        return this.drawAxisline;
    };
    fC.prototype.setDrawAxisline = function (ou) {
        this.drawAxisline = ou;
    };
    fC.prototype.isDrawMaxwidthline = function () {
        return this.drawMaxwidthline;
    };
    fC.prototype.setDrawMaxwidthline = function (ou) {
        this.drawMaxwidthline = ou;
    };
    fC.prototype.isDrawSuperscriptline = function () {
        return this.drawSuperscriptline;
    };
    fC.prototype.setDrawSuperscriptline = function (ou) {
        this.drawSuperscriptline = ou;
    };
    fC.prototype.getDir = function () {
        return this.dir;
    };
    fC.prototype.setDir = function (ou) {
        this.dir = ou;
    };
    fC.prototype.isDisplaystyle = function () {
        return this.displaystyle;
    };
    fC.prototype.setDisplaystyle = function (ou) {
        this.displaystyle = ou;
    };
    fC.prototype.getScriptlevel = function () {
        return this.scriptlevel;
    };
    fC.prototype.setScriptlevel = function (ou) {
        this.scriptlevel = ou;
    };
    fC.prototype.isAlignmentScope = function () {
        return this.alignmentScope;
    };
    fC.prototype.setAlignmentScope = function (ou) {
        this.alignmentScope = ou;
    };
    fC.prototype.isClosed = function () {
        return this.closed;
    };
    fC.prototype.setClosed = function (ou) {
        this.closed = ou;
    };
    fC.prototype.isItalic = function () {
        return this.mathvariant.isItalic();
    };
    fC.prototype.isBold = function () {
        return this.mathvariant.isBold();
    };
    fC.isBold = function (ou) {
        if (ou == null) {
            return false;
        }
        if (ou.toLowerCase().indexOf("bold") > -1) {
            return true;
        }
        return false;
    };
    fC.isItalic = function (ou) {
        if (ou == null) {
            return false;
        }
        if (ou.toLowerCase().indexOf("italic") > -1) {
            return true;
        }
        return false;
    };

    function dd() {}
    dd.getBase64Value = function () {
        return bK;
    };

    function iH(ov, ou) {
        this.level = 0;
        this.prettyFormat = true;
        this.drawParanteses = false;
        this.drawAcolade = false;
        this.level = ov;
        this.prettyFormat = ou;
    }
    iH.prototype.getLevel = function () {
        return this.level;
    };
    iH.prototype.setLevel = function (ou) {
        this.level = ou;
    };
    iH.prototype.isPrettyFormat = function () {
        return this.prettyFormat;
    };
    iH.prototype.setPrettyFormat = function (ou) {
        this.prettyFormat = ou;
    };
    iH.prototype.setPrettyFormat2 = function (ou) {
        return new iH(this.level, ou);
    };
    iH.prototype.isDrawParanteses = function () {
        return this.drawParanteses;
    };
    iH.prototype.setDrawParanteses = function (ou) {
        this.drawParanteses = ou;
    };
    iH.prototype.isDrawAcolade = function () {
        return this.drawAcolade;
    };
    iH.prototype.setDrawAcolade = function (ou) {
        this.drawAcolade = ou;
    };
    iH.prototype.incSetLevel = function (ou) {
        return new iH(this.level + ou, this.prettyFormat);
    };
    iH.prototype.incSetLevelAndFence = function (ov, ow) {
        var ou = new iH(this.level + ov, this.prettyFormat);
        ou.setDrawParanteses(ow);
        return ou;
    };
    iH.prototype.incSetLevelAndAcolade = function (ov, ow) {
        var ou = new iH(this.level + ov, this.prettyFormat);
        ou.setDrawAcolade(ow);
        return ou;
    };

    function mS() {
        this.left;
        this.right;
        this.bottom;
        this.top;
    }
    mS.prototype.getLeft = function () {
        return this.left;
    };
    mS.prototype.setLeft = function (ou) {
        this.left = ou;
    };
    mS.prototype.getRight = function () {
        return this.right;
    };
    mS.prototype.setRight = function (ou) {
        this.right = ou;
    };
    mS.prototype.getBottom = function () {
        return this.bottom;
    };
    mS.prototype.setBottom = function (ou) {
        this.bottom = ou;
    };
    mS.prototype.getTop = function () {
        return this.top;
    };
    mS.prototype.setTop = function (ou) {
        this.top = ou;
    };

    function c9() {}
    c9.getSuppDim = function (ou) {
        return il.getAttribute(ou);
    };
    c9.addSuppDim = function (ov, ou, ox) {
        var ow = new mS();
        ow.setBottom(ou);
        ow.setTop(ox);
        il.setAttribute(ov, ow);
    };
    c9.getAxisDim = function (ou) {
        return bN.getAttribute(ou);
    };
    c9.addAxisDim = function (ov, ou, ox) {
        var ow = new mS();
        ow.setBottom(ou);
        ow.setTop(ox);
        bN.setAttribute(ov, ow);
    };

    function kH(ov, ou) {
        this.code;
        this.name;
        this.rgb = 0;
        this.r = 0;
        this.g = 0;
        this.b = 0;
        this.code = ov;
        this.name = ou;
        if (this.code != null) {
            if (this.code.indexOf("#") == 0) {
                this.code = this.code.substring(1, this.code.length);
            }
            if (this.code.length > 5) {
                this.r = lv.getIntFromHexCode(this.code.substring(0, 2));
                this.g = lv.getIntFromHexCode(this.code.substring(2, 4));
                this.b = lv.getIntFromHexCode(this.code.substring(4, 6));
            } else {
                if (this.code.length > 2) {
                    this.r = lv.getIntFromHexCode(
                        this.code.substring(0, 1) + this.code.substring(0, 1),
                    );
                    this.g = lv.getIntFromHexCode(
                        this.code.substring(1, 2) + this.code.substring(1, 2),
                    );
                    this.b = lv.getIntFromHexCode(
                        this.code.substring(2, 3) + this.code.substring(2, 3),
                    );
                }
            }
        }
        this.rgb = this.b + this.g * 256 + this.r * 65536;
    }
    kH.prototype.getName = function () {
        return this.name;
    };
    kH.prototype.setName = function (ou) {
        this.name = ou;
    };
    kH.prototype.getR = function () {
        return this.r;
    };
    kH.prototype.getG = function () {
        return this.g;
    };
    kH.prototype.getB = function () {
        return this.b;
    };
    kH.prototype.getRgb = function () {
        return this.rgb;
    };
    kH.prototype.getHex = function () {
        return lv.getHex(this.getR(), this.getG(), this.getB());
    };

    function gn() {}
    gn.resetTime = function () {
        iA = -1;
        console.log("---");
    };
    gn.displayMsg = function (ox) {
        var ow = new Date().getTime();
        if (iA == -1) {
            iA = ow;
            eG = ow;
        }
        var ov = ow - iA;
        var ou = ow - eG;
        console.log(ox + " time:" + ou + " ms, total time:" + ov + " ms");
        eG = ow;
    };
    gn.displayErr = function (ou) {
        console.log(ou);
    };
    gn.displayErr = function (ou) {
        console.log(ou);
    };

    function b8() {}
    b8.cleanUpOmmlXML = function (ou) {
        b8.cleanUpEmptyOmmlXML(ou);
    };
    b8.cleanUpEmptyOmmlXML = function (ow) {
        var ou = ow.localName();
        for (var ov = 0; ov < ow.getChildren().length; ov++) {
            var oy = ow.getChildren()[ov];
            if (oy.localName() == null && !(ou == "t")) {
                var ox = oy.toString();
                ox = W.trim(ox);
                if (ox.length == 0) {
                    mW.xmlDeleteChild(ow, oy.getChildIndex());
                    ov--;
                }
            } else {
                b8.cleanUpEmptyOmmlXML(oy);
            }
        }
    };
    b8.removeNamespace = function (ou) {
        while (ou.indexOf(" xmlns:") > -1) {
            var ov = ou.indexOf(" xmlns:");
            var ox = ou.indexOf("http", ov);
            var oy = ov;
            var ow = ou.indexOf(" ", ox);
            if (ow > -1) {
                oy = ow;
            }
            ow = ou.indexOf(">", ox);
            if (ow > -1 && ow < oy) {
                oy = ow;
            }
            ou = ou.substring(0, ov) + ou.substring(oy, ou.length);
        }
        ou = b8.replaceInTag(ou);
        return ou;
    };
    b8.replaceInTag = function (ov) {
        var ow = ov.indexOf("<");
        while (ow > -1) {
            var oz = ov.indexOf(">", ow);
            if (oz == -1) {
                break;
            }
            var ou = ov.substring(ow, oz);
            var ox = 1;
            if (ou.indexOf("</") == 0) {
                ox = 2;
            }
            if (ou.indexOf(":") > -1) {
                var oy = ou.substring(ox, ou.indexOf(":"));
                ou = W.replace(ou, oy + ":", "");
                ou = b8.replaceOtherNameSpace(ou);
                ov = ov.substring(0, ow) + ou + ov.substring(oz, ov.length);
            }
            ow = ow + ou.length;
            ow = ov.indexOf("<", ow);
        }
        return ov;
    };
    b8.replaceOtherNameSpace = function (ou) {
        if (ou.indexOf(":") == -1) {
            return ou;
        }
        var ov = ou.indexOf(":");
        var ow = ou.lastIndexOf(" ", ov);
        if (ow == -1) {
            return ou;
        }
        ou = ou.substring(0, ow + 1) + ou.substring(ov + 1, ou.length);
        return b8.replaceOtherNameSpace(ou);
    };
    b8.getNameFromTag = function (ov) {
        if (ov == null) {
            return null;
        }
        ov = W.trim(ov);
        var ou = ov.length;
        var oy = ov.indexOf(" ");
        var ox = ov.indexOf(">");
        var ow = ov.indexOf("/>");
        if (oy > -1) {
            ou = Math.min(ou, oy);
        }
        if (ox > -1) {
            ou = Math.min(ou, ox);
        }
        if (ow > -1) {
            ou = Math.min(ou, ow);
        }
        return ov.substring(1, ou);
    };
    b8.getNumberOfChildren = function (ou) {
        var ox = ou.getChildren().size();
        if (ou instanceof bW) {
            ox = 0;
            var ow = ou.getChildren();
            for (var ov = 0; ov < ow.size(); ov++) {
                var oy = ow.get(ov);
                if (oy.getChildren() != null) {
                    ox = ox + oy.getChildren().size();
                }
            }
        }
        return ox;
    };

    function kt() {
        this.mathvariant = "normal";
        this.bold = false;
        this.italic = false;
        this.clientFont = false;
        this.googleFont = false;
    }
    kt.prototype.getMathvariant = function () {
        return this.mathvariant;
    };
    kt.prototype.setMathvariant = function (ou) {
        if (ou == null) {
            return;
        }
        this.mathvariant = ou;
        if (this.mathvariant.indexOf("google:") == 0) {
            this.googleFont = true;
            this.clientFont = true;
        } else {
            if (this.mathvariant.indexOf("local:") == 0) {
                this.clientFont = true;
            } else {
                this.mathvariant = ou.toLowerCase();
            }
        }
        if (this.mathvariant.indexOf("italic") > -1) {
            this.italic = true;
        }
        if (this.mathvariant.indexOf("bold") > -1) {
            this.bold = true;
        }
    };
    kt.prototype.isBold = function () {
        return this.bold;
    };
    kt.prototype.setBold = function (ou) {
        this.bold = ou;
        this.mathvariant = kt.getBold(this.mathvariant, ou);
    };
    kt.prototype.isItalic = function () {
        return this.italic;
    };
    kt.prototype.setItalic = function (ou) {
        this.italic = ou;
        this.mathvariant = kt.getItalic(this.mathvariant, ou);
    };
    kt.prototype.isClientFont = function () {
        return this.clientFont;
    };
    kt.prototype.setClientFont = function (ou) {
        this.clientFont = ou;
    };
    kt.prototype.isGoogleFont = function () {
        return this.googleFont;
    };
    kt.prototype.setGoogleFont = function (ou) {
        this.googleFont = ou;
    };
    kt.prototype.getCopy = function () {
        var ou = new kt();
        ou.setBold(this.bold);
        ou.setItalic(this.italic);
        ou.setClientFont(this.clientFont);
        ou.setMathvariant(this.mathvariant);
        return ou;
    };
    kt.prototype.getFamily = function () {
        if (this.isClientFont()) {
            return this.getClientFamily();
        }
        if (
            this.mathvariant == null ||
            this.mathvariant == "normal" ||
            this.mathvariant == "italic" ||
            this.mathvariant == "bold" ||
            this.mathvariant == "bold-italic"
        ) {
            return "normal";
        } else {
            if (this.mathvariant.indexOf("double-struck") > -1) {
                return "double-struck";
            } else {
                if (this.mathvariant.indexOf("fraktur") > -1) {
                    return "fraktur";
                } else {
                    if (this.mathvariant.indexOf("script") > -1) {
                        return "script";
                    } else {
                        if (this.mathvariant.indexOf("sans-serif") > -1) {
                            return "sans-serif";
                        } else {
                            if (this.mathvariant.indexOf("monospace") > -1) {
                                return "monospace";
                            }
                        }
                    }
                }
            }
        }
        return "normal";
    };
    kt.prototype.getClientFamily = function () {
        if (this.mathvariant.indexOf("-") > -1) {
            return this.mathvariant.substring(0, this.mathvariant.indexOf("-"));
        }
        return this.mathvariant;
    };
    kt.getItalic = function (ov, ou) {
        if (iw.indexOf(";" + ov + ";") == -1) {
            return kt.getClientItalic(ov, ou);
        }
        if (ou) {
            if (ov == null || ov == "normal") {
                return "italic";
            } else {
                if (
                    ov == "italic" ||
                    ov == "bold-italic" ||
                    ov == "double-struck-italic" ||
                    ov == "double-struck-bold-italic" ||
                    ov == "fraktur" ||
                    ov == "bold-fraktur" ||
                    ov == "script" ||
                    ov == "bold-script" ||
                    ov == "sans-serif-italic" ||
                    ov == "sans-serif-bold-italic" ||
                    ov == "monospace"
                ) {
                    return ov;
                } else {
                    if (ov == "bold-double-struck") {
                        return "double-struck-bold-italic";
                    } else {
                        if (ov == "bold-sans-serif") {
                            return "sans-serif-bold-italic";
                        }
                    }
                }
            }
            return ov + "-italic";
        } else {
            if (ov == null || ov == "italic") {
                return "normal";
            } else {
                if (ov == "bold-italic") {
                    return "bold";
                } else {
                    if (
                        ov == "normal" ||
                        ov == "bold" ||
                        ov == "double-struck" ||
                        ov == "bold-double-struck" ||
                        ov == "fraktur" ||
                        ov == "bold-fraktur" ||
                        ov == "script" ||
                        ov == "bold-script" ||
                        ov == "sans-serif" ||
                        ov == "bold-sans-serif" ||
                        ov == "monospace"
                    ) {
                        return ov;
                    } else {
                        if (ov == "double-struck-bold-italic") {
                            return "bold-double-struck";
                        } else {
                            if (ov == "sans-serif-bold-italic") {
                                return "bold-sans-serif";
                            } else {
                                if (ov.indexOf("-italic") > -1) {
                                    return ov.substring(
                                        0,
                                        ov.indexOf("-italic"),
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
        return ov;
    };
    kt.getClientItalic = function (ow, ou) {
        if (ou) {
            if (ow == null) {
                return "italic";
            } else {
                if (ow.indexOf("-italic") > -1) {
                    return ow;
                }
            }
            ow = ow + "-italic";
        } else {
            if (ow == null || ow == "italic") {
                return "normal";
            } else {
                if (ow.indexOf("-italic") > -1) {
                    var ov = ow.indexOf("-italic");
                    ow = ow.substring(0, ov) + ow.substring(ov + 7);
                }
            }
        }
        return ow;
    };
    kt.getBold = function (ov, ou) {
        if (iw.indexOf(";" + ov + ";") == -1) {
            return kt.getClientBold(ov, ou);
        }
        if (ou) {
            if (ov == null || ov == "normal") {
                return "bold";
            } else {
                if (
                    ov == "bold" ||
                    ov == "bold-italic" ||
                    ov == "bold-double-struck" ||
                    ov == "double-struck-bold-italic" ||
                    ov == "bold-fraktur" ||
                    ov == "bold-script" ||
                    ov == "sans-serif-bold-italic" ||
                    ov == "monospace"
                ) {
                    return ov;
                } else {
                    if (ov == "double-struck-italic") {
                        return "double-struck-bold-italic";
                    } else {
                        if (ov == "sans-serif-italic") {
                            return "sans-serif-bold-italic";
                        }
                    }
                }
            }
            return "bold-" + ov;
        } else {
            if (ov == null || ov == "bold") {
                return "normal";
            } else {
                if (ov == "bold-italic") {
                    return "italic";
                } else {
                    if (
                        ov == "normal" ||
                        ov == "italic" ||
                        ov == "double-struck" ||
                        ov == "double-struck-italic" ||
                        ov == "fraktur" ||
                        ov == "script" ||
                        ov == "sans-serif" ||
                        ov == "sans-serif-italic" ||
                        ov == "monospace"
                    ) {
                        return ov;
                    } else {
                        if (ov == "double-struck-bold-italic") {
                            return "double-struck-italic";
                        } else {
                            if (ov == "sans-serif-bold-italic") {
                                return "sans-serif-italic";
                            } else {
                                if (ov.indexOf("bold-") == 0) {
                                    return ov.substring(5, ov.length);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ov;
    };
    kt.getClientBold = function (ow, ou) {
        if (ou) {
            if (ow == null) {
                return "bold";
            } else {
                if (ow.indexOf("-bold") > -1) {
                    return ow;
                }
            }
            ow = ow + "-bold";
        } else {
            if (ow == null || ow == "bold") {
                return "normal";
            } else {
                if (ow.indexOf("-bold") > -1) {
                    var ov = ow.indexOf("-bold");
                    ow = ow.substring(0, ov) + ow.substring(ov + 5);
                }
            }
        }
        return ow;
    };
    kt.prototype.getDefault = function () {
        if (this.isClientFont()) {
            return this;
        }
        if (this.mathvariant.indexOf("script") > -1) {
            return kt.getMathvariantBean("italic", false, true, false);
        } else {
            if (this.mathvariant.indexOf("bold-script") > -1) {
                return kt.getMathvariantBean("bold-italic", true, true, false);
            } else {
                if (this.mathvariant == "bold-italic") {
                    return kt.getMathvariantBean("bold", true, false, false);
                } else {
                    if (this.mathvariant.indexOf("-bold-italic") > -1) {
                        return kt.getMathvariantBean(
                            "bold-italic",
                            true,
                            true,
                            false,
                        );
                    } else {
                        if (this.mathvariant.indexOf("bold-") > -1) {
                            return kt.getMathvariantBean(
                                "bold",
                                true,
                                false,
                                false,
                            );
                        } else {
                            if (this.mathvariant.indexOf("-italic") > -1) {
                                return kt.getMathvariantBean(
                                    "italic",
                                    false,
                                    true,
                                    false,
                                );
                            }
                        }
                    }
                }
            }
        }
        return kt.getMathvariantBean("normal", false, false, false);
    };
    kt.getMathvariantBean = function (ow, ov, ox, ou) {
        var oy = new kt();
        oy.setMathvariant(ow);
        oy.setBold(ov);
        oy.setItalic(ox);
        oy.setClientFont(ou);
        return oy;
    };
    kt.hasBold = function (ou) {
        if (ou == null) {
            return true;
        }
        ou = kt.getItalic(ou, false);
        ou = kt.getBold(ou, false);
        if (ou == "monospace") {
            return false;
        }
        return true;
    };
    kt.hasItalic = function (ou) {
        if (ou == null) {
            return true;
        }
        ou = kt.getItalic(ou, false);
        ou = kt.getBold(ou, false);
        if (ou == "monospace") {
            return false;
        }
        if (ou == "fraktur") {
            return false;
        }
        if (ou == "script") {
            return false;
        }
        return true;
    };

    function lF() {}
    lF.getRounded = function (ov, ou) {
        var ow = ov;
        if (ov > 1) {
            while (true) {
                ow = ow * 10;
                if (ow > 1) {
                    break;
                }
                ou = ou + 1;
            }
            ov = ov.toFixed(ou);
            return ov;
        } else {
            while (true) {
                ow = ow / 10;
                if (ow < 1) {
                    break;
                }
                ou = ou + 1;
            }
            ov = ov.toFixed(ou);
            return ov;
        }
    };
    lF.getDoubleValueWithDecimalsRounding = function (ov, ou) {
        ov = ov.toFixed(ou);
        return ov + "";
    };
    lF.getDoubleValueWithDecimalsNoRounding = function (ow, ov) {
        ow = ow.toFixed(ov + 1);
        var ou = ow + "";
        if (ov > 0) {
            ou = ou.substring(0, ou.length - 1);
        } else {
            if (ov == 0) {
                ou = ou.substring(0, ou.length - 2);
            }
        }
        return ou;
    };

    function W() {}
    W.trimLeft = function (ou) {
        if (ou == "") {
            return "";
        }
        while (true) {
            if (ou.length == 0) {
                return "";
            }
            var ov = ou.charCodeAt(0);
            if (ov < 33) {
            } else {
                break;
            }
            ou = ou.substring(1, ou.length);
        }
        return ou;
    };
    W.trimRight = function (ou) {
        if (ou == "") {
            return "";
        }
        while (true) {
            var ov = ou.charCodeAt(ou.length - 1);
            if (ov < 33) {
            } else {
                break;
            }
            ou = ou.substring(0, ou.length - 1);
        }
        return ou;
    };
    W.trim = function (ou) {
        if (ou == null) {
            return null;
        }
        return W.trimRight(W.trimLeft(ou));
    };
    W.replace = function (ov, oy, ox) {
        var ow = -1;
        while (ov.indexOf(oy, ow) != -1) {
            var ou = ov.indexOf(oy, ow);
            ov =
                ov.substring(0, ou) +
                ox +
                ov.substring(ou + oy.length, ov.length);
            ow = ou + ox.length;
        }
        return ov;
    };
    W.replaceOnce = function (ov, oy, ox) {
        var ow = -1;
        if (ov.indexOf(oy, ow) != -1) {
            var ou = ov.indexOf(oy, ow);
            ov =
                ov.substring(0, ou) +
                ox +
                ov.substring(ou + oy.length, ov.length);
            ow = ou + ox.length;
        }
        return ov;
    };
    W.replaceFirstChar = function (ov, ow, oy, ox) {
        if (ov.indexOf(oy, ow) != -1) {
            var ou = ov.indexOf(oy, ow);
            ov =
                ov.substring(0, ou) +
                ox +
                ov.substring(ou + oy.length, ov.length);
            ow = ou + ox.length;
        }
        return ov;
    };
    W.isUndercase = function (ov) {
        for (var ou = 0; ou < ov.length; ou++) {
            var ow = ov.charAt(ou) + "";
            if (!W.isAZ09az(ow)) {
                return true;
            }
            if (ow == "g" || ow == "j" || ow == "p" || ow == "q" || ow == "y") {
                return true;
            }
        }
        return false;
    };
    W.isAZ09az = function (ou) {
        if (W.is09(ou) || W.isAZ(ou) || W.isaz(ou)) {
            return true;
        }
        return false;
    };
    W.is09 = function (ov) {
        var ou = ov.charCodeAt(0);
        if (ou >= 48 && ou <= 57) {
            return true;
        }
        return false;
    };
    W.isAZ = function (ov) {
        var ou = ov.charCodeAt(0);
        if (ou >= 65 && ou <= 90) {
            return true;
        }
        return false;
    };
    W.isaz = function (ov) {
        var ou = ov.charCodeAt(0);
        if (ou >= 97 && ou <= 122) {
            return true;
        }
        return false;
    };
    W.deleteText = function (ox, ow, ou) {
        var ov = ox.indexOf(ow);
        while (ov > -1) {
            var oy = ox.indexOf(ou, ov);
            if (oy == -1) {
                break;
            }
            ox = ox.substring(0, ov) + ox.substring(oy + ou.length, ox.length);
            ov = ox.indexOf(ow);
        }
        return ox;
    };
    W.xmlescape = function (ov) {
        for (var ou = 0; ou < ov.length; ou++) {
            var ow = ov.charAt(ou);
            if (ow == "<") {
                ov =
                    ov.substring(0, ou) +
                    "&lt;" +
                    ov.substring(ou + 1, ov.length);
                ou = ou + 3;
            } else {
                if (ow == ">") {
                    ov =
                        ov.substring(0, ou) +
                        "&gt;" +
                        ov.substring(ou + 1, ov.length);
                    ou = ou + 3;
                }
            }
        }
        return ov;
    };
    W.changeA0 = function (ov) {
        for (var ou = 0; ou < ov.length; ou++) {
            var ow = ov.charAt(ou);
            if (ow == 160) {
                ov =
                    ov.substring(0, ou) + " " + ov.substring(ou + 1, ov.length);
            }
        }
        return ov;
    };
    W.preserveSpace = function (ov) {
        for (var ou = 0; ou < ov.length; ou++) {
            var ow = ov.charAt(ou);
            if (ow == " ") {
                ov =
                    ov.substring(0, ou) +
                    "&nbsp;" +
                    ov.substring(ou + 1, ov.length);
                ou = ou + 5;
            } else {
                break;
            }
        }
        for (var ou = ov.length - 1; ou >= 0; ou--) {
            var ow = ov.charAt(ou);
            if (ow == " ") {
                ov =
                    ov.substring(0, ou) +
                    "&nbsp;" +
                    ov.substring(ou + 1, ov.length);
                ou = ou - 5;
            } else {
                break;
            }
        }
        return ov;
    };
    W.addTabs = function (ov) {
        if (!ov.isPrettyFormat()) {
            return "";
        }
        var ow = new fq("");
        for (var ou = 0; ou < ov.getLevel(); ou++) {
            ow.append("    ");
        }
        return ow.toString();
    };
    W.addNewLine = function (ov, ou) {
        if (!ou.isPrettyFormat()) {
            return ov;
        }
        return ov + "\n";
    };
    W.deleteAttribute = function (ow, ox) {
        var ov = ow.substring(0, ow.indexOf(">"));
        var ou = ow.substring(ow.indexOf(">"), ow.length);
        if (ov.indexOf(" " + ox + "=") > -1) {
            var oz = ov.indexOf(" " + ox + "=");
            var oy = ov.indexOf('"', oz + ox.length + 3);
            ov = ov.substring(0, oz) + ov.substring(oy + 1, ov.length);
        }
        return ov + ou;
    };

    function eV() {
        this.listChars = new fM();
        this.unicodeValS;
        this.unicodeVal;
        this.surrogate = false;
        this.combiningChar = false;
    }
    eV.prototype.addCharFromInt = function (ou) {
        var ov = lv.getHexCodeFromInt(ou);
        this.listChars.add(ov);
        this.unicodeValS = ov;
        this.unicodeVal = ou;
    };
    eV.prototype.addOverFFFF = function (ou) {
        var ow = (ou - 65536) / 1024 + 55296;
        var ov = ((ou - 65536) % 1024) + 56320;
        this.listChars.add(lv.getHexCodeFromInt(ow));
        this.listChars.add(lv.getHexCodeFromInt(ov));
        this.surrogate = true;
    };
    eV.prototype.removeLastChar = function () {
        this.listChars.remove(this.listChars.size() - 1);
    };
    eV.prototype.close = function () {
        if (this.surrogate && this.listChars.size() == 2) {
            var ox = this.listChars.get(0);
            var ou = this.listChars.get(1);
            var oA = lv.getIntFromHexCode(ox);
            var oz = lv.getIntFromHexCode(ou);
            this.unicodeVal = (oA - 55296) * 1024 + oz - 56320 + 65536;
            this.unicodeValS = lv.getHexCodeFromInt(this.unicodeVal);
        }
        if (this.combiningChar) {
            var ow = lv.normalize(this.toString());
            this.listChars.clear();
            for (var ov = 0; ov < ow.length; ov++) {
                var oy = ow.codePointAt(ov);
                this.addCharFromInt(oy);
            }
            this.unicodeVal = ow.codePointAt(0);
            this.unicodeValS = lv.getHexCodeFromInt(this.unicodeVal);
        }
    };
    eV.prototype.isSurrogate = function () {
        return this.surrogate;
    };
    eV.prototype.setSurrogate = function (ou) {
        this.surrogate = ou;
    };
    eV.prototype.hasCombiningChar = function () {
        return this.combiningChar;
    };
    eV.prototype.setHasCombiningChar = function (ou) {
        this.combiningChar = ou;
    };
    eV.prototype.toString = function () {
        var ow = "";
        for (var ov = 0; ov < this.listChars.size(); ov++) {
            var ou = this.listChars.get(ov);
            ow = ow + lv.getCharFromHexCode(ou);
        }
        return ow;
    };
    eV.prototype.getUnicodeInt = function () {
        return this.unicodeVal;
    };
    eV.prototype.getUnicode = function () {
        return this.unicodeValS.toUpperCase();
    };
    eV.isSurrogateCharacter = function (ou) {
        if (ou >= 55296 && ou <= 57343) {
            return true;
        }
        return false;
    };
    eV.isCombiningCharacter = function (ou) {
        if (ou >= 768 && ou <= 879) {
            return true;
        }
        if (ou >= 1155 && ou <= 1161) {
            return true;
        }
        if (ou >= 2027 && ou <= 2035) {
            return true;
        }
        if (ou >= 4959 && ou <= 4959) {
            return true;
        }
        if (ou >= 6783 && ou <= 6783) {
            return true;
        }
        if (ou >= 7019 && ou <= 7027) {
            return true;
        }
        if (ou >= 7616 && ou <= 7654) {
            return true;
        }
        if (ou >= 7677 && ou <= 7679) {
            return true;
        }
        if (ou >= 8400 && ou <= 8432) {
            return true;
        }
        if (ou >= 11503 && ou <= 11505) {
            return true;
        }
        if (ou >= 11744 && ou <= 11775) {
            return true;
        }
        if (ou >= 12441 && ou <= 12442) {
            return true;
        }
        if (ou >= 42607 && ou <= 42610) {
            return true;
        }
        if (ou >= 42620 && ou <= 42621) {
            return true;
        }
        if (ou >= 42736 && ou <= 42737) {
            return true;
        }
        if (ou >= 43232 && ou <= 43249) {
            return true;
        }
        if (ou >= 65056 && ou <= 65062) {
            return true;
        }
        if (ou >= 66045 && ou <= 66045) {
            return true;
        }
        if (ou >= 119141 && ou <= 119145) {
            return true;
        }
        if (ou >= 119149 && ou <= 119154) {
            return true;
        }
        if (ou >= 119163 && ou <= 119170) {
            return true;
        }
        if (ou >= 119173 && ou <= 119179) {
            return true;
        }
        if (ou >= 119210 && ou <= 119213) {
            return true;
        }
        if (ou >= 119362 && ou <= 119364) {
            return true;
        }
        return false;
    };
    eV.getUnicodeChar = function (ow) {
        if (ow.length != 1) {
            return null;
        }
        var ou = new eV();
        var ov = ow.codePointAt(0);
        ou.addCharFromInt(ov);
        return ou;
    };

    function gX() {
        this.listOfUnicodeChars = new fM();
    }
    gX.prototype.addUnicodeChar = function (ou) {
        ou.close();
        this.listOfUnicodeChars.add(ou);
    };
    gX.prototype.substring = function (ow, ou) {
        if (ou > this.listOfUnicodeChars.size()) {
            ou = this.listOfUnicodeChars.size();
        }
        var ox = new gX();
        for (var ov = ow; ov < ou; ov++) {
            var oy = this.listOfUnicodeChars.get(ov);
            ox.addOnlyUnicodeChar(oy);
        }
        return ox;
    };
    gX.prototype.addOnlyUnicodeChar = function (ou) {
        this.listOfUnicodeChars.add(ou);
    };
    gX.prototype.size = function () {
        return this.listOfUnicodeChars.size();
    };
    gX.prototype.charUnicodeCharAt = function (ou) {
        if (ou < 0 || ou >= this.listOfUnicodeChars.size()) {
            return null;
        }
        return this.listOfUnicodeChars.get(ou);
    };
    gX.prototype.charAt = function (ou) {
        if (ou < 0 || ou >= this.listOfUnicodeChars.size()) {
            return null;
        }
        var ov = this.listOfUnicodeChars.get(ou);
        return ov.toString();
    };
    gX.prototype.charUnicodeAt = function (ou) {
        if (ou < 0 || ou >= this.listOfUnicodeChars.size()) {
            return null;
        }
        var ov = this.listOfUnicodeChars.get(ou);
        return ov.getUnicode();
    };
    gX.prototype.toString = function () {
        var ov = "";
        for (var ou = 0; ou < this.listOfUnicodeChars.size(); ou++) {
            var ow = this.listOfUnicodeChars.get(ou);
            ov = ov + ow.toString();
        }
        return ov;
    };
    gX.convertToUnicodeString = function (oy) {
        var ox = new gX();
        if (oy.length == 0) {
            return ox;
        }
        var ov = null;
        for (var ou = 0; ou < oy.length; ou++) {
            var ow = oy.codePointAt(ou);
            if (ov != null && eV.isCombiningCharacter(ow)) {
                ov.addCharFromInt(ow);
                ov.setHasCombiningChar(true);
                continue;
            }
            if (ov != null && ov.hasCombiningChar()) {
                ox.addUnicodeChar(ov);
                ov = null;
            }
            if (ov != null && ov.isSurrogate()) {
                if (eV.isSurrogateCharacter(ow)) {
                    ov.addCharFromInt(ow);
                    ox.addUnicodeChar(ov);
                    continue;
                } else {
                }
                ov = null;
            }
            if (ov != null) {
                ox.addUnicodeChar(ov);
                ov = null;
            }
            if (ov == null) {
                ov = new eV();
                if (ow > 65535) {
                    ov.addOverFFFF(ow);
                    ox.addUnicodeChar(ov);
                    ov = null;
                    continue;
                }
                ov.addCharFromInt(ow);
                if (eV.isSurrogateCharacter(ow)) {
                    ov.setSurrogate(true);
                }
            }
        }
        if (!ov.isSurrogate()) {
            ox.addUnicodeChar(ov);
        }
        return ox;
    };
    gX.prototype.addString = function (ov) {
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.charUnicodeCharAt(ou);
            this.addOnlyUnicodeChar(ow);
        }
    };

    function e3() {}
    e3.convertToMathML = function (ou) {
        return j6.convertToMathML(ou);
    };

    function fF() {}
    fF.convertToLatex = function (ow) {
        try {
            var oy = fe.createBeanStructure(ow, d8);
            var ou = new ka();
            var oz = new er();
            var ov = oz.processToLatex(oy, ou);
            return ov;
        } catch (ox) {}
        return "$ Error $";
    };

    function j6() {}
    j6.convertToMathML = function (ov) {
        ov = i1.insertParanthesisInLatex(ov);
        ov = gV.insertParanthesisInLatex(ov);
        ov = fV.changeToUnicode(ov);
        var ou = new kX(ov);
        ou.processDocumentInfo();
        je.splitTextModeAndMathMode(ou);
        ib.insertSpaceNodesOnlyInTextMode(ou);
        gL.insertParanthesisInMathMode(ou, hE.getCodes(), hE.getKeys());
        gL.insertParanthesisInMathMode(ou, lS.getCodes(), lS.getKeys());
        gL.insertParanthesisInMathMode(ou, ch.getCodes(), ch.getKeys());
        gL.insertParanthesisInMathMode(ou, eC.getCodes(), eC.getKeys());
        gL.insertParanthesisInMathMode(ou, ib.getCodes(), ib.getKeys());
        gL.insertParanthesisInMathMode(ou, ei.getCodes(), ei.getKeys());
        gL.insertParanthesisInMathMode(ou, bj.getCodes(), bj.getKeys());
        gL.insertParanthesisInMathMode(ou, jN.getCodes(), jN.getKeys());
        gL.insertParanthesisInMathMode(ou, jC.getCodes(), jC.getKeys());
        ch.insertParanthesisInMathMode(ou);
        dB.splitInBlocks(ou);
        dB.removeBlockWithOneChild(ou);
        jC.searchRoot(ou);
        gV.searchMatrix(ou);
        i1.searchFence(ou);
        eC.searchFunctions(ou);
        hE.findFunctions(ou);
        ib.searchSpaces(ou);
        ei.searchFontChange(ou);
        bj.searchTextMode(ou);
        jN.searchPhantom(ou);
        nQ.searchOperators(ou);
        lS.searchFractions(ou);
        ch.findAllMultiNode(ou);
        ch.findPrescript(ou);
        dB.trimBlock(ou);
        dB.removeBlockWithOneChild(ou);
        dB.removeBlockInBlock(ou);
        lS.searchOpFractions(ou);
        ou.doOptimization();
        ou.optimizationStyle(ou.getStyle());
        ou.changeToMathMLSymbole();
        return ou.toMathMLString(0);
    };

    function dB() {}
    dB.splitInBlocks = function (ow) {
        var ov = ow.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oy = ov.get(ou);
            if (oy instanceof fG) {
                var ox = oy.getText();
                oy.setText(null);
                dB.splitInBlocksText(oy, ox);
            }
        }
    };
    dB.removeBlockWithOneChild = function (oy) {
        var ov = oy.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oz = ov.get(ou);
            var ox = oz.getChildren();
            if (ox.size() == 1) {
                var ow = ox.get(0);
                if (dB.acceptParentChild(oz, ow)) {
                    ow.getStyle().copyAllFrom(oz.getStyle());
                    if (oz.isDefinedByUser()) {
                        ow.setDefinedByUser(true);
                    }
                    ov.remove(ou);
                    ov.addTo(ou, ow);
                    ou = ou - 1;
                }
            }
        }
        ov = oy.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oz = ov.get(ou);
            dB.removeBlockWithOneChild(oz);
        }
    };
    dB.acceptParentChild = function (ov, ou) {
        if ("block" == ov.getName()) {
            if ("block" == ou.getName()) {
                return true;
            }
            if ("mfrac" == ou.getName()) {
                return true;
            }
            if ("multi" == ou.getName()) {
                return true;
            }
            if ("mo" == ou.getName()) {
                return true;
            }
            if ("runtime" == ou.getName()) {
                return true;
            }
            if ("mfenced" == ou.getName()) {
                return true;
            }
            if ("matrix" == ou.getName()) {
                return true;
            }
            if ("mphantom" == ou.getName()) {
                return true;
            }
            if ("textmode" == ou.getName()) {
                return true;
            }
        }
        return false;
    };
    dB.removeBlockInBlock = function (oy) {
        var ow = oy.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            if (dB.acceptParentChildInBloc(oy, oz)) {
                ow.remove(ov);
                var ox = oz.getChildren();
                for (var ou = 0; ou < ox.size(); ou++) {
                    ow.addTo(ov + ou, ox.get(ou));
                }
                ov--;
            }
        }
        ow = oy.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            dB.removeBlockInBlock(oz);
        }
    };
    dB.acceptParentChildInBloc = function (ou, ov) {
        if (ov.getStyleAttributes().length > 0) {
            return false;
        }
        if (ov.getChildren().size() == 0) {
            return false;
        }
        if (
            "block" == ou.getName() ||
            "math" == ou.getName() ||
            "mathmode" == ou.getName() ||
            "mfenced" == ou.getName()
        ) {
            if ("block" == ov.getName()) {
                return true;
            }
        }
        return false;
    };
    dB.trimBlock = function (oy) {
        var ox = oy.getChildren();
        for (var oz = 0; oz < ox.size(); oz++) {
            var ov = ox.get(oz);
            if (ov instanceof fa) {
                continue;
            }
            var oC = ov.getText();
            if (oC != null) {
                oC = W.trim(oC);
                ov.setText(oC);
                if (oC.length == 0) {
                    ox.remove(oz);
                    oz--;
                    continue;
                } else {
                    if (oC.indexOf(" ") > -1) {
                        var oA = oC.indexOf(" ");
                        var ow = oC.substring(0, oA);
                        ow = W.trim(ow);
                        var ou = oC.substring(oA, oC.length);
                        ou = W.trim(ou);
                        ov.setText(ow);
                        var oB = new m0("block");
                        oB.setText(ou);
                        oB.setStyle(ov.getStyle().createCopy());
                        ox.addTo(oz + 1, oB);
                    }
                }
            }
        }
        for (var oz = 0; oz < ox.size(); oz++) {
            var ov = ox.get(oz);
            dB.trimBlock(ov);
        }
    };
    dB.splitInBlocksText = function (ox, ow) {
        var ov = null;
        var ou = 0;
        var oz = 0;
        if (ow != null && ow.length > 0) {
            do {
                var oy = ow.charAt(ou);
                if (oy == "{") {
                    ou = ou + 1;
                    ov = new m0("block");
                    ov.setDefinedByUser(true);
                    ox.getChildren().add(ov);
                    ou =
                        ou +
                        dB.splitInBlocksText(ov, ow.substring(ou, ow.length));
                    ou = ou + 1;
                    oz = ou;
                    ov = null;
                    continue;
                } else {
                    if (oy == "}") {
                        return ou;
                    } else {
                        if (ov == null) {
                            ov = new m0("block");
                            ox.getChildren().add(ov);
                        }
                        ov.setText(ow.substring(oz, ou + 1));
                    }
                }
                ou = ou + 1;
            } while (ou < ow.length);
        }
        return 0;
    };

    function fV() {}
    fV.changeToUnicode = function (ow) {
        var oA = -1;
        var oF = dj.split("|");
        while ((oA = ow.indexOf("\\", oA)) > -1) {
            oA = oA + 1;
            var oC = false;
            for (var oz = 0; oz < oF.length; oz++) {
                if (ow.indexOf(oF[oz], oA) == oA) {
                    oC = true;
                    break;
                }
            }
            if (oC) {
                continue;
            }
            var oy = "";
            for (var oz = oA; oz < ow.length; oz++) {
                if (oz - oA < 1) {
                    continue;
                }
                var ov = ow.substring(oA, oz);
                if (!cW.hasSymbolsStartWith("\\" + ov)) {
                    break;
                }
                oy = ov;
            }
            if (!cW.hasSymbol("\\" + oy) || fx.indexOf("," + oy + ",") > -1) {
                oy = "";
            }
            var ox = "";
            var ou = -1;
            var oE = lz.split(",");
            for (var oz = 0; oz < oE.length; oz++) {
                var ov = oE[oz];
                if (ov.length == 0) {
                    continue;
                }
                if (fx.indexOf("," + ov + ",") > -1) {
                    continue;
                }
                if (ow.indexOf(ov, oA) == oA) {
                    if (ox.length < ov.length) {
                        ox = ov;
                        ou = oz;
                    }
                }
            }
            var oG = "";
            if (fx.indexOf("," + oG + ",") > -1) {
                oG = "";
            }
            if (oG.length == 0 && ox.length == 0 && oy.length == 0) {
                continue;
            }
            if (oy.length >= ox.length && oy.length >= oG.length) {
                var oB = cW.getUnicodeCharForCode("\\" + oy);
                ow =
                    ow.substring(0, oA - 1) +
                    oB +
                    ow.substring(oA + oy.length, ow.length);
                continue;
            }
            if (ox.length > oy.length && ox.length > oG.length) {
                var oD = cF.split(",");
                var oB = h.getChar(oD[ou]);
                ow =
                    ow.substring(0, oA - 1) +
                    oB +
                    ow.substring(oA + ox.length, ow.length);
                continue;
            }
            if (oG.length > oy.length && oG.length > ox.length) {
                var oB = h.getChar(oG);
                ow =
                    ow.substring(0, oA - 1) +
                    oB +
                    ow.substring(oA + oG.length, ow.length);
                continue;
            }
        }
        return ow;
    };
    fV.convToMathML = function (oz) {
        if (oz == null) {
            return null;
        }
        var oy = new fq("");
        for (var ow = 0; ow < oz.length; ow++) {
            var ov = oz.charAt(ow);
            if (ov == "<") {
                oy.append("&lt;");
                continue;
            } else {
                if (ov == ">") {
                    oy.append("&gt;");
                    continue;
                }
            }
            var ou = oz.charCodeAt(ow);
            if (ou > 127) {
                var ox = h.getFirstCodeForNumber(ou);
                if (ox.length > 0) {
                    oy.append("&" + ox + ";");
                } else {
                    oy.append(ov + "");
                }
            } else {
                oy.append(ov + "");
            }
        }
        return oy.toString();
    };

    function i1() {}
    i1.insertParanthesisInLatex = function (ov) {
        var ow = mm.split(",");
        for (var ou = 0; ou < ow.length; ou++) {
            var ox = ow[ou];
            if (ox.length > 0) {
                ov = i1.insertParanthesis(ov, "left" + ox, ox, true);
                ov = i1.insertParanthesis(ov, "right" + ox, ox, false);
            }
        }
        return ov;
    };
    i1.insertParanthesis = function (ox, ow, oy, ov) {
        var ou = -1;
        do {
            ou = ox.indexOf("\\" + ow, ou);
            if (ou == -1) {
                break;
            }
            if (oy == "\\{") {
                oy = "F1";
            } else {
                if (oy == "\\}") {
                    oy = "F2";
                } else {
                    oy = W.replace(oy, "\\", "?");
                }
            }
            if (ov) {
                ox =
                    ox.substring(0, ou) +
                    "{" +
                    fr +
                    oy +
                    "}{" +
                    ox.substring(ou + 1 + ow.length, ox.length);
            } else {
                ox =
                    ox.substring(0, ou) +
                    "}{" +
                    fr +
                    oy +
                    "}" +
                    ox.substring(ou + 1 + ow.length, ox.length);
            }
            ou = ou + fr.length + oy.length + 3;
        } while (true);
        return ox;
    };
    i1.searchFence = function (ow) {
        var ov = ow.getChildren();
        for (var ox = 0; ox < ov.size(); ox++) {
            var ou = ov.get(ox);
            if (ou instanceof m0 && ox < ov.size() - 2) {
                var oC = ou.getText();
                if (oC != null && oC.indexOf(fr) == 0) {
                    var oA = null;
                    if (ox + 1 < ov.size()) {
                        oA = ov.get(ox + 1);
                    }
                    var oB = null;
                    if (ox + 2 < ov.size()) {
                        oB = ov.get(ox + 2);
                    }
                    var oy = i1.getCharFrom(ou);
                    var oD = i1.getCharFrom(oB);
                    var oz = new dZ(oy, oD);
                    oz.getChildren().add(oA);
                    ov.remove(ox);
                    if (oA != null) {
                        ov.remove(ox);
                    }
                    if (oB != null) {
                        ov.remove(ox);
                    }
                    ov.addTo(ox, oz);
                }
            }
            ou = ov.get(ox);
            i1.searchFence(ou);
        }
    };
    i1.getCharFrom = function (oA) {
        if (oA == null) {
            return "";
        }
        var oy = oA.getText();
        var ow = oy.substring(fr.length, oy.length);
        if (ow == "F1") {
            ow = "\\{";
        } else {
            if (ow == "F2") {
                ow = "\\}";
            }
        }
        ow = W.replace(ow, "?", "\\");
        var ox = mm.split(",");
        var ov = cy.split(",");
        for (var ou = 0; ou < ox.length; ou++) {
            var oz = ox[ou];
            if (oz.length > 0) {
                if (ow == oz) {
                    return ov[ou];
                }
            }
        }
        return "";
    };

    function ei() {}
    ei.getCodes = function () {
        return bl.split("|");
    };
    ei.getKeys = function () {
        return e0;
    };
    ei.searchFontChange = function (ox) {
        var ov = ox.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oB = ov.get(ou);
            var oz = null;
            if (ou + 1 < ov.size()) {
                oz = ov.get(ou + 1);
            }
            var ow = null;
            if (ou + 2 < ov.size()) {
                ow = ov.get(ou + 2);
            }
            if (oB instanceof m0) {
                var oA = oB.getText();
                if (oA != null && oA.indexOf(e0) == 0) {
                    var oy = oA.substring(e0.length, oA.length);
                    ov.remove(ou);
                    ou--;
                    if (oz != null) {
                        if ("mathnormal" == oy || "mathrm" == oy) {
                            oz.getStyle().setFont("normal");
                        } else {
                            if ("mathit" == oy) {
                                oz.getStyle().setFont("italic");
                            } else {
                                if (
                                    "mathbfup" == oy ||
                                    "mathbf" == oy ||
                                    "emph" == oy
                                ) {
                                    oz.getStyle().setFont("bold");
                                } else {
                                    if ("mathbi" == oy) {
                                        oz.getStyle().setFont("bold-italic");
                                    } else {
                                        if ("mathsf" == oy) {
                                            oz.getStyle().setFont("sans-serif");
                                        } else {
                                            if ("mathsfb" == oy) {
                                                oz.getStyle().setFont(
                                                    "bold-sans-serif",
                                                );
                                            } else {
                                                if ("mathsfi" == oy) {
                                                    oz.getStyle().setFont(
                                                        "sans-serif-italic",
                                                    );
                                                } else {
                                                    if ("mathsfbi" == oy) {
                                                        oz.getStyle().setFont(
                                                            "sans-serif-bold-italic",
                                                        );
                                                    } else {
                                                        if ("mathbb" == oy) {
                                                            oz.getStyle().setFont(
                                                                "double-struck",
                                                            );
                                                        } else {
                                                            if (
                                                                "mathbbb" == oy
                                                            ) {
                                                                oz.getStyle().setFont(
                                                                    "bold-double-struck",
                                                                );
                                                            } else {
                                                                if (
                                                                    "mathbbi" ==
                                                                    oy
                                                                ) {
                                                                    oz.getStyle().setFont(
                                                                        "double-struck-italic",
                                                                    );
                                                                } else {
                                                                    if (
                                                                        "mathbbbi" ==
                                                                        oy
                                                                    ) {
                                                                        oz.getStyle().setFont(
                                                                            "double-struck-bold-italic",
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            "mathfrak" ==
                                                                            oy
                                                                        ) {
                                                                            oz.getStyle().setFont(
                                                                                "fraktur",
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                "mathfrakb" ==
                                                                                oy
                                                                            ) {
                                                                                oz.getStyle().setFont(
                                                                                    "bold-fraktur",
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    "mathcal" ==
                                                                                    oy
                                                                                ) {
                                                                                    oz.getStyle().setFont(
                                                                                        "script",
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        "mathscr" ==
                                                                                        oy
                                                                                    ) {
                                                                                        oz.getStyle().setFont(
                                                                                            "script",
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            "mathcalb" ==
                                                                                            oy
                                                                                        ) {
                                                                                            oz.getStyle().setFont(
                                                                                                "bold-script",
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                "mathscrb" ==
                                                                                                oy
                                                                                            ) {
                                                                                                oz.getStyle().setFont(
                                                                                                    "bold-script",
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    "mathtt" ==
                                                                                                    oy
                                                                                                ) {
                                                                                                    oz.getStyle().setFont(
                                                                                                        "monospace",
                                                                                                    );
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (ow != null) {
                        if ("textcolor" == oy) {
                            ow.getStyle().setColor(oz.getText());
                            ov.remove(ou + 1);
                        }
                    }
                }
            }
            ei.searchFontChange(oB);
        }
    };

    function lS() {}
    lS.getCodes = function () {
        return iq.split("|");
    };
    lS.getKeys = function () {
        return oi;
    };
    lS.searchFractions = function (ow) {
        var ov = ow.getChildren();
        var oC = false;
        var ox = false;
        var oB = false;
        for (var oz = 0; oz < ov.size(); oz++) {
            var ou = ov.get(oz);
            if (ou instanceof m0 && oz < ov.size() - 2) {
                var oE = ou.getText();
                if (oE != null && oE.indexOf(oi) == 0) {
                    var oD = oE.substring(oi.length, oE.length);
                    oC = "binom" == oD;
                    ox = "sfrac" == oD;
                    oB = "cfrac" == oD;
                    var oA = ov.get(oz + 1);
                    var oy = ov.get(oz + 2);
                    ou = new lq(oA, oy, oC, ox, oB);
                    ov.remove(oz);
                    ov.remove(oz);
                    ov.remove(oz);
                    ov.addTo(oz, ou);
                }
            }
            lS.searchFractions(ou);
        }
    };
    lS.searchOpFractions = function (oy) {
        var ox = oy.getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oA = ox.get(ow);
            if (oA instanceof om && ow > 0 && ow < ox.size() - 1) {
                var oz = oA.getText();
                if (oz != null && oz == "/") {
                    var ov = ox.get(ow - 1);
                    var ou = ox.get(ow + 1);
                    oA = new lq(ov, ou, false, false, false);
                    ox.remove(ow - 1);
                    ox.remove(ow - 1);
                    ox.remove(ow - 1);
                    ox.addTo(ow - 1, oA);
                }
            }
            lS.searchOpFractions(oA);
        }
    };

    function eC() {}
    eC.getCodes = function () {
        return ah.split(",");
    };
    eC.getKeys = function () {
        return mH;
    };
    eC.searchFunctions = function (ow) {
        var ov = ow.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oy = ov.get(ou);
            if (oy instanceof m0) {
                var ox = oy.getText();
                if (ox != null && ox.indexOf(mH) == 0) {
                    oy.setType("FUNCTION");
                    oy.setText(ox.substring(mH.length, ox.length));
                    oy.getStyle().setFont("normal");
                }
            }
            eC.searchFunctions(oy);
        }
    };

    function hE() {}
    hE.getCodes = function () {
        return bg.split("|");
    };
    hE.getKeys = function () {
        return aU;
    };
    hE.findFunctions = function (oy) {
        var ow = oy.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oA = ow.get(ov);
            if (ov < ow.size() - 3) {
                if (oA instanceof m0) {
                    var oz = oA.getText();
                    if (oz != null) {
                        if (oz == aU + "bar") {
                            var ox = ow.get(ov + 1);
                            var ou = new fS("bar", ox);
                            ow.remove(ov + 1);
                            ow.addTo(ov + 1, ou);
                            ow.remove(ov);
                            ov = ov - 1;
                        }
                    }
                }
            }
            hE.findFunctions(oA);
        }
    };

    function je() {}
    je.splitTextModeAndMathMode = function (ou) {
        je.processNode(ou, "\\begin{equation}", "\\end{equation}");
        je.processNode(ou, "\\begin{math}", "\\end{math}");
        je.processNode(ou, "\\begin{displaymath}", "\\end{displaymath}");
        je.processNode(ou, "\\[", "\\]");
        je.processNode(ou, "\\(", "\\)");
        je.processNode(ou, "$$", "$$");
        je.processNode(ou, "$", "$");
        je.cleanUpDelimitators(ou);
    };
    je.cleanUpDelimitators = function (ow) {
        var ov = ow.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oy = ov.get(ou);
            var ox = oy.getText();
            if (oy instanceof fa) {
                ox = W.replace(ox, "\\$", "$");
                oy.setText(ox);
            }
            if (ox.length == 0) {
                ov.remove(ou);
                ou--;
            }
        }
    };
    je.processNode = function (ox, oC, ou) {
        var oH = false;
        var ow = ox.getChildren();
        do {
            oH = false;
            for (var oA = 0; oA < ow.size(); oA++) {
                var ov = ow.get(oA);
                if (ov instanceof fa) {
                    var oG = ov.getText();
                    if (oG == null) {
                        continue;
                    }
                    var oF = je.getNextDelim(oG, oC, -1);
                    if (oF > -1) {
                        var oE = je.getNextDelim(oG, ou, oF + oC.length);
                        if (oE > -1) {
                            ow.remove(oA);
                            var oz = new fa();
                            var oB = oG.substring(0, oF);
                            oz.setText(oB);
                            ow.addTo(oA, oz);
                            var oD = je.getMathModeNode(
                                oG.substring(oF + oC.length, oE),
                                oC,
                            );
                            ow.addTo(oA + 1, oD);
                            var oy = new fa();
                            oB = oG.substring(oE + ou.length);
                            oy.setText(oB);
                            ow.addTo(oA + 2, oy);
                            oH = true;
                            break;
                        }
                    }
                }
            }
        } while (oH);
    };
    je.getNextDelim = function (ox, ow, ov) {
        var ou = ox.indexOf(ow, ov);
        while (ou > -1) {
            if ("$" == ow && ou > 0) {
                var oy = ox.charAt(ou - 1);
                if (oy == "\\") {
                    ov = ou + 1;
                    ou = ox.indexOf(ow, ov);
                    continue;
                }
            }
            return ou;
        }
        return ou;
    };
    je.getMathModeNode = function (ow, ov) {
        var ou = new fG();
        if (ov == "\\begin{equation}") {
            ou.setLabeled(true);
        } else {
            if (ov == "\\begin{math}" || ov == "\\(" || ov == "$") {
                ou.getStyle().setInline("true");
            }
        }
        ow = je.processTextInMathMode(ow);
        ou.setText(ow);
        return ou;
    };
    je.processTextInMathMode = function (ou) {
        ou = W.trim(ou);
        ou = W.replace(ou, "\\$", "$");
        ou = W.replace(ou, "\\#", "#");
        return ou;
    };

    function gV() {}
    gV.insertParanthesisInLatex = function (ow) {
        var ou = na.split("|");
        for (var ov = 0; ov < ou.length; ov++) {
            var ox = ou[ov];
            if (ox.length > 0) {
                ow = gV.insertParanthesis(ow, "begin{" + ox + "}", ox, true);
                ow = gV.insertParanthesis(ow, "end{" + ox + "}", ox, false);
            }
        }
        return ow;
    };
    gV.insertParanthesis = function (oy, ow, oz, ov) {
        var ou = -1;
        do {
            ou = oy.indexOf("\\" + ow, ou);
            if (ou == -1) {
                break;
            }
            var ox = "F";
            if (oz.indexOf("*") > -1) {
                if (oy.charAt(ou + ow.length + 1) == "[") {
                    ox = "T";
                    oy = W.replaceFirstChar(oy, ou, "[", "{");
                    oy = W.replaceFirstChar(oy, ou, "]", "}");
                }
            } else {
                if (oy.charAt(ou + ow.length + 1) == "{") {
                    ox = "T";
                }
            }
            if (ov) {
                oy =
                    oy.substring(0, ou) +
                    "{" +
                    np +
                    oz +
                    ox +
                    "}{" +
                    oy.substring(ou + 1 + ow.length, oy.length);
                ou = ou + np.length + oz.length + 4;
            } else {
                oy =
                    oy.substring(0, ou) +
                    "}" +
                    oy.substring(ou + 1 + ow.length, oy.length);
                ou = ou + 1;
            }
        } while (true);
        return oy;
    };
    gV.searchMatrix = function (ox) {
        var ow = ox.getChildren();
        for (var oA = 0; oA < ow.size(); oA++) {
            var ov = ow.get(oA);
            if (ov instanceof m0 && oA < ow.size() - 1) {
                var oG = ov.getText();
                if (oG != null && oG.indexOf(np) == 0) {
                    var oF = oG.substring(np.length, oG.length);
                    var oH = false;
                    var oD = oF.substring(0, oF.length - 1);
                    var oz = oF.substring(oD.length, oF.length);
                    if ("T" == oz) {
                        oH = true;
                    }
                    var oE = new de(oD);
                    var oC = ow.get(oA + 1);
                    var oB = oC.getChildren();
                    for (var oy = 0; oy < oB.size(); oy++) {
                        var ou = oB.get(oy);
                        if (oH && oy == 0) {
                            oE.setParams(ou.getText());
                        } else {
                            oE.getChildren().add(ou);
                        }
                    }
                    ow.remove(oA);
                    ow.remove(oA);
                    ow.addTo(oA, oE);
                    oA--;
                }
            }
        }
        ow = ox.getChildren();
        for (var oA = 0; oA < ow.size(); oA++) {
            var ov = ow.get(oA);
            gV.searchMatrix(ov);
        }
    };

    function nQ() {}
    nQ.searchOperators = function (ov) {
        var ou = eF.getAllOperators();
        nQ.searchRecursiveOperators(ov, ou.split(";"));
    };
    nQ.searchRecursiveOperators = function (ow, oy) {
        var ov = ow.getChildren();
        for (var oz = 0; oz < ov.size(); oz++) {
            var ou = ov.get(oz);
            if (ou instanceof om) {
                continue;
            }
            if (ou instanceof fa) {
                continue;
            }
            if (ou.getType() != null) {
                continue;
            }
            if (ou.getText() != null) {
                var oH = ou.getText();
                if (oH.indexOf("\\latex") == 0) {
                    continue;
                }
                for (var ox = 0; ox < oy.length; ox++) {
                    var oB = oy[ox];
                    if (oB.length == 0) {
                        continue;
                    }
                    var oC = oH.indexOf(oB);
                    if (oC > -1) {
                        var oG = new m0("block");
                        oG.setText(oH.substring(0, oC));
                        var oE = new om(oB);
                        var oD = new m0("block");
                        oD.setText(oH.substring(oC + oB.length, oH.length));
                        var oA = true;
                        if (ou instanceof m0) {
                            var oF = ou;
                            oA = !oF.isDefinedByUser();
                        }
                        if (ou.getStyleAttributes().length > 0) {
                            oA = false;
                        }
                        if (!oA) {
                            ou.setText(null);
                            if (oG.getText().length > 0) {
                                ou.getChildren().add(oG);
                            }
                            ou.getChildren().add(oE);
                            if (oD.getText().length > 0) {
                                ou.getChildren().add(oD);
                            }
                            oz--;
                        } else {
                            ou.setText(oG.getText());
                            ov.addTo(oz + 1, oE);
                            if (oD.getText().length > 0) {
                                ov.addTo(oz + 2, oD);
                            }
                            if (oG.getText().length == 0) {
                                ov.remove(oz);
                            }
                            oz--;
                        }
                        break;
                    }
                }
            }
        }
        for (var oz = 0; oz < ov.size(); oz++) {
            var ou = ov.get(oz);
            nQ.searchRecursiveOperators(ou, oy);
        }
    };

    function gL() {}
    gL.insertParanthesisInMathMode = function (oz, oy, ov) {
        var ox = oz.getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oB = ox.get(ow);
            if (oB instanceof fG) {
                var oA = oB.getText();
                for (var ou = 0; ou < oy.length; ou++) {
                    if (oy[ou].length > 0) {
                        oA = gL.insertParanthesisFor(oA, oy[ou], ov);
                    }
                }
                oB.setText(oA);
            }
        }
    };
    gL.insertParanthesisFor = function (oz, ow, ov) {
        var ou = -1;
        do {
            ou = oz.indexOf("\\" + ow, ou);
            if (ou == -1) {
                break;
            }
            var oy = oz.substring(0, ou);
            var ox = oz.substring(ou + 1 + ow.length, oz.length);
            oy = W.trim(oy);
            ox = W.trim(ox);
            oz = oy + "{" + ov + ow + "}" + ox;
            ou = oy.length + 2 + ov.length + ow.length;
        } while (true);
        return oz;
    };

    function jN() {}
    jN.getCodes = function () {
        return gt.split("|");
    };
    jN.getKeys = function () {
        return ak;
    };
    jN.searchPhantom = function (ox) {
        var ow = ox.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oA = ow.get(ov);
            if (oA instanceof m0 && ov < ow.size() - 1) {
                var oz = oA.getText();
                if (oz != null && oz.indexOf(ak) == 0) {
                    var oy = ow.get(ov + 1);
                    var ou = new js(oy);
                    ow.remove(ov);
                    ow.remove(ov);
                    ow.addTo(ov, ou);
                }
            }
        }
        for (var ov = 0; ov < ow.size(); ov++) {
            var oA = ow.get(ov);
            jN.searchPhantom(oA);
        }
    };

    function jC() {}
    jC.getCodes = function () {
        return nP.split("|");
    };
    jC.getKeys = function () {
        return iW;
    };
    jC.searchRoot = function (oy) {
        var ow = oy.getChildren();
        for (var oz = 0; oz < ow.size(); oz++) {
            var ov = ow.get(oz);
            if (ov instanceof m0 && oz < ow.size() - 1) {
                var oB = ov.getText();
                if (oB != null && oB.indexOf(iW) == 0) {
                    var oA = null;
                    var ou = ow.get(oz + 1);
                    if (oz < ow.size() - 2) {
                        var oC = ou.getText();
                        if (
                            oC != null &&
                            oC.indexOf("[") == 0 &&
                            oC.indexOf("]") == oC.length - 1
                        ) {
                            oA = oC.substring(1, oC.length - 1);
                            ou = ow.get(oz + 2);
                            ow.remove(oz);
                        }
                    }
                    var ox = new c3(ou, oA);
                    ow.remove(oz);
                    ow.remove(oz);
                    ow.addTo(oz, ox);
                }
            }
        }
        for (var oz = 0; oz < ow.size(); oz++) {
            var ov = ow.get(oz);
            jC.searchRoot(ov);
        }
    };

    function ib() {}
    ib.getCodes = function () {
        return jo.split("|");
    };
    ib.getKeys = function () {
        return lk;
    };
    ib.searchSpaces = function (oz) {
        var ov = oz.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oB = ov.get(ou);
            if (oB instanceof m0) {
                var oA = oB.getText();
                if (oA != null && oA.indexOf(lk) == 0) {
                    var oy = oA.substring(lk.length, oA.length);
                    var ox = ib.getWidthForType(oy);
                    var ow = ib.getSpaceNode(ox);
                    ov.remove(ou);
                    ov.addTo(ou, ow);
                }
            }
            ib.searchSpaces(oB);
        }
    };
    ib.getSpaceNode = function (ou) {
        var ov = false;
        if ("newline" == ou) {
            ov = true;
        }
        return new E(ou, ov);
    };
    ib.getWidthForType = function (ox) {
        var ov = jo.split("|");
        var ou = bA.split("|");
        for (var ow = 0; ow < ov.length; ow++) {
            if (ox == ov[ow]) {
                return ou[ow];
            }
        }
        return "1em";
    };
    ib.insertSpaceNodesOnlyInTextMode = function (oC) {
        var oF = jo.split("|");
        var oD = jo.split("|");
        var ow = oC.getChildren();
        for (var oA = 0; oA < ow.size(); oA++) {
            var ov = ow.get(oA);
            if (ov instanceof fa) {
                var oE = ov.getText();
                for (var oy = 0; oy < oF.length; oy++) {
                    if (oF[oy].length > 0) {
                        if (oE.indexOf("\\" + oF[oy]) > -1) {
                            var oB = oE.indexOf("\\" + oF[oy]);
                            ov.setText(oE.substring(0, oB));
                            var oz = ib.getSpaceNode(oD[oy]);
                            ow.addTo(oA + 1, oz);
                            var ou = oE.substring(
                                oB + 1 + oF[oy].length,
                                oE.length,
                            );
                            if (W.trim(ou).length > 0) {
                                var ox = new fa();
                                ox.setText(ou);
                                ow.addTo(oA + 2, ox);
                            }
                        }
                    }
                }
            }
        }
    };

    function ch() {}
    ch.getCodes = function () {
        return lJ.split("|");
    };
    ch.getKeys = function () {
        return dA;
    };
    ch.insertParanthesisInMathMode = function (ow) {
        var ov = ow.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oy = ov.get(ou);
            if (oy instanceof fG) {
                var ox = oy.getText();
                ox = ch.insertParanthesisFor(ox, "_");
                ox = ch.insertParanthesisFor(ox, "^");
                oy.setText(ox);
            }
        }
    };
    ch.insertParanthesisFor = function (oA, ox) {
        var ou = -1;
        do {
            ou = oA.indexOf(ox, ou);
            if (ou == -1) {
                break;
            }
            var oz = oA.substring(0, ou);
            var oy = oA.substring(ou + 1, oA.length);
            oz = W.trim(oz);
            oy = W.trim(oy);
            oA = oz + ox + oy;
            ou = oz.length;
            if (ou > 0) {
                var ow = oA.charAt(ou - 1);
                if (ow != "}") {
                    oA =
                        oA.substring(0, ou - 1) +
                        "{" +
                        ow +
                        "}" +
                        oA.substring(ou, oA.length);
                    ou = ou + 2;
                }
            }
            if (ou < oA.length - 1) {
                var ov = oA.charAt(ou + 1);
                if (ov != "{") {
                    oA =
                        oA.substring(0, ou + 1) +
                        "{" +
                        ov +
                        "}" +
                        oA.substring(ou + 2, oA.length);
                }
            }
            ou = ou + ox.length;
        } while (true);
        return oA;
    };
    ch.findAllMultiNode = function (ox) {
        var ow = ox.getChildren();
        for (var oy = 0; oy < ow.size(); oy++) {
            var ov = ow.get(oy);
            if (oy > 0 && oy < ow.size() - 1) {
                if (ov instanceof m0) {
                    var oB = ov.getText();
                    if (oB != null) {
                        if ("_" == oB || "^" == oB) {
                            var oA = ow.get(oy - 1);
                            var oC = ow.get(oy + 1);
                            ow.remove(oy + 1);
                            ow.remove(oy);
                            var oz = null;
                            if (oA instanceof eP) {
                                oz = oA;
                            } else {
                                var ou = null;
                                if (oA.getText() != null) {
                                    if (
                                        oA.getText().indexOf(dA) == 0 &&
                                        oy > 1
                                    ) {
                                        ou = oA.getText();
                                        ou = ou.substring(dA.length, ou.length);
                                        oA = ow.get(oy - 2);
                                    }
                                }
                                oz = new eP(oA);
                                oz.setLimitsValue(ou);
                                ow.remove(oy - 1);
                                ow.addTo(oy - 1, oz);
                                if (ou != null) {
                                    ow.remove(oy - 2);
                                }
                            }
                            if ("_" == oB) {
                                oz.addSubBlocks(oC);
                            } else {
                                oz.addSupBlocks(oC);
                            }
                            oy = oy - 2;
                        }
                    }
                }
            }
            ch.findAllMultiNode(ov);
        }
    };
    ch.findPrescript = function (ox) {
        var ow = ox.getChildren();
        for (var oz = 0; oz < ow.size(); oz++) {
            var ov = ow.get(oz);
            if (oz < ow.size() - 3) {
                if (ov instanceof m0) {
                    var oD = ov.getText();
                    if (oD != null) {
                        if (oD == dA + "prescript") {
                            var oy = ow.get(oz + 1);
                            var ou = ow.get(oz + 2);
                            var oB = ow.get(oz + 3);
                            var oC = null;
                            if (oB instanceof eP) {
                                oC = oB;
                            } else {
                                oC = new eP(oB);
                                ow.remove(oz + 3);
                                ow.addTo(oz + 3, oC);
                            }
                            ow.remove(oz + 2);
                            ow.remove(oz + 1);
                            ow.remove(oz);
                            oC.addPreSubBlocks(ou);
                            oC.addPreSupBlocks(oy);
                            oz = oz - 1;
                        } else {
                            if (oD == dA + "bar") {
                                var oB = ow.get(oz + 1);
                                var oC = new eP(oB);
                                oC.setLimitsValue("limits");
                                ow.remove(oz + 1);
                                ow.addTo(oz + 1, oC);
                                ow.remove(oz);
                                var oA = new om(h.changeCharForCode("&oline;"));
                                oC.addSupBlocks(oA);
                                oz = oz - 1;
                            }
                        }
                    }
                }
            }
            ch.findPrescript(ov);
        }
    };

    function bj() {}
    bj.getCodes = function () {
        return cb.split("|");
    };
    bj.getKeys = function () {
        return nC;
    };
    bj.searchTextMode = function (ow) {
        var ov = ow.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var oB = ov.get(ou);
            if (oB instanceof m0) {
                var oA = oB.getText();
                if (oA != null && oA.indexOf(nC) == 0) {
                    if (ou + 1 < ov.size()) {
                        var oy = oA.substring(nC.length, oA.length);
                        var ox = ov.get(ou + 1);
                        var oz = bj.getTextMode(oy);
                        oz.setText(ox.getText());
                        ov.remove(ou);
                        ov.remove(ou);
                        ov.addTo(ou, oz);
                        ou--;
                    }
                }
            }
            bj.searchTextMode(oB);
        }
    };
    bj.getTextMode = function (ov) {
        var ou = new fa();
        if ("textnormal" == ov || "textrm" == ov) {
            ou.getStyle().setFont("normal");
        } else {
            if ("textit" == ov) {
                ou.getStyle().setFont("italic");
            } else {
                if ("textbf" == ov || "emph" == ov) {
                    ou.getStyle().setFont("bold");
                } else {
                    if ("textbi" == ov) {
                        ou.getStyle().setFont("bold-italic");
                    } else {
                        if ("textsf" == ov) {
                            ou.getStyle().setFont("sans-serif");
                        } else {
                            if ("textsfb" == ov) {
                                ou.getStyle().setFont("bold-sans-serif");
                            } else {
                                if ("textsfi" == ov) {
                                    ou.getStyle().setFont("sans-serif-italic");
                                } else {
                                    if ("textsfbi" == ov) {
                                        ou.getStyle().setFont(
                                            "sans-serif-bold-italic",
                                        );
                                    } else {
                                        if ("texttt" == ov) {
                                            ou.getStyle().setFont("monospace");
                                        } else {
                                            if ("textfrak" == ov) {
                                                ou.getStyle().setFont(
                                                    "fraktur",
                                                );
                                            } else {
                                                if ("textfrakb" == ov) {
                                                    ou.getStyle().setFont(
                                                        "bold-fraktur",
                                                    );
                                                } else {
                                                    if ("textcal" == ov) {
                                                        ou.getStyle().setFont(
                                                            "script",
                                                        );
                                                    } else {
                                                        if ("textcalb" == ov) {
                                                            ou.getStyle().setFont(
                                                                "bold-script",
                                                            );
                                                        } else {
                                                            if (
                                                                "textbb" == ov
                                                            ) {
                                                                ou.getStyle().setFont(
                                                                    "double-struck",
                                                                );
                                                            } else {
                                                                if (
                                                                    "textbbb" ==
                                                                    ov
                                                                ) {
                                                                    ou.getStyle().setFont(
                                                                        "bold-double-struck",
                                                                    );
                                                                } else {
                                                                    if (
                                                                        "textbbi" ==
                                                                        ov
                                                                    ) {
                                                                        ou.getStyle().setFont(
                                                                            "double-struck-italic",
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            "textbbbi" ==
                                                                            ov
                                                                        ) {
                                                                            ou.getStyle().setFont(
                                                                                "double-struck-bold-italic",
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                "textscr" ==
                                                                                ov
                                                                            ) {
                                                                                ou.getStyle().setFont(
                                                                                    "script",
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    "textscrb" ==
                                                                                    ov
                                                                                ) {
                                                                                    ou.getStyle().setFont(
                                                                                        "bold-script",
                                                                                    );
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ou;
    };

    function c5(ou) {
        this.name;
        this.type;
        this.definedByUser = false;
        this.style = new ho();
        this.text;
        this.children = new fM();
        this.name = ou;
    }
    c5.prototype.isDefinedByUser = function () {
        return this.definedByUser;
    };
    c5.prototype.setDefinedByUser = function (ou) {
        this.definedByUser = ou;
    };
    c5.prototype.processDocumentInfo = function () {};
    c5.prototype.setName = function (ou) {
        this.name = ou;
    };
    c5.prototype.getName = function () {
        return this.name;
    };
    c5.prototype.getText = function () {
        return this.text;
    };
    c5.prototype.setText = function (ou) {
        this.text = ou;
    };
    c5.prototype.getChildren = function () {
        return this.children;
    };
    c5.prototype.setChildren = function (ou) {
        this.children = ou;
    };
    c5.prototype.getStyle = function () {
        return this.style;
    };
    c5.prototype.setStyle = function (ou) {
        this.style = ou;
    };
    c5.prototype.getType = function () {
        return this.type;
    };
    c5.prototype.setType = function (ou) {
        this.type = ou;
    };
    c5.prototype.copyAllFrom = function (ou) {
        this.text = ou.text;
        this.children = ou.getChildren();
        this.style.copyAllFrom(ou.getStyle());
    };
    c5.prototype.toString = function () {
        return this.toMathMLString(0);
    };
    c5.prototype.changeToMathMLSymbole = function () {
        this.text = fV.convToMathML(this.text);
        for (var ou = 0; ou < this.children.size(); ou++) {
            var ov = this.children.get(ou);
            ov.changeToMathMLSymbole();
        }
    };
    c5.prototype.toMathMLString = function (ou) {
        var ov = new fq("");
        ov.append(
            this.getSpace(ou) +
                "<" +
                this.name +
                this.getStyleAttributes() +
                ">\n",
        );
        this.toMathMLTextChildren(ov, ou);
        ov.append(this.getSpace(ou) + "</" + this.name + ">\n");
        return ov.toString();
    };
    c5.prototype.getStyleAttributes = function () {
        var ou = new fq("");
        if (this.style.getFont() != null) {
            ou.append(" mathvariant='" + this.style.getFont() + "'");
        }
        if (this.style.getFontSize() > -1) {
            ou.append(" mathsize='" + this.style.getFontSize() + "'");
        }
        if (this.style.getColor() != null) {
            ou.append(" mathcolor='" + this.style.getColor() + "'");
        }
        return ou.toString();
    };
    c5.prototype.toMathMLTextChildren = function (ov, ou) {
        if (this.getText() == null) {
            this.getMathMLChildren(ov, ou);
        } else {
            this.getMathMLText(ov, ou);
        }
    };
    c5.prototype.getMathMLText = function (ov, ou) {
        ov.append(this.getSpace(ou + 1) + this.text + "\n");
    };
    c5.prototype.getMathMLChildren = function (ox, ov) {
        for (var ou = 0; ou < this.children.size(); ou++) {
            var ow = this.children.get(ou);
            ox.append(ow.toMathMLString(ov + 1));
        }
    };
    c5.prototype.getSpace = function (ov) {
        var ow = new fq("");
        for (var ou = 0; ou < ov; ou++) {
            ow.append("    ");
        }
        return ow.toString();
    };
    c5.prototype.doOptimization = function () {
        this.doChildrenOptimization();
    };
    c5.prototype.doChildrenOptimization = function () {
        for (var ou = 0; ou < this.children.size(); ou++) {
            var ov = this.children.get(ou);
            ov.doOptimization();
        }
    };
    c5.prototype.optimizationStyle = function (oz) {
        for (var ox = 0; ox < this.children.size(); ox++) {
            var oy = this.children.get(ox);
            var ow = oz.createCopy();
            var ou = ow.getFont();
            var ov = oy.getStyle().getFont();
            if (ov != null) {
                if (ov == ou) {
                    oy.getStyle().setFont(null);
                } else {
                    ow.setFont(ov);
                }
            }
            oy.optimizationStyle(ow);
        }
    };

    function m0(ou) {
        this.dKG = c5;
        this.dKG(ou);
    }
    ga(m0, c5);
    m0.prototype.toMathMLString = function (ov) {
        var ow = new fq("");
        if (this.getText() == null && this.getChildren().size() > 0) {
            ow.append(
                this.getSpace(ov) + "<mrow" + this.getStyleAttributes() + ">\n",
            );
            this.getMathMLChildren(ow, ov);
            ow.append(this.getSpace(ov) + "</mrow>\n");
        } else {
            var ou = this.format(this.getText());
            if (lv.stringIsNumber(ou)) {
                ow.append(
                    this.getSpace(ov) + "<mn" + this.getStyleAttributes() + ">",
                );
                ow.append(ou);
                ow.append("</mn>\n");
            } else {
                if (ou.length == 1) {
                    ow.append(
                        this.getSpace(ov) +
                            "<mi" +
                            this.getStyleAttributes() +
                            ">",
                    );
                    ow.append(ou);
                    ow.append("</mi>\n");
                } else {
                    ow.append(
                        this.getSpace(ov) +
                            "<mtext" +
                            this.getStyleAttributes() +
                            ">",
                    );
                    ow.append(ou);
                    ow.append("</mtext>\n");
                }
            }
        }
        return ow.toString();
    };
    m0.prototype.format = function (ou) {
        if (ou == null) {
            return "";
        }
        return ou;
    };

    function kX(ou) {
        this.documentClass = "\\documentclass";
        this.beginDocument = "\\begin{document}";
        this.endDocument = "\\end{document}";
        this.labed = false;
        this.latexLabelStyle;
        this.textsizeValue = null;
        this.dKH = m0;
        this.dKH("document");
        this.setText(ou);
        this.latexLabelStyle = new ng();
    }
    ga(kX, m0);
    kX.prototype.processDocumentInfo = function () {
        var ox = this.getText();
        ox = W.trim(ox);
        var oy = ox.indexOf(this.documentClass);
        var ow = ox.indexOf(this.beginDocument);
        var ov = ox.lastIndexOf(this.endDocument);
        if (oy > -1) {
            if (ow == -1) {
                throw "No \\begin{document} for \\documentclass";
            }
            if (ov == -1) {
                throw "No \\end{document} for \\documentclass";
            }
            this.textsizeValue = this.getTextSize(
                ox.substring(oy + this.documentClass.length, ow),
            );
            ox = ox.substring(ow + this.beginDocument.length, ov);
        } else {
            if (ow > -1) {
                if (ov == -1) {
                    throw "No \\end{document} for \\begin{document}";
                }
                ox = ox.substring(ow + this.beginDocument.length, ov);
            }
        }
        ox = W.trim(ox);
        ox = W.replace(ox, "\n\n", "\\newline");
        ox = W.replace(ox, "\r\r", "\\newline");
        ox = W.replace(ox, "\n\r\n\r", "\\newline");
        ox = W.replace(ox, "\r\n\r\n", "\\newline");
        ox = W.replace(ox, "\\\\", "\\newline");
        ox = W.replace(ox, "\n", " ");
        ox = W.replace(ox, "\t", " ");
        ox = W.replace(ox, "  ", " ");
        var ou = new fa();
        ou.setText(ox);
        this.getChildren().add(ou);
        this.setText(null);
    };
    kX.prototype.getTextSize = function (ov) {
        if (ov.indexOf("[") == 0) {
            var ow = ov.indexOf("[");
            var ou = ov.indexOf("]");
            if (ou > -1) {
                return ov.substring(ow + 1, ou);
            }
        }
        return null;
    };
    kX.prototype.doOptimization = function () {
        this.oneChildOptimization();
        this.labeledVerificationAndUpdate();
        this.doChildrenOptimization();
    };
    kX.prototype.labeledVerificationAndUpdate = function () {
        var ov = this.getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox instanceof fG) {
                var ow = ox;
                if (ow.isLabeled()) {
                    this.labed = true;
                    ow.setLabel(this.latexLabelStyle.getNextLabel());
                }
            }
        }
    };
    kX.prototype.oneChildOptimization = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ow = ou.get(0);
            if (ow instanceof fG) {
                var ov = ow;
                if (!ov.isLabeled()) {
                    this.copyAllFrom(ow);
                    ou.remove(0);
                }
            }
        }
    };
    kX.prototype.getStyleAttributes = function () {
        var ov = new fq("");
        var ou = c5.prototype.getStyleAttributes.call(this);
        ov.append(ou);
        if (this.getStyle().getInline() != null) {
            ov.append(" display='inline'");
        }
        ov.append(this.getTextSizeValue());
        return ov.toString();
    };
    kX.prototype.getTextSizeValue = function () {
        if (this.textsizeValue != null) {
            return " mathsize='" + this.textsizeValue + "'";
        }
        return "";
    };
    kX.prototype.toMathMLString = function (ow) {
        var oz = new fq("");
        oz.append(
            this.getSpace(ow) + "<math" + this.getStyleAttributes() + ">\n",
        );
        if (this.labed) {
            oz.append(this.getSpace(ow + 1) + "<mtable columnalign='left'>\n");
            var ox = new fM();
            var ov = this.getChildren();
            for (var ou = 0; ou < ov.size(); ou++) {
                var oy = ov.get(ou);
                this.addRowTable(oz, ow, oy, ox);
            }
            this.createRowTable(oz, ow, ox);
            oz.append(this.getSpace(ow + 1) + "</mtable>\n");
        } else {
            this.toMathMLTextChildren(oz, ow);
        }
        oz.append(this.getSpace(ow) + "</math>\n");
        return oz.toString();
    };
    kX.prototype.addRowTable = function (oy, ou, ow, ov) {
        if (ow instanceof fG) {
            var ox = ow;
            if (ox.isLabeled()) {
                this.createRowTable(oy, ou, ov);
                ov.clear();
                this.createLabeledRowTable(oy, ou, ox);
            } else {
                ov.add(ow);
            }
        } else {
            ov.add(ow);
        }
    };
    kX.prototype.createLabeledRowTable = function (ow, ou, ov) {
        ow.append(this.getSpace(ou + 2) + "<mlabeledtr>\n");
        ow.append(this.getSpace(ou + 3) + "<mtd>\n");
        ow.append(this.getSpace(ou + 4) + ov.getLabel() + "\n");
        ow.append(this.getSpace(ou + 3) + "</mtd>\n");
        ow.append(this.getSpace(ou + 3) + "<mtd>\n");
        ow.append(ov.toMathMLString(ou + 4));
        ow.append(this.getSpace(ou + 3) + "</mtd>\n");
        ow.append(this.getSpace(ou + 2) + "</mlabeledtr>\n");
    };
    kX.prototype.createRowTable = function (oy, ov, ow) {
        if (ow.size() > 0) {
            oy.append(this.getSpace(ov + 2) + "<mtr>\n");
            oy.append(this.getSpace(ov + 3) + "<mtd>\n");
            for (var ou = 0; ou < ow.size(); ou++) {
                var ox = ow.get(ou);
                oy.append(ox.toMathMLString(ov + 4));
            }
            oy.append(this.getSpace(ov + 3) + "</mtd>\n");
            oy.append(this.getSpace(ov + 2) + "</mtr>\n");
        }
    };

    function dZ(ou, ov) {
        this.openValue;
        this.closeValue;
        this.dKH = m0;
        this.dKH("mfenced");
        this.openValue = ou;
        this.closeValue = ov;
    }
    ga(dZ, m0);
    dZ.prototype.changeToMathMLSymbole = function () {
        this.openValue = fV.convToMathML(this.openValue);
        this.closeValue = fV.convToMathML(this.closeValue);
        c5.prototype.changeToMathMLSymbole.call(this);
    };
    dZ.prototype.toMathMLString = function (ou) {
        var ov = new fq("");
        ov.append(
            this.getSpace(ou) +
                "<mfenced" +
                this.getStyleAttributes() +
                this.getFences() +
                ">\n",
        );
        if (this.getChildren().size() < 2) {
            this.getMathMLChildren(ov, ou);
        } else {
            ov.append(this.getSpace(ou + 1) + "<mrow>\n");
            this.getMathMLChildren(ov, ou + 1);
            ov.append(this.getSpace(ou + 1) + "</mrow>\n");
        }
        ov.append(this.getSpace(ou) + "</mfenced>\n");
        return ov.toString();
    };
    dZ.prototype.getFences = function () {
        var ou = new fq("");
        ou.append(" open='" + this.openValue + "'");
        ou.append(" close='" + this.closeValue + "'");
        return ou.toString();
    };

    function lq(ou, oy, ov, ow, ox) {
        this.binom = false;
        this.attributes = "";
        this.dKH = m0;
        this.dKH("mfrac");
        this.binom = ov;
        if (ow) {
            this.attributes = " bevelled='true'";
        }
        if (ox) {
            this.attributes = " mathsize='75%'";
        }
        this.getChildren().add(ou);
        this.getChildren().add(oy);
    }
    ga(lq, m0);
    lq.prototype.toMathMLString = function (ow) {
        var oz = new fq("");
        if (this.binom) {
            oz.append(this.getSpace(ow) + "<mfenced>\n");
            oz.append(this.getSpace(ow + 1) + "<mtable>\n");
            oz.append(this.getSpace(ow + 2) + "<mtr>\n");
            oz.append(this.getSpace(ow + 3) + "<mtd>\n");
            var ov = this.getChildren().get(0);
            oz.append(ov.toMathMLString(ow + 4));
            oz.append(this.getSpace(ow + 3) + "</mtd>\n");
            oz.append(this.getSpace(ow + 2) + "</mtr>\n");
            oz.append(this.getSpace(ow + 2) + "<mtr>\n");
            oz.append(this.getSpace(ow + 3) + "<mtd>\n");
            var ou = this.getChildren().get(1);
            oz.append(ou.toMathMLString(ow + 4));
            oz.append(this.getSpace(ow + 3) + "</mtd>\n");
            oz.append(this.getSpace(ow + 2) + "</mtr>\n");
            oz.append(this.getSpace(ow + 1) + "</mtable>\n");
            oz.append(this.getSpace(ow) + "</mfenced>\n");
            return oz.toString();
        }
        oz.append(
            this.getSpace(ow) +
                "<mfrac" +
                this.attributes +
                this.getStyleAttributes() +
                ">\n",
        );
        var ox = this.getChildren().get(0);
        oz.append(ox.toMathMLString(ow + 1));
        var oy = this.getChildren().get(1);
        oz.append(oy.toMathMLString(ow + 1));
        oz.append(this.getSpace(ow) + "</mfrac>\n");
        return oz.toString();
    };

    function bc(ou) {
        this.dKH = m0;
        this.dKH("mo");
        this.setText(ou);
        this.getStyle().setFont("normal");
    }
    ga(bc, m0);

    function fS(ou, ov) {
        this.type;
        this.dKH = m0;
        this.dKH("func");
        this.type = ou;
        this.getChildren().add(ov);
    }
    ga(fS, m0);
    fS.prototype.toMathMLString = function (ou) {
        var ow = new fq("");
        if ("bar" == this.type) {
            ow.append(
                this.getSpace(ou) +
                    "<mover" +
                    this.getStyleAttributes() +
                    ">\n",
            );
            var ov = this.getChildren().get(0);
            ow.append(ov.toMathMLString(ou + 1));
            ow.append(
                this.getSpace(ou + 1) + "<mo accent='true'>&oline;</mo>\n",
            );
            ow.append(this.getSpace(ou) + "</mover>\n");
        }
        return ow.toString();
    };

    function fG() {
        this.mathModeTabDistance = 80;
        this.labeled = false;
        this.label = "";
        this.dKH = m0;
        this.dKH("mathmode");
        this.getStyle().setFont("italic");
    }
    ga(fG, m0);
    fG.prototype.isLabeled = function () {
        return this.labeled;
    };
    fG.prototype.setLabeled = function (ou) {
        this.labeled = ou;
    };
    fG.prototype.getLabel = function () {
        return this.label;
    };
    fG.prototype.setLabel = function (ou) {
        this.label = ou;
    };
    fG.prototype.getStyleAttributes = function () {
        var ov = new fq("");
        var ou = c5.prototype.getStyleAttributes.call(this);
        ov.append(ou);
        if (this.getStyle().getInline() != null) {
            ov.append(" displaystyle='false'");
        }
        return ov.toString();
    };
    fG.prototype.toMathMLString = function (ou) {
        var ov = new fq("");
        if (this.getStyle().getInline() == null) {
            if (!this.labeled) {
                ov.append(
                    this.getSpace(ou) +
                        "<mspace linebreak='newline'></mspace>\n",
                );
            }
            ov.append(
                this.getSpace(ou) +
                    "<mspace width='" +
                    this.mathModeTabDistance +
                    "'></mspace>\n",
            );
        }
        ov.append(
            this.getSpace(ou) + "<mstyle" + this.getStyleAttributes() + ">\n",
        );
        this.toMathMLTextChildren(ov, ou);
        ov.append(this.getSpace(ou) + "</mstyle>\n");
        if (this.getStyle().getInline() == null && !this.labeled) {
            ov.append(
                this.getSpace(ou) + "<mspace linebreak='newline'></mspace>\n",
            );
        }
        return ov.toString();
    };

    function de(ou) {
        this.type;
        this.parameters;
        this.allParameters;
        this.borderLeft = false;
        this.borderRight = false;
        this.dKH = m0;
        this.dKH("matrix");
        this.type = ou;
    }
    ga(de, m0);
    de.prototype.setParams = function (ou) {
        this.allParameters = ou;
        if (this.allParameters != null) {
            if (this.allParameters.indexOf("|") == 0) {
                this.borderLeft = true;
                this.allParameters = this.allParameters.substring(
                    1,
                    this.allParameters.length,
                );
            }
            if (
                this.allParameters.lastIndexOf("|") ==
                this.allParameters.length - 1
            ) {
                this.borderRight = true;
                this.allParameters = this.allParameters.substring(
                    0,
                    this.allParameters.length - 1,
                );
            }
        }
        this.parameters = W.replace(ou, "|", "");
    };
    de.prototype.toMathMLString = function (ou) {
        var ov = new fq("");
        if (
            this.type.indexOf("matrix") == 0 ||
            this.type.indexOf("pmatrix") == 0
        ) {
            ov.append(this.getSpace(ou) + "<mfenced>\n");
            this.processTable(ov, this.getChildren(), ou + 1);
            ov.append(this.getSpace(ou) + "</mfenced>\n");
        } else {
            if ("smallmatrix" == this.type) {
                ov.append(this.getSpace(ou) + "<mfenced mathsize='50%'>\n");
                this.processTable(ov, this.getChildren(), ou + 1);
                ov.append(this.getSpace(ou) + "</mfenced>\n");
            } else {
                if (this.type.indexOf("bmatrix") == 0) {
                    ov.append(
                        this.getSpace(ou) + "<mfenced open='[' close=']'>\n",
                    );
                    this.processTable(ov, this.getChildren(), ou + 1);
                    ov.append(this.getSpace(ou) + "</mfenced>\n");
                } else {
                    if (this.type.indexOf("Bmatrix") == 0) {
                        ov.append(
                            this.getSpace(ou) +
                                "<mfenced open='{' close='}'>\n",
                        );
                        this.processTable(ov, this.getChildren(), ou + 1);
                        ov.append(this.getSpace(ou) + "</mfenced>\n");
                    } else {
                        if (this.type.indexOf("vmatrix") == 0) {
                            ov.append(
                                this.getSpace(ou) +
                                    "<mfenced open='|' close='|'>\n",
                            );
                            this.processTable(ov, this.getChildren(), ou + 1);
                            ov.append(this.getSpace(ou) + "</mfenced>\n");
                        } else {
                            if (this.type.indexOf("Vmatrix") == 0) {
                                ov.append(
                                    this.getSpace(ou) +
                                        "<mfenced open='&Verbar;' close='&Verbar;'>\n",
                                );
                                this.processTable(
                                    ov,
                                    this.getChildren(),
                                    ou + 1,
                                );
                                ov.append(this.getSpace(ou) + "</mfenced>\n");
                            } else {
                                if (this.type.indexOf("cases") == 0) {
                                    ov.append(
                                        this.getSpace(ou) +
                                            "<mfenced open='{' close=''>\n",
                                    );
                                    this.processTable(
                                        ov,
                                        this.getChildren(),
                                        ou + 1,
                                    );
                                    ov.append(
                                        this.getSpace(ou) + "</mfenced>\n",
                                    );
                                } else {
                                    this.processTable(
                                        ov,
                                        this.getChildren(),
                                        ou,
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
        return ov.toString();
    };
    de.prototype.processTable = function (oz, oy, ow) {
        var ou = new fM();
        oz.append(
            this.getSpace(ow) +
                "<mtable" +
                this.getBorderSeparatorInfo() +
                ">\n",
        );
        for (var ov = 0; ov < oy.size(); ov++) {
            var ox = oy.get(ov);
            if (ox instanceof E) {
                this.processRow(oz, ou, ow + 1);
                ou.clear();
            } else {
                ou.add(ox);
            }
        }
        this.processRow(oz, ou, ow + 1);
        oz.append(this.getSpace(ow) + "</mtable>\n");
    };
    de.prototype.processRow = function (oB, oz, ox) {
        if (oz.size() == 0) {
            return;
        }
        var ov = new fM();
        oB.append(this.getSpace(ox) + "<mtr>\n");
        var ou = 0;
        for (var ow = 0; ow < oz.size(); ow++) {
            var oy = oz.get(ow);
            var oA = oy.getText();
            if (oy instanceof om && "&&" == oA) {
                this.processColumn(oB, ov, ox + 1, ou++);
                ov.clear();
                oB.append(
                    this.getSpace(ox + 1) +
                        "<mtd" +
                        this.getColumnAlign(ou) +
                        ">\n",
                );
                oB.append(this.getSpace(ox + 1) + "</mtd>\n");
            } else {
                if (oy instanceof om && "&" == oA) {
                    this.processColumn(oB, ov, ox + 1, ou++);
                    ov.clear();
                } else {
                    ov.add(oy);
                }
            }
        }
        this.processColumn(oB, ov, ox + 1, ou++);
        oB.append(this.getSpace(ox) + "</mtr>\n");
    };
    de.prototype.processColumn = function (oz, oy, ow, ou) {
        oz.append(this.getSpace(ow) + "<mtd" + this.getColumnAlign(ou) + ">\n");
        for (var ov = 0; ov < oy.size(); ov++) {
            var ox = oy.get(ov);
            oz.append(ox.toMathMLString(ow + 1));
        }
        oz.append(this.getSpace(ow) + "</mtd>\n");
    };
    de.prototype.getColumnAlign = function (ou) {
        var ov = this.getColumnAlignCode(ou);
        ov = ov.toLowerCase();
        if (ov.length == 0) {
            return "";
        }
        if ("l" == ov) {
            return " columnalign='left'";
        }
        if ("r" == ov) {
            return " columnalign='right'";
        }
        return "";
    };
    de.prototype.getColumnAlignCode = function (ou) {
        if ("cases" == this.type) {
            return "l";
        }
        if (this.parameters == null || this.parameters.length == 0) {
            return "";
        }
        if (ou < this.parameters.length) {
            return this.parameters.charAt(ou) + "";
        }
        return this.parameters.charAt(this.parameters.length - 1) + "";
    };
    de.prototype.getBorderSeparatorInfo = function () {
        var ou = "";
        if (this.allParameters != null) {
            if (this.borderLeft) {
                ou = "border-left:0.08em";
            }
            if (this.borderRight) {
                if (ou.length > 0) {
                    ou = ou + ";border-right:0.08em";
                } else {
                    ou = "border-right:0.08em";
                }
            }
            if (ou.length > 0) {
                ou = " style='" + ou + "'";
            }
            if (this.allParameters.indexOf("|") > -1) {
                var ow = "";
                var ov = false;
                for (var ox = 0; ox < this.allParameters.length; ox++) {
                    var oy = this.allParameters.charAt(ox);
                    if (oy == "|") {
                        ow = ow + "solid ";
                        ov = false;
                    } else {
                        if (ov) {
                            ow = ow + "none ";
                        } else {
                            ov = true;
                        }
                    }
                }
                ow = W.trim(ow);
                if (ow.length > 0) {
                    ou = ou + " columnlines='" + ow + "'";
                }
            }
        }
        return ou;
    };

    function om(ou) {
        this.dKH = m0;
        this.dKH("mo");
        this.setText(ou);
    }
    ga(om, m0);
    om.prototype.toMathMLString = function (ou) {
        var ow = new fq("");
        var ov = "";
        if (eF.isVStretchy(this.getText())) {
            ov = " maxsize='1'";
        }
        ow.append(
            this.getSpace(ou) +
                "<mo" +
                ov +
                this.getStyleAttributes() +
                ">" +
                this.getText() +
                "</mo>\n",
        );
        return ow.toString();
    };

    function js(ou) {
        this.dKH = m0;
        this.dKH("mphantom");
        this.getChildren().add(ou);
    }
    ga(js, m0);
    js.prototype.doOptimization = function () {
        this.oneChildOptimization();
    };
    js.prototype.oneChildOptimization = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ow = ou.get(0);
            var ov = ow.toMathMLString(0);
            if (ov.indexOf("<mrow") == 0 && ow.getText() == null) {
                this.copyAllFrom(ow);
                ou.remove(0);
            }
        }
    };
    js.prototype.toMathMLString = function (ou) {
        var ov = new fq("");
        ov.append(
            this.getSpace(ou) + "<mphantom" + this.getStyleAttributes() + ">\n",
        );
        this.toMathMLTextChildren(ov, ou);
        ov.append(this.getSpace(ou) + "</mphantom>\n");
        return ov.toString();
    };

    function c3(ow, ov) {
        this.ismroot = false;
        this.dKH = m0;
        this.dKH("mroot");
        this.getChildren().add(ow);
        if (ov != null) {
            var ou = new m0("block");
            ou.setText(ov);
            this.getChildren().add(ou);
            this.ismroot = true;
        }
    }
    ga(c3, m0);
    c3.prototype.doOptimization = function () {
        this.oneChildOptimization();
    };
    c3.prototype.oneChildOptimization = function () {
        var ou = this.getChildren();
        if (ou.size() == 1) {
            var ow = ou.get(0);
            var ov = ow.toMathMLString(0);
            if (ov.indexOf("<mrow") == 0 && ow.getText() == null) {
                this.copyAllFrom(ow);
                ou.remove(0);
            }
        }
    };
    c3.prototype.toMathMLString = function (ow) {
        var oy = new fq("");
        var ov = this.getChildren();
        if (this.ismroot) {
            oy.append(
                this.getSpace(ow) +
                    "<mroot" +
                    this.getStyleAttributes() +
                    ">\n",
            );
            var ou = ov.get(0);
            oy.append(ou.toMathMLString(ow + 1));
            var ox = ov.get(1);
            oy.append(ox.toMathMLString(ow + 1));
            oy.append(this.getSpace(ow) + "</mroot>\n");
        } else {
            oy.append(
                this.getSpace(ow) +
                    "<msqrt" +
                    this.getStyleAttributes() +
                    ">\n",
            );
            this.toMathMLTextChildren(oy, ow);
            oy.append(this.getSpace(ow) + "</msqrt>\n");
        }
        return oy.toString();
    };

    function E(ov, ou) {
        this.widthValue;
        this.lineBreakValue = false;
        this.dKH = m0;
        this.dKH("mspace");
        this.widthValue = ov;
        this.lineBreakValue = ou;
    }
    ga(E, m0);
    E.prototype.getWidth = function () {
        return this.widthValue;
    };
    E.prototype.setWidth = function (ou) {
        this.widthValue = ou;
    };
    E.prototype.isLineBreak = function () {
        return this.lineBreakValue;
    };
    E.prototype.setLineBreak = function (ou) {
        this.lineBreakValue = ou;
    };
    E.prototype.toMathMLString = function (ou) {
        if (this.lineBreakValue) {
            return (
                this.getSpace(ou) +
                "<mspace linebreak='newline'" +
                this.getStyleAttributes() +
                "></mspace>\n"
            );
        }
        return (
            this.getSpace(ou) +
            "<mspace" +
            this.getStyleAttributes() +
            " width='" +
            this.widthValue +
            "'></mspace>\n"
        );
    };

    function dP(ou) {
        this.dKH = m0;
        this.dKH(ou);
    }
    ga(dP, m0);

    function eP(ou) {
        this.limitsValue;
        this.preSupBlocks = new fM();
        this.preSubBlocks = new fM();
        this.supBlocks = new fM();
        this.subBlocks = new fM();
        this.flagAdded = "";
        this.dKH = m0;
        this.dKH("multi");
        this.getChildren().add(ou);
    }
    ga(eP, m0);
    eP.prototype.addSupBlocks = function (ou) {
        if ("Sup" == this.flagAdded) {
            this.subBlocks.add("-1");
        }
        this.supBlocks.add(this.getChildren().size() + "");
        this.getChildren().add(ou);
        this.flagAdded = "Sup";
    };
    eP.prototype.addSubBlocks = function (ou) {
        if ("Sub" == this.flagAdded) {
            this.supBlocks.add("-1");
        }
        this.subBlocks.add(this.getChildren().size() + "");
        this.getChildren().add(ou);
        this.flagAdded = "Sub";
    };
    eP.prototype.addPreSupBlocks = function (ou) {
        this.preSupBlocks.add(this.getChildren().size() + "");
        this.getChildren().add(ou);
    };
    eP.prototype.addPreSubBlocks = function (ou) {
        this.preSubBlocks.add(this.getChildren().size() + "");
        this.getChildren().add(ou);
    };
    eP.prototype.getLimitsValue = function () {
        return this.limitsValue;
    };
    eP.prototype.setLimitsValue = function (ou) {
        this.limitsValue = ou;
    };
    eP.prototype.toMathMLString = function (ov) {
        var oz = new fq("");
        var ow = this.calculateType();
        if ("mmultiscript" == ow) {
            oz.append(
                this.getSpace(ov) +
                    "<mmultiscripts" +
                    this.getStyleAttributes() +
                    ">\n",
            );
            var ox = this.getChildren().get(0);
            oz.append(ox.toMathMLString(ov + 1));
            var oy = this.supBlocks.size();
            if (oy < this.subBlocks.size()) {
                oy = this.subBlocks.size();
            }
            for (var ou = 0; ou < oy; ou++) {
                if (ou < this.subBlocks.size()) {
                    this.addChildString(this.subBlocks, ou, oz, ov + 1);
                } else {
                    oz.append(this.getSpace(ov + 1) + "<none></none>\n");
                }
                if (ou < this.supBlocks.size()) {
                    this.addChildString(this.supBlocks, ou, oz, ov + 1);
                } else {
                    oz.append(this.getSpace(ov + 1) + "<none></none>\n");
                }
            }
            oy = this.preSupBlocks.size();
            if (oy < this.preSubBlocks.size()) {
                oy = this.preSubBlocks.size();
            }
            if (oy > 0) {
                oz.append(
                    this.getSpace(ov + 1) + "<mprescripts></mprescripts>\n",
                );
            }
            for (var ou = 0; ou < oy; ou++) {
                if (ou < this.preSubBlocks.size()) {
                    this.addChildString(this.preSubBlocks, ou, oz, ov + 1);
                } else {
                    oz.append(this.getSpace(ov + 1) + "<none></none>\n");
                }
                if (ou < this.preSupBlocks.size()) {
                    this.addChildString(this.preSupBlocks, ou, oz, ov + 1);
                } else {
                    oz.append(this.getSpace(ov + 1) + "<none></none>\n");
                }
            }
            oz.append(
                this.getSpace(ov) +
                    "</mmultiscripts" +
                    this.getStyleAttributes() +
                    ">\n",
            );
        } else {
            if ("msup" == ow || "mover" == ow) {
                oz.append(
                    this.getSpace(ov) +
                        "<" +
                        ow +
                        this.getStyleAttributes() +
                        ">\n",
                );
                var ox = this.getChildren().get(0);
                oz.append(ox.toMathMLString(ov + 1));
                this.addList(oz, this.supBlocks, ov + 1);
                oz.append(this.getSpace(ov) + "</" + ow + ">\n");
            } else {
                if ("msub" == ow || "munder" == ow) {
                    oz.append(
                        this.getSpace(ov) +
                            "<" +
                            ow +
                            this.getStyleAttributes() +
                            ">\n",
                    );
                    var ox = this.getChildren().get(0);
                    oz.append(ox.toMathMLString(ov + 1));
                    this.addList(oz, this.subBlocks, ov + 1);
                    oz.append(this.getSpace(ov) + "</" + ow + ">\n");
                } else {
                    oz.append(
                        this.getSpace(ov) +
                            "<" +
                            ow +
                            this.getStyleAttributes() +
                            ">\n",
                    );
                    var ox = this.getChildren().get(0);
                    oz.append(ox.toMathMLString(ov + 1));
                    this.addList(oz, this.subBlocks, ov + 1);
                    this.addList(oz, this.supBlocks, ov + 1);
                    oz.append(this.getSpace(ov) + "</" + ow + ">\n");
                }
            }
        }
        return oz.toString();
    };
    eP.prototype.addList = function (ox, ow, ov) {
        if (ow.size() == 1) {
            this.addChildString(ow, 0, ox, ov);
        } else {
            ox.append(this.getSpace(ov) + "<mrow>\n");
            for (var ou = 0; ou < ow.size(); ou++) {
                this.addChildString(ow, ou, ox, ov + 1);
            }
            ox.append(this.getSpace(ov) + "</mrow>\n");
        }
    };
    eP.prototype.addChildString = function (oy, ow, oA, ov) {
        var oz = oy.get(ow);
        var ou = lv.getIntegerValue(oz, -1);
        if (ou < 0) {
            oA.append(this.getSpace(ov) + "<none></none>\n");
        } else {
            var ox = this.getChildren().get(ou);
            oA.append(ox.toMathMLString(ov));
        }
    };
    eP.prototype.calculateType = function () {
        var ow = null;
        var ox = this.getTextBase();
        if (ox == null) {
            ox = "";
        }
        var ov = h.changeCharForCode(ox);
        var ou = eF.getStyleForOperator(ov);
        if (
            this.preSupBlocks.size() > 0 ||
            this.preSubBlocks.size() > 0 ||
            this.supBlocks.size() > 1 ||
            this.subBlocks.size() > 1
        ) {
            return "mmultiscript";
        }
        if (this.supBlocks.size() == 0) {
            ow = this.verifyOperators(ou, "msub", "munder");
            if (ow != null) {
                return ow;
            }
            if (
                "limits" == this.limitsValue ||
                "lim" == ox ||
                "inf" == ox ||
                "sup" == ox
            ) {
                return "munder";
            }
            return "msub";
        }
        if (this.subBlocks.size() == 0) {
            ow = this.verifyOperators(ou, "msup", "mover");
            if (ow != null) {
                return ow;
            }
            if ("limits" == this.limitsValue) {
                return "mover";
            }
            return "msup";
        }
        ow = this.verifyOperators(ou, "msubsup", "munderover");
        if (ow == null) {
            ow = "msubsup";
        }
        return ow;
    };
    eP.prototype.verifyOperators = function (ow, ov, ou) {
        if (ow.isIntegral()) {
            if ("limits" == this.limitsValue) {
                return ou;
            }
            return ov;
        }
        if (ow.isLargeop()) {
            if ("nolimits" == this.limitsValue) {
                return ov;
            }
            return ou;
        }
        return null;
    };
    eP.prototype.getTextBase = function () {
        var ou = this.getChildren().get(0);
        return ou.getText();
    };

    function fa() {
        this.dKH = m0;
        this.dKH("textmode");
    }
    ga(fa, m0);
    fa.prototype.toMathMLString = function (ou) {
        var ov = new fq("");
        ov.append(
            this.getSpace(ou) + "<mtext" + this.getStyleAttributes() + ">",
        );
        ov.append(this.format(this.getText()));
        ov.append("</mtext>\n");
        return ov.toString();
    };
    fa.prototype.format = function (ou) {
        if (ou == null) {
            return "";
        }
        if (ou.indexOf(" ") == 0) {
            ou = "&nbsp;" + ou.substring(1, ou.length);
        }
        if (ou.length > 0) {
            if (ou.lastIndexOf(" ") == ou.length - 1) {
                ou = ou.substring(0, ou.length - 1) + "&nbsp;";
            }
        }
        return ou;
    };

    function ng() {
        this.index = 1;
    }
    ng.prototype.getNextLabel = function () {
        var ou = "( " + this.index + " )";
        this.index = this.index + 1;
        return ou;
    };

    function ho() {
        this.inline;
        this.font;
        this.fontSize = -1;
        this.bold;
        this.italic;
        this.color;
        this.bgcolor;
    }
    ho.prototype.getFont = function () {
        return this.font;
    };
    ho.prototype.setFont = function (ou) {
        this.font = ou;
    };
    ho.prototype.getFontSize = function () {
        return this.fontSize;
    };
    ho.prototype.setFontSize = function (ou) {
        this.fontSize = ou;
    };
    ho.prototype.getBold = function () {
        return this.bold;
    };
    ho.prototype.setBold = function (ou) {
        this.bold = ou;
    };
    ho.prototype.getItalic = function () {
        return this.italic;
    };
    ho.prototype.setItalic = function (ou) {
        this.italic = ou;
    };
    ho.prototype.getColor = function () {
        return this.color;
    };
    ho.prototype.setColor = function (ou) {
        this.color = ou;
    };
    ho.prototype.getBgcolor = function () {
        return this.bgcolor;
    };
    ho.prototype.setBgcolor = function (ou) {
        this.bgcolor = ou;
    };
    ho.prototype.getInline = function () {
        return this.inline;
    };
    ho.prototype.setInline = function (ou) {
        this.inline = ou;
    };
    ho.prototype.createCopy = function () {
        var ou = new ho();
        ou.setFont(this.font);
        ou.setFontSize(this.fontSize);
        ou.setBold(this.bold);
        ou.setItalic(this.italic);
        ou.setColor(this.color);
        ou.setBgcolor(this.bgcolor);
        ou.setInline(this.inline);
        return ou;
    };
    ho.prototype.copyAllFrom = function (ou) {
        if (this.font == null) {
            this.font = ou.getFont();
        }
        if (this.fontSize == -1) {
            this.fontSize = ou.getFontSize();
        }
        if (this.bold == null) {
            this.bold = ou.getBold();
        }
        if (this.italic == null) {
            this.italic = ou.getItalic();
        }
        if (this.color == null) {
            this.color = ou.getColor();
        }
        if (this.bgcolor == null) {
            this.bgcolor = ou.getBgcolor();
        }
        if (this.inline == null) {
            this.inline = ou.getInline();
        }
    };

    function iL() {}
    iL.prototype.processToLatex = function (ou, ov) {
        return "";
    };
    iL.prototype.processToOmml = function (ou, ow, ov) {
        return "";
    };
    iL.prototype.addTextAndColor = function (ou, ov) {
        if (ou.getAttribute("mathvariant") != null) {
            ov = W.trim(ov);
            ov =
                "\\" +
                this.getTextType(ou.getAttribute("mathvariant")) +
                "{" +
                ov +
                "}";
        }
        if (ou.getAttribute("mathcolor") != null) {
            ov = W.trim(ov);
            ov =
                "\\textcolor{" +
                this.getColorType(ou.getAttribute("mathcolor")) +
                "}{" +
                ov +
                "}";
        }
        return ov;
    };
    iL.prototype.getColorType = function (ou) {
        ou = c2.getColorName(ou);
        ou = ou.toLowerCase();
        return ou;
    };
    iL.prototype.getTextType = function (ou) {
        if ("italic" == ou) {
            return "mathit";
        }
        if ("script" == ou) {
            return "mathcal";
        }
        if ("double-struck" == ou) {
            return "mathbb";
        }
        if ("fraktur" == ou) {
            return "mathfrak";
        }
        if ("sans-serif" == ou) {
            return "mathsf";
        }
        return "mathnormal";
    };
    iL.prototype.addTabs = function (ow) {
        var ov = new fq("");
        for (var ou = 0; ou < ow; ou++) {
            ov.append("    ");
        }
        return ov.toString();
    };
    iL.prototype.displayText = function (ov, ox, ou) {
        ov = W.xmlescape(ov);
        ov = W.changeA0(ov);
        var ow = new fq("");
        ow.append(this.addTabs(ox) + "<" + ou.getNamespace() + "r>\n");
        ow.append(
            this.addTabs(ox + 1) +
                '<w:rPr><w:rFonts w:ascii="Cambria Math" w:hAnsi="Cambria Math"/></w:rPr>\n',
        );
        ow.append(this.addTabs(ox + 1) + "<" + ou.getNamespace() + "t");
        if (ov.indexOf(" ") > -1) {
            ow.append(' xml:space="preserve"');
        }
        ow.append(">");
        ow.append(ov);
        ow.append("</" + ou.getNamespace() + "t>\n");
        ow.append(this.addTabs(ox) + "</" + ou.getNamespace() + "r>\n");
        ou.setParentMrow(false);
        return ow.toString();
    };
    iL.prototype.copyInfo = function (ov) {
        var ou = new bs();
        ou.setNamespace(ov.getNamespace());
        ou.setNamespaceUrl(ov.getNamespaceUrl());
        return ou;
    };
    iL.prototype.copyInfoRTag = function (ov) {
        var ou = this.copyInfo(ov);
        ou.setParentMrow(ov.isParentMrow());
        return ou;
    };
    iL.prototype.copyInfoRTagAndRow = function (ov) {
        var ou = this.copyInfo(ov);
        ou.setParentMrow(true);
        return ou;
    };

    function dQ() {
        this.dKI = iL;
        this.dKI();
    }
    ga(dQ, iL);

    function er() {
        this.dKI = iL;
        this.dKI();
    }
    ga(er, iL);
    er.prototype.processToLatex = function (oI, oH) {
        var oG = "";
        if (er.isNotMathBean(oI) || er.isOnlyItalic(oI)) {
            this.removeItalic(oI);
            oH.setMathMode(true);
            var oD = d1.process(oI, oH);
            oD = W.trim(oD);
            oG = "\\[" + oD + "\\]";
        } else {
            if (er.isInline(oI)) {
                this.removeItalic(oI);
                oH.setMathMode(true);
                var oD = d1.process(oI, oH);
                oD = W.trim(oD);
                oG = er.getOpen(oI) + oD + er.getClose(oI);
            } else {
                if (this.islabelMode(oI)) {
                    var ov = oI.getChildren();
                    for (var oy = 0; oy < ov.size(); oy++) {
                        var oJ = ov.get(oy);
                        var oA = oJ.getChildren();
                        if (oA.size() == 1) {
                            var ou = oA.get(0);
                            if (ou instanceof iF) {
                                var oC = ou;
                                var oB = oC.getChildren();
                                for (var oz = 0; oz < oB.size(); oz++) {
                                    var oE = oB.get(oz);
                                    var oF = oE.getChildren();
                                    for (var ox = 0; ox < oF.size(); ox++) {
                                        var ow = oF.get(ox);
                                        oG = oG + this.processMathModes(ow, oH);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    this.cleanupChildren(oI);
                    oG = this.processMathModes(oI, oH);
                }
            }
        }
        return W.trim(oG);
    };
    er.prototype.processMathModes = function (oC, oB) {
        var oA = "";
        var ov = oC.getChildren();
        for (var ox = 0; ox < ov.size(); ox++) {
            var oD = ov.get(ox);
            var oz = oD.getChildren();
            for (var oy = 0; oy < oz.size(); oy++) {
                var ou = oz.get(oy);
                if (ou instanceof iJ) {
                    this.removeItalic(ou);
                    var oE = oB.clone();
                    oE.setMathMode(true);
                    var ow = d1.process(ou, oE);
                    ow = W.trim(ow);
                    oA = oA + er.getOpen(ou) + ow + er.getClose(ou);
                } else {
                    var oE = oB.clone();
                    oE.setMathMode(false);
                    oA = oA + d1.process(ou, oE);
                }
            }
        }
        return oA;
    };
    er.prototype.islabelMode = function (oC) {
        if (oC instanceof k) {
            var ov = oC.getChildren();
            for (var ow = 0; ow < ov.size(); ow++) {
                var oD = ov.get(ow);
                var oy = oD.getChildren();
                if (oy.size() == 1) {
                    var ou = oy.get(0);
                    if (ou instanceof iF) {
                        var oA = ou;
                        var oz = oA.getChildren();
                        for (var ox = 0; ox < oz.size(); ox++) {
                            var oB = oz.get(ox);
                            if (oB instanceof ad) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    er.prototype.cleanupChildren = function (oC) {
        var ou = oC.getChildren();
        for (var ow = 0; ow < ou.size() - 1; ow++) {
            var oD = ou.get(ow);
            var oB = oD.getChildren();
            if (oB.size() == 3) {
                var oA = oB.get(0);
                var oz = oB.get(1);
                var oy = oB.get(2);
                var ov = ou.get(ow + 1);
                var oE = ov.getChildren();
                if (oE.size() > 0) {
                    var ox = oE.get(0);
                    if (oA instanceof cT) {
                        if (oz instanceof cT) {
                            if (oy instanceof iJ) {
                                if (ox instanceof cT) {
                                    oB.remove(1);
                                    oB.remove(0);
                                    oE.remove(0);
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    er.prototype.removeItalic = function (ou) {
        var ov = ou.getStyle().getMathvariant().getMathvariant();
        if (ov != null) {
            ou.getStyle().setItalic(false);
            ov = ou.getStyle().getMathvariant().getMathvariant();
            if ("normal" == ov) {
                ou.getStyle().setMathvariant(null);
            }
            ou.setAttribute(
                "mathvariant",
                ou.getStyle().getMathvariant().getMathvariant(),
            );
        }
    };
    er.isNotMathBean = function (ou) {
        if (ou instanceof k) {
            return false;
        }
        return true;
    };
    er.isOnlyItalic = function (ou) {
        if (er.isItalic(ou)) {
            return !er.isInline(ou);
        }
        return false;
    };
    er.isItalic = function (ou) {
        var ov = ou.getStyle().getMathvariant().getMathvariant();
        if (ov != null) {
            if ("italic" == ov) {
                return true;
            }
        }
        return false;
    };
    er.getOpen = function (ou) {
        if (er.isLabeled(ou)) {
            return "\\begin{equation}";
        }
        if (er.isInline(ou)) {
            return "$";
        }
        return "\\[";
    };
    er.getClose = function (ou) {
        if (er.isLabeled(ou)) {
            return "\\end{equation}";
        }
        if (er.isInline(ou)) {
            return "$";
        }
        return "\\]";
    };
    er.isLabeled = function (ov) {
        var ow = ov.getParentBean();
        if (ow != null) {
            ow = ow.getParentBean();
            if (ow != null && ow instanceof al) {
                var ou = ow.getParentBean();
                if (ou != null && ou instanceof ad) {
                    return true;
                }
            }
        }
        return false;
    };
    er.isInline = function (ou) {
        var ov = ou.getCurrentDefStyle().getDisplaystyle();
        if (ov != null) {
            if ("false" == ov) {
                return true;
            }
        }
        return false;
    };
    er.prototype.processToOmml = function (ou, ow, ov) {
        return "";
    };

    function g3() {
        this.dKI = iL;
        this.dKI();
    }
    ga(g3, iL);
    g3.prototype.processToLatex = function (ou, ov) {
        var ow = d1.processChildren(ou, ov);
        return this.addTextAndColor(ou, ow);
    };
    g3.prototype.processToOmml = function (ow, ov, ou) {
        return eK.processChildren(ow, ov, ou);
    };

    function eg() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(eg, g3);

    function nh() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(nh, g3);
    nh.prototype.processToLatex = function (oz, oE) {
        var oC = oz;
        var oF = oC.getChildren();
        for (var ov = 0; ov < oF.size(); ov++) {
            var oG = oF.get(ov);
            var ou = oG.getChildren();
            var oD = ou.get(ou.size() - 1);
            if (oD.isDynamicCreated()) {
                ou.remove(ou.size() - 1);
            }
            var ow = ou.get(0);
            if (ow.isDynamicCreated()) {
                ou.remove(0);
            }
        }
        if (this.isBinom(oC)) {
            return (
                "\\binom{" +
                this.getBinom(oC, 0, oE) +
                "}{" +
                this.getBinom(oC, 1, oE) +
                "}"
            );
        }
        var oA = this.getMatrixType(oC);
        if (oA != null) {
            var oy = this.getTableBean(oC);
            var ox = h0.buildArrayContent(oy, oE);
            if (oA.indexOf("*") > -1) {
                return (
                    "\\begin{" +
                    oA +
                    "}[" +
                    h0.computeAlignment(oy) +
                    "]" +
                    ox +
                    "\\end{" +
                    oA +
                    "}"
                );
            }
            return "\\begin{" + oA + "}" + ox + "\\end{" + oA + "}";
        }
        var oB = g3.prototype.processToLatex.call(this, oC, oE);
        oB = W.trim(oB);
        return (
            this.getCharFrom("\\left", oC.getOpen()) +
            " " +
            oB +
            " " +
            this.getCharFrom("\\right", oC.getClose())
        );
    };
    nh.prototype.getBinom = function (oE, oA, oG) {
        var oH = oE.getChildren();
        if (oH != null && oH.size() == 1) {
            var oI = oH.get(0);
            var ou = oI.getChildren();
            if (ou != null && ou.size() == 1) {
                var ow = ou.get(0);
                if (ow instanceof iF) {
                    var oF = ow;
                    var oD = oF.getChildren();
                    if (oD.size() == 2) {
                        var oy = oD.get(oA);
                        var oz = oy.getChildren();
                        if (oz.size() == 1) {
                            var ox = oz.get(0);
                            return d1.process(ox, oG);
                        }
                    }
                    if (oD.size() == 1) {
                        var oB = oD.get(0);
                        var oC = oB.getChildren();
                        if (oC.size() == 2) {
                            var ox = oC.get(oA);
                            return d1.process(ox, oG);
                        }
                    }
                } else {
                    if (ow instanceof os) {
                        var ov = ow;
                        if (oA == 0) {
                            return d1.process(ov.getNum(), oG);
                        }
                        if (oA == 1) {
                            return d1.process(ov.getDenum(), oG);
                        }
                    }
                }
            }
        }
        return "";
    };
    nh.prototype.isBinom = function (oC) {
        var oE = oC.getChildren();
        if (oE.size() == 1) {
            var oF = oE.get(0);
            var ou = oF.getChildren();
            if (ou.size() == 1) {
                var ow = ou.get(0);
                if (ow instanceof iF) {
                    var oD = ow;
                    var oB = oD.getChildren();
                    if (oB.size() == 2) {
                        var oz = oB.get(0);
                        var ox = oB.get(1);
                        var oA = oz.getChildren();
                        var oy = ox.getChildren();
                        if (oA.size() == 1 && oy.size() == 1) {
                            return true;
                        }
                    }
                } else {
                    if (ow instanceof os) {
                        var ov = ow;
                        if ("0" == ov.getLinethickness()) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    nh.prototype.getMatrixType = function (ox) {
        var ow = ox.getChildren();
        if (ow.size() == 1) {
            var ov = ow.get(0);
            var oy = ov.getChildren();
            if (oy.size() == 1) {
                var oB = oy.get(0);
                if (oB instanceof iF) {
                    var oz = oB;
                    if ("50%" == ox.getAttribute("mathsize")) {
                        return "smallmatrix";
                    }
                    var oA = h0.computeAlignment(oz);
                    if ("[" == ox.getOpen() && "]" == ox.getClose()) {
                        if (oA.indexOf("l") > -1 || oA.indexOf("r") > -1) {
                            return "bmatrix*";
                        }
                        return "bmatrix";
                    }
                    if ("{" == ox.getOpen() && "}" == ox.getClose()) {
                        if (oA.indexOf("l") > -1 || oA.indexOf("r") > -1) {
                            return "Bmatrix*";
                        }
                        return "Bmatrix";
                    }
                    if ("|" == ox.getOpen() && "|" == ox.getClose()) {
                        if (oA.indexOf("l") > -1 || oA.indexOf("r") > -1) {
                            return "vmatrix*";
                        }
                        return "vmatrix";
                    }
                    if ("{" == ox.getOpen() && "" == ox.getClose()) {
                        return "cases";
                    }
                    var ou = h.convertToChars("&Verbar;");
                    if (ou == ox.getOpen() && ou == ox.getClose()) {
                        if (oA.indexOf("l") > -1 || oA.indexOf("r") > -1) {
                            return "Vmatrix*";
                        }
                        return "Vmatrix";
                    }
                    if ("(" == ox.getOpen() && ")" == ox.getClose()) {
                        if (oA.indexOf("l") > -1 || oA.indexOf("r") > -1) {
                            return "matrix*";
                        }
                        return "matrix";
                    }
                }
            }
        }
        return null;
    };
    nh.prototype.getTableBean = function (ow) {
        var ov = ow.getChildren();
        var ou = ov.get(0);
        var ox = ou.getChildren();
        return ox.get(0);
    };
    nh.prototype.getCharFrom = function (ow, oy) {
        if ("" == oy) {
            return ow + ".";
        }
        oy = h.convToEntities(oy);
        var ox = mm.split(",");
        var ov = cy.split(",");
        for (var ou = 0; ou < ov.length; ou++) {
            var oz = ov[ou];
            if (oz.length > 0) {
                if (oy == oz) {
                    return ow + ox[ou];
                }
            }
        }
        return "";
    };
    nh.prototype.processToOmml = function (oC, ov, oy) {
        var oF = oC;
        var oG = oF.getChildren();
        for (var oA = 0; oA < oG.size(); oA++) {
            var oH = oG.get(oA);
            var ou = oH.getChildren();
            for (var oz = 0; oz < ou.size(); oz++) {
                var ox = ou.get(oz);
                if (ox.isDynamicCreated()) {
                    ou.remove(oz);
                    oz--;
                }
            }
        }
        var oD = new fq("");
        oD.append(this.addTabs(ov) + "<" + oy.getNamespace() + "d>\n");
        oD.append(this.addTabs(ov + 1) + "<" + oy.getNamespace() + "dPr>\n");
        if (oF.getOpen() != null && !(oF.getOpen() == ej)) {
            oD.append(
                this.addTabs(ov + 2) +
                    "<" +
                    oy.getNamespace() +
                    "begChr " +
                    oy.getNamespace() +
                    'val="' +
                    oF.getOpen() +
                    '"/>\n',
            );
        }
        if (oF.getClose() != null && !(oF.getClose() == iN)) {
            oD.append(
                this.addTabs(ov + 2) +
                    "<" +
                    oy.getNamespace() +
                    "endChr " +
                    oy.getNamespace() +
                    'val="' +
                    oF.getClose() +
                    '"/>\n',
            );
        }
        oD.append(this.addTabs(ov + 2) + "<" + oy.getNamespace() + "ctrlPr>\n");
        oD.append(
            this.addTabs(ov + 2) + "</" + oy.getNamespace() + "ctrlPr>\n",
        );
        oD.append(this.addTabs(ov + 1) + "</" + oy.getNamespace() + "dPr>\n");
        var ow = oF.getChildren();
        for (var oA = 0; oA < ow.size(); oA++) {
            var oB = ow.get(oA);
            var ou = oB.getChildren();
            for (var oz = 0; oz < ou.size(); oz++) {
                var oE = ou.get(oz);
                oD.append(
                    this.addTabs(ov + 1) + "<" + oy.getNamespace() + "e>\n",
                );
                oD.append(
                    eK.processBeans(oE, ov + 2, this.copyInfoRTagAndRow(oy)),
                );
                oD.append(
                    this.addTabs(ov + 1) + "</" + oy.getNamespace() + "e>\n",
                );
            }
        }
        oD.append(this.addTabs(ov) + "</" + oy.getNamespace() + "d>\n");
        oy.setParentMrow(false);
        return oD.toString();
    };

    function mD() {
        this.dKI = iL;
        this.dKI();
    }
    ga(mD, iL);
    mD.prototype.processToLatex = function (oz, ox) {
        var ou = oz;
        var ow = d1.process(ou.getNum(), ox);
        var ov = d1.process(ou.getDenum(), ox);
        ow = W.trim(ow);
        ov = W.trim(ov);
        var oy = "";
        if (ou.isBevelled()) {
            oy = "\\sfrac{" + ow + "}{" + ov + "}";
        } else {
            if ("75%" == ou.getAttribute("mathsize")) {
                oy = "\\cfrac{" + ow + "}{" + ov + "}";
            } else {
                if (ou.getLinethickness() == "0") {
                    oy = "\\begin{array}" + ow + " \\\\ " + ov + "\\end{array}";
                } else {
                    oy = "\\frac{" + ow + "}{" + ov + "}";
                }
            }
        }
        return this.addTextAndColor(ou, oy);
    };
    mD.prototype.processToOmml = function (oy, ox, ov) {
        var ou = oy;
        var ow = new fq("");
        ow.append(this.addTabs(ox) + "<" + ov.getNamespace() + "f>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "fPr>\n");
        if (ou.isBevelled()) {
            ow.append(
                this.addTabs(ox + 2) +
                    "<" +
                    ov.getNamespace() +
                    'type m:val="skw"/>\n',
            );
        }
        if (ou.getLinethickness() == "0") {
            ow.append(
                this.addTabs(ox + 2) +
                    "<" +
                    ov.getNamespace() +
                    'type m:val="noBar"/>\n',
            );
        }
        ow.append(this.addTabs(ox + 2) + "<" + ov.getNamespace() + "ctrlPr>\n");
        ow.append(
            this.addTabs(ox + 2) + "</" + ov.getNamespace() + "ctrlPr>\n",
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "fPr>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "num>\n");
        ow.append(
            eK.processBeans(ou.getNum(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "num>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "den>\n");
        ow.append(
            eK.processBeans(ou.getDenum(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "den>\n");
        ow.append(this.addTabs(ox) + "</" + ov.getNamespace() + "f>\n");
        ov.setParentMrow(false);
        return ow.toString();
    };

    function bo() {
        this.dKI = iL;
        this.dKI();
    }
    ga(bo, iL);
    bo.prototype.processToLatex = function (oy, ov) {
        var ou = oy;
        var ow = ou.getText();
        if (bo.textIsFunction(ow)) {
            return "\\" + ow;
        }
        ow = W.replace(ow, "$", "\\$");
        if (ov.isMathMode()) {
            ow = W.replace(ow, "#", "\\#");
        }
        ow = cW.convToEntities(ow);
        if (ov.isMathMode()) {
            if (ow.indexOf(" ") > -1) {
                return (
                    "\\" +
                    bo.getTypeOfText(ou.getAttribute("mathvariant")) +
                    "{" +
                    ow +
                    "}"
                );
            }
            if (ou.getAttribute("mathvariant") != null) {
                var ox = ou.getAttribute("mathvariant");
                if (!"italic" == ox) {
                    return "\\" + bo.getTypeOfText(ox) + "{" + ow + "}";
                }
            }
        }
        return ow;
    };
    bo.getTypeOfText = function (ou) {
        if ("normal" == ou) {
            return "textnormal";
        }
        if ("italic" == ou) {
            return "textit";
        }
        if ("bold" == ou) {
            return "textbf";
        }
        if ("bold-italic" == ou) {
            return "textbi";
        }
        if ("monospace" == ou) {
            return "texttt";
        }
        if ("sans-serif" == ou) {
            return "textsf";
        }
        if ("script" == ou) {
            return "textcal";
        }
        if ("double-struck" == ou) {
            return "textbb";
        }
        return "text";
    };
    bo.textIsFunction = function (ow) {
        var ox = ah.split(",");
        for (var ou = 0; ou < ox.length; ou++) {
            var ov = ox[ou];
            if (ov.length > 0) {
                if (ov == ow) {
                    return true;
                }
            }
        }
        return false;
    };

    function lA() {
        this.dKK = bo;
        this.dKK();
    }
    ga(lA, bo);
    lA.prototype.processToOmml = function (ou, ox, ow) {
        var ov = ou;
        return this.displayText(ov.getText(), ox, ow);
    };

    function d3() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(d3, g3);

    function jf() {
        this.dKL = d3;
        this.dKL();
    }
    ga(jf, d3);
    jf.prototype.processToLatex = function (ou, ov) {
        return d1.processChildren(ou, ov);
    };
    jf.prototype.processToOmml = function (oB, oA, ox) {
        var ou = oB;
        var oz = new fq("");
        oz.append(this.addTabs(oA) + "<" + ox.getNamespace() + "oMath>\n");
        ox.setParentMrow(true);
        var ow = ou.getChildren();
        if (ow.size() == 1) {
            var oy = ow.get(0);
            oz.append(eK.processBeans(oy, oA + 1, ox));
        } else {
            if (ow.size() > 1) {
                for (var ov = 0; ov < ow.size(); ov++) {
                    var oy = ow.get(ov);
                    oz.append(eK.processBeans(oy, oA + 1, ox));
                }
            }
        }
        oz.append(this.addTabs(oA) + "</" + ox.getNamespace() + "oMath>\n");
        return oz.toString();
    };

    function l5() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(l5, g3);

    function z() {
        this.dKI = iL;
        this.dKI();
    }
    ga(z, iL);

    function ik() {
        this.dKI = iL;
        this.dKI();
    }
    ga(ik, iL);
    ik.prototype.processToLatex = function (ow, oz) {
        if (ow instanceof cg) {
            var oL = ow;
            var oK = this.getSupSubElement(oL.getBase(), oz);
            var ou = this.getSupSubElement(oL.getExp(), oz);
            var oA = this.getSupSubElement(oL.getSub(), oz);
            if (
                !gK.findIsIntegrale(oL.getBase()) &&
                gK.findIsBigOperator(oL.getBase())
            ) {
                return " " + oK + "\\nolimits_" + oA + "^" + ou + " ";
            }
            return " " + oK + "_" + oA + "^" + ou + " ";
        } else {
            if (ow instanceof m6) {
                var ox = ow;
                var oK = this.getSupSubElement(ox.getBase(), oz);
                var ou = this.getSupSubElement(ox.getExp(), oz);
                if (
                    !gK.findIsIntegrale(ox.getBase()) &&
                    gK.findIsBigOperator(ox.getBase())
                ) {
                    return " " + oK + "\\nolimits^" + ou + " ";
                }
                return " " + oK + "^" + ou + " ";
            } else {
                if (ow instanceof mY) {
                    var oC = ow;
                    var oK = this.getSupSubElement(oC.getBase(), oz);
                    var oA = this.getSupSubElement(oC.getSub(), oz);
                    if (
                        !gK.findIsIntegrale(oC.getBase()) &&
                        gK.findIsBigOperator(oC.getBase())
                    ) {
                        return " " + oK + "\\nolimits_" + oA + " ";
                    }
                    return " " + oK + "_" + oA + " ";
                } else {
                    if (ow instanceof aj) {
                        var ov = ow;
                        var oK = this.getSupSubElement(ov.getBase(), oz);
                        var oA = this.getSupSubElement(ov.getSub(), oz);
                        if (gK.findIsIntegrale(ov.getBase())) {
                            return " " + oK + "\\limits_" + oA + " ";
                        }
                        if (gK.isOperator(ov.getSub(), "︸")) {
                            return (
                                " \\underbrace" +
                                d1.addParanthesifNone(oK) +
                                " "
                            );
                        }
                        return " " + oK + "_" + oA + " ";
                    } else {
                        if (ow instanceof nI) {
                            var oD = ow;
                            var oK = this.getSupSubElement(oD.getBase(), oz);
                            var ou = this.getSupSubElement(oD.getExp(), oz);
                            if ("\\oline" == ou || "\\textasciimacron" == ou) {
                                return " \\bar{" + oK + "}";
                            }
                            if (gK.findIsIntegrale(oD.getBase())) {
                                return " " + oK + "\\limits^" + ou + " ";
                            }
                            if (gK.isOperator(oD.getExp(), "︷")) {
                                return (
                                    " \\overbrace" +
                                    d1.addParanthesifNone(oK) +
                                    " "
                                );
                            } else {
                                if (
                                    gK.isOperatorValue(oD.getExp(), 8407) ||
                                    gK.isOperatorValue(oD.getExp(), 8594)
                                ) {
                                    return (
                                        " \\vec" +
                                        d1.addParanthesifNone(oK) +
                                        " "
                                    );
                                }
                            }
                            return " " + oK + "^" + ou + " ";
                        } else {
                            if (ow instanceof hF) {
                                var oH = ow;
                                var oK = this.getSupSubElement(
                                    oH.getBase(),
                                    oz,
                                );
                                var ou = this.getSupSubElement(oH.getExp(), oz);
                                var oA = this.getSupSubElement(oH.getSub(), oz);
                                if (gK.findIsIntegrale(oH.getBase())) {
                                    return (
                                        " " +
                                        oK +
                                        "\\limits_" +
                                        oA +
                                        "^" +
                                        ou +
                                        " "
                                    );
                                }
                                return " " + oK + "^" + ou + "_" + oA + " ";
                            } else {
                                if (ow instanceof lr) {
                                    var oF = ow;
                                    var oK = this.getElement(oF.getBase(), oz);
                                    var oB = this.buildList(oF.getPreSub(), oz);
                                    var oy = this.buildList(oF.getPreExp(), oz);
                                    var oE = "";
                                    if (oB.length > 0 || oy.length > 0) {
                                        oE =
                                            " \\prescript{" +
                                            oy +
                                            "}{" +
                                            oB +
                                            "}{" +
                                            oK +
                                            "}";
                                    } else {
                                        oE = " " + oK;
                                    }
                                    for (
                                        var oJ = 0;
                                        oJ < oF.getPostExp().size();
                                        oJ++
                                    ) {
                                        var oM = oF.getPostSub().get(oJ);
                                        var oI = oF.getPostExp().get(oJ);
                                        var oN = this.getElement(oM, oz);
                                        var oG = this.getElement(oI, oz);
                                        if (oG.length > 0) {
                                            oE =
                                                oE +
                                                "^" +
                                                d1.addParanthesisExceptOne(oG);
                                        }
                                        if (oN.length > 0) {
                                            oE =
                                                oE +
                                                "_" +
                                                d1.addParanthesisExceptOne(oN);
                                        }
                                    }
                                    return oE + " ";
                                }
                            }
                        }
                    }
                }
            }
        }
        return "";
    };
    ik.prototype.buildList = function (oz, ox) {
        var ou = ox.clone();
        if (oz == null || oz.size() == 0) {
            return "";
        }
        var oy = "";
        for (var ow = 0; ow < oz.size(); ow++) {
            var ov = oz.get(ow);
            oy = oy + d1.process(ov, ou);
        }
        oy = W.trim(oy);
        return oy;
    };
    ik.prototype.getElement = function (ov, ox) {
        var ou = ox.clone();
        var ow = d1.process(ov, ou);
        ow = W.trim(ow);
        return ow;
    };
    ik.prototype.getSupSubElement = function (ou, ow) {
        var ov = this.getElement(ou, ow);
        ov = d1.addParanthesisExceptOne(ov);
        return ov;
    };
    ik.prototype.processToOmml = function (oA, oz, ow) {
        var ou = oA;
        var oy = new fq("");
        oy.append(this.addTabs(oz) + "<" + ow.getNamespace() + "sPre>\n");
        oy.append(this.addTabs(oz + 1) + "<" + ow.getNamespace() + "sPrePr>\n");
        oy.append(this.addTabs(oz + 2) + "<" + ow.getNamespace() + "ctrlPr>\n");
        oy.append(
            this.addTabs(oz + 2) + "</" + ow.getNamespace() + "ctrlPr>\n",
        );
        oy.append(
            this.addTabs(oz + 1) + "</" + ow.getNamespace() + "sPrePr>\n",
        );
        var ov = ou.getPreSub().get(0);
        oy.append(this.addTabs(oz + 1) + "<" + ow.getNamespace() + "sub>\n");
        oy.append(eK.processBeans(ov, oz + 2, this.copyInfoRTagAndRow(ow)));
        oy.append(this.addTabs(oz + 1) + "</" + ow.getNamespace() + "sub>\n");
        var ox = ou.getPreExp().get(0);
        oy.append(this.addTabs(oz + 1) + "<" + ow.getNamespace() + "sup>\n");
        oy.append(eK.processBeans(ox, oz + 2, this.copyInfoRTag(ow)));
        oy.append(this.addTabs(oz + 1) + "</" + ow.getNamespace() + "sup>\n");
        oy.append(this.addTabs(oz + 1) + "<" + ow.getNamespace() + "e>\n");
        oy.append(
            eK.processBeans(ou.getBase(), oz + 2, this.copyInfoRTagAndRow(ow)),
        );
        oy.append(this.addTabs(oz + 1) + "</" + ow.getNamespace() + "e>\n");
        oy.append(this.addTabs(oz) + "</" + ow.getNamespace() + "sPre>\n");
        ow.setParentMrow(false);
        return oy.toString();
    };

    function me() {
        this.dKI = iL;
        this.dKI();
    }
    ga(me, iL);
    me.prototype.processToOmml = function (oy, ox, ov) {
        var ou = oy;
        var ow = new fq("");
        ow.append(this.addTabs(ox) + "<" + ov.getNamespace() + "nary>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "naryPr>\n");
        if (!("∫" == ou.getChr())) {
            ow.append(
                this.addTabs(ox + 2) +
                    "<" +
                    ov.getNamespace() +
                    'chr m:val="' +
                    ou.getChr() +
                    '"/>\n',
            );
        }
        ow.append(
            this.addTabs(ox + 2) +
                "<" +
                ov.getNamespace() +
                'limLoc m:val="' +
                ou.getLimLoc() +
                '"/>\n',
        );
        if (ou.isSupHide()) {
            ow.append(
                this.addTabs(ox + 2) +
                    "<" +
                    ov.getNamespace() +
                    'supHide m:val="on"/>\n',
            );
        }
        if (ou.isSubHide()) {
            ow.append(
                this.addTabs(ox + 2) +
                    "<" +
                    ov.getNamespace() +
                    'subHide m:val="on"/>\n',
            );
        }
        ow.append(this.addTabs(ox + 2) + "<" + ov.getNamespace() + "ctrlPr>\n");
        ow.append(
            this.addTabs(ox + 2) + "</" + ov.getNamespace() + "ctrlPr>\n",
        );
        ow.append(
            this.addTabs(ox + 1) + "</" + ov.getNamespace() + "naryPr>\n",
        );
        if (ou.isSubHide()) {
            ow.append(
                this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sub/>\n",
            );
        } else {
            ow.append(
                this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sub>\n",
            );
            ow.append(
                eK.processBeans(
                    ou.getSub(),
                    ox + 2,
                    this.copyInfoRTagAndRow(ov),
                ),
            );
            ow.append(
                this.addTabs(ox + 1) + "</" + ov.getNamespace() + "sub>\n",
            );
        }
        if (ou.isSupHide()) {
            ow.append(
                this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sup/>\n",
            );
        } else {
            ow.append(
                this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sup>\n",
            );
            ow.append(
                eK.processBeans(
                    ou.getSup(),
                    ox + 2,
                    this.copyInfoRTagAndRow(ov),
                ),
            );
            ow.append(
                this.addTabs(ox + 1) + "</" + ov.getNamespace() + "sup>\n",
            );
        }
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "e>\n");
        ow.append(
            eK.processBeans(ou.getE(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "e>\n");
        ow.append(this.addTabs(ox) + "</" + ov.getNamespace() + "nary>\n");
        ov.setParentMrow(false);
        return ow.toString();
    };

    function am() {
        this.dKK = bo;
        this.dKK();
    }
    ga(am, bo);
    am.prototype.processToOmml = function (ov, ox, ow) {
        var ou = ov;
        return this.displayText(ou.getText(), ox, ow);
    };

    function lX() {
        this.dKI = iL;
        this.dKI();
    }
    ga(lX, iL);

    function aI() {
        this.dKK = bo;
        this.dKK();
    }
    ga(aI, bo);
    aI.prototype.processToLatex = function (ou, ov) {
        var ow = ou;
        return aI.addSpaceToOperator(
            ow,
            bo.prototype.processToLatex.call(this, ou, ov),
        );
    };
    aI.addSpaceToOperator = function (ou, ov) {
        if (ou.getOperatorStyle().getLspace() > 1) {
            ov = " " + ov;
        }
        if (ou.getOperatorStyle().getRspace() > 1) {
            ov = ov + " ";
        }
        return ov;
    };
    aI.prototype.processToOmml = function (ou, ox, ow) {
        var ov = ou;
        return this.displayText(ov.getText(), ox, ow);
    };

    function l9() {
        this.dKI = iL;
        this.dKI();
    }
    ga(l9, iL);

    function f5() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(f5, g3);

    function dz() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(dz, g3);
    dz.prototype.processToLatex = function (ou, ov) {
        var ow = g3.prototype.processToLatex.call(this, ou, ov);
        ow = W.trim(ow);
        return "\\phantom{" + ow + "}";
    };

    function md() {
        this.dKI = iL;
        this.dKI();
    }
    ga(md, iL);

    function D() {
        this.dKI = iL;
        this.dKI();
    }
    ga(D, iL);
    D.prototype.processToLatex = function (oy, ov) {
        var ou = oy;
        var ox = d1.process(ou.getIndex(), ov);
        ox = W.trim(ox);
        var ow = d1.process(ou.getBase(), ov);
        ow = W.trim(ow);
        return "\\sqrt[" + ox + "]{" + ow + "}";
    };
    D.prototype.processToOmml = function (oy, ox, ov) {
        var ou = oy;
        var ow = new fq("");
        ow.append(this.addTabs(ox) + "<" + ov.getNamespace() + "rad>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "radPr>\n");
        ow.append(this.addTabs(ox + 2) + "<" + ov.getNamespace() + "ctrlPr>\n");
        ow.append(
            this.addTabs(ox + 2) + "</" + ov.getNamespace() + "ctrlPr>\n",
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "radPr>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "deg>\n");
        ow.append(
            eK.processBeans(ou.getIndex(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "deg>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "e>\n");
        ow.append(
            eK.processBeans(ou.getBase(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "e>\n");
        ow.append(this.addTabs(ox) + "</" + ov.getNamespace() + "rad>\n");
        ov.setParentMrow(false);
        return ow.toString();
    };

    function fI() {
        this.dKI = iL;
        this.dKI();
    }
    ga(fI, iL);
    fI.prototype.processToLatex = function (ou, ov) {
        return d1.processChildren(ou, ov);
    };
    fI.prototype.processToOmml = function (oB, oA, ox) {
        var ou = oB;
        this.changeNaryBeans(ou);
        var oz = new fq("");
        var ow = ou.getChildren();
        if (ow.size() == 1) {
            var oy = ow.get(0);
            oz.append(eK.processBeans(oy, oA, this.copyInfoRTagAndRow(ox)));
        } else {
            if (ow.size() > 1 && ox.isParentMrow()) {
                for (var ov = 0; ov < ow.size(); ov++) {
                    var oy = ow.get(ov);
                    oz.append(
                        eK.processBeans(oy, oA, this.copyInfoRTagAndRow(ox)),
                    );
                }
            } else {
                if (ow.size() > 1) {
                    oz.append(
                        this.addTabs(oA) + "<" + ox.getNamespace() + "e>\n",
                    );
                    ox.setParentMrow(true);
                    for (var ov = 0; ov < ow.size(); ov++) {
                        var oy = ow.get(ov);
                        oz.append(
                            eK.processBeans(
                                oy,
                                oA + 1,
                                this.copyInfoRTagAndRow(ox),
                            ),
                        );
                    }
                    oz.append(
                        this.addTabs(oA) + "</" + ox.getNamespace() + "e>\n",
                    );
                }
            }
        }
        return oz.toString();
    };
    fI.prototype.changeNaryBeans = function (ou) {
        var ox = ou.getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oz = ox.get(ow);
            if (
                oz instanceof av ||
                oz instanceof cg ||
                oz instanceof mY ||
                oz instanceof m6 ||
                oz instanceof hF ||
                oz instanceof aj ||
                oz instanceof nI
            ) {
                if (fI.isLargeOperator(oz)) {
                    var ov = new ir(oz.getParentBean());
                    ov.setChr(fI.getCharFromBean(oz));
                    if (
                        oz instanceof hF ||
                        oz instanceof aj ||
                        oz instanceof nI
                    ) {
                        ov.setLimLoc("undOvr");
                    }
                    if (
                        oz instanceof cg ||
                        oz instanceof m6 ||
                        oz instanceof hF ||
                        oz instanceof nI
                    ) {
                        ov.setSup(fI.getSupFromBean(oz));
                    } else {
                        ov.setSupHide(true);
                    }
                    if (
                        oz instanceof cg ||
                        oz instanceof mY ||
                        oz instanceof hF ||
                        oz instanceof aj
                    ) {
                        ov.setSub(fI.getSubFromBean(oz));
                    } else {
                        ov.setSubHide(true);
                    }
                    if (ow < ox.size() - 1) {
                        var oy = ox.get(ow + 1);
                        ov.setE(oy);
                        ox.remove(ow + 1);
                    }
                    ox.remove(ow);
                    ox.addTo(ow, ov);
                    this.changeNaryBeans(ou);
                }
            }
        }
    };
    fI.getSubFromBean = function (oy) {
        if (oy instanceof cg) {
            var ox = oy;
            return ox.getSub();
        } else {
            if (oy instanceof mY) {
                var ov = oy;
                return ov.getSub();
            } else {
                if (oy instanceof hF) {
                    var ou = oy;
                    return ou.getSub();
                } else {
                    if (oy instanceof aj) {
                        var ow = oy;
                        return ow.getSub();
                    }
                }
            }
        }
        return null;
    };
    fI.getSupFromBean = function (oy) {
        if (oy instanceof cg) {
            var ox = oy;
            return ox.getExp();
        } else {
            if (oy instanceof m6) {
                var ov = oy;
                return ov.getExp();
            } else {
                if (oy instanceof hF) {
                    var ou = oy;
                    return ou.getExp();
                } else {
                    if (oy instanceof nI) {
                        var ow = oy;
                        return ow.getExp();
                    }
                }
            }
        }
        return null;
    };
    fI.getCharFromBean = function (oB) {
        if (oB instanceof av) {
            var ow = oB;
            return ow.getText();
        } else {
            if (oB instanceof cg) {
                var oA = oB;
                return fI.getCharFromBean(oA.getBase());
            } else {
                if (oB instanceof mY) {
                    var ox = oB;
                    return fI.getCharFromBean(ox.getBase());
                } else {
                    if (oB instanceof m6) {
                        var ov = oB;
                        return fI.getCharFromBean(ov.getBase());
                    } else {
                        if (oB instanceof hF) {
                            var ou = oB;
                            return fI.getCharFromBean(ou.getBase());
                        } else {
                            if (oB instanceof aj) {
                                var oz = oB;
                                return fI.getCharFromBean(oz.getBase());
                            } else {
                                if (oB instanceof nI) {
                                    var oy = oB;
                                    return fI.getCharFromBean(oy.getBase());
                                }
                            }
                        }
                    }
                }
            }
        }
        return "";
    };
    fI.isLargeOperator = function (oB) {
        if (oB instanceof av) {
            var ow = oB;
            return ow.getLargeop();
        } else {
            if (oB instanceof cg) {
                var oA = oB;
                return fI.isLargeOperator(oA.getBase());
            } else {
                if (oB instanceof mY) {
                    var ox = oB;
                    return fI.isLargeOperator(ox.getBase());
                } else {
                    if (oB instanceof m6) {
                        var ov = oB;
                        return fI.isLargeOperator(ov.getBase());
                    } else {
                        if (oB instanceof hF) {
                            var ou = oB;
                            return fI.isLargeOperator(ou.getBase());
                        } else {
                            if (oB instanceof aj) {
                                var oz = oB;
                                return fI.isLargeOperator(oz.getBase());
                            } else {
                                if (oB instanceof nI) {
                                    var oy = oB;
                                    return fI.isLargeOperator(oy.getBase());
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };

    function bZ() {
        this.dKK = bo;
        this.dKK();
    }
    ga(bZ, bo);
    bZ.prototype.processToOmml = function (ox, ow, ov) {
        var ou = ox;
        return this.displayText(ou.getText(), ow, ov);
    };

    function ot() {
        this.dKI = iL;
        this.dKI();
    }
    ga(ot, iL);

    function ie() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(ie, g3);

    function d2() {
        this.dKI = iL;
        this.dKI();
    }
    ga(d2, iL);

    function U() {
        this.dKI = iL;
        this.dKI();
    }
    ga(U, iL);

    function lp() {
        this.dKI = iL;
        this.dKI();
    }
    ga(lp, iL);
    lp.prototype.processToLatex = function (ov, oz) {
        var ou = ov;
        if (ou.isLineBreak()) {
            return "\\newline";
        }
        var oA = ou.getCssstyle().getWidthS();
        if (oA != null) {
            var ox = jo.split("|");
            var ow = bA.split("|");
            for (var oy = 0; oy < ow.length; oy++) {
                if (oA == ow[oy]) {
                    return "\\" + ox[oy];
                }
            }
        }
        return "";
    };

    function n0() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(n0, g3);
    n0.prototype.processToLatex = function (ou, ov) {
        var ow = g3.prototype.processToLatex.call(this, ou, ov);
        ow = W.trim(ow);
        return "\\sqrt{" + ow + "}";
    };
    n0.prototype.processToOmml = function (ou, oA, ox) {
        var oz = new fq("");
        oz.append(this.addTabs(oA) + "<" + ox.getNamespace() + "rad>\n");
        oz.append(this.addTabs(oA + 1) + "<" + ox.getNamespace() + "radPr>\n");
        oz.append(
            this.addTabs(oA + 2) +
                "<" +
                ox.getNamespace() +
                'degHide m:val="on"/>\n',
        );
        oz.append(this.addTabs(oA + 2) + "<" + ox.getNamespace() + "ctrlPr>\n");
        oz.append(
            this.addTabs(oA + 2) + "</" + ox.getNamespace() + "ctrlPr>\n",
        );
        oz.append(this.addTabs(oA + 1) + "</" + ox.getNamespace() + "radPr>\n");
        oz.append(this.addTabs(oA + 1) + "<" + ox.getNamespace() + "deg/>\n");
        oz.append(this.addTabs(oA + 1) + "<" + ox.getNamespace() + "e>\n");
        ox.setParentMrow(true);
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            oz.append(eK.processBeans(oy, oA + 2, this.copyInfoRTagAndRow(ox)));
        }
        oz.append(this.addTabs(oA + 1) + "</" + ox.getNamespace() + "e>\n");
        oz.append(this.addTabs(oA) + "</" + ox.getNamespace() + "rad>\n");
        ox.setParentMrow(false);
        return oz.toString();
    };

    function fj() {
        this.dKI = iL;
        this.dKI();
    }
    ga(fj, iL);

    function kV() {
        this.dKI = iL;
        this.dKI();
    }
    ga(kV, iL);

    function my() {
        this.dKI = iL;
        this.dKI();
    }
    ga(my, iL);
    my.prototype.processToOmml = function (oy, ox, ov) {
        var ou = oy;
        var ow = new fq("");
        ow.append(this.addTabs(ox) + "<" + ov.getNamespace() + "sSub>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "e>\n");
        ow.append(
            eK.processBeans(ou.getBase(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "e>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sub>\n");
        ow.append(
            eK.processBeans(ou.getSub(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "sub>\n");
        ow.append(this.addTabs(ox) + "</" + ov.getNamespace() + "sSub>\n");
        ov.setParentMrow(false);
        return ow.toString();
    };

    function da() {
        this.dKI = iL;
        this.dKI();
    }
    ga(da, iL);
    da.prototype.processToOmml = function (oy, ox, ov) {
        var ou = oy;
        var ow = new fq("");
        ow.append(this.addTabs(ox) + "<" + ov.getNamespace() + "sSubSup>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "e>\n");
        ow.append(
            eK.processBeans(ou.getBase(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "e>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sub>\n");
        ow.append(
            eK.processBeans(ou.getSub(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "sub>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sup>\n");
        ow.append(eK.processBeans(ou.getExp(), ox + 2, this.copyInfoRTag(ov)));
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "sup>\n");
        ow.append(this.addTabs(ox) + "</" + ov.getNamespace() + "sSubSup>\n");
        ov.setParentMrow(false);
        return ow.toString();
    };

    function ev() {
        this.dKI = iL;
        this.dKI();
    }
    ga(ev, iL);
    ev.prototype.processToOmml = function (oy, ox, ov) {
        var ou = oy;
        var ow = new fq("");
        ow.append(this.addTabs(ox) + "<" + ov.getNamespace() + "sSup>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sSupPr>\n");
        ow.append(this.addTabs(ox + 2) + "<" + ov.getNamespace() + "ctrlPr>\n");
        ow.append(
            this.addTabs(ox + 2) + "</" + ov.getNamespace() + "ctrlPr>\n",
        );
        ow.append(
            this.addTabs(ox + 1) + "</" + ov.getNamespace() + "sSupPr>\n",
        );
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "e>\n");
        ow.append(
            eK.processBeans(ou.getBase(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "e>\n");
        ow.append(this.addTabs(ox + 1) + "<" + ov.getNamespace() + "sup>\n");
        ow.append(
            eK.processBeans(ou.getExp(), ox + 2, this.copyInfoRTagAndRow(ov)),
        );
        ow.append(this.addTabs(ox + 1) + "</" + ov.getNamespace() + "sup>\n");
        ow.append(this.addTabs(ox) + "</" + ov.getNamespace() + "sSup>\n");
        ov.setParentMrow(false);
        return ow.toString();
    };

    function h0() {
        this.dKI = iL;
        this.dKI();
    }
    ga(h0, iL);
    h0.prototype.processToLatex = function (ox, ov) {
        var ou = ox;
        var ow = h0.buildArrayContent(ou, ov);
        ow = "\\begin{array}" + this.getAlignment(ou) + ow + "\\end{array}";
        return this.addTextAndColor(ou, ow);
    };
    h0.buildArrayContent = function (ou, ox) {
        var oA = new fq("");
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            var oy = d1.process(oz, ox);
            oy = W.trim(oy);
            if (oA.toString().length > 0) {
                oy = " \\\\ " + oy;
            }
            oA.append(oy);
        }
        return oA.toString();
    };
    h0.prototype.getAlignment = function (ou) {
        var ov = h0.computeAlignment(ou);
        ov = this.addColumnLines(ou, ov);
        if (ov.length == 0) {
            return "";
        }
        return "{" + ov + "}";
    };
    h0.prototype.addColumnLines = function (ov, oA) {
        if (ov.getColumnlines() != null) {
            var ox = ov.getColumnlines();
            ox = W.trim(ox);
            if (ox.length > 0 && !("none" == ox)) {
                var ow = ox.split(" ");
                var ou = ow.length;
                if (ou < oA.length) {
                    ou = oA.length;
                }
                var oz = new fq("");
                for (var oy = 0; oy < ou; oy++) {
                    this.addToString(oy, ow, oA, oz);
                }
                oA = oz.toString();
            }
        }
        if (ov.getCssstyle().getBorder_width_left(100) > 0) {
            oA = "|" + oA;
        }
        if (ov.getCssstyle().getBorder_width_right(100) > 0) {
            oA = oA + "|";
        }
        return oA;
    };
    h0.prototype.addToString = function (ov, ou, ox, ow) {
        if (ov < ox.length) {
            ow.append(ox.charAt(ov) + "");
        } else {
            ow.append("c");
        }
        if (ov < ou.length) {
            if ("none" == ou[ov]) {
                return;
            } else {
                ow.append("|");
            }
        }
        return;
    };
    h0.computeAlignment = function (ou) {
        var ov = h0.buildAlignment(ou);
        ov = h0.removeLastDuplicates(ov);
        return ov;
    };
    h0.removeLastDuplicates = function (ow) {
        if (ow.length > 1) {
            var ov = ow.charAt(ow.length - 1);
            var ou = ow.charAt(ow.length - 2);
            if (ov == ou) {
                ow = ow.substring(0, ow.length - 1);
                return h0.removeLastDuplicates(ow);
            }
        }
        return ow;
    };
    h0.buildAlignment = function (oD) {
        var oB = false;
        if (oD.getColumnalign() != null) {
            return h0.getAlignValuesFromMultiple(oD.getColumnalign());
        }
        var ou = oD.getChildren();
        if (ou.size() > 0) {
            var oz = ou.get(0);
            if (oz.getColumnalign() != null) {
                return h0.getAlignValuesFromMultiple(oz.getColumnalign());
            }
            var ox = oz.getChildren();
            for (var ow = 0; ow < ox.size(); ow++) {
                var ov = ox.get(ow);
                if (ov.getColumnalign() != null) {
                    oB = true;
                }
            }
        }
        if (!oB) {
            return "";
        }
        var oy = "";
        var oC = ou.get(0);
        var oA = oC.getChildren();
        for (var ow = 0; ow < oA.size(); ow++) {
            var ov = oA.get(ow);
            oy = oy + h0.getAlignValue(ov.getColumnalign());
        }
        return oy;
    };
    h0.getAlignValuesFromMultiple = function (ov) {
        var ox = "";
        var ow = ov.split(" ");
        for (var ou = 0; ou < ow.length; ou++) {
            ox = ox + h0.getAlignValue(ow[ou]);
        }
        return ox;
    };
    h0.getAlignValue = function (ou) {
        if (ou == null) {
            return "c";
        } else {
            if ("left" == ou) {
                return "l";
            } else {
                if ("right" == ou) {
                    return "r";
                }
            }
        }
        return "c";
    };
    h0.prototype.processToOmml = function (oC, ou, ov) {
        var oB = new fq("");
        oB.append(this.addTabs(ou) + "<" + ov.getNamespace() + "eqArr>\n");
        oB.append(
            this.addTabs(ou + 1) + "<" + ov.getNamespace() + "eqArrPr>\n",
        );
        oB.append(this.addTabs(ou + 2) + "<" + ov.getNamespace() + "ctrlPr>\n");
        oB.append(
            this.addTabs(ou + 2) + "</" + ov.getNamespace() + "ctrlPr>\n",
        );
        oB.append(
            this.addTabs(ou + 1) + "</" + ov.getNamespace() + "eqArrPr>\n",
        );
        for (var oz = 0; oz < oC.getChildren().size(); oz++) {
            var oD = oC.getChildren().get(oz);
            oB.append(this.addTabs(ou + 1) + "<" + ov.getNamespace() + "e>\n");
            ov.setParentMrow(true);
            for (var oy = 0; oy < oD.getChildren().size(); oy++) {
                var oA = oD.getChildren().get(oy);
                for (var ox = 0; ox < oA.getChildren().size(); ox++) {
                    var ow = oA.getChildren().get(ox);
                    oB.append(
                        eK.processBeans(
                            ow,
                            ou + 2,
                            this.copyInfoRTagAndRow(ov),
                        ),
                    );
                }
            }
            oB.append(this.addTabs(ou + 1) + "</" + ov.getNamespace() + "e>\n");
        }
        oB.append(this.addTabs(ou) + "</" + ov.getNamespace() + "eqArr>\n");
        ov.setParentMrow(false);
        return oB.toString();
    };

    function cs() {
        this.dKK = bo;
        this.dKK();
    }
    ga(cs, bo);
    cs.prototype.processToOmml = function (ox, ow, ov) {
        var ou = ox;
        return this.displayText(ou.getText(), ow, ov);
    };

    function n9() {
        this.dKJ = g3;
        this.dKJ();
    }
    ga(n9, g3);

    function f3() {
        this.dKI = iL;
        this.dKI();
    }
    ga(f3, iL);
    f3.prototype.processToLatex = function (ou, ox) {
        var oA = new fq("");
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            var oy = d1.process(oz, ox);
            oy = W.trim(oy);
            if (oA.toString().length > 0) {
                oy = " & " + oy;
            }
            oA.append(oy);
        }
        return oA.toString();
    };

    function dE() {
        this.dKI = iL;
        this.dKI();
    }
    ga(dE, iL);

    function ky() {
        this.dKI = iL;
        this.dKI();
    }
    ga(ky, iL);

    function eK() {}
    eK.convertToOMML = function (ou) {
        dK.ignoreWhitespace = false;
        dK.prettyPrinting = false;
        try {
            return eK.process(ou);
        } catch (ov) {}
        return "$ Error $";
    };
    eK.process = function (ov) {
        ov = W.replace(ov, "&", "&amp;");
        ov = b8.removeNamespace(ov);
        var ou = new he();
        var ow = fe.createBeanStructure(ov, ou);
        return eK.convertToOmmlFromBeans(ow);
    };
    eK.convertToOmmlFromBeans = function (ow) {
        var ov = new bs();
        var ou = eK.processBeans(ow, 0, ov);
        return ou;
    };
    eK.processBeans = function (oP, ou, o7) {
        eK.compressTextsBeans(oP);
        if (oP instanceof k) {
            var o3 = new jf();
            return o3.processToOmml(oP, ou, o7);
        } else {
            if (oP instanceof mC) {
                var o1 = new dz();
                return o1.processToOmml(oP, ou, o7);
            } else {
                if (oP instanceof iF) {
                    var oZ = new h0();
                    return oZ.processToOmml(oP, ou, o7);
                } else {
                    if (oP instanceof hk) {
                        var oX = new nh();
                        return oX.processToOmml(oP, ou, o7);
                    } else {
                        if (oP instanceof a3) {
                            var oV = new n0();
                            return oV.processToOmml(oP, ou, o7);
                        } else {
                            if (oP instanceof jt) {
                                var oT = new fI();
                                return oT.processToOmml(oP, ou, o7);
                            } else {
                                if (oP instanceof bW) {
                                    var oS = new g3();
                                    return oS.processToOmml(oP, ou, o7);
                                } else {
                                    if (oP instanceof mu) {
                                        var oR = new cs();
                                        return oR.processToOmml(oP, ou, o7);
                                    } else {
                                        if (oP instanceof av) {
                                            var oQ = new aI();
                                            return oQ.processToOmml(oP, ou, o7);
                                        } else {
                                            if (oP instanceof kq) {
                                                var o9 = new am();
                                                return o9.processToOmml(
                                                    oP,
                                                    ou,
                                                    o7,
                                                );
                                            } else {
                                                if (oP instanceof m6) {
                                                    var o8 = new ev();
                                                    return o8.processToOmml(
                                                        oP,
                                                        ou,
                                                        o7,
                                                    );
                                                } else {
                                                    if (oP instanceof nn) {
                                                        var o6 = new dQ();
                                                        return o6.processToOmml(
                                                            oP,
                                                            ou,
                                                            o7,
                                                        );
                                                    } else {
                                                        if (oP instanceof kj) {
                                                            var o5 = new eg();
                                                            return o5.processToOmml(
                                                                oP,
                                                                ou,
                                                                o7,
                                                            );
                                                        } else {
                                                            if (
                                                                oP instanceof os
                                                            ) {
                                                                var o4 =
                                                                    new mD();
                                                                return o4.processToOmml(
                                                                    oP,
                                                                    ou,
                                                                    o7,
                                                                );
                                                            } else {
                                                                if (
                                                                    oP instanceof
                                                                    no
                                                                ) {
                                                                    var o2 =
                                                                        new lA();
                                                                    return o2.processToOmml(
                                                                        oP,
                                                                        ou,
                                                                        o7,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        oP instanceof
                                                                        el
                                                                    ) {
                                                                        var o0 =
                                                                            new l5();
                                                                        return o0.processToOmml(
                                                                            oP,
                                                                            ou,
                                                                            o7,
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            oP instanceof
                                                                            dF
                                                                        ) {
                                                                            var oY =
                                                                                new z();
                                                                            return oY.processToOmml(
                                                                                oP,
                                                                                ou,
                                                                                o7,
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                oP instanceof
                                                                                lr
                                                                            ) {
                                                                                var oW =
                                                                                    new ik();
                                                                                return oW.processToOmml(
                                                                                    oP,
                                                                                    ou,
                                                                                    o7,
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    oP instanceof
                                                                                    mx
                                                                                ) {
                                                                                    var oU =
                                                                                        new lX();
                                                                                    return oU.processToOmml(
                                                                                        oP,
                                                                                        ou,
                                                                                        o7,
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        oP instanceof
                                                                                        nI
                                                                                    ) {
                                                                                        var oO =
                                                                                            new l9();
                                                                                        return oO.processToOmml(
                                                                                            oP,
                                                                                            ou,
                                                                                            o7,
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            oP instanceof
                                                                                            lM
                                                                                        ) {
                                                                                            var oN =
                                                                                                new f5();
                                                                                            return oN.processToOmml(
                                                                                                oP,
                                                                                                ou,
                                                                                                o7,
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                oP instanceof
                                                                                                mC
                                                                                            ) {
                                                                                                var oM =
                                                                                                    new dz();
                                                                                                return oM.processToOmml(
                                                                                                    oP,
                                                                                                    ou,
                                                                                                    o7,
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    oP instanceof
                                                                                                    gb
                                                                                                ) {
                                                                                                    var oL =
                                                                                                        new D();
                                                                                                    return oL.processToOmml(
                                                                                                        oP,
                                                                                                        ou,
                                                                                                        o7,
                                                                                                    );
                                                                                                } else {
                                                                                                    if (
                                                                                                        oP instanceof
                                                                                                        g2
                                                                                                    ) {
                                                                                                        var oK =
                                                                                                            new bZ();
                                                                                                        return oK.processToOmml(
                                                                                                            oP,
                                                                                                            ou,
                                                                                                            o7,
                                                                                                        );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            oP instanceof
                                                                                                            lD
                                                                                                        ) {
                                                                                                            var oJ =
                                                                                                                new ot();
                                                                                                            return oJ.processToOmml(
                                                                                                                oP,
                                                                                                                ou,
                                                                                                                o7,
                                                                                                            );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                oP instanceof
                                                                                                                b0
                                                                                                            ) {
                                                                                                                var oI =
                                                                                                                    new ie();
                                                                                                                return oI.processToOmml(
                                                                                                                    oP,
                                                                                                                    ou,
                                                                                                                    o7,
                                                                                                                );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    oP instanceof
                                                                                                                    n2
                                                                                                                ) {
                                                                                                                    var oH =
                                                                                                                        new d2();
                                                                                                                    return oH.processToOmml(
                                                                                                                        oP,
                                                                                                                        ou,
                                                                                                                        o7,
                                                                                                                    );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        oP instanceof
                                                                                                                        kn
                                                                                                                    ) {
                                                                                                                        var oG =
                                                                                                                            new U();
                                                                                                                        return oG.processToOmml(
                                                                                                                            oP,
                                                                                                                            ou,
                                                                                                                            o7,
                                                                                                                        );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            oP instanceof
                                                                                                                            cT
                                                                                                                        ) {
                                                                                                                            var oF =
                                                                                                                                new lp();
                                                                                                                            return oF.processToOmml(
                                                                                                                                oP,
                                                                                                                                ou,
                                                                                                                                o7,
                                                                                                                            );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                oP instanceof
                                                                                                                                aK
                                                                                                                            ) {
                                                                                                                                var oE =
                                                                                                                                    new fj();
                                                                                                                                return oE.processToOmml(
                                                                                                                                    oP,
                                                                                                                                    ou,
                                                                                                                                    o7,
                                                                                                                                );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    oP instanceof
                                                                                                                                    hq
                                                                                                                                ) {
                                                                                                                                    var oD =
                                                                                                                                        new kV();
                                                                                                                                    return oD.processToOmml(
                                                                                                                                        oP,
                                                                                                                                        ou,
                                                                                                                                        o7,
                                                                                                                                    );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        oP instanceof
                                                                                                                                        iJ
                                                                                                                                    ) {
                                                                                                                                        var oC =
                                                                                                                                            new d3();
                                                                                                                                        return oC.processToOmml(
                                                                                                                                            oP,
                                                                                                                                            ou,
                                                                                                                                            o7,
                                                                                                                                        );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            oP instanceof
                                                                                                                                            mY
                                                                                                                                        ) {
                                                                                                                                            var oB =
                                                                                                                                                new my();
                                                                                                                                            return oB.processToOmml(
                                                                                                                                                oP,
                                                                                                                                                ou,
                                                                                                                                                o7,
                                                                                                                                            );
                                                                                                                                        } else {
                                                                                                                                            if (
                                                                                                                                                oP instanceof
                                                                                                                                                al
                                                                                                                                            ) {
                                                                                                                                                var oA =
                                                                                                                                                    new n9();
                                                                                                                                                return oA.processToOmml(
                                                                                                                                                    oP,
                                                                                                                                                    ou,
                                                                                                                                                    o7,
                                                                                                                                                );
                                                                                                                                            } else {
                                                                                                                                                if (
                                                                                                                                                    oP instanceof
                                                                                                                                                    aB
                                                                                                                                                ) {
                                                                                                                                                    var oz =
                                                                                                                                                        new bo();
                                                                                                                                                    return oz.processToOmml(
                                                                                                                                                        oP,
                                                                                                                                                        ou,
                                                                                                                                                        o7,
                                                                                                                                                    );
                                                                                                                                                } else {
                                                                                                                                                    if (
                                                                                                                                                        oP instanceof
                                                                                                                                                        au
                                                                                                                                                    ) {
                                                                                                                                                        var oy =
                                                                                                                                                            new f3();
                                                                                                                                                        return oy.processToOmml(
                                                                                                                                                            oP,
                                                                                                                                                            ou,
                                                                                                                                                            o7,
                                                                                                                                                        );
                                                                                                                                                    } else {
                                                                                                                                                        if (
                                                                                                                                                            oP instanceof
                                                                                                                                                            aj
                                                                                                                                                        ) {
                                                                                                                                                            var ox =
                                                                                                                                                                new dE();
                                                                                                                                                            return ox.processToOmml(
                                                                                                                                                                oP,
                                                                                                                                                                ou,
                                                                                                                                                                o7,
                                                                                                                                                            );
                                                                                                                                                        } else {
                                                                                                                                                            if (
                                                                                                                                                                oP instanceof
                                                                                                                                                                hF
                                                                                                                                                            ) {
                                                                                                                                                                var ow =
                                                                                                                                                                    new ky();
                                                                                                                                                                return ow.processToOmml(
                                                                                                                                                                    oP,
                                                                                                                                                                    ou,
                                                                                                                                                                    o7,
                                                                                                                                                                );
                                                                                                                                                            } else {
                                                                                                                                                                if (
                                                                                                                                                                    oP instanceof
                                                                                                                                                                    cg
                                                                                                                                                                ) {
                                                                                                                                                                    var ov =
                                                                                                                                                                        new da();
                                                                                                                                                                    return ov.processToOmml(
                                                                                                                                                                        oP,
                                                                                                                                                                        ou,
                                                                                                                                                                        o7,
                                                                                                                                                                    );
                                                                                                                                                                } else {
                                                                                                                                                                    if (
                                                                                                                                                                        oP instanceof
                                                                                                                                                                        ir
                                                                                                                                                                    ) {
                                                                                                                                                                        var pa =
                                                                                                                                                                            new me();
                                                                                                                                                                        return pa.processToOmml(
                                                                                                                                                                            oP,
                                                                                                                                                                            ou,
                                                                                                                                                                            o7,
                                                                                                                                                                        );
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return "";
    };
    eK.compressTextsBeans = function (ou) {
        if (ou instanceof bW) {
            if (ou instanceof hk) {
                return;
            }
            var ow = ou.getChildren();
            for (var ov = 0; ov < ow.size(); ov++) {
                var oA = ow.get(ov);
                if (eK.isTextInstance(oA)) {
                    if (ov < ow.size() - 1) {
                        var ox = ow.get(ov + 1);
                        if (eK.isTextInstance(ox)) {
                            var oy = eK.getText(oA);
                            oy = oy + eK.getText(ox);
                            ow.remove(ov + 1);
                            ow.remove(ov);
                            var oz = fe.getTBean(ou, oy);
                            ow.addTo(ov, oz);
                            eK.compressTextsBeans(ou);
                        }
                    }
                }
            }
        }
    };
    eK.getText = function (ov) {
        if (aB.isTokenBean(ov)) {
            var ou = ov;
            return ou.getText();
        }
        return "";
    };
    eK.isTextInstance = function (ov) {
        if (ov instanceof mu || ov instanceof kq || ov instanceof no) {
            return true;
        }
        if (ov instanceof av) {
            var ou = ov;
            if (ou.getLargeop()) {
                return false;
            }
            if (ou.isAccent()) {
                return false;
            }
            return true;
        }
        return false;
    };
    eK.processChildren = function (oB, ou, ox) {
        var oz = new fq("");
        var ow = oB.getChildren();
        for (var oy = 0; oy < ow.size(); oy++) {
            var ov = ow.get(oy);
            var oA = eK.processBeans(ov, ou, ox);
            if (oz.toString().length > 0) {
                var oC = oz.toString();
                if (oC.lastIndexOf(" ") == oC.length - 1) {
                    oA = W.trimLeft(oA);
                }
            }
            oz.append(oA);
        }
        return oz.toString();
    };

    function c6() {}
    c6.createMathMLFromOmmlList = function (ox) {
        var oz = new fq("");
        oz.append("<math>\n");
        for (var ov = 0; ov < ox.size(); ov++) {
            try {
                var ou = ox.get(ov);
                var ow = c6.createMathMLFromOmml(ou);
                ow = W.replace(ow, "<math mathvariant='italic'>", "<mrow>");
                ow = W.replace(ow, "</math>", "</mrow>");
                oz.append(ow);
            } catch (oy) {
                oz.append("<merror>Error</merror>");
            }
            if (ov < ox.size() - 1) {
                oz.append("<mspace linebreak='newline'/>\n");
            }
        }
        oz.append("</math>\n");
        return oz.toString();
    };
    c6.createMathMLFromOmml = function (ou) {
        dK.ignoreWhitespace = false;
        dK.prettyPrinting = false;
        ou = W.deleteText(ou, "<w:rPr>", "</w:rPr>");
        ou = mX.replacePreferedValue(ou);
        ou = h.replaceEntitiesAndHexCode(ou, ",&lt;,&gt;,");
        return c6.createMathML(ou);
    };
    c6.replaceAllUTFChars = function (ox) {
        for (var ow = 0; ow < ox.length; ow++) {
            var ou = ox.charCodeAt(ow);
            if (ou > 127) {
                var ov = h.getFirstCodeForNumber(ou);
                if (ov != null) {
                    ov = W.trim(ov);
                    if (ov.length > 0) {
                        ox =
                            ox.substring(0, ow) +
                            "&" +
                            ov +
                            ";" +
                            ox.substring(ow + 1, ox.length);
                    }
                } else {
                    continue;
                }
            }
        }
        return ox;
    };
    c6.createMathML = function (ou) {
        return c6.create(ou, c6.createDefaultStyle());
    };
    c6.createDefaultStyle = function () {
        var ou = new fC();
        ou.getMathvariant().setMathvariant("italic");
        ou.setMathsize(24);
        ou.setColor("#000000");
        return ou;
    };
    c6.create = function (ou, ov) {
        ou = b8.removeNamespace(ou);
        return c6.createFromXML(mW.parse(ou), ov);
    };
    c6.createFromXML = function (ou, ow) {
        var ov = new fq("");
        b8.cleanUpOmmlXML(ou);
        c6.loadNode(ou, ov, 0, ow, null);
        return h.convToEntities(ov.toString());
    };
    c6.loadNode = function (oy, oz, ou, ox, ow) {
        if (oy == null || oy.localName() == null) {
            return;
        }
        var ov = oy.localName().toLowerCase();
        if (ov.indexOf(":") > -1) {
            ov = ov.substring(ov.indexOf(":") + 1, ov.length);
        }
        if (ov == "omath") {
            c6.loadMath(oy, oz, ou, ox, ow);
        } else {
            if (ov == "r") {
                c6.loadR(oy, oz, ou, ox, ow);
            } else {
                if (ov == "t") {
                    c6.loadMtext(oy, oz, ou, ox, ow);
                } else {
                    if (ov == "f") {
                        c6.loadMfrac(oy, oz, ou, ox, ow);
                    } else {
                        if (ov == "rad") {
                            c6.loadMSqrt(oy, oz, ou, ox, ow);
                        } else {
                            if (ov == "ssup") {
                                c6.loadMSup(oy, oz, ou, ox, ow);
                            } else {
                                if (ov == "ssub") {
                                    c6.loadMSub(oy, oz, ou, ox, ow);
                                } else {
                                    if (ov == "ssubsup") {
                                        c6.loadMSubsup(oy, oz, ou, ox, ow);
                                    } else {
                                        if (ov == "spre") {
                                            c6.loadMSpre(oy, oz, ou, ox, ow);
                                        } else {
                                            if (
                                                ov == "num" ||
                                                ov == "den" ||
                                                ov == "e" ||
                                                ov == "sup" ||
                                                ov == "sub"
                                            ) {
                                                c6.loadMrow(oy, oz, ou, ox, ow);
                                            } else {
                                                if (ov == "d") {
                                                    c6.loadMfenced(
                                                        oy,
                                                        oz,
                                                        ou,
                                                        ox,
                                                        ow,
                                                    );
                                                } else {
                                                    if (ov == "func") {
                                                        c6.loadFunction(
                                                            oy,
                                                            oz,
                                                            ou,
                                                            ox,
                                                            ow,
                                                        );
                                                    } else {
                                                        if (ov == "nary") {
                                                            c6.loadNary(
                                                                oy,
                                                                oz,
                                                                ou,
                                                                ox,
                                                                ow,
                                                            );
                                                        } else {
                                                            if (ov == "bar") {
                                                                c6.loadBar(
                                                                    oy,
                                                                    oz,
                                                                    ou,
                                                                    ox,
                                                                    ow,
                                                                );
                                                            } else {
                                                                if (
                                                                    ov ==
                                                                    "limlow"
                                                                ) {
                                                                    c6.loadLimlow(
                                                                        oy,
                                                                        oz,
                                                                        ou,
                                                                        ox,
                                                                        ow,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        ov ==
                                                                        "limupp"
                                                                    ) {
                                                                        c6.loadLimUpp(
                                                                            oy,
                                                                            oz,
                                                                            ou,
                                                                            ox,
                                                                            ow,
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            ov ==
                                                                            "acc"
                                                                        ) {
                                                                            c6.loadAccent(
                                                                                oy,
                                                                                oz,
                                                                                ou,
                                                                                ox,
                                                                                ow,
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                ov ==
                                                                                "lim"
                                                                            ) {
                                                                                c6.loadLim(
                                                                                    oy,
                                                                                    oz,
                                                                                    ou,
                                                                                    ox,
                                                                                    ow,
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    ov ==
                                                                                    "m"
                                                                                ) {
                                                                                    c6.loadMTable(
                                                                                        oy,
                                                                                        oz,
                                                                                        ou,
                                                                                        ox,
                                                                                        ow,
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        ov ==
                                                                                        "eqarr"
                                                                                    ) {
                                                                                        c6.loadMEqarr(
                                                                                            oy,
                                                                                            oz,
                                                                                            ou,
                                                                                            ox,
                                                                                            ow,
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            ov ==
                                                                                            "mpr"
                                                                                        ) {
                                                                                        } else {
                                                                                            if (
                                                                                                ov ==
                                                                                                "mr"
                                                                                            ) {
                                                                                                c6.loadTableRow(
                                                                                                    oy,
                                                                                                    oz,
                                                                                                    ou,
                                                                                                    ox,
                                                                                                    ow,
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    ov ==
                                                                                                    "groupchr"
                                                                                                ) {
                                                                                                    c6.loadGroupChr(
                                                                                                        oy,
                                                                                                        oz,
                                                                                                        ou,
                                                                                                        ox,
                                                                                                        ow,
                                                                                                    );
                                                                                                } else {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    c6.loadNodeWithDefault = function (oy, oB, ou, ox, ow, oz) {
        var ov = new fq("");
        c6.loadNode(oy, ov, ou, null, ow);
        var oA = ov.toString();
        if (oA.length == 0) {
            oB.append(c6.addTabs(ou) + oz + "\n");
        } else {
            oB.append(ov.toString());
        }
    };
    c6.loadMath = function (ox, oy, ou, ow, ov) {
        oy.append(c6.addTabs(ou) + "<math mathvariant='italic'>\n");
        c6.addChildren(ox, oy, ou + 1, null, ow);
        oy.append(c6.addTabs(ou) + "</math>\n");
    };
    c6.addChildren = function (oy, oz, ou, ox, ow) {
        for (var ov = 0; ov < oy.getChildren().length; ov++) {
            if (oy.getChildren()[ov].localName() != null) {
                c6.loadNode(oy.getChildren()[ov], oz, ou, ox, ow);
            }
        }
    };
    c6.loadLim = function (oy, oA, ou, ow, ov) {
        var ox = ov.getCopy();
        if (oy.getChildren().length > 1) {
            oA.append(c6.addTabs(ou) + "<mrow>\n");
            c6.addChildren(oy, oA, ou + 1, null, ox);
            oA.append(c6.addTabs(ou) + "</mrow>\n");
        } else {
            if (oy.getChildren().length == 1) {
                var oz = oy.getChildren()[0];
                c6.loadNode(oz, oA, ou, ow, ov);
            }
        }
    };
    c6.loadMTable = function (oz, oF, ow, ov, oJ) {
        var oB = oJ.getCopy();
        var oD = new fM();
        var oE = "center";
        var ox = c6.getChild(oz, "mPr");
        if (ox != null) {
            var oI = c6.getChild(oz, "baseJc");
            if (oI != null) {
                oE = oI.attribute("val");
            }
            var oy = c6.getChild(ox, "mcs");
            if (oy != null) {
                var oH = c6.getChildren(oy, "mc");
                for (var oC = 0; oC < oH.size(); oC++) {
                    var oG = oH.get(oC);
                    var oA = c6.getChild(oG, "mcPr");
                    if (oA != null) {
                        var ou = c6.getChild(oA, "mcJc");
                        oD.add(ou.attribute("val"));
                    }
                }
            }
        }
        oF.append(
            c6.addTabs(ow) +
                "<mtable" +
                c6.addColumnAlignAttribute(oE, oD) +
                ">\n",
        );
        c6.addChildren(oz, oF, ow + 1, null, oB);
        oF.append(c6.addTabs(ow) + "</mtable>\n");
    };
    c6.loadMEqarr = function (ox, oD, ow, ou, oF) {
        var oB = oF.getCopy();
        var oG = c6.getNumberOfColumns(ox);
        oD.append(c6.addTabs(ow) + "<mtable>\n");
        for (var oC = 0; oC < ox.getChildren().length; oC++) {
            var ov = ox.getChildren()[oC];
            if (ov.localName() == null) {
                continue;
            }
            if (ov.localName() == "e") {
                oD.append(c6.addTabs(ow + 1) + "<mtr>\n");
                if (oG > 1) {
                    for (var oz = 0; oz < oG; oz++) {
                        oD.append(
                            c6.addTabs(ow + 2) +
                                "<mtd" +
                                c6.addAlignColumnInfoForEqarr(oz) +
                                ">\n",
                        );
                        var oE = c6.getTextForRow(oz, ov);
                        c6.processText(oE, oD, ow + 3, ou, oB);
                        oD.append(c6.addTabs(ow + 2) + "</mtd>\n");
                    }
                } else {
                    oD.append(c6.addTabs(ow + 2) + "<mtd>\n");
                    for (var oA = 0; oA < ov.children().length; oA++) {
                        var oy = ov.children()[oA];
                        c6.loadNode(oy, oD, ow + 3, ou, oB);
                    }
                    oD.append(c6.addTabs(ow + 2) + "</mtd>\n");
                }
                oD.append(c6.addTabs(ow + 1) + "</mtr>\n");
            }
        }
        oD.append(c6.addTabs(ow) + "</mtable>\n");
    };
    c6.addAlignColumnInfoForEqarr = function (ou) {
        if (ou == 0) {
            return " columnalign='right'";
        }
        return " columnalign='left'";
    };
    c6.getTextForRow = function (ow, ov) {
        var oB = "";
        var ou = c6.getChild(ov, "r");
        if (ou != null) {
            var oE = c6.getChild(ou, "t");
            if (oE != null) {
                var oC = oE.children()[0].toString();
                var ox = 0;
                var oy = -1;
                var oA = 0;
                var oF = 0;
                var oz = "";
                var oD = true;
                while ((oy = oC.indexOf("&", oF)) > -1) {
                    if (c6.notLeftRightSign(oC, oy)) {
                        oC =
                            oC.substring(0, oy) +
                            oC.substring(oy + 1, oC.length);
                        oz = oC.substring(oA, oy);
                        if (ox == ow) {
                            return oz;
                        }
                        if (oD) {
                            oA = oy;
                            ox++;
                            oD = false;
                        } else {
                            oD = true;
                        }
                        oF = oy;
                    } else {
                        oF = oy + 1;
                    }
                }
                if (ox == ow) {
                    oz = oC.substring(oA, oC.length);
                    return oz;
                }
            }
        }
        return oB;
    };
    c6.getNumberOfColumns = function (oz) {
        var ov = 1;
        for (var ox = 0; ox < oz.getChildren().length; ox++) {
            var oB = oz.getChildren()[ox];
            if (oB.localName() == null) {
                continue;
            }
            if (oB.localName() == "e") {
                var oy = c6.getChild(oB, "r");
                if (oy != null) {
                    var ow = c6.getChild(oy, "t");
                    if (ow != null) {
                        var oA = ow.children()[0].toString();
                        var ou = c6.getNumberOfSeparators(oA);
                        ov = Math.max(ov, ou);
                    }
                }
            }
        }
        return ov;
    };
    c6.getNumberOfSeparators = function (ox) {
        var ov = 1;
        var ou = -1;
        var ow = true;
        while ((ou = ox.indexOf("&", ou)) > -1) {
            if (c6.notLeftRightSign(ox, ou)) {
                if (ow) {
                    ov++;
                    ow = false;
                } else {
                    ow = true;
                }
            }
            ou = ou + 1;
        }
        return ov;
    };
    c6.notLeftRightSign = function (ov, ou) {
        if (ov.indexOf("&lt;", ou) == ou) {
            return false;
        }
        if (ov.indexOf("&le;", ou) == ou) {
            return false;
        }
        if (ov.indexOf("&gt;", ou) == ou) {
            return false;
        }
        if (ov.indexOf("&ge;", ou) == ou) {
            return false;
        }
        return true;
    };
    c6.loadTableRow = function (ox, oC, ow, ou, oD) {
        var oA = oD.getCopy();
        oC.append(c6.addTabs(ow) + "<mtr>\n");
        for (var oB = 0; oB < ox.getChildren().length; oB++) {
            var ov = ox.getChildren()[oB];
            if (ov.localName() != null) {
                oC.append(c6.addTabs(ow + 1) + "<mtd>\n");
                for (var oz = 0; oz < ov.children().length; oz++) {
                    var oy = ov.children()[oz];
                    c6.loadNode(oy, oC, ow + 2, ou, oA);
                }
                oC.append(c6.addTabs(ow + 1) + "</mtd>\n");
            }
        }
        oC.append(c6.addTabs(ow) + "</mtr>\n");
    };
    c6.addColumnAlignAttribute = function (ou, ox) {
        if (ou == null) {
            ou = "center";
        }
        var ow = false;
        if (ou == "left" || ou == "right") {
            ow = true;
        }
        var oA = new fq("");
        for (var ov = 0; ov < ox.size(); ov++) {
            var oz = ox.get(ov);
            oz = oz.toLowerCase();
            if (oz == "left" || oz == "right") {
                ow = true;
            }
            oA.append(" " + oz);
        }
        if (!ow) {
            return "";
        }
        var oy = oA.toString();
        oy = oy.trim();
        if ("" == oy) {
            return " columnalign='" + ou + "'";
        }
        return " columnalign='" + oy + "'";
    };
    c6.loadGroupChr = function (ox, oC, ow, ov, oF) {
        var oA = oF.getCopy();
        var oB = "&UnderBrace;";
        var oD = "under";
        var ou = c6.getChild(ox, "groupChrPr");
        if (ou != null) {
            var oz = c6.getChild(ou, "chr");
            if (oz != null) {
                oB = oz.attribute("val");
            }
            var oy = c6.getChild(ou, "pos");
            if (oy != null) {
                oD = oy.attribute("val");
            }
        }
        var oE = c6.getChild(ox, "e");
        if (oD == "top") {
            oC.append(c6.addTabs(ow) + "<mover>\n");
            c6.loadNode(oE, oC, ow + 1, null, oA);
            oC.append(c6.addTabs(ow + 1) + "<mo>" + oB + "</mo>\n");
            oC.append(c6.addTabs(ow) + "</mover>\n");
        } else {
            oC.append(c6.addTabs(ow) + "<munder>\n");
            c6.loadNode(oE, oC, ow + 1, null, oA);
            oC.append(c6.addTabs(ow + 1) + "<mo>" + oB + "</mo>\n");
            oC.append(c6.addTabs(ow) + "</munder>\n");
        }
    };
    c6.loadLimlow = function (oA, oB, ou, oy, ox) {
        var oz = ox.getCopy();
        var ow = c6.getChild(oA, "e");
        var ov = c6.getChild(oA, "lim");
        oB.append(c6.addTabs(ou) + "<munder>\n");
        c6.loadNode(ow, oB, ou + 1, null, oz);
        c6.loadNode(ov, oB, ou + 1, null, oz);
        oB.append(c6.addTabs(ou) + "</munder>\n");
    };
    c6.loadLimUpp = function (oz, oB, ou, ox, ow) {
        var oy = ow.getCopy();
        var ov = c6.getChild(oz, "e");
        var oA = c6.getChild(oz, "lim");
        oB.append(c6.addTabs(ou) + "<mover>\n");
        c6.loadNode(ov, oB, ou + 1, null, oy);
        c6.loadNode(oA, oB, ou + 1, null, oy);
        oB.append(c6.addTabs(ou) + "</mover>\n");
    };
    c6.loadAccent = function (ow, oA, ov, ou, oB) {
        var oy = oB.getCopy();
        var oC = c6.getChild(ow, "e");
        var oz = c6.getChild(ow, "accPr");
        var oD = "&Hat;";
        if (oz != null) {
            var ox = c6.getChild(oz, "chr");
            if (ox != null) {
                oD = ox.attribute("val");
            }
        }
        oA.append(c6.addTabs(ov) + "<mover>\n");
        c6.loadNode(oC, oA, ov + 1, null, oy);
        oA.append(c6.addTabs(ov + 1) + "<mo accent='true'>" + oD + "</mo>\n");
        oA.append(c6.addTabs(ov) + "</mover>\n");
    };
    c6.loadBar = function (ox, oB, ow, ov, oD) {
        var oy = oD.getCopy();
        var oA = true;
        var ou = c6.getChild(ox, "barPr");
        var oz = c6.getChild(ou, "pos");
        if (oz != null) {
            var oE = oz.attribute("val");
            oA = "top" == oE;
        }
        var oC = c6.getChild(ox, "e");
        if (oA) {
            oB.append(c6.addTabs(ow) + "<mover>\n");
        } else {
            oB.append(c6.addTabs(ow) + "<munder>\n");
        }
        c6.loadNode(oC, oB, ow + 1, null, oy);
        oB.append(c6.addTabs(ow + 1) + "<mo accent='true'>&macr;</mo>\n");
        if (oA) {
            oB.append(c6.addTabs(ow) + "</mover>\n");
        } else {
            oB.append(c6.addTabs(ow) + "</munder>\n");
        }
    };
    c6.loadNary = function (oK, oy, oC, oP, oI) {
        var oH = oI.getCopy();
        var oR = false;
        var ow = false;
        var oN = false;
        var oB = c6.getChild(oK, "naryPr");
        var oE = c6.getChild(oB, "chr");
        var oD = "&int;";
        if (oE != null) {
            oD = oE.attribute("val");
        }
        var ov = c6.getChild(oB, "limLoc");
        if (ov != null) {
            oR = ov.attribute("val") == "subSup";
        }
        var oM = c6.getChild(oB, "supHide");
        if (oM != null) {
            var oS = oM.attribute("val");
            if (oS != null) {
                oN = oS == "on";
            }
        }
        var oA = c6.getChild(oB, "subHide");
        if (oA != null) {
            var oS = oA.attribute("val");
            if (oS != null) {
                ow = oS == "on";
            }
        }
        var oQ = c6.getChild(oK, "e");
        var oF = c6.getChild(oK, "sub");
        var ox = c6.getChild(oK, "sup");
        var oz = new fq("");
        c6.loadNode(oQ, oz, oC + 1, null, oH);
        var ou = false;
        var oJ = oz.toString();
        oJ = W.trim(oJ);
        ou = !(oJ == "");
        if (ou) {
            var oG = oK.parent();
            if (oG != null) {
                var oL = oG.localName().toLowerCase();
                if ("omath" == oL) {
                    ou = false;
                }
            }
        }
        var oO = 0;
        if (ou) {
            oy.append(c6.addTabs(oC) + "<mrow>\n");
            oO = 1;
        }
        if (ow && oN) {
            oy.append(c6.addTabs(oC + oO) + "<mo>" + oD + "</mo>\n");
        } else {
            oy.append(
                c6.addTabs(oC + oO) + "<" + c6.getTagSubSup(oR, ow, oN) + ">\n",
            );
            oy.append(c6.addTabs(oC + oO + 1) + "<mo>" + oD + "</mo>\n");
            if (!ow) {
                c6.loadNode(oF, oy, oC + oO + 1, null, oH);
            }
            if (!ow) {
                c6.loadNode(ox, oy, oC + oO + 1, null, oH);
            }
            oy.append(
                c6.addTabs(oC + oO) +
                    "</" +
                    c6.getTagSubSup(oR, ow, oN) +
                    ">\n",
            );
        }
        c6.loadNode(oQ, oy, oC + oO, null, oH);
        if (ou) {
            oy.append(c6.addTabs(oC) + "</mrow>\n");
        }
    };
    c6.getTagSubSup = function (ou, ow, ov) {
        if (ou) {
            if (!ow && !ov) {
                return "msubsup";
            }
            if (ow) {
                return "msup";
            }
            if (ov) {
                return "msub";
            }
        } else {
            if (!ow && !ov) {
                return "munderover";
            }
            if (ow) {
                return "mover";
            }
            if (ov) {
                return "munder";
            }
        }
        return "";
    };
    c6.loadR = function (oz, oB, ou, ox, ow) {
        var oy = ow.getCopy();
        var ov = c6.getChild(oz, "rPr");
        if (ov != null) {
            c6.loadStyleFromRunNode(ov, oy);
        }
        var oA = c6.getChildExcept(oz, "rPr");
        c6.loadNode(oA, oB, ou, oy, ow);
    };
    c6.loadStyleFromRunNode = function (ou, ov) {
        var ox = c6.getChild(ou, "sty");
        var oy = c6.getChild(ou, "scr");
        if (oy != null) {
            var ow = oy.attribute("val");
            if (ow == "monospace") {
                ov.getMathvariant().setMathvariant("monospace");
            } else {
                if (ow == "sans-serif") {
                    ov.getMathvariant().setMathvariant("sans-serif");
                } else {
                    if (ow == "double-struck") {
                        ov.getMathvariant().setMathvariant("double-struck");
                    } else {
                        if (ow == "script") {
                            ov.getMathvariant().setMathvariant("script");
                        } else {
                            if (ow == "fraktur") {
                                ov.getMathvariant().setMathvariant("fraktur");
                            } else {
                                if (ow == "roman") {
                                    ov.getMathvariant().setMathvariant(
                                        "normal",
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
        if (ox != null) {
            var ow = ox.attribute("val");
            if (ow == "p") {
                ov.setItalic(false);
                ov.setBold(false);
            } else {
                if (ow == "i") {
                    ov.setItalic(true);
                    ov.setBold(false);
                } else {
                    if (ow == "b") {
                        ov.setItalic(false);
                        ov.setBold(true);
                    } else {
                        if (ow == "bi") {
                            ov.setItalic(true);
                            ov.setBold(true);
                        }
                    }
                }
            }
        }
    };
    c6.loadMrow = function (oz, oA, ou, ox, ow) {
        var oy = ow.getCopy();
        if (oz.getChildren().length > 1) {
            oA.append(c6.addTabs(ou) + "<mrow>\n");
            c6.addChildren(oz, oA, ou + 1, null, oy);
            oA.append(c6.addTabs(ou) + "</mrow>\n");
        } else {
            if (oz.getChildren().length == 1) {
                c6.addChildren(oz, oA, ou, null, oy);
            } else {
                var ov = oz.parent();
                if (ov != null) {
                    if ("sSub" == ov.localName() || "sSup" == ov.localName()) {
                        oA.append(c6.addTabs(ou) + "<mrow />\n");
                    }
                }
            }
        }
    };
    c6.loadMfrac = function (ox, oB, ow, ov, oE) {
        var oy = oE.getCopy();
        var ou = c6.getChild(ox, "fPr");
        var oD = "bar";
        if (ou != null) {
            var oA = c6.getChild(ou, "type");
            if (oA != null) {
                oD = oA.attribute("val");
            }
        }
        var oz = c6.getChild(ox, "num");
        var oC = c6.getChild(ox, "den");
        oB.append(
            c6.addTabs(ow) + "<mfrac" + c6.insertFractionType(oD) + ">\n",
        );
        c6.loadNode(oz, oB, ow + 1, null, oy);
        c6.loadNode(oC, oB, ow + 1, null, oy);
        oB.append(c6.addTabs(ow) + "</mfrac>\n");
    };
    c6.insertFractionType = function (ou) {
        if (ou == null) {
            return "";
        }
        if ("lin" == ou || "skw" == ou) {
            return " bevelled='true'";
        }
        if ("noBar" == ou) {
            return " linethickness='0'";
        }
        return "";
    };
    c6.loadMSqrt = function (oy, oB, ox, ou, oC) {
        var oz = oC.getCopy();
        var ov = c6.getChild(oy, "e");
        var ow = c6.getChild(oy, "deg");
        var oA = null;
        if (ow != null) {
            oA = c6.getChild(ow, "r");
        }
        if (oA != null) {
            oB.append(c6.addTabs(ox) + "<mroot>\n");
            c6.addChildren(ov, oB, ox + 1, null, oz);
            c6.loadNodeWithDefault(oA, oB, ox + 1, null, oz, "<mrow />");
            oB.append(c6.addTabs(ox) + "</mroot>\n");
        } else {
            oB.append(c6.addTabs(ox) + "<msqrt>\n");
            c6.addChildren(ov, oB, ox + 1, null, oz);
            oB.append(c6.addTabs(ox) + "</msqrt>\n");
        }
    };
    c6.loadMSup = function (oA, oB, ou, oy, ox) {
        var oz = ox.getCopy();
        var ow = c6.getChild(oA, "e");
        var ov = c6.getChild(oA, "sup");
        oB.append(c6.addTabs(ou) + "<msup>\n");
        c6.loadNodeWithDefault(ow, oB, ou + 1, null, oz, "<mrow />");
        c6.loadNodeWithDefault(ov, oB, ou + 1, null, oz, "<mrow />");
        oB.append(c6.addTabs(ou) + "</msup>\n");
    };
    c6.loadMSub = function (oA, oB, ou, oy, ox) {
        var oz = ox.getCopy();
        var ow = c6.getChild(oA, "e");
        var ov = c6.getChild(oA, "sub");
        oB.append(c6.addTabs(ou) + "<msub>\n");
        c6.loadNodeWithDefault(ow, oB, ou + 1, null, oz, "<mrow />");
        c6.loadNodeWithDefault(ov, oB, ou + 1, null, oz, "<mrow />");
        oB.append(c6.addTabs(ou) + "</msub>\n");
    };
    c6.loadMSubsup = function (ox, oA, ow, ov, oB) {
        var oy = oB.getCopy();
        oA.append(c6.addTabs(ow) + "<msubsup>\n");
        var oC = c6.getChild(ox, "e");
        var ou = c6.getChild(ox, "sub");
        var oz = c6.getChild(ox, "sup");
        c6.loadNodeWithDefault(oC, oA, ow + 1, null, oy, "<mrow />");
        c6.loadNodeWithDefault(ou, oA, ow + 1, null, oy, "<mrow />");
        c6.loadNodeWithDefault(oz, oA, ow + 1, null, oy, "<mrow />");
        oA.append(c6.addTabs(ow) + "</msubsup>\n");
    };
    c6.loadMSpre = function (ox, oA, ow, ov, oB) {
        var oy = oB.getCopy();
        oA.append(c6.addTabs(ow) + "<mmultiscripts>\n");
        var oC = c6.getChild(ox, "e");
        var ou = c6.getChild(ox, "sub");
        var oz = c6.getChild(ox, "sup");
        c6.loadNodeWithDefault(oC, oA, ow + 1, null, oy, "<mrow />");
        oA.append(c6.addTabs(ow + 1) + "<mprescripts/>\n");
        c6.loadNodeWithDefault(ou, oA, ow + 1, null, oy, "<mrow />");
        c6.loadNodeWithDefault(oz, oA, ow + 1, null, oy, "<mrow />");
        oA.append(c6.addTabs(ow) + "</mmultiscripts>\n");
    };
    c6.loadMfenced = function (oy, oD, ox, ov, oF) {
        var oz = oF.getCopy();
        var ou = "(";
        var oK = ")";
        var oI = "|";
        var oH = c6.getChild(oy, "dPr");
        if (oH != null) {
            var oG = c6.getChild(oH, "begChr");
            var oB = c6.getChild(oH, "endChr");
            var oE = c6.getChild(oH, "sepChr");
            if (oG != null) {
                ou = oG.attribute("val");
            }
            if (oB != null) {
                oK = oB.attribute("val");
            }
            if (oE != null) {
                oI = oE.attribute("val");
            }
            ou = W.trim(ou);
            oK = W.trim(oK);
        }
        var oC = c6.getChildren(oy, "e");
        if (oC != null && oC.size() > 0) {
            var oJ = "";
            if (oC.size() > 1) {
                oJ = " separators='" + oI + "'";
            }
            oD.append(
                c6.addTabs(ox) +
                    "<mfenced open='" +
                    ou +
                    "' close='" +
                    oK +
                    "'" +
                    oJ +
                    ">\n",
            );
            for (var oA = 0; oA < oC.size(); oA++) {
                var ow = oC.get(oA);
                c6.loadNode(ow, oD, ox + 1, null, oz);
            }
            oD.append(c6.addTabs(ox) + "</mfenced>\n");
        }
    };
    c6.loadFunction = function (oz, oB, ou, ox, ow) {
        var oy = ow.getCopy();
        var oA = c6.getChild(oz, "fName");
        var ov = c6.getChild(oz, "e");
        oB.append(c6.addTabs(ou) + "<mrow>\n");
        c6.addChildren(oA, oB, ou + 1, null, oy);
        if (ov != null) {
            c6.addChildren(ov, oB, ou + 1, null, oy);
        }
        oB.append(c6.addTabs(ou) + "</mrow>\n");
    };
    c6.getChild = function (ow, ou) {
        for (var ov = 0; ov < ow.getChildren().length; ov++) {
            var ox = ow.getChildren()[ov];
            if (ox.localName() != null && ox.localName() == ou) {
                return ox;
            }
        }
        return null;
    };
    c6.getChildExcept = function (ow, ou) {
        for (var ov = 0; ov < ow.getChildren().length; ov++) {
            var ox = ow.getChildren()[ov];
            if (ox.localName() != null && !(ox.localName() == ou)) {
                return ox;
            }
        }
        return null;
    };
    c6.getChildren = function (ow, ou) {
        var oy = new fM();
        for (var ov = 0; ov < ow.getChildren().length; ov++) {
            var ox = ow.getChildren()[ov];
            if (ox.localName() != null && ox.localName() == ou) {
                oy.add(ox);
            }
        }
        return oy;
    };
    c6.loadMtext = function (ox, oA, ow, ov, oD) {
        var oB = false;
        var oz = ox.attribute("space");
        if (oz != null && "preserve" == oz) {
            oB = true;
        }
        if (ox.getChildren().length == 0) {
            return;
        }
        var oE = ox.getChildren()[0].toString();
        if (oE == null || oE.length == 0) {
            return;
        }
        if (oB) {
            oE = W.xmlescape(oE);
            oE = W.preserveSpace(oE);
            oA.append(
                c6.addTabs(ow) +
                    "<mtext" +
                    c6.addStyleInfo(ov, oD) +
                    ">" +
                    oE +
                    "</mtext>\n",
            );
            return;
        }
        var ou = c6.splitTextByOperators(oE);
        if (ou.size() == 1) {
            var oC = ou.get(0);
            c6.processText(oC, oA, ow, ov, oD);
        } else {
            oA.append(c6.addTabs(ow) + "<mrow>\n");
            for (var oy = 0; oy < ou.size(); oy++) {
                var oC = ou.get(oy);
                c6.processText(oC, oA, ow + 1, ov, oD);
            }
            oA.append(c6.addTabs(ow) + "</mrow>\n");
        }
    };
    c6.splitTextByOperators = function (ow) {
        if (fh == null) {
            fh = eF.getAllOperators().split(";");
        }
        var ov = new fM();
        ov.add(ow);
        for (var ou = 0; ou < fh.length; ou++) {
            if ("." == fh[ou]) {
                continue;
            }
            c6.verifyReplaceOp(ov, fh[ou]);
        }
        return ov;
    };
    c6.verifyReplaceOp = function (ox, oz) {
        if (oz.length == 0) {
            return;
        }
        for (var ov = 0; ov < ox.size(); ov++) {
            var oy = ox.get(ov);
            if (
                "&" == oz &&
                oy.indexOf("&") == 0 &&
                oy.indexOf(";") == oy.length - 1
            ) {
                continue;
            }
            ox.remove(ov);
            var ou = oy.indexOf(oz);
            while (ou > -1) {
                var ow = oy.substring(0, ou);
                if (ow.length > 0) {
                    ox.addTo(ov, ow);
                    ov++;
                }
                ox.addTo(ov, oz);
                ov++;
                oy = oy.substring(ou + oz.length, oy.length);
                ou = oy.indexOf(oz);
            }
            if (oy.length > 0) {
                ox.addTo(ov, oy);
            }
        }
    };
    c6.processText = function (oy, oz, ou, ox, ow) {
        oy = W.xmlescape(oy);
        oy = oy.trim();
        if (oy.length == 0) {
            return;
        }
        oy = c6.replaceAllUTFChars(oy);
        var ov = c6.addStyleInfo(ox, ow);
        if (oy == "&thinsp;") {
            return;
        } else {
            if (lv.stringIsNumber(oy)) {
                oz.append(
                    c6.addTabs(ou) +
                        "<mn" +
                        c6.addStyleInfo(ox, ow) +
                        ">" +
                        oy +
                        "</mn>\n",
                );
            } else {
                if (c6.isOperator(oy)) {
                    if (eF.getStyleForOperator(oy).isFence()) {
                        oz.append(
                            c6.addTabs(ou) +
                                "<mo" +
                                c6.addStyleInfo(ox, ow) +
                                c6.addAccentInfo(oy) +
                                " stretchy='false'>" +
                                oy +
                                "</mo>\n",
                        );
                    } else {
                        oz.append(
                            c6.addTabs(ou) +
                                "<mo" +
                                c6.addStyleInfo(ox, ow) +
                                ">" +
                                oy +
                                "</mo>\n",
                        );
                    }
                } else {
                    if (oy.length == 1 && oy.charCodeAt(0) > 127) {
                        oz.append(
                            c6.addTabs(ou) +
                                "<mo" +
                                c6.addStyleInfo(ox, ow) +
                                c6.addAccentInfo(oy) +
                                ">" +
                                oy +
                                "</mo>\n",
                        );
                    } else {
                        if ("" == ov) {
                            oz.append(
                                c6.addTabs(ou) +
                                    "<mi" +
                                    c6.addStyleInfo(ox, ow) +
                                    ">" +
                                    oy +
                                    "</mi>\n",
                            );
                        } else {
                            oz.append(
                                c6.addTabs(ou) +
                                    "<mtext" +
                                    c6.addStyleInfo(ox, ow) +
                                    ">" +
                                    oy +
                                    "</mtext>\n",
                            );
                        }
                    }
                }
            }
        }
    };
    c6.addStyleInfo = function (ov, ou) {
        if (ov == null || ov.getMathvariant() == null) {
            return "";
        }
        if (ov.getMathvariant() == ou.getMathvariant()) {
            return "";
        }
        return " mathvariant='" + ov.getMathvariant() + "'";
    };
    c6.addAccentInfo = function (ov) {
        if (ov.length > 1) {
            ov = h.changeCharForCode(ov);
        }
        var ou = false;
        if (!ou) {
            return "";
        }
        return " accent='true'";
    };
    c6.addTabs = function (ow) {
        var ov = new fq("");
        for (var ou = 0; ou < ow; ou++) {
            ov.append("    ");
        }
        return ov.toString();
    };
    c6.isOperator = function (ov) {
        if (ov.length == 0) {
            return false;
        }
        if (
            ov.substring(0, 1) == "&" &&
            ov.substring(ov.length - 1, ov.length) == ";"
        ) {
            return true;
        }
        if (ov == ",") {
            return true;
        }
        if (ov == "/") {
            return true;
        }
        for (var ou = 0; ou < fh.length; ou++) {
            if (fh[ou] == ov) {
                return true;
            }
        }
        return false;
    };

    function bs() {
        this._namespace = "m:";
        this.namespaceUrl = "";
        this.parentMrow = false;
        this.parentStyle;
    }
    bs.prototype.getNamespace = function () {
        return this._namespace;
    };
    bs.prototype.setNamespace = function (ou) {
        this._namespace = ou;
    };
    bs.prototype.getNamespaceUrl = function () {
        return this.namespaceUrl;
    };
    bs.prototype.setNamespaceUrl = function (ou) {
        this.namespaceUrl = ou;
    };
    bs.prototype.getParentStyle = function () {
        return this.parentStyle;
    };
    bs.prototype.setParentStyle = function (ou) {
        this.parentStyle = ou;
    };
    bs.prototype.isParentMrow = function () {
        return this.parentMrow;
    };
    bs.prototype.setParentMrow = function (ou) {
        this.parentMrow = ou;
    };

    function ka() {
        this.mathMode = false;
        this.latexStyle = new ho();
    }
    ka.prototype.isMathMode = function () {
        return this.mathMode;
    };
    ka.prototype.setMathMode = function (ou) {
        this.mathMode = ou;
    };
    ka.prototype.getLatexStyle = function () {
        return this.latexStyle;
    };
    ka.prototype.clone = function () {
        var ou = new ka();
        ou.setMathMode(this.mathMode);
        ou.getLatexStyle().copyAllFrom(this.latexStyle);
        return ou;
    };

    function d1() {}
    d1.process = function (oQ, oB) {
        var oF = oB.clone();
        if (oQ instanceof k) {
            var o4 = new jf();
            return o4.processToLatex(oQ, oF);
        } else {
            if (oQ instanceof mC) {
                var o2 = new dz();
                return o2.processToLatex(oQ, oF);
            } else {
                if (oQ instanceof iF) {
                    var o0 = new h0();
                    return o0.processToLatex(oQ, oF);
                } else {
                    if (oQ instanceof hk) {
                        var oY = new nh();
                        return oY.processToLatex(oQ, oF);
                    } else {
                        if (oQ instanceof a3) {
                            var oW = new n0();
                            return oW.processToLatex(oQ, oF);
                        } else {
                            if (oQ instanceof jt) {
                                var oU = new fI();
                                return oU.processToLatex(oQ, oF);
                            } else {
                                if (oQ instanceof bW) {
                                    var oT = new g3();
                                    return oT.processToLatex(oQ, oF);
                                } else {
                                    if (oQ instanceof mu) {
                                        var oS = new cs();
                                        return oS.processToLatex(oQ, oF);
                                    } else {
                                        if (oQ instanceof av) {
                                            var oR = new aI();
                                            return oR.processToLatex(oQ, oF);
                                        } else {
                                            if (oQ instanceof kq) {
                                                var o9 = new am();
                                                return o9.processToLatex(
                                                    oQ,
                                                    oF,
                                                );
                                            } else {
                                                if (oQ instanceof m6) {
                                                    var o8 = new ik();
                                                    return o8.processToLatex(
                                                        oQ,
                                                        oF,
                                                    );
                                                } else {
                                                    if (oQ instanceof nn) {
                                                        var o7 = new dQ();
                                                        return o7.processToLatex(
                                                            oQ,
                                                            oF,
                                                        );
                                                    } else {
                                                        if (oQ instanceof kj) {
                                                            var o6 = new eg();
                                                            return o6.processToLatex(
                                                                oQ,
                                                                oF,
                                                            );
                                                        } else {
                                                            if (
                                                                oQ instanceof os
                                                            ) {
                                                                var o5 =
                                                                    new mD();
                                                                return o5.processToLatex(
                                                                    oQ,
                                                                    oF,
                                                                );
                                                            } else {
                                                                if (
                                                                    oQ instanceof
                                                                    no
                                                                ) {
                                                                    var o3 =
                                                                        new lA();
                                                                    return o3.processToLatex(
                                                                        oQ,
                                                                        oF,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        oQ instanceof
                                                                        el
                                                                    ) {
                                                                        var o1 =
                                                                            new l5();
                                                                        return o1.processToLatex(
                                                                            oQ,
                                                                            oF,
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            oQ instanceof
                                                                            dF
                                                                        ) {
                                                                            var oZ =
                                                                                new z();
                                                                            return oZ.processToLatex(
                                                                                oQ,
                                                                                oF,
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                oQ instanceof
                                                                                lr
                                                                            ) {
                                                                                var oX =
                                                                                    new ik();
                                                                                return oX.processToLatex(
                                                                                    oQ,
                                                                                    oF,
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    oQ instanceof
                                                                                    mx
                                                                                ) {
                                                                                    var oV =
                                                                                        new lX();
                                                                                    return oV.processToLatex(
                                                                                        oQ,
                                                                                        oF,
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        oQ instanceof
                                                                                        nI
                                                                                    ) {
                                                                                        var oP =
                                                                                            new ik();
                                                                                        return oP.processToLatex(
                                                                                            oQ,
                                                                                            oF,
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            oQ instanceof
                                                                                            lM
                                                                                        ) {
                                                                                            var oO =
                                                                                                new f5();
                                                                                            return oO.processToLatex(
                                                                                                oQ,
                                                                                                oF,
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                oQ instanceof
                                                                                                mC
                                                                                            ) {
                                                                                                var oN =
                                                                                                    new dz();
                                                                                                return oN.processToLatex(
                                                                                                    oQ,
                                                                                                    oF,
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    oQ instanceof
                                                                                                    gb
                                                                                                ) {
                                                                                                    var oM =
                                                                                                        new D();
                                                                                                    return oM.processToLatex(
                                                                                                        oQ,
                                                                                                        oF,
                                                                                                    );
                                                                                                } else {
                                                                                                    if (
                                                                                                        oQ instanceof
                                                                                                        g2
                                                                                                    ) {
                                                                                                        var oL =
                                                                                                            new bZ();
                                                                                                        return oL.processToLatex(
                                                                                                            oQ,
                                                                                                            oF,
                                                                                                        );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            oQ instanceof
                                                                                                            lD
                                                                                                        ) {
                                                                                                            var oK =
                                                                                                                new ot();
                                                                                                            return oK.processToLatex(
                                                                                                                oQ,
                                                                                                                oF,
                                                                                                            );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                oQ instanceof
                                                                                                                b0
                                                                                                            ) {
                                                                                                                var oJ =
                                                                                                                    new ie();
                                                                                                                return oJ.processToLatex(
                                                                                                                    oQ,
                                                                                                                    oF,
                                                                                                                );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    oQ instanceof
                                                                                                                    n2
                                                                                                                ) {
                                                                                                                    var oI =
                                                                                                                        new d2();
                                                                                                                    return oI.processToLatex(
                                                                                                                        oQ,
                                                                                                                        oF,
                                                                                                                    );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        oQ instanceof
                                                                                                                        kn
                                                                                                                    ) {
                                                                                                                        var oH =
                                                                                                                            new U();
                                                                                                                        return oH.processToLatex(
                                                                                                                            oQ,
                                                                                                                            oF,
                                                                                                                        );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            oQ instanceof
                                                                                                                            cT
                                                                                                                        ) {
                                                                                                                            var oG =
                                                                                                                                new lp();
                                                                                                                            return oG.processToLatex(
                                                                                                                                oQ,
                                                                                                                                oF,
                                                                                                                            );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                oQ instanceof
                                                                                                                                aK
                                                                                                                            ) {
                                                                                                                                var oE =
                                                                                                                                    new fj();
                                                                                                                                return oE.processToLatex(
                                                                                                                                    oQ,
                                                                                                                                    oF,
                                                                                                                                );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    oQ instanceof
                                                                                                                                    hq
                                                                                                                                ) {
                                                                                                                                    var oD =
                                                                                                                                        new kV();
                                                                                                                                    return oD.processToLatex(
                                                                                                                                        oQ,
                                                                                                                                        oF,
                                                                                                                                    );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        oQ instanceof
                                                                                                                                        iJ
                                                                                                                                    ) {
                                                                                                                                        var oC =
                                                                                                                                            new d3();
                                                                                                                                        return oC.processToLatex(
                                                                                                                                            oQ,
                                                                                                                                            oF,
                                                                                                                                        );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            oQ instanceof
                                                                                                                                            mY
                                                                                                                                        ) {
                                                                                                                                            var oA =
                                                                                                                                                new ik();
                                                                                                                                            return oA.processToLatex(
                                                                                                                                                oQ,
                                                                                                                                                oF,
                                                                                                                                            );
                                                                                                                                        } else {
                                                                                                                                            if (
                                                                                                                                                oQ instanceof
                                                                                                                                                al
                                                                                                                                            ) {
                                                                                                                                                var oz =
                                                                                                                                                    new n9();
                                                                                                                                                return oz.processToLatex(
                                                                                                                                                    oQ,
                                                                                                                                                    oF,
                                                                                                                                                );
                                                                                                                                            } else {
                                                                                                                                                if (
                                                                                                                                                    oQ instanceof
                                                                                                                                                    aB
                                                                                                                                                ) {
                                                                                                                                                    var oy =
                                                                                                                                                        new bo();
                                                                                                                                                    return oy.processToLatex(
                                                                                                                                                        oQ,
                                                                                                                                                        oF,
                                                                                                                                                    );
                                                                                                                                                } else {
                                                                                                                                                    if (
                                                                                                                                                        oQ instanceof
                                                                                                                                                        au
                                                                                                                                                    ) {
                                                                                                                                                        var ox =
                                                                                                                                                            new f3();
                                                                                                                                                        return ox.processToLatex(
                                                                                                                                                            oQ,
                                                                                                                                                            oF,
                                                                                                                                                        );
                                                                                                                                                    } else {
                                                                                                                                                        if (
                                                                                                                                                            oQ instanceof
                                                                                                                                                            aj
                                                                                                                                                        ) {
                                                                                                                                                            var ow =
                                                                                                                                                                new ik();
                                                                                                                                                            return ow.processToLatex(
                                                                                                                                                                oQ,
                                                                                                                                                                oF,
                                                                                                                                                            );
                                                                                                                                                        } else {
                                                                                                                                                            if (
                                                                                                                                                                oQ instanceof
                                                                                                                                                                hF
                                                                                                                                                            ) {
                                                                                                                                                                var ov =
                                                                                                                                                                    new ik();
                                                                                                                                                                return ov.processToLatex(
                                                                                                                                                                    oQ,
                                                                                                                                                                    oF,
                                                                                                                                                                );
                                                                                                                                                            } else {
                                                                                                                                                                if (
                                                                                                                                                                    oQ instanceof
                                                                                                                                                                    cg
                                                                                                                                                                ) {
                                                                                                                                                                    var ou =
                                                                                                                                                                        new ik();
                                                                                                                                                                    return ou.processToLatex(
                                                                                                                                                                        oQ,
                                                                                                                                                                        oF,
                                                                                                                                                                    );
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return "";
    };
    d1.processChildren = function (ou, ox) {
        var oB = new fq("");
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oA = ow.get(ov);
            var oy = d1.process(oA, ox);
            if (oB.toString().length > 0) {
                var oz = oB.toString();
                if (oz.lastIndexOf(" ") == oz.length - 1) {
                    oy = W.trimLeft(oy);
                }
            }
            oB.append(oy);
        }
        return oB.toString();
    };
    d1.addParanthesisExceptOne = function (ou) {
        if (ou == null) {
            return "{}";
        }
        if (ou.length == 1) {
            return ou;
        }
        if (ou.indexOf("\\") == 0) {
            return ou;
        }
        return "{" + ou + "}";
    };
    d1.addParanthesifNone = function (ou) {
        if (ou == null) {
            return "{}";
        }
        if (ou.indexOf("{") == 0 && ou.lastIndexOf("}") == ou.length - 1) {
            return ou;
        }
        return "{" + ou + "}";
    };

    function M() {}
    M.setAlignmentMarkers = function (oK) {
        var oy = oK.getMathMLBean();
        if (
            oy.getAlignmentscope() != null &&
            "false" == oy.getAlignmentscope()
        ) {
            return;
        }
        if (!oy.hasAlignmentGroup(oy)) {
            return;
        }
        var oV = 0;
        var oL = oK.getContent().getChildren();
        for (var oS = 0; oS < oL.size(); oS++) {
            var oF = oL.get(oS);
            var oX = oF.getContent().getChildren().get(0);
            var ou = oX.getContent().getChildren();
            for (var oQ = 0; oQ < ou.size(); oQ++) {
                var oE = ou.get(oQ);
                var oD = oE.getMathMLBean();
                if (oD.getColumnspanInt() > 1) {
                    return;
                }
                if (oD.getRowspanInt() > 1) {
                    return;
                }
            }
            oV = Math.max(oV, ou.size());
        }
        var oH = new Array(oV);
        for (var oS = 0; oS < oV; oS++) {
            oH[oS] = 0;
        }
        for (var oS = 0; oS < oL.size(); oS++) {
            var oF = oL.get(oS);
            var oX = oF.getContent().getChildren().get(0);
            var ou = oX.getContent().getChildren();
            for (var oQ = 0; oQ < ou.size(); oQ++) {
                var oE = ou.get(oQ);
                var oD = oE.getMathMLBean();
                var oM = new fM();
                M.getAllAlligngroup(oE, oM);
                oE.setAllAligngroup(oM);
                var ox = new fM();
                M.getCompAlligngroup(oE, ox);
                oE.setAligngroupComp(ox);
                oH[oQ] = Math.max(oH[oQ], oM.size());
            }
        }
        for (var oQ = 0; oQ < oH.length; oQ++) {
            var oR = oH[oQ];
            for (var oG = 0; oG < oR - 1; oG++) {
                var oU = 0;
                var ow = -1;
                var oB = -1;
                for (var oS = 0; oS < oL.size(); oS++) {
                    var oF = oL.get(oS);
                    var oX = oF.getContent().getChildren().get(0);
                    var ou = oX.getContent().getChildren();
                    var oE = ou.get(oQ);
                    if (oE.getAligngroupComp().size() == 0) {
                        continue;
                    }
                    oU = Math.max(oU, M.getDistanceBetween(oE, oG, oG + 1));
                    if (oE.getAligngroupComp().size() > oG) {
                        var oC = oE.getAligngroupComp().get(oG);
                        if (oC.size() > 0) {
                            var oA = oC.get(0);
                            var o0 = oC.get(oC.size() - 1);
                            var oT = oA.getAbsolutPositionX(0);
                            var ov =
                                o0.getAbsolutPositionX(0) +
                                o0.getDim().getWidth();
                            var oN = M.getDecimalPointPanel(oC);
                            if (oN != null) {
                                var oI =
                                    oN.getAbsolutPositionX(0) +
                                    oN.getDim().getWidthLeft() +
                                    oN.getDim().getDecimalPosition();
                                var oz = oI - oT;
                                var oW = ov - oI;
                                ow = Math.max(ow, oz);
                                oB = Math.max(oB, oW);
                            } else {
                                ow = Math.max(
                                    ow,
                                    ov - oT - o0.getDim().getWidthRight(),
                                );
                                oB = Math.max(oB, o0.getDim().getWidthRight());
                            }
                        }
                    }
                }
                for (var oS = 0; oS < oL.size(); oS++) {
                    var oF = oL.get(oS);
                    var oX = oF.getContent().getChildren().get(0);
                    var ou = oX.getContent().getChildren();
                    var oE = ou.get(oQ);
                    if (oE.getAligngroupComp().size() == 0) {
                        continue;
                    }
                    var oM = oE.getAllAligngroup();
                    var oZ = oM.get(oG);
                    var oY = oM.get(oG + 1);
                    var oP = M.getAlign(oZ, oE, oG, oF, oK, oH, oQ, oV);
                    if ("left" == oP) {
                        var oJ = M.getDistanceBetween(oE, oG, oG + 1);
                        if (oJ == oU) {
                            continue;
                        }
                        oY.getDim().setInsideMarginLeft(oU - oJ);
                    } else {
                        if ("right" == oP) {
                            var oJ = M.getDistanceBetween(oE, oG, oG + 1);
                            if (oJ == oU) {
                                continue;
                            }
                            oZ.getDim().setInsideMarginRight(oU - oJ);
                        } else {
                            if ("center" == oP) {
                                var oJ = M.getDistanceBetween(oE, oG, oG + 1);
                                if (oJ == oU) {
                                    continue;
                                }
                                var oO = lv.getIntFromDouble((oU - oJ) / 2);
                                oZ.getDim().setInsideMarginRight(oO);
                                oY.getDim().setInsideMarginLeft(oU - oJ - oO);
                            } else {
                                if ("decimalpoint" == oP) {
                                    if (oE.getAligngroupComp().size() > oG) {
                                        var oC = oE.getAligngroupComp().get(oG);
                                        if (oC.size() > 0) {
                                            var oA = oC.get(0);
                                            var o0 = oC.get(oC.size() - 1);
                                            var oT = oA.getAbsolutPositionX(0);
                                            var ov =
                                                o0.getAbsolutPositionX(0) +
                                                o0.getDim().getWidth();
                                            var oN = M.getDecimalPointPanel(oC);
                                            if (oN != null) {
                                                var oI =
                                                    oN.getAbsolutPositionX(0) +
                                                    oN.getDim().getWidthLeft() +
                                                    oN
                                                        .getDim()
                                                        .getDecimalPosition();
                                                var oz = oI - oT;
                                                var oW = ov - oI;
                                                oZ.getDim().setInsideMarginRight(
                                                    ow - oz,
                                                );
                                                oY.getDim().setInsideMarginLeft(
                                                    oB - oW,
                                                );
                                            } else {
                                                if (ow > -1) {
                                                    oZ.getDim().setInsideMarginRight(
                                                        ow -
                                                            (ov -
                                                                oT -
                                                                o0
                                                                    .getDim()
                                                                    .getWidthRight()),
                                                    );
                                                }
                                                if (oB > -1) {
                                                    oY.getDim().setInsideMarginLeft(
                                                        oB -
                                                            o0
                                                                .getDim()
                                                                .getWidthRight(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    oZ.setChangedDimension(oZ.getDim().isChangedDimension());
                    oY.setChangedDimension(oY.getDim().isChangedDimension());
                    oE.calculateDimension();
                }
            }
        }
    };
    M.getDecimalPointPanel = function (ow) {
        for (var ov = 0; ov < ow.size(); ov++) {
            var ou = ow.get(ov);
            if (ou.getDim().getDecimalPosition() != bu) {
                return ou;
            }
        }
        return null;
    };
    M.getAlign = function (ow, ox, oE, oG, oA, oz, oC, oH) {
        var oD = ow.getMathMLBean();
        if (oD.getGroupalign() != null) {
            return oD.getGroupalign();
        }
        var ou = ox.getMathMLBean();
        if (ou.getGroupalign() != null) {
            var ov = lN.getMultipleStringValues(ou.getGroupalign(), oz[oC]);
            return ov[oE];
        }
        var oF = oG.getMathMLBean();
        if (oF.getGroupalign() != null) {
            var oy = lN.getMultipleListStringValues(oF.getGroupalign(), oz, oH);
            var ov = oy.get(oC);
            return ov[oE];
        }
        var oB = oA.getMathMLBean();
        if (oB.getGroupalign() != null) {
            var oy = lN.getMultipleListStringValues(oB.getGroupalign(), oz, oH);
            var ov = oy.get(oC);
            return ov[oE];
        }
        return "left";
    };
    M.getDistanceBetween = function (oB, oA, ow) {
        var ox = oB.getAllAligngroup();
        var oz = ox.get(oA);
        var ov = M.getXPositionForParent(oB, oz, 0);
        ov = ov + oz.getDim().getWidth();
        var oy = ox.get(ow);
        var ou = M.getXPositionForParent(oB, oy, 0);
        return ou - ov;
    };
    M.getXPositionForParent = function (oy, ox, ov) {
        var ou = ov;
        ou = ou + ox.getDim().getX();
        var ow = ox.getParent();
        if (ow != oy) {
            ou = ou + ow.getDim().getWidthLeft();
            ou = M.getXPositionForParent(oy, ow, ou);
        }
        return ou;
    };
    M.getAllAlligngroup = function (oy, ow) {
        var ov = oy.getContent().getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            if (ox instanceof bU) {
                ow.add(ox);
            } else {
                M.getAllAlligngroup(ox, ow);
            }
        }
    };
    M.getCompAlligngroup = function (oz, ou) {
        var ow = oz.getContent().getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy instanceof bU) {
                ou.add(new fM());
            } else {
                if (oy instanceof at || oy instanceof ci) {
                    M.getCompAlligngroup(oy, ou);
                } else {
                    if (ou.size() > 0) {
                        var ox = ou.get(ou.size() - 1);
                        ox.add(oy);
                    }
                }
            }
        }
    };

    function e4() {}
    e4.compressPanelHorizontalRecursive = function (ou, ov) {
        return false;
    };

    function gW() {}
    gW.compressPanelVerticalRecursive = function (ou, ov) {
        return false;
    };

    function jF() {}
    jF.processPanels = function (ov) {
        jF.buildBackgroundShapes(ov);
        var ox = ov.getContent().getBgShapeList();
        if (ov instanceof jE) {
            var ow = ov.getMathMLBean();
            if (ow.getStyle().isDrawMaxwidthline()) {
                var oy = m2.getLength(
                    ow.getCssstyle().getMaxWidth(),
                    ov.getMathMLBean().getStyle().getMathsize(),
                );
                var ou = new jQ();
                ou.setAntialias(false);
                ou.setLinethickness(1);
                ou.setBorderColor(new kH("FF0000", "red"));
                ou.setX(oy);
                ou.setY(0);
                ou.setEndX(oy);
                ou.setEndY(ov.getDim().getHeight() - 1);
                ox.addTo(0, ou);
            }
        }
    };
    jF.buildBackgroundShapes = function (ou) {
        jF.buildBackgroundShapesForPanel(ou);
        var ow = ou.getContent();
        for (var ov = 0; ov < ow.getChildren().size(); ov++) {
            var ox = ow.getChildren().get(ov);
            jF.buildBackgroundShapes(ox);
        }
    };
    jF.buildBackgroundShapesForPanel = function (ov) {
        if (ov instanceof b4 || ov instanceof bU) {
            return;
        }
        var oH = ov.getMathMLBean();
        var ox = oH.getCssstyle();
        ov.getContent().getBgShapeList().clear();
        var oD = ov.getContent().getBgShapeList();
        if (oH.getStyle().isDrawBaseline() && ov.getDim().getBaseline() != bu) {
            var oE = ov.getDim().getHeightTop() + ov.getDim().getBaseline();
            var oz = new jQ();
            oz.setAntialias(false);
            oz.setLinethickness(1);
            oz.setBorderColor(new kH("FF0000", "red"));
            oz.setX(0);
            oz.setY(oE);
            oz.setEndX(ov.getDim().getWidth() - 1);
            oz.setEndY(oE);
            oD.addTo(0, oz);
        }
        if (
            oH.getStyle().isDrawSuperscriptline() &&
            ov.getDim().getSuperscriptline() != bu
        ) {
            var oG =
                ov.getDim().getHeightTop() + ov.getDim().getSuperscriptline();
            var oA = new jQ();
            oA.setAntialias(false);
            oA.setLinethickness(1);
            oA.setBorderColor(new kH("0000FF", "blue"));
            oA.setX(0);
            oA.setY(oG);
            oA.setEndX(ov.getDim().getWidth() - 1);
            oA.setEndY(oG);
            oD.addTo(0, oA);
        }
        if (oH.getStyle().isDrawAxisline() && ov.getDim().getAxis() != bu) {
            var oy = ov.getDim().getHeightTop() + ov.getDim().getAxis();
            var oz = new jQ();
            oz.setAntialias(false);
            oz.setLinethickness(1);
            oz.setBorderColor(new kH("00FF00", "green"));
            oz.setX(0);
            oz.setY(oy);
            oz.setEndX(ov.getDim().getWidth() - 1);
            oz.setEndY(oy);
            oD.addTo(0, oz);
        }
        var oI = ov.getDim().getBorder_width_top();
        var oF = ov.getDim().getBorder_width_bottom();
        var oC = ov.getDim().getBorder_width_left();
        var ow = ov.getDim().getBorder_width_right();
        if (ov.getDim().getBorder_width_top() > 0) {
            var oz = new jQ();
            oz.setAntialias(false);
            oz.setLinethickness(oI);
            oz.setBorderColor(ox.getBorder_color_top());
            oz.setType(ox.getBorder_style_top());
            oz.setX(ov.getDim().getMargin_left());
            oz.setY(ov.getDim().getMargin_top() + jF.getCenterOfBorder(oI));
            oz.setEndX(
                ov.getDim().getWidth() -
                    ov.getDim().getMargin_right() -
                    jF.getFloatingPixel(oI) +
                    lv.addPixel(oI),
            );
            oz.setEndY(ov.getDim().getMargin_top() + jF.getCenterOfBorder(oI));
            oD.addTo(0, oz);
        }
        if (ov.getDim().getBorder_width_left() > 0) {
            var oz = new jQ();
            oz.setAntialias(false);
            oz.setLinethickness(oC);
            oz.setBorderColor(ox.getBorder_color_left());
            oz.setType(ox.getBorder_style_left());
            oz.setX(ov.getDim().getMargin_left() + jF.getCenterOfBorder(oC));
            oz.setY(ov.getDim().getMargin_top());
            oz.setEndX(ov.getDim().getMargin_left() + jF.getCenterOfBorder(oC));
            oz.setEndY(
                ov.getDim().getHeight() -
                    ov.getDim().getMargin_bottom() -
                    jF.getFloatingPixel(oC) +
                    lv.addPixel(oC),
            );
            oD.addTo(0, oz);
        }
        if (ov.getDim().getBorder_width_bottom() > 0) {
            var oz = new jQ();
            oz.setAntialias(false);
            oz.setLinethickness(oF);
            oz.setBorderColor(ox.getBorder_color_bottom());
            oz.setType(ox.getBorder_style_bottom());
            oz.setX(ov.getDim().getMargin_left());
            oz.setY(
                ov.getDim().getHeight() -
                    ov.getDim().getMargin_bottom() -
                    jF.getCenterOfBorder(oF) -
                    jF.getFloatingPixel2(oF),
            );
            oz.setEndX(
                ov.getDim().getWidth() -
                    ov.getDim().getMargin_right() -
                    jF.getFloatingPixel(oF) +
                    lv.addPixel(oF),
            );
            oz.setEndY(
                ov.getDim().getHeight() -
                    ov.getDim().getMargin_bottom() -
                    jF.getCenterOfBorder(oF) -
                    jF.getFloatingPixel2(oF),
            );
            oD.addTo(0, oz);
        }
        if (ov.getDim().getBorder_width_right() > 0) {
            var oz = new jQ();
            oz.setAntialias(false);
            oz.setLinethickness(ow);
            oz.setBorderColor(ox.getBorder_color_right());
            oz.setType(ox.getBorder_style_right());
            oz.setX(
                ov.getDim().getWidth() -
                    ov.getDim().getMargin_right() -
                    jF.getCenterOfBorder(ow) -
                    jF.getFloatingPixel2(ow),
            );
            oz.setY(ov.getDim().getMargin_top());
            oz.setEndX(
                ov.getDim().getWidth() -
                    ov.getDim().getMargin_right() -
                    jF.getCenterOfBorder(ow) -
                    jF.getFloatingPixel2(ow),
            );
            oz.setEndY(
                ov.getDim().getHeight() -
                    ov.getDim().getMargin_bottom() -
                    jF.getFloatingPixel(ow) +
                    lv.addPixel(ow),
            );
            oD.addTo(0, oz);
        }
        if (oH.getStyle().getBgcolor() != null) {
            var oB = c2.getColor(oH.getStyle().getBgcolor(), 16777215);
            var ou = new j3();
            ou.setLinethickness(0);
            ou.setFill(true);
            ou.setFillColor(oB);
            ou.setX(ov.getDim().getMargin_left());
            ou.setY(ov.getDim().getMargin_top());
            ou.setWidth(
                ov.getDim().getWidth() -
                    ov.getDim().getMargin_right() -
                    ov.getDim().getMargin_left(),
            );
            ou.setHeight(
                ov.getDim().getHeight() -
                    ov.getDim().getMargin_bottom() -
                    ov.getDim().getMargin_top(),
            );
            oD.addTo(0, ou);
        }
    };
    jF.getCenterOfBorder = function (ou) {
        var ov = ou / 2;
        return lv.getIntegerValue(ov + "", 0);
    };
    jF.getFloatingPixel = function (ou) {
        if (ou < 2) {
            return 1;
        }
        return 0;
    };
    jF.getFloatingPixel2 = function (ou) {
        if (ou % 2 == 0) {
            return 0;
        }
        return 1;
    };
    jF.drawVerticalLine = function (oA, oz, oB, ov, ou, ox, oy) {
        var ow = new jQ();
        ow.setAntialias(false);
        ow.setLinethickness(ov);
        ow.setBorderColor(c2.getColor(ox, 0));
        ow.setType(oy);
        var oC = jF.getCenterOfBorder(ov);
        ow.setX(oA + oC);
        ow.setY(oz);
        ow.setEndX(oA + oC);
        ow.setEndY(oz + oB - jF.getFloatingPixel(ov) + lv.addPixel(ov));
        ow.setWidth(ov - oC);
        ow.setHeight(oB);
        ou.getContent().getShapeList().add(ow);
    };
    jF.drawHorizontalLine = function (oB, oA, ov, ow, ou, oy, oz) {
        var ox = new jQ();
        ox.setAntialias(false);
        ox.setLinethickness(ow);
        ox.setBorderColor(c2.getColor(oy, 0));
        ox.setType(oz);
        var oC = jF.getCenterOfBorder(ow);
        ox.setX(oB);
        ox.setY(oA + oC);
        ox.setEndX(oB + ov - jF.getFloatingPixel(ow) + lv.addPixel(ow));
        ox.setEndY(oA + oC);
        ox.setWidth(ov);
        ox.setHeight(ow - oC);
        ou.getContent().getShapeList().add(ox);
    };

    function d0() {}
    d0.positionLinesOnXForRowPanel = function (ou) {
        if (ou.getContent().getChildren().size() > 1) {
            for (var ov = 0; ov < ou.getContent().getChildren().size(); ov++) {
                var ox = ou.getContent().getChildren().get(ov);
                d0.changeXPositionForTargetId(ox);
            }
            ou.getContent().returnXToZero();
            ou.calculateWidth();
            var ow = ou.getDim().getWidth();
            for (var ov = 0; ov < ou.getContent().getChildren().size(); ov++) {
                var ox = ou.getContent().getChildren().get(ov);
                d0.changeXPositionForLine(ox, ow);
            }
        }
    };
    d0.changeXPositionForTargetId = function (ou) {
        ou.getDim().setX(0);
        var oB = ou.getMathMLBean();
        if (oB.getIndentBean() == null) {
            return;
        }
        var oy = oB.getIndentalign();
        if ("id" == oy) {
            var oA = oB.getIndenttarget();
            if (oA == null) {
                return;
            }
            var oC = ou.getRootPanel();
            var oz = oC.getPanelWithId(oA);
            if (oz == null) {
                return;
            }
            if (ou.isLeftToRight()) {
                var ow = oz.getAbsolutPositionX(0);
                var ov = ou.getAbsolutPositionX(0);
                var ox = ow - ov;
                if (ox != 0) {
                    ou.getDim().setX(ox);
                    ou.setChangedDimension(true);
                    d0.samePrefix(oz, ou);
                }
            } else {
                var ow = oz.getAbsolutPositionX(0) + oz.getDim().getWidth();
                var ov = ou.getAbsolutPositionX(0) + ou.getDim().getWidth();
                var ox = ow - ov;
                if (ox != 0) {
                    ou.getDim().setX(ox);
                    ou.setChangedDimension(true);
                    d0.samePrefix(oz, ou);
                }
            }
            ou.getParent().getContent().returnXToZero();
        }
    };
    d0.changeXPositionForLine = function (ov, ow) {
        var ou = ov.getMathMLBean();
        if (ou.getIndentBean() == null) {
            return;
        }
        var ox = ou.getIndentalign();
        if (ox == null) {
            ox = "left";
        }
        if (!ov.isLeftToRight()) {
            if (ox == "left") {
                ox = "right";
            } else {
                if (ox == "right") {
                    ox = "left";
                }
            }
        }
        if ("center" == ox) {
            ov.getDim().setX((ow - ov.getDim().getWidth()) / 2);
        } else {
            if ("right" == ox) {
                ov.getDim().setX(ow - ov.getDim().getWidth());
            } else {
                if ("left" == ox) {
                    ov.getDim().setX(0);
                }
            }
        }
    };
    d0.samePrefix = function (ou, ov) {
        var oz = d0.getFirstOPanel(ou);
        if (oz == null) {
            return;
        }
        var ox = d0.getFirstOPanel(ov);
        if (ox == null) {
            return;
        }
        var oy = oz.getMathMLBean();
        var ow = ox.getMathMLBean();
        if (!(oy.getText() == ow.getText())) {
            return;
        }
        k6.setForm(ox, oy.getOperatorStyle().getForm());
        ow.getOperatorStyle().setForm(oy.getOperatorStyle().getForm());
        ox.setSpaces();
    };
    d0.getFirstOPanel = function (ou) {
        if (ou instanceof bf) {
            var ov = ou;
            return ov;
        }
        if (ou instanceof at || ou instanceof ci) {
            if (ou.getContent().getChildren().size() > 0) {
                var ow = ou.getContent().getChildren().get(0);
                return d0.getFirstOPanel(ow);
            }
        }
        return null;
    };

    function b2() {
        this.type;
        this.displayMouse;
        this.active = false;
        this.keepSelection = true;
    }
    b2.prototype.onDragOverAction = function (ou, ov) {};
    b2.prototype.onClickAction = function (ou, ov) {};
    b2.prototype.activate = function (ou, ov) {};
    b2.prototype.reset = function (ou, ov) {};
    b2.prototype.getDisplayMouse = function () {
        return this.displayMouse;
    };
    b2.prototype.setDisplayMouse = function (ou) {
        this.displayMouse = ou;
    };
    b2.prototype.getType = function () {
        return this.type;
    };
    b2.prototype.setType = function (ou) {
        this.type = ou;
    };
    b2.prototype.isActive = function () {
        return this.active;
    };
    b2.prototype.setActive = function (ou) {
        this.active = ou;
    };
    b2.prototype.isDisabled = function () {
        return ft.isMouseFunctionDisabled(this.type);
    };
    b2.prototype.isKeepSelection = function () {
        return this.keepSelection;
    };
    b2.prototype.setKeepSelection = function (ou) {
        this.keepSelection = ou;
    };

    function ns() {
        this.lastParentID;
        this.tooltipBean;
        this.href;
        this.setType(df);
        this.dKM = b2;
        this.dKM();
    }
    ga(ns, b2);
    ns.prototype.onClickAction = function (ou, ov) {
        if (this.href != null) {
            window.open(this.href);
        }
    };
    ns.prototype.activate = function (ou, ow) {
        if (this.isDisabled()) {
            return;
        }
        var ox = "";
        var ov = this.getFirstParentWithTooltip(ow.getDeepestPanel());
        if (ov != null) {
            ox = ov.getBean().getId();
            this.href = ov.getMathMLBean().getHref();
        }
        if (ox == "") {
            this.setActive(false);
            if (!(this.lastParentID == "")) {
                ow.setChanged(true);
            }
        } else {
            if (!(this.lastParentID == ox)) {
                ow.setChanged(true);
            }
            this.setDisplayMouse("pointer");
            this.setActive(true);
            this.tooltipBean = ou
                .getMathMLBean()
                .getMathBean()
                .getTooltipBean(ox);
        }
        this.lastParentID = ox;
    };
    ns.prototype.reset = function (ou, ov) {
        this.lastParentID = "";
    };
    ns.prototype.getTooltipBean = function () {
        return this.tooltipBean;
    };
    ns.prototype.getFirstParentWithTooltip = function (ou) {
        if (ou.getMathMLBean().getHref() != null) {
            return ou;
        }
        var ov = ou.getParent();
        if (ov == null) {
            return null;
        }
        return this.getFirstParentWithTooltip(ov);
    };

    function nr() {
        this.latestMouse = "";
        this.setDisplayMouse("pointer");
        this.setType(dX);
        this.dKM = b2;
        this.dKM();
    }
    ga(nr, b2);
    nr.prototype.onClickAction = function (ou, ov) {
        if (
            ov.getDeepestPanel() != null &&
            ov.getDeepestPanel().getMathMLBean().isMinimizedBean()
        ) {
            ov.getDeepestPanel()
                .getMathMLBean()
                .getMinimizeReplace()
                .setToBeMinimized(false);
            ov.setMathmlChanged(true);
        }
    };
    nr.prototype.activate = function (ou, ov) {
        if (this.isDisabled()) {
            return;
        }
        var ow = "";
        if (ov.getDeepestPanel().getMathMLBean().isMinimizedBean()) {
            ow = "move";
        }
        if (ow == "") {
            this.setActive(false);
            if (!(this.latestMouse == "")) {
                ov.setChanged(true);
            }
        } else {
            if (!(this.latestMouse == ow)) {
                ov.setChanged(true);
            }
            this.setDisplayMouse(ow);
            this.setActive(true);
        }
        this.latestMouse = ow;
    };
    nr.prototype.reset = function (ou, ov) {
        this.latestMouse = "";
    };

    function id() {
        this.latestMouse = "";
        this.setType(hv);
        this.dKM = b2;
        this.dKM();
    }
    ga(id, b2);
    id.prototype.onClickAction = function (ou, ov) {
        if (ov.getDeepestPanel() != null) {
            ov.getDeepestPanel().getMathMLBean().setToBeMinimized(true);
            ov.setMathmlChanged(true);
        }
    };
    id.prototype.activate = function (ov, ox) {
        if (this.isDisabled()) {
            return;
        }
        var oz = "";
        var ou = ox.getDeepestPanel();
        if (ou instanceof aP) {
            return;
        }
        if (ou.getBean().isCanBeMinimizated()) {
            if (ou.getDim().getWidth() > 20 && ou.getDim().getHeight() > 20) {
                var oy = ox.getX() - ou.getAbsolutPositionX(0);
                var ow = ox.getY() - ou.getAbsolutPositionY(0);
                if (oy >= 0 && oy <= 7) {
                    if (ow >= 0 && ow <= 7) {
                        oz =
                            "url(" +
                            ft.getFolderUrlForCursor() +
                            "/left-top.png) 5 5, se-resize";
                    } else {
                        if (
                            ow <= ou.getDim().getHeight() &&
                            ow >= ou.getDim().getHeight() - 7
                        ) {
                            oz =
                                "url(" +
                                ft.getFolderUrlForCursor() +
                                "/left-bottom.png) 5 5, ne-resize";
                        }
                    }
                } else {
                    if (
                        oy >= ou.getDim().getWidth() - 7 &&
                        oy <= ou.getDim().getWidth()
                    ) {
                        if (ow >= 0 && ow <= 7) {
                            oz =
                                "url(" +
                                ft.getFolderUrlForCursor() +
                                "/right-top.png) 5 5, ne-resize";
                        } else {
                            if (
                                ow <= ou.getDim().getHeight() &&
                                ow >= ou.getDim().getHeight() - 7
                            ) {
                                oz =
                                    "url(" +
                                    ft.getFolderUrlForCursor() +
                                    "/right-bottom.png) 5 5, se-resize";
                            }
                        }
                    }
                }
            }
        }
        if (oz == "") {
            this.setActive(false);
            if (!(this.latestMouse == "")) {
                ox.setChanged(true);
            }
        } else {
            if (!(this.latestMouse == oz)) {
                ox.setChanged(true);
            }
            this.setDisplayMouse(oz);
            this.setActive(true);
        }
        this.latestMouse = oz;
    };
    id.prototype.reset = function (ou, ov) {
        this.latestMouse = "";
    };

    function hp() {
        this.latestMouse = "";
        this.mathBean;
        this.tbean;
        this.ctrlPressed = false;
        this.setType(mB);
        this.dKM = b2;
        this.dKM();
    }
    ga(hp, b2);
    hp.prototype.activate = function (ov, oy) {
        if (this.isDisabled()) {
            return;
        }
        var ow = "";
        var ou = oy.getDeepestPanel();
        if (ou instanceof at) {
            if (ou.getDim().getWidth() > 30 && ou.getDim().getHeight() > 30) {
                var oz = oy.getX() - ou.getAbsolutPositionX(0);
                var ox = oy.getY() - ou.getAbsolutPositionY(0);
                if (
                    oz >= ou.getDim().getWidth() - 3 &&
                    oz <= ou.getDim().getWidth()
                ) {
                    if (ox >= 10 && ox <= ou.getDim().getHeight() - 10) {
                        ow = "col-resize";
                    }
                }
            }
        }
        if (ow == "") {
            this.setActive(false);
            if (!(this.latestMouse == "")) {
                oy.setChanged(true);
            }
        } else {
            if (!(this.latestMouse == ow)) {
                oy.setChanged(true);
            }
            this.setDisplayMouse(ow);
            this.setActive(true);
            this.ctrlPressed = oy.isCtrlPressed();
            this.onDragOverAction(ov, oy);
        }
        this.latestMouse = ow;
    };
    hp.prototype.reset = function (ou, ov) {
        this.latestMouse = "";
        ov.setPanelReload(false);
    };
    hp.prototype.onDragOverAction = function (ov, oy) {
        if (oy.getDeepestPanel() != null) {
            var ox = oy.getX() - oy.getDeepestPanel().getAbsolutPositionX(0);
            var ow = oy.getDeepestPanel().getMathMLBean().getCssstyle();
            this.mathBean = oy
                .getDeepestPanel()
                .getMathMLBean()
                .getMathBean()
                .getTooltipBean("TOOLTIP");
            if (this.ctrlPressed) {
                ow.setMaxWidth(ox + "");
                this.setWidth(this.mathBean, "Max Width: " + ox);
            } else {
                ow.setWidth(ox + "");
                this.setWidth(this.mathBean, "Width: " + ox);
            }
            var ou = oy.getDeepestPanel().getMathMLBean();
            ow.initDimensions(ou.getParentBean(), ou.getStyle().getMathsize());
            ou.setAttribute("editorSelected", "resizeH");
            oy.setPanelReload(true);
            oy.setMathmlChanged(true);
            oy.setChanged(true);
        }
    };
    hp.prototype.setWidth = function (ou, oz) {
        var ow = ou.getChildren();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy instanceof cO) {
                var ox = oy;
                ox.setText(oz);
                return;
            } else {
                this.setWidth(oy, oz);
            }
        }
    };
    hp.prototype.getTooltipBean = function () {
        return this.mathBean;
    };

    function hu() {
        this.setDisplayMouse("col-resize");
        this.setType(fB);
    }
    ga(hu, b2);

    function v() {
        this.latestDeepestBackgorund;
        this.latestDeepestPanel;
        this.setType(iY);
        this.dKM = b2;
        this.dKM();
    }
    ga(v, b2);
    v.prototype.onOverAction = function (ov, oy) {
        var ox = ft.getColorOver();
        var ou = oy.getDeepestPanel();
        this.reset(ov, oy);
        var ow = ou.getMathMLBean();
        this.latestDeepestBackgorund = ow.getStyle().getBgcolor();
        ow.getStyle().setBgcolor(ox);
        jF.buildBackgroundShapesForPanel(ou);
        this.latestDeepestPanel = ou;
    };
    v.prototype.activate = function (ou, ov) {
        if (this.isDisabled()) {
            return;
        }
        if (this.latestDeepestPanel != ov.getDeepestPanel()) {
            ov.setChanged(true);
        }
        this.setActive(true);
        this.setDisplayMouse("auto");
    };
    v.prototype.reset = function (ov, ow) {
        if (this.latestDeepestPanel != null) {
            var ou = this.latestDeepestPanel.getMathMLBean();
            ou.getStyle().setBgcolor(this.latestDeepestBackgorund);
            jF.buildBackgroundShapesForPanel(this.latestDeepestPanel);
            this.latestDeepestPanel = null;
        }
    };

    function jg() {
        this.selectedActionBean;
        this.lastParentID;
        this.setType(hO);
        this.dKM = b2;
        this.dKM();
    }
    ga(jg, b2);
    jg.prototype.activate = function (ou, ow) {
        if (this.isDisabled()) {
            return;
        }
        var ox = "";
        var ov = this.getFirstParentWithToogle(ow.getDeepestPanel());
        if (ov != null) {
            ox = ov.getBean().getId();
        }
        if (ox == "") {
            this.setActive(false);
            if (!(this.lastParentID == "")) {
                ow.setChanged(true);
            }
        } else {
            if (!(this.lastParentID == ox)) {
                ow.setChanged(true);
            }
            this.setDisplayMouse("pointer");
            this.setActive(true);
            this.selectedActionBean = ov.getMathMLBean();
        }
        this.lastParentID = ox;
    };
    jg.prototype.reset = function (ou, ov) {
        this.lastParentID = "";
    };
    jg.prototype.getActionBean = function () {
        return this.selectedActionBean;
    };
    jg.prototype.onClickAction = function (ou, ow) {
        if (this.selectedActionBean != null) {
            var ov = lv.getIntegerValue(
                this.selectedActionBean.getSelection(),
                0,
            );
            ov = ov + 1;
            this.selectedActionBean.setSelection(ov + "");
            this.selectedActionBean.restoreChildren();
            this.selectedActionBean.setAttribute("editorSelected", "toggle");
            ow.setMathmlChanged(true);
        }
    };
    jg.prototype.getFirstParentWithToogle = function (ou) {
        if (ou.getMathMLBean() instanceof nn) {
            var ow = ou.getMathMLBean();
            if (ow.getActiontype() == "toggle") {
                return ou;
            }
        }
        var ov = ou.getParent();
        if (ov == null) {
            return null;
        }
        return this.getFirstParentWithToogle(ov);
    };

    function L() {
        this.lastParentID;
        this.tooltipBean;
        this.setType(hr);
        this.dKM = b2;
        this.dKM();
    }
    ga(L, b2);
    L.prototype.activate = function (ou, ow) {
        if (this.isDisabled()) {
            return;
        }
        var ox = "";
        var ov = this.getFirstParentWithTooltip(ow.getDeepestPanel());
        if (ov != null) {
            ox = ov.getBean().getId();
        }
        if (ox == "") {
            this.setActive(false);
            if (!(this.lastParentID == "")) {
                ow.setChanged(true);
            }
        } else {
            if (!(this.lastParentID == ox)) {
                ow.setChanged(true);
            }
            this.setDisplayMouse("pointer");
            this.setActive(true);
            this.tooltipBean = ou
                .getMathMLBean()
                .getMathBean()
                .getTooltipBean(ox);
        }
        this.lastParentID = ox;
    };
    L.prototype.reset = function (ou, ov) {
        this.lastParentID = "";
    };
    L.prototype.getTooltipBean = function () {
        return this.tooltipBean;
    };
    L.prototype.getFirstParentWithTooltip = function (ou) {
        if (ou.getMathMLBean() instanceof nn) {
            var ow = ou.getMathMLBean();
            if (ow.getActiontype() == "tooltip") {
                return ou;
            }
        }
        var ov = ou.getParent();
        if (ov == null) {
            return null;
        }
        return this.getFirstParentWithTooltip(ov);
    };

    function A() {}

    function hU() {
        this.actionList = new fM();
        this.lastMouseOverData = new ko();
        this.mouseSelectionAction = new v();
        this.dragState = false;
        this.actionList.add(new nr());
        this.actionList.add(new id());
        this.actionList.add(new hp());
        this.actionList.add(new hu());
        this.actionList.add(new L());
        this.actionList.add(new jg());
        this.actionList.add(new ns());
        this.actionList.add(this.mouseSelectionAction);
    }
    hU.prototype.onMouseMove = function (ow, ou, oA) {
        if (
            ou < 0 ||
            oA < 0 ||
            ou > ow.getDim().getWidth() ||
            oA > ow.getDim().getHeight()
        ) {
            for (var oy = 0; oy < this.actionList.size(); oy++) {
                var ox = this.actionList.get(oy);
                ox.reset(ow, this.lastMouseOverData);
            }
            this.lastMouseOverData.setMouseActionBean(null);
            this.lastMouseOverData.setChanged(true);
            this.dragState = false;
            return this.lastMouseOverData;
        }
        this.reloadPanelIfSelectionDone(ow);
        this.lastMouseOverData.setChanged(false);
        this.lastMouseOverData.setMathmlChanged(false);
        ou = lv.getIntFromDouble(ou / ow.getScale());
        oA = lv.getIntFromDouble(oA / ow.getScale());
        this.lastMouseOverData.setX(ou);
        this.lastMouseOverData.setY(oA);
        if (this.dragState) {
            var oz = this.lastMouseOverData.getMouseActionBean();
            if (oz == null) {
                return this.lastMouseOverData;
            }
            oz.onDragOverAction(ow, this.lastMouseOverData);
            return this.lastMouseOverData;
        }
        var ov = this.lastMouseOverData.getDeepestPanel();
        this.lastMouseOverData.setDeepestPanel(
            this.loadDeepestPanelsForXY(ou, oA, ow),
        );
        var oz = this.getFirstActiveActionToDo(ow);
        if (oz == null) {
            return this.lastMouseOverData;
        }
        if (oz != this.lastMouseOverData.getMouseActionBean()) {
            if (this.lastMouseOverData.getMouseActionBean() != null) {
                this.lastMouseOverData
                    .getMouseActionBean()
                    .reset(ow, this.lastMouseOverData);
            }
            this.lastMouseOverData.setMouseActionBean(oz);
            this.lastMouseOverData.setChanged(true);
        }
        if (
            !this.lastMouseOverData.isChanged() &&
            ov == this.lastMouseOverData.getDeepestPanel()
        ) {
            return this.lastMouseOverData;
        }
        this.lastMouseOverData.setChanged(true);
        this.mouseSelectionAction.onOverAction(ow, this.lastMouseOverData);
        return this.lastMouseOverData;
    };
    hU.prototype.reloadPanelIfSelectionDone = function (ov) {
        if (this.lastMouseOverData.isPanelReload()) {
            var ou = this.getPanelIfSelected(ov);
            if (ou != null) {
                this.lastMouseOverData.setDeepestPanel(ou);
            }
            this.lastMouseOverData.setPanelReload(false);
        }
    };
    hU.prototype.getPanelIfSelected = function (ov) {
        var ou = ov.getMathMLBean();
        if (ou.getAttribute("editorSelected") != null) {
            ou.clearAttribute("editorSelected");
            return ov;
        }
        var ox = ov.getContent().getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oz = ox.get(ow);
            var oy = this.getPanelIfSelected(oz);
            if (oy != null) {
                return oy;
            }
        }
        return null;
    };
    hU.prototype.getFirstActiveActionToDo = function (ou) {
        for (var ow = 0; ow < this.actionList.size(); ow++) {
            var ov = this.actionList.get(ow);
            ov.setActive(false);
            ov.activate(ou, this.lastMouseOverData);
            if (ov.isActive()) {
                return ov;
            }
        }
        return null;
    };
    hU.prototype.click = function (ov, ou, ox) {
        if (this.lastMouseOverData.isMathmlChanged()) {
            this.lastMouseOverData.setMathmlChanged(false);
            this.onMouseMove(ov, ou, ox);
        }
        var ow = this.lastMouseOverData.getMouseActionBean();
        if (ow == null) {
            return this.lastMouseOverData;
        }
        ow.onClickAction(ov, this.lastMouseOverData);
        return this.lastMouseOverData;
    };
    hU.prototype.loadDeepestPanelsForXY = function (ov, oB, oy) {
        for (var ox = 0; ox < oy.getContent().getChildren().size(); ox++) {
            var oA = oy.getContent().getChildren().get(ox);
            if (oA instanceof fZ) {
                continue;
            }
            if (oA.getDim().getX() > ov) {
                continue;
            }
            if (oA.getDim().getY() > oB) {
                continue;
            }
            if (oA.getDim().getX() + oA.getDim().getWidth() < ov) {
                continue;
            }
            if (oA.getDim().getY() + oA.getDim().getHeight() < oB) {
                continue;
            }
            var ou = this.loadDeepestPanelsForXY(
                ov - oA.getDim().getX() - oA.getDim().getWidthLeft(),
                oB - oA.getDim().getY() - oA.getDim().getHeightTop(),
                oA,
            );
            if (ou != null) {
                if (ou instanceof hP && ou.getParent() != null) {
                    var oz = ou.getParent();
                    if (oz instanceof aP && oz.getParent() != null) {
                        var ow = oz.getParent();
                        if (ow.getMathMLBean().isMinimizedBean()) {
                            return ow;
                        }
                    }
                }
                if (ou instanceof ci || ou instanceof h8) {
                    return ou.getParent();
                }
                return ou;
            }
        }
        return oy;
    };
    hU.prototype.onMouseDown = function (ov, ou, ox) {
        var ow = this.lastMouseOverData.getMouseActionBean();
        if (ow == null) {
            return this.lastMouseOverData;
        }
        if (ow.getType() == mB || ow.getType() == A.RESIZE_VERTICAL) {
            this.dragState = true;
        }
        return this.lastMouseOverData;
    };
    hU.prototype.onMouseUp = function (ov, ou, ox) {
        this.dragState = false;
        var ow = this.lastMouseOverData.getMouseActionBean();
        if (ow == null) {
            return this.lastMouseOverData;
        }
        return this.lastMouseOverData;
    };
    hU.prototype.onCtrlDown = function () {
        this.lastMouseOverData.setCtrlPressed(true);
    };
    hU.prototype.onCtrlUp = function () {
        this.lastMouseOverData.setCtrlPressed(false);
    };

    function ko() {
        this.mouseActionBean;
        this.changed = false;
        this.mathmlChanged = false;
        this.x = 0;
        this.y = 0;
        this.ctrlPressed = false;
        this.deepestPanel;
        this.panelReload = false;
    }
    ko.prototype.isChanged = function () {
        return this.changed;
    };
    ko.prototype.setChanged = function (ou) {
        this.changed = ou;
    };
    ko.prototype.getMouse = function () {
        if (this.mouseActionBean == null) {
            return "auto";
        }
        return this.mouseActionBean.getDisplayMouse();
    };
    ko.prototype.getMouseActionBean = function () {
        return this.mouseActionBean;
    };
    ko.prototype.setMouseActionBean = function (ou) {
        this.mouseActionBean = ou;
    };
    ko.prototype.getDeepestPanel = function () {
        return this.deepestPanel;
    };
    ko.prototype.setDeepestPanel = function (ou) {
        this.deepestPanel = ou;
    };
    ko.prototype.getX = function () {
        return this.x;
    };
    ko.prototype.setX = function (ou) {
        this.x = ou;
    };
    ko.prototype.getY = function () {
        return this.y;
    };
    ko.prototype.setY = function (ou) {
        this.y = ou;
    };
    ko.prototype.isPanelReload = function () {
        return this.panelReload;
    };
    ko.prototype.setPanelReload = function (ou) {
        this.panelReload = ou;
    };
    ko.prototype.isMathmlChanged = function () {
        return this.mathmlChanged;
    };
    ko.prototype.setMathmlChanged = function (ou) {
        this.mathmlChanged = ou;
    };
    ko.prototype.isCtrlPressed = function () {
        return this.ctrlPressed;
    };
    ko.prototype.setCtrlPressed = function (ou) {
        this.ctrlPressed = ou;
    };

    function gT() {}
    gT.processRTL = function (ou) {
        if (!ou.isLeftToRight()) {
            var oC = ou.getDim().getLspace();
            ou.getDim().setLspace(ou.getDim().getRspace());
            ou.getDim().setRspace(oC);
        }
        if (
            ou instanceof bf &&
            !ou.isLeftToRight() &&
            !ou.getMathMLBean().isDynamicCreated()
        ) {
            var oz = ou.getContent();
            for (var ox = 0; ox < oz.getChildren().size(); ox++) {
                var oD = oz.getChildren().get(ox);
                if (oD instanceof fZ) {
                    var ov = oD.getContent().getShapeList();
                    for (var ow = 0; ow < ov.size(); ow++) {
                        var oA = ov.get(ow);
                        if (oA instanceof ip) {
                            var oF = oA;
                            var oE = oF.getUnicodeText();
                            if (oE.size() == 1) {
                                var oB = oE.charUnicodeCharAt(0);
                                var oy = gT.isRTL(oB.getUnicode());
                                if (!oy) {
                                    oF.setFlipVertical(true);
                                }
                            }
                        }
                    }
                }
            }
        } else {
            var oz = ou.getContent();
            for (var ox = 0; ox < oz.getChildren().size(); ox++) {
                var oD = oz.getChildren().get(ox);
                gT.processRTL(oD);
            }
        }
    };
    gT.isRTL = function (oE) {
        for (var oA = oE.length; oA < 4; oA++) {
            oE = "0" + oE;
        }
        if (ni == null) {
            ni = new fM();
            var oC = dD.split(";");
            for (var oA = 0; oA < oC.length; oA++) {
                var oB = oC[oA];
                if (oB == null || oB.length < 4) {
                    continue;
                }
                if (oB.indexOf("-") > -1) {
                    var oz = oB.substring(0, oB.indexOf("-"));
                    var oy = oB.substring(oB.indexOf("-") + 1);
                    var ow = lv.getIntFromHexCode(oz);
                    var ov = lv.getIntFromHexCode(oy);
                    for (var ox = ow; ox <= ov; ox++) {
                        var ou = lv.getHexCodeFromInt(ox);
                        for (var oD = ou.length; oD < 4; oD++) {
                            ou = "0" + ou;
                        }
                        ni.add(ou);
                    }
                } else {
                    ni.add(oB);
                }
            }
            return ni.contains(oE);
        }
        return false;
    };

    function k6() {}
    k6.processForm = function (ou) {
        if (ou instanceof ci) {
            var ov = j.ignoreSpaceLikePanels(ou.getContent().getChildren());
            if (ov.size() == 0) {
                return;
            }
            if (ov.size() == 1) {
                var ox = ov.get(0);
                k6.setInfix(ox);
            } else {
                if (ov.size() > 1) {
                    for (var ow = 0; ow < ov.size(); ow++) {
                        var ox = ov.get(ow);
                        if (ow == 0) {
                            k6.setPrefix(ox);
                        } else {
                            if (ow == ov.size() - 1) {
                                k6.setPostfix(ox);
                            } else {
                                k6.setInfix(ox);
                            }
                        }
                    }
                }
            }
        } else {
            if (ou instanceof bf) {
                k6.setInfix(ou);
            } else {
                for (
                    var ow = 0;
                    ow < ou.getContent().getChildren().size();
                    ow++
                ) {
                    var ox = ou.getContent().getChildren().get(ow);
                    k6.processForm(ox);
                }
            }
        }
    };
    k6.setInfix = function (ou) {
        k6.setForm(ou, "infix");
    };
    k6.setPostfix = function (ou) {
        k6.setForm(ou, "postfix");
    };
    k6.setPrefix = function (ou) {
        k6.setForm(ou, "prefix");
    };
    k6.setForm = function (ou, ox) {
        if (ou instanceof bf) {
            var ov = ou;
            var oy = ov.getMathMLBean();
            var ow = ov.getParent();
            if (
                ow instanceof nq ||
                ow instanceof kp ||
                ow instanceof ca ||
                ow instanceof j5 ||
                ow instanceof oe ||
                ow instanceof kv ||
                ow instanceof eI ||
                ow instanceof iD ||
                ow instanceof lR ||
                ow instanceof fX
            ) {
                ov.getDim().setLspace(0);
                ov.getDim().setRspace(0);
            } else {
                oy.getOperatorStyle().setForm(ox);
                ov.setSpaces();
            }
        } else {
            k6.processForm(ou);
        }
    };

    function j() {}
    j.ignoreSpaceLikePanels = function (ox) {
        var ow = new fM();
        for (var ov = 0; ov < ox.size(); ov++) {
            var ou = ox.get(ov);
            if (ou.isSpaceLikePanel()) {
                continue;
            }
            ow.add(ou);
        }
        return ow;
    };
    j.getAllChildrenIgnoreRowsLinesSpaces = function (ou) {
        var ov = ou.getContent().getAllChildrenIgnoreRowsAndLines();
        return j.ignoreSpaceLikePanels(ov);
    };

    function b9() {}
    b9.stretchHorizontalIfMinSize = function (ow) {
        if (ow.isHorizontalStretchy(bD.getRowlineStretchingSource())) {
            ow.saveOneTime();
            var ou = 0;
            var oy = ow.getObean();
            var ov = oy.getMinsize();
            if (ov != null) {
                if (lv.stringIsNumber(ov)) {
                    var ox = lv.getDoubleValue(ov, 1);
                    ov = lv.getIntFromDouble(ox * 100) + "%";
                    ou = m2.getLength(ov, ow.getRealContentWidth());
                } else {
                    ou = m2.getLength(ov, ow.getRealContentWidth());
                }
            }
            if (ou == 0) {
                if (ow.getBean().getCssstyle().getWidthInt() > 0) {
                    ou =
                        ow.getBean().getCssstyle().getWidthInt() -
                        ow.getDim().getWidthLeftOnly() -
                        ow.getDim().getWidthRightOnly();
                }
            }
            if (ou > ow.getRealContentWidth()) {
                b9.stretchToAndVerifyMax(
                    ow,
                    ou +
                        ow.getDim().getWidthLeftOnly() +
                        ow.getDim().getWidthRightOnly(),
                );
            }
        }
    };
    b9.stretchPanelHorizontalRecursive = function (ow, oA, ov) {
        if (ow.isHorizontalStretchy(ov)) {
            if (ow instanceof bf) {
                var oy = ow;
                return b9.stretchToAndVerifyMax(oy, oA);
            } else {
                if (ow instanceof nq) {
                    var oC = ow;
                    return b9.stretchPanelHorizontalRecursive(
                        oC.getCurrentPanel(),
                        oA,
                        ov,
                    );
                } else {
                    if (ow instanceof kp) {
                        var oF = ow;
                        return oF.stretchPanelHorizontalRecursive(oA, ov);
                    } else {
                        if (ow instanceof oe) {
                            var oE = ow;
                            return oE.stretchPanelHorizontalRecursive(oA, ov);
                        } else {
                            if (ow instanceof kv) {
                                var oD = ow;
                                return oD.stretchPanelHorizontalRecursive(
                                    oA,
                                    ov,
                                );
                            } else {
                                if (ow instanceof eI) {
                                    var oG = ow;
                                    return oG.stretchPanelHorizontalRecursive(
                                        oA,
                                        ov,
                                    );
                                } else {
                                    if (ow instanceof iD) {
                                        var oH = ow;
                                        return oH.stretchPanelHorizontalRecursive(
                                            oA,
                                            ov,
                                        );
                                    } else {
                                        if (ow instanceof lR) {
                                            var ox = ow;
                                            return ox.stretchPanelHorizontalRecursive(
                                                oA,
                                                ov,
                                            );
                                        } else {
                                            if (ow instanceof fX) {
                                                var ou = ow;
                                                return ou.stretchPanelHorizontalRecursive(
                                                    oA,
                                                    ov,
                                                );
                                            } else {
                                                if (ow instanceof j5) {
                                                    var oI = ow;
                                                    return oI.stretchPanelHorizontalRecursive(
                                                        oA,
                                                        ov,
                                                    );
                                                } else {
                                                    if (ow instanceof ci) {
                                                        var oB = ow;
                                                        return oB.stretchPanelHorizontalRecursive(
                                                            oA,
                                                            ov,
                                                        );
                                                    } else {
                                                        if (ow instanceof at) {
                                                            var oz = ow;
                                                            return oz.stretchPanelHorizontalRecursive(
                                                                oA,
                                                                ov,
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    b9.stretchToAndVerifyMax = function (ow, ox) {
        var ov =
            ox -
            ow.getDim().getWidthLeftOnly() -
            ow.getDim().getWidthRightOnly();
        var oy = ow.getObean();
        var oA = oy.getMaxsize();
        var oz = ov;
        if (!(oA == null || "infinity" == oA)) {
            if (lv.stringIsNumber(oA)) {
                var ou = lv.getDoubleValue(oA, 1);
                oA = lv.getIntFromDouble(ou * 100) + "%";
                oz = m2.getLength(oA, ow.getRealContentWidth());
            } else {
                oz = m2.getLength(oA, ow.getRealContentWidth());
            }
        }
        if (ov > oz) {
            ov = oz;
        }
        return b9.stretchTo(ow, ov);
    };
    b9.stretchTo = function (ow, ox) {
        var oz = ox;
        if (oz == 0 || oz <= ow.getDim().getContentWidth()) {
            return false;
        }
        var oE = ow.getObean().getText();
        var oA = ow.getContent();
        oA.getShapeList().clear();
        var oD = ow.getRealContentHeight();
        var oy = ow.getRealContentWidth();
        if (oD == 0 || oy == 0) {
            return false;
        }
        var oC = oz / oy;
        var ou = lv.getIntFromDouble(oD * oC);
        if (!ow.getObean().isVerticalStretchy()) {
            var ov = b9.getPercent(
                oC,
                ow
                    .getObean()
                    .getOperatorStyle()
                    .getOperatorMaxInfo()
                    .getPercentGrow(),
            );
            ou = lv.getIntFromDouble(oD * ov);
        }
        if (ow.getBean().getCssstyle().getWidthInt() > 0) {
            oz = ow.getBean().getCssstyle().getWidthInt();
        }
        if (ow.getBean().getCssstyle().getHeightInt() > 0) {
            ou = ow.getBean().getCssstyle().getHeightInt();
        }
        ou = ow
            .getObean()
            .getOperatorStyle()
            .getOperatorMaxInfo()
            .getNearWidth(ou);
        var oB = new jL(0, 0, oz, ou, oC);
        gQ.draw(ow, oE, oB, ow.getObean().getStyle(), ow.isLeftToRight(), null);
        ow.setStretched(true);
        ow.getDim().setBaseline(bu);
        ow.getDim().setInsideMarginLeft(0);
        ow.getDim().setInsideMarginRight(0);
        ow.getDim().setLspace(0);
        ow.getDim().setRspace(0);
        ow.calculateWidth();
        ow.calculateHeight();
        ow.calculateAxisLine();
        return true;
    };
    b9.getPercent = function (ov, ou) {
        var ow = 2;
        return ((ow - 1) / (ou - 1)) * ov + (ou - ow) / (ou - 1);
    };

    function bD() {
        this.rowlineSource = false;
        this.tdSource = false;
        this.heightWidthSource = false;
        this.directSubexpression = 0;
    }
    bD.prototype.isRowlineSource = function () {
        return this.rowlineSource;
    };
    bD.prototype.setRowlineSource = function (ou) {
        this.rowlineSource = ou;
    };
    bD.prototype.isTdSource = function () {
        return this.tdSource;
    };
    bD.prototype.setTdSource = function (ou) {
        this.tdSource = ou;
    };
    bD.prototype.isHeightWidthSource = function () {
        return this.heightWidthSource;
    };
    bD.prototype.setHeightWidthSource = function (ou) {
        this.heightWidthSource = ou;
    };
    bD.prototype.getDirectSubexpression = function () {
        return this.directSubexpression;
    };
    bD.prototype.setDirectSubexpression = function (ou) {
        this.directSubexpression = ou;
    };
    bD.getRowlineStretchingSource = function () {
        var ou = new bD();
        ou.setRowlineSource(true);
        return ou;
    };
    bD.getTdStretchingSource = function () {
        var ou = new bD();
        ou.setTdSource(true);
        return ou;
    };
    bD.getHeightWidthStretchingSource = function () {
        var ou = new bD();
        ou.setHeightWidthSource(true);
        return ou;
    };
    bD.prototype.incrementLevel = function () {
        var ou = new bD();
        ou.setRowlineSource(this.rowlineSource);
        ou.setTdSource(this.tdSource);
        ou.setHeightWidthSource(this.heightWidthSource);
        ou.setDirectSubexpression(this.directSubexpression + 1);
        return ou;
    };
    bD.prototype.isNotDirectSubexpression = function () {
        return this.directSubexpression > 0;
    };

    function hL() {}
    hL.stretchVerticalIfMinSize = function (ox) {
        if (ox.isVerticalStretchy(bD.getRowlineStretchingSource())) {
            ox.saveOneTime();
            var ov = 0;
            var oA = ox.getObean();
            var ou = oA.getMinsize();
            if (ou != null) {
                if (lv.stringIsNumber(ou)) {
                    var oy = lv.getDoubleValue(ou, 1);
                    ou = lv.getIntFromDouble(oy * 100) + "%";
                    ov = m2.getLength(ou, ox.getRealContentHeight());
                } else {
                    ov = m2.getLength(ou, ox.getRealContentHeight());
                }
            }
            if (ov == 0) {
                if (ox.getBean().getCssstyle().getHeightInt() > 0) {
                    ov =
                        ox.getBean().getCssstyle().getHeightInt() -
                        ox.getDim().getHeightTopOnly() -
                        ox.getDim().getHeightBottomOnly();
                }
            }
            if (ov > ox.getRealContentHeight()) {
                var oz =
                    ov +
                    ox.getDim().getHeightTopOnly() +
                    ox.getDim().getHeightBottomOnly();
                var ow = new cV();
                ow.setHeightToStretchWithBorder(oz);
                hL.stretchToAndVerifyMax(ox, ow);
            }
        }
    };
    hL.stretchPanelVerticalRecursive = function (ow, oE, ov) {
        if (ow.isVerticalStretchy(ov)) {
            if (ow instanceof bf) {
                var oy = ow;
                return hL.stretchToAndVerifyMax(oy, oE);
            } else {
                if (ow instanceof nq) {
                    var oB = ow;
                    return hL.stretchPanelVerticalRecursive(
                        oB.getCurrentPanel(),
                        oE,
                        ov,
                    );
                } else {
                    if (ow instanceof kp) {
                        var oF = ow;
                        return oF.stretchPanelVerticalRecursive(oE, ov);
                    } else {
                        if (ow instanceof oe) {
                            var oD = ow;
                            return oD.stretchPanelVerticalRecursive(oE, ov);
                        } else {
                            if (ow instanceof kv) {
                                var oC = ow;
                                return oC.stretchPanelVerticalRecursive(oE, ov);
                            } else {
                                if (ow instanceof eI) {
                                    var oG = ow;
                                    return oG.stretchPanelVerticalRecursive(
                                        oE,
                                        ov,
                                    );
                                } else {
                                    if (ow instanceof iD) {
                                        var oH = ow;
                                        return oH.stretchPanelVerticalRecursive(
                                            oE,
                                            ov,
                                        );
                                    } else {
                                        if (ow instanceof lR) {
                                            var ox = ow;
                                            return ox.stretchPanelVerticalRecursive(
                                                oE,
                                                ov,
                                            );
                                        } else {
                                            if (ow instanceof fX) {
                                                var ou = ow;
                                                return ou.stretchPanelVerticalRecursive(
                                                    oE,
                                                    ov,
                                                );
                                            } else {
                                                if (ow instanceof j5) {
                                                    var oI = ow;
                                                    return oI.stretchPanelVerticalRecursive(
                                                        oE,
                                                        ov,
                                                    );
                                                } else {
                                                    if (ow instanceof ci) {
                                                        var oA = ow;
                                                        return oA.stretchPanelVerticalRecursive(
                                                            oE,
                                                            ov,
                                                        );
                                                    } else {
                                                        if (ow instanceof at) {
                                                            var oz = ow;
                                                            return oz.stretchPanelVerticalRecursive(
                                                                oE,
                                                                ov,
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    hL.stretchToAndVerifyMax = function (ow, oA) {
        var ou = oA.copy();
        var oz = ow.getObean();
        var ox =
            oA.getHeightToStretchWithBorder() -
            ow.getDim().getHeightTopOnly() -
            ow.getDim().getHeightBottomOnly();
        if (oA.isCanSymetric()) {
            if (oz.getSymmetric()) {
                var oB = Math.max(
                    oA.getMaxDepth() - ow.getDim().getHeightBottomOnly(),
                    oA.getMaxHeight() - ow.getDim().getHeightTopOnly(),
                );
                ox =
                    2 * oB -
                    ow.getDim().getHeightTopOnly() -
                    ow.getDim().getHeightBottomOnly();
            }
        }
        var oC = oz.getMaxsize();
        var ov = ox;
        if (!(oC == null || "infinity" == oC)) {
            if (lv.stringIsNumber(oC)) {
                var oy = lv.getDoubleValue(oC, 1);
                oC = lv.getIntFromDouble(oy * 100) + "%";
                ov = m2.getLength(oC, ow.getRealContentHeight());
            } else {
                ov = m2.getLength(oC, ow.getRealContentHeight());
            }
        }
        if (ox > ov) {
            ox = ov;
        }
        return hL.stretchTo(ow, ou, ox);
    };
    hL.stretchTo = function (ow, oy, ou) {
        if (ou == 0 || ou <= ow.getDim().getContentHeight()) {
            return false;
        }
        var oE = ow.getObean().getText();
        var oA = ow.getContent();
        oA.getShapeList().clear();
        var oD = ow.getRealContentHeight();
        var ox = ow.getRealContentWidth();
        if (oD == 0 || ox == 0) {
            return false;
        }
        var oC = ou / oD;
        var oz = lv.getIntFromDouble(ox * oC);
        if (!ow.getObean().isHorizontalStretchy()) {
            var ov = hL.getPercent(
                oC,
                ow
                    .getObean()
                    .getOperatorStyle()
                    .getOperatorMaxInfo()
                    .getPercentGrow(),
            );
            oz = lv.getIntFromDouble(ox * ov);
        }
        if (ow.getBean().getCssstyle().getWidthInt() > 0) {
            oz = ow.getBean().getCssstyle().getWidthInt();
        }
        if (ow.getBean().getCssstyle().getHeightInt() > 0) {
            ou = ow.getBean().getCssstyle().getHeightInt();
        }
        oz = ow
            .getObean()
            .getOperatorStyle()
            .getOperatorMaxInfo()
            .getNearWidth(oz);
        var oB = new jL(0, 0, oz, ou, oC);
        gQ.draw(ow, oE, oB, ow.getObean().getStyle(), ow.isLeftToRight(), null);
        ow.setStretched(true);
        ow.getDim().setBaseline(bu);
        ow.getDim().setInsideMarginLeft(0);
        ow.getDim().setInsideMarginRight(0);
        ow.getDim().setLspace(0);
        ow.getDim().setRspace(0);
        ow.calculateWidth();
        ow.calculateHeight();
        ow.getDim().setAxis(
            lv.getIntFromDouble(ow.getDim().getContentHeight() / 2),
        );
        return true;
    };
    hL.getPercent = function (ov, ou) {
        var ow = 2;
        return ((ow - 1) / (ou - 1)) * ov + (ou - ow) / (ou - 1);
    };

    function l6() {}
    l6.getFontInfoForChar = function (ov, ox, oz) {
        if (ox.isGoogleFont()) {
            return l6.getGoogleFontFor(ox);
        } else {
            if (ox.isClientFont()) {
                return l6.getClientFontFor(ox);
            }
        }
        var oy = "";
        var ow = l6.getFamily(ov);
        if (ow == null) {
            throw "No configuration for family:" + ov;
        }
        var ou = l6.getMathMLFontForFamily(ow, ox, oz);
        if (ou != null) {
            return ou;
        }
        oy = "," + ow.getFamilyName() + ",";
        if (!(ov == kF)) {
            ow = l6.getFamily(kF);
            ou = l6.getMathMLFontForFamily(ow, ox, oz);
            if (ou != null) {
                return ou;
            }
            oy = oy + ow.getFamilyName() + ",";
        }
        if (ar) {
            ow = l6.getNextFamily(oy);
            while (ow != null) {
                oy = oy + ow.getFamilyName() + ",";
                ou = l6.getMathMLFontForFamily(ow, ox, oz);
                if (ou != null) {
                    return ou;
                }
                ow = l6.getNextFamily(oy);
            }
        }
        return null;
    };
    l6.getNextFamily = function (ow) {
        var ov = ma.split(",");
        for (var ou = 0; ou < ov.length; ou++) {
            if (ow.indexOf("," + ov[ou] + ",") == -1) {
                return l6.getFamily(ov[ou]);
            }
        }
        return null;
    };
    l6.getMathMLFontForFamily = function (ow, ov, ox) {
        var ou = ow.getMathMLFont(ov, ox);
        if (ou != null) {
            return ou;
        }
        while (!("normal" == ov.getMathvariant())) {
            ov = ov.getDefault();
            ou = ow.getMathMLFont(ov, ox);
            if (ou != null) {
                return ou;
            }
        }
        return null;
    };
    l6.getFamilyName = function (ov) {
        if (iw.indexOf(";" + ov + ";") == -1) {
            return ov;
        }
        for (var ou = 0; ou < l6.getFamilies().size(); ou++) {
            var ow = l6.getFamilies().get(ou);
            if (ow.hasFontForMathvariant(ov)) {
                return ow.getFamilyName();
            }
        }
        return kF;
    };
    l6.getFamily = function (ov) {
        if (ov == null || ov.length == 0) {
            ov = kF;
        }
        for (var ou = 0; ou < l6.getFamilies().size(); ou++) {
            var ow = l6.getFamilies().get(ou);
            if (ow.getFamilyName() == ov) {
                return ow;
            }
        }
        return null;
    };
    l6.getFamilies = function () {
        if (az == null) {
            az = new fM();
        }
        return az;
    };
    l6.addFamilyInfo = function (ou) {
        l6.getFamilies().add(ou);
    };
    l6.getClientFontFor = function (ow) {
        var ov = ow.getMathvariant();
        if (ov.indexOf("-") > -1) {
            ov = ov.substring(0, ov.indexOf("-"));
        }
        if (ov.indexOf("local:") > -1) {
            ov = ov.substring(6);
        }
        if (ov.indexOf("google:") > -1) {
            ov = ov.substring(7);
        }
        var ou = new en();
        ou.setFamily(ov);
        ou.setMathvariant(ov);
        ou.setFontFile(ov);
        var ox = new iz(ov);
        ou.setDescriptor(ox);
        ou.setEmbeded(false);
        ou.setMathvariantBean(ow);
        return ou;
    };
    l6.getGoogleFontFor = function (ox) {
        var ou = l6.getClientFontFor(ox);
        var ov = "https://fonts.googleapis.com/css?family=";
        var ow = ox.getFamily();
        if (ow.indexOf("google:") == 0) {
            ow = ow.substring(7);
        }
        ov = ov + lu.encodeUri(ow);
        ou.setFontFile(ov);
        return ou;
    };
    l6.getDefaultFont = function () {
        var ou = l6.getFamily(kF);
        return ou.getMathMLFont(
            kt.getMathvariantBean("normal", false, false, false),
            eV.getUnicodeChar("X"),
        );
    };
    l6.getAvailableFontFamilies = function () {
        return ma;
    };
    l6.setAvailableFontFamilies = function (ou) {
        ma = ou;
    };
    l6.getDefaultFontFamily = function () {
        return kF;
    };
    l6.setDefaultFontFamily = function (ou) {
        kF = ou;
    };
    l6.isSearchSymbolInAllFonts = function () {
        return ar;
    };
    l6.setSearchSymbolInAllFonts = function (ou) {
        ar = ou;
    };

    function dO() {
        this.familyName;
        this.folderOrUrl;
        this.useClientFont = false;
        this.preload = false;
        this.loadedDescription = false;
        this.fonts;
    }
    dO.prototype.getFamilyName = function () {
        return this.familyName;
    };
    dO.prototype.setFamilyName = function (ou) {
        this.familyName = ou;
    };
    dO.prototype.getFolderOrUrl = function () {
        return this.folderOrUrl;
    };
    dO.prototype.setFolderOrUrl = function (ou) {
        this.folderOrUrl = ou;
    };
    dO.prototype.isUseClientFont = function () {
        return this.useClientFont;
    };
    dO.prototype.setUseClientFont = function (ou) {
        this.useClientFont = ou;
    };
    dO.prototype.isPreload = function () {
        return this.preload;
    };
    dO.prototype.setPreload = function (ou) {
        this.preload = ou;
    };
    dO.prototype.isLoadedDescription = function () {
        return this.loadedDescription;
    };
    dO.prototype.setLoadedDescription = function (ou) {
        this.loadedDescription = ou;
    };
    dO.prototype.setFonts = function (ou) {
        this.fonts = ou;
    };
    dO.prototype.hasFontForMathvariant = function (ow) {
        for (var ov = 0; ov < this.fonts.size(); ov++) {
            var ou = this.fonts.get(ov);
            if (ou.getMathvariant() == ow) {
                return true;
            }
        }
        return false;
    };
    dO.prototype.getMathMLFont = function (ow, ox) {
        for (var ov = 0; ov < this.fonts.size(); ov++) {
            var ou = this.fonts.get(ov);
            if (ou.getMathvariant() == ow.getMathvariant()) {
                if (ou.getDescriptor().existCharInList(ox)) {
                    return ou.copy(ow);
                }
            }
        }
        return null;
    };
    dO.prototype.getFonts = function () {
        return this.fonts;
    };

    function m4(ov) {
        this.fontFileName;
        this.superscriptChar;
        this.fontName;
        this.unicode1 = new fM();
        this.unicode2 = new fM();
        this.fontFileName = ov.substring(0, ov.indexOf("|"));
        ov = ov.substring(ov.indexOf("|") + 1);
        this.superscriptChar = lv.getCharFromHexCode(
            ov.substring(0, ov.indexOf("|")),
        );
        ov = ov.substring(ov.indexOf("|") + 1);
        this.fontName = ov.substring(0, ov.indexOf(";"));
        var ou = ov.substring(ov.indexOf(";"));
        this.openAndFill(ou);
    }
    m4.prototype.getFontFileName = function () {
        return this.fontFileName;
    };
    m4.prototype.getSuperscriptChar = function () {
        return this.superscriptChar;
    };
    m4.prototype.getFontName = function () {
        return this.fontName;
    };
    m4.prototype.openAndFill = function (oA) {
        var ox = oA.split(";");
        for (var oy = 0; oy < ox.length; oy++) {
            var ov = ox[oy];
            ov = W.trim(ov);
            if (ov.length > 0 && ov.indexOf(":") > 0) {
                var oz = ov.substring(0, ov.indexOf(":"));
                var ow = ov.substring(ov.indexOf(":") + 1, ov.length);
                var ou = this.calculateAllValues(ow);
                this.unicode1.add(oz);
                this.unicode2.add(ou);
            }
        }
    };
    m4.prototype.calculateAllValues = function (ou) {
        var ow = ",";
        var oC = ou.split(",");
        for (var oz = 0; oz < oC.length; oz++) {
            var ov = oC[oz];
            if (ov.indexOf("-") > -1) {
                var oB = lv.getIntFromHexCode(ov.substring(0, ov.indexOf("-")));
                var oA = lv.getIntFromHexCode(
                    ov.substring(ov.indexOf("-") + 1, ov.length),
                );
                for (var oy = oB; oy <= oA; oy++) {
                    var ox = lv.getHexCodeFromInt(oy);
                    ow = ow + ox + ",";
                }
            } else {
                ow = ow + ov + ",";
            }
        }
        return ow;
    };
    m4.prototype.existCharInList = function (oy) {
        var ow = oy.getUnicode();
        var ox = "";
        var ov = "";
        if (ow.length <= 2) {
            ox = "0";
            ov = "," + ow + ",";
        } else {
            ox = ow.substring(0, ow.length - 2);
            ov = ow.substring(ow.length - 2, ow.length);
            if (ov.length == 2 && ov.indexOf("0") == 0) {
                ov = ov.substring(1, 2);
            }
            ov = "," + ov + ",";
        }
        var ou = this.getLineFor(ox);
        if (ou == null) {
            return false;
        }
        return ou.indexOf(ov) > -1;
    };
    m4.prototype.getLineFor = function (ow) {
        for (var ov = 0; ov < this.unicode1.size(); ov++) {
            var ou = this.unicode1.get(ov);
            if (ou == ow) {
                return this.unicode2.get(ov);
            }
        }
        return null;
    };

    function iz(ou) {
        this.dKN = m4;
        this.dKN(ou + "|58|" + ou + ";");
    }
    ga(iz, m4);
    iz.prototype.existCharInList = function (ou) {
        return true;
    };

    function en() {
        this.descriptor;
        this.fontFile;
        this.family;
        this.mathvariant;
        this.embeded = false;
        this.mathvariantBean;
    }
    en.prototype.getFamily = function () {
        return this.family;
    };
    en.prototype.setFamily = function (ou) {
        this.family = ou;
    };
    en.prototype.getMathvariant = function () {
        return this.mathvariant;
    };
    en.prototype.setMathvariant = function (ou) {
        this.mathvariant = ou;
    };
    en.prototype.getFontName = function () {
        return this.descriptor.getFontName();
    };
    en.prototype.getFontFile = function () {
        return this.fontFile;
    };
    en.prototype.setFontFile = function (ou) {
        this.fontFile = ou;
    };
    en.prototype.isEmbeded = function () {
        return this.embeded;
    };
    en.prototype.setEmbeded = function (ou) {
        this.embeded = ou;
    };
    en.prototype.getSuperscriptChar = function () {
        return this.descriptor.getSuperscriptChar();
    };
    en.prototype.getDescriptor = function () {
        return this.descriptor;
    };
    en.prototype.setDescriptor = function (ou) {
        this.descriptor = ou;
    };
    en.prototype.getMathvariantBean = function () {
        return this.mathvariantBean;
    };
    en.prototype.setMathvariantBean = function (ou) {
        this.mathvariantBean = ou;
    };
    en.prototype.equals = function (ov) {
        if (ov instanceof en) {
            var ou = ov;
            if (this.fontFile == ou.getFontFile()) {
                return true;
            }
        }
        return false;
    };
    en.prototype.copy = function (ov) {
        var ou = new en();
        ou.setMathvariantBean(ov);
        ou.setDescriptor(this.descriptor);
        ou.setEmbeded(this.embeded);
        ou.setFamily(this.family);
        ou.setFontFile(this.fontFile);
        ou.setMathvariant(this.mathvariant);
        return ou;
    };

    function ax(ow, ov) {
        this.id;
        this.parent = null;
        this.mathMLBean = null;
        this.leftToRight = true;
        this.content = new dx();
        this.initDim = new aS();
        this.dim = new aS();
        this.lastPanelStretched = null;
        this.mathMLBean = ow;
        this.parent = ov;
        this.id = this.mathMLBean.getId();
        var ou = this.mathMLBean.getStyle().getDir();
        this.leftToRight = true;
        if ("rtl" == ou) {
            this.leftToRight = false;
        }
    }
    ax.prototype.clone = function () {
        var ou = new ax(this.mathMLBean, this.parent);
        ou.content.copyFrom(this.content);
        ou.initDim.copyFrom(this.initDim);
        ou.dim.copyFrom(this.dim);
        ou.leftToRight = this.leftToRight;
        ou.id = this.id + "-copy";
        return ou;
    };
    ax.prototype.initAfterChildrenLoaded = function () {
        this.dim.initialization(this.mathMLBean);
        this.initDim.initialization(this.mathMLBean);
        this.content.initialization();
    };
    ax.prototype.reInitialization = function () {
        this.dim.reInitialization();
        this.content.reInitialization();
    };
    ax.prototype.calculateDimension = function () {
        var ou = 100;
        do {
            ou = ou - 1;
            if (ou == 0) {
                throw "loop limit !!!";
            }
            this.calculateChildrenDimension();
            this.positionChildren();
            this.calculateWidth();
            this.calculateHeight();
            this.calculateAxisLine();
            this.streatchVerticalChildrenIfNeed();
            this.streatchOrCompresHorizontalIfNeed();
            this.streatchOrCompresVerticalIfNeed();
            this.alignContent();
            this.calculateAxisLine();
            this.calculateBaseline();
            this.calculateSuperscriptLine();
            this.calculateDecimalPosition();
            this.dim.setChangedDimension(false);
            this.endCalculateDimension();
        } while (this.dim.isChangedDimension());
    };
    ax.prototype.streatchVerticalChildrenIfNeed = function () {
        return false;
    };
    ax.prototype.recalculateDim = function () {
        this.calculateWidth();
        this.calculateHeight();
        this.calculateAxisLine();
        this.calculateBaseline();
        this.calculateSuperscriptLine();
        this.calculateDecimalPosition();
    };
    ax.prototype.setChangedDimension = function (ou) {
        if (ou && this.parent != null) {
            this.parent.setChangedDimension(true);
        }
        this.getDim().setChangedDimension(ou);
    };
    ax.prototype.calculateChildrenDimension = function () {
        for (var ou = 0; ou < this.content.getChildren().size(); ou++) {
            var ov = this.content.getChildren().get(ou);
            if (ov.getDim().isChangedDimension()) {
                ov.calculateDimension();
            }
        }
    };
    ax.prototype.positionChildren = function () {
        this.content.positionChildren(this.isLeftToRight());
    };
    ax.prototype.calculateWidth = function () {
        var ow = 0;
        for (var ov = 0; ov < this.content.getChildren().size(); ov++) {
            var ox = this.content.getChildren().get(ov);
            if (ox.getDim().getX() + ox.getDim().getWidth() > ow) {
                ow = ox.getDim().getX() + ox.getDim().getWidth();
            }
        }
        for (var ov = 0; ov < this.content.getShapeList().size(); ov++) {
            var ou = this.content.getShapeList().get(ov);
            if (ou.getMinX() + ou.getWidth() > ow) {
                ow = ou.getMinX() + ou.getWidth();
            }
        }
        this.dim.setContentWidth(ow);
    };
    ax.prototype.alignContent = function () {
        if (this.dim.getWidthSet() > 0) {
            var ov = this.dim.getWidthSet() - this.dim.getWidth();
            if (ov > 0) {
                var ow = this.mathMLBean.getCssstyle().getAlign();
                if ("left" == ow) {
                    this.dim.setInsideMarginRight(
                        this.dim.getInsideMarginRight() + ov,
                    );
                } else {
                    if ("right" == ow) {
                        this.dim.setInsideMarginLeft(
                            this.dim.getInsideMarginLeft() + ov,
                        );
                    } else {
                        var ou = lv.getIntFromDouble(ov / 2);
                        this.dim.setInsideMarginLeft(
                            this.dim.getInsideMarginLeft() + ou,
                        );
                        this.dim.setInsideMarginRight(
                            this.dim.getInsideMarginRight() + ov - ou,
                        );
                    }
                }
            } else {
            }
        }
        if (this.dim.getHeightSet() > 0) {
            var ov = this.dim.getHeightSet() - this.dim.getHeight();
            if (ov > 0) {
                var ow = this.mathMLBean.getCssstyle().getValign();
                if ("top" == ow) {
                    this.dim.setInsideMarginBottom(
                        this.dim.getInsideMarginBottom() + ov,
                    );
                } else {
                    if ("bottom" == ow) {
                        this.dim.setInsideMarginTop(
                            this.dim.getInsideMarginTop() + ov,
                        );
                    } else {
                        var ou = lv.getIntFromDouble(ov / 2);
                        this.dim.setInsideMarginTop(
                            this.dim.getInsideMarginTop() + ou,
                        );
                        this.dim.setInsideMarginBottom(
                            this.dim.getInsideMarginBottom() + ov - ou,
                        );
                    }
                }
            }
        }
    };
    ax.prototype.calculateHeight = function () {
        var ow = 0;
        for (var ov = 0; ov < this.content.getChildrenIgnoreTd().size(); ov++) {
            var ox = this.content.getChildrenIgnoreTd().get(ov);
            if (ox.getDim().getY() + ox.getDim().getHeight() > ow) {
                ow = ox.getDim().getY() + ox.getDim().getHeight();
            }
        }
        for (var ov = 0; ov < this.content.getShapeList().size(); ov++) {
            var ou = this.content.getShapeList().get(ov);
            if (ou.getMinY() + ou.getHeight() > ow) {
                ow = ou.getMinY() + ou.getHeight();
            }
        }
        this.dim.setContentHeight(ow);
    };
    ax.prototype.calculateAxisLine = function () {
        this.getDim().setAxis(
            lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
        );
    };
    ax.prototype.calculateBaseline = function () {};
    ax.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(0);
    };
    ax.prototype.calculateDecimalPosition = function () {
        for (var ou = 0; ou < this.content.getChildren().size(); ou++) {
            var ov = this.content.getChildren().get(ou);
            if (ov.getDim().getDecimalPosition() != bu) {
                this.getDim().setDecimalPosition(
                    ov.getDim().getX() +
                        ov.getDim().getWidthLeft() +
                        ov.getDim().getDecimalPosition(),
                );
                break;
            }
        }
    };
    ax.prototype.endCalculateDimension = function () {};
    ax.prototype.getId = function () {
        return this.id;
    };
    ax.prototype.getParent = function () {
        return this.parent;
    };
    ax.prototype.setParent = function (ou) {
        this.parent = this.parent;
    };
    ax.prototype.getMathMLBean = function () {
        return this.mathMLBean;
    };
    ax.prototype.getBean = function () {
        return this.mathMLBean;
    };
    ax.prototype.getContent = function () {
        return this.content;
    };
    ax.prototype.getDim = function () {
        return this.dim;
    };
    ax.prototype.isLeftToRight = function () {
        return this.leftToRight;
    };
    ax.prototype.getRootPanel = function () {
        if (this.parent == null) {
            return this;
        }
        return this.parent.getRootPanel();
    };
    ax.prototype.getPanelWithId = function (ow) {
        if (ow == null) {
            return null;
        }
        if (ow == this.getId()) {
            return this;
        }
        for (var ov = 0; ov < this.content.getChildren().size(); ov++) {
            var ox = this.content.getChildren().get(ov);
            var ou = ox.getPanelWithId(ow);
            if (ou != null) {
                return ou;
            }
        }
        return null;
    };
    ax.prototype.getAbsolutPositionX = function (ou) {
        ou = ou + this.getDim().getX();
        if (this.parent == null) {
            return ou;
        }
        ou = ou + this.parent.getDim().getWidthLeft();
        return this.parent.getAbsolutPositionX(ou);
    };
    ax.prototype.getAbsolutPositionY = function (ou) {
        ou = ou + this.getDim().getY();
        if (this.parent == null) {
            return ou;
        }
        ou = ou + this.parent.getDim().getHeightTop();
        return this.parent.getAbsolutPositionY(ou);
    };
    ax.prototype.getAbsolutPositionInPanelY = function (ov, ou) {
        ov = ov + this.getDim().getHeightTop();
        if (this == ou) {
            return ov;
        }
        ov = ov + this.getDim().getY();
        if (this.parent == null) {
            return ov;
        }
        return this.parent.getAbsolutPositionInPanelY(ov, ou);
    };
    ax.prototype.findIsItalic = function (ox) {
        if (ox instanceof bW) {
            var ov = ox;
            var ou = ov.getChildren();
            if (ou != null && ou.size() == 1) {
                var ow = ou.get(0);
                return this.findIsItalic(ow);
            }
        }
        return ox.getStyle().isItalic();
    };
    ax.prototype.isStrongAxisBaseline = function () {
        return false;
    };
    ax.prototype.streatchOrCompresHorizontalIfNeed = function () {
        if (this.dim.getWidthSet() > 0) {
            var ou = this.dim.getWidthSet() - this.dim.getWidth();
            if (ou > 0) {
                return b9.stretchPanelHorizontalRecursive(
                    this,
                    this.dim.getWidthSet(),
                    bD.getHeightWidthStretchingSource(),
                );
            } else {
                return e4.compressPanelHorizontalRecursive(
                    this,
                    this.dim.getWidthSet(),
                );
            }
        }
        return false;
    };
    ax.prototype.streatchOrCompresVerticalIfNeed = function () {
        if (this.dim.getHeightSet() > 0) {
            var ov = this.dim.getHeightSet() - this.dim.getHeight();
            if (ov > 0) {
                var ou = new cV();
                ou.setHeightToStretchWithBorder(this.dim.getHeightSet());
                return hL.stretchPanelVerticalRecursive(
                    this,
                    ou,
                    bD.getHeightWidthStretchingSource(),
                );
            } else {
            }
        }
        return false;
    };
    ax.prototype.getBase = function () {
        return this;
    };
    ax.prototype.isInferred = function () {
        return false;
    };
    ax.prototype.isEmbellished = function () {
        return false;
    };
    ax.prototype.isSpaceLikePanel = function () {
        return false;
    };
    ax.prototype.isVerticalStretchy = function (ou) {
        return false;
    };
    ax.prototype.isHorizontalStretchy = function (ou) {
        return false;
    };
    ax.prototype.incrementPixelChildrenHorizontal = function (ow, ou) {
        var ov = this.getContent().getChildren();
        if (ov.size() == 0) {
            return false;
        }
        if (ow <= this.getDim().getWidth()) {
            return false;
        }
        this.lastPanelStretched = null;
        var oA = false;
        if (ov.size() == 1) {
            var oC = ov.get(0);
            oA = b9.stretchPanelHorizontalRecursive(oC, ow, ou);
        } else {
            var oB = ow - this.getDim().getWidth();
            var oE = null;
            while (true) {
                var oz = false;
                for (var oy = 0; oy < ov.size(); oy++) {
                    var oC = ov.get(oy);
                    if (this.lastPanelStretched != null) {
                        if (this.lastPanelStretched == oC) {
                            this.lastPanelStretched = null;
                        }
                        oz = true;
                        continue;
                    }
                    var oD = oC.getDim().getWidth();
                    if (b9.stretchPanelHorizontalRecursive(oC, oD + 1, ou)) {
                        var ox = oC.getDim().getWidth();
                        if (ox > oD) {
                            oB = oB - (ox - oD);
                            oA = true;
                            oz = true;
                        }
                    }
                    oE = oC;
                    if (oB <= 0) {
                        break;
                    }
                }
                if (oB <= 0) {
                    break;
                }
                if (!oz) {
                    break;
                }
            }
            this.lastPanelStretched = oE;
        }
        return oA;
    };
    ax.prototype.incrementPixelChildrenVertical = function (oz, ow) {
        var ox = this.getContent().getChildren();
        if (ox.size() == 0) {
            return false;
        }
        if (oz.getHeightToStretchWithBorder() <= this.getDim().getHeight()) {
            return false;
        }
        this.lastPanelStretched = null;
        var oC = false;
        if (ox.size() == 1) {
            var oE = ox.get(0);
            var ov = oz.copy();
            oC = hL.stretchPanelVerticalRecursive(oE, ov, ow);
        } else {
            var oD =
                oz.getHeightToStretchWithBorder() - this.getDim().getHeight();
            var oF = null;
            while (true) {
                var oB = false;
                for (var oA = 0; oA < ox.size(); oA++) {
                    var oE = ox.get(oA);
                    if (this.lastPanelStretched != null) {
                        if (this.lastPanelStretched == oE) {
                            this.lastPanelStretched = null;
                        }
                        oB = true;
                        continue;
                    }
                    var oy = oE.getDim().getHeight();
                    var ov = oz.copy();
                    ov.setHeightToStretchWithBorder(oy + 1);
                    if (hL.stretchPanelVerticalRecursive(oE, ov, ow)) {
                        var ou = oE.getDim().getHeight();
                        if (ou > oy) {
                            oD = oD - (ou - oy);
                            oC = true;
                            oB = true;
                        }
                    }
                    oF = oE;
                    if (oD <= 0) {
                        break;
                    }
                }
                if (oD <= 0) {
                    break;
                }
                if (!oB) {
                    break;
                }
            }
            this.lastPanelStretched = oF;
        }
        return oC;
    };
    ax.prototype.getRealChildren = function () {
        return this.getContent().getChildren();
    };

    function nq(ov, ou) {
        this.actionBean;
        this.currentPanel;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(nq, ax);
    nq.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this.currentPanel = this.getContent().getChildren().get(0);
    };
    nq.prototype.calculateAxisLine = function () {
        this.getDim().setAxis(
            this.currentPanel.getDim().getHeightTop() +
                this.currentPanel.getDim().getAxis(),
        );
    };
    nq.prototype.calculateBaseline = function () {
        if (this.currentPanel.getDim().getBaseline() != bu) {
            this.getDim().setBaseline(
                this.currentPanel.getDim().getHeightTop() +
                    this.currentPanel.getDim().getBaseline(),
            );
        }
    };
    nq.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(
            this.currentPanel.getDim().getSuperscriptline(),
        );
    };
    nq.prototype.getCurrentPanel = function () {
        return this.currentPanel;
    };
    nq.prototype.isStrongAxisBaseline = function () {
        return this.currentPanel.isStrongAxisBaseline();
    };
    nq.prototype.getBase = function () {
        return this.currentPanel.getBase();
    };
    nq.prototype.isSpaceLikePanel = function () {
        return this.currentPanel.isSpaceLikePanel();
    };
    nq.prototype.isInferred = function () {
        return this.currentPanel.isInferred();
    };
    nq.prototype.isEmbellished = function () {
        return this.currentPanel.isEmbellished();
    };

    function bU(ov, ou) {
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(bU, ax);
    bU.prototype.isSpaceLikePanel = function () {
        return true;
    };

    function b4(ov, ou) {
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(b4, ax);
    b4.prototype.isSpaceLikePanel = function () {
        return true;
    };

    function i6(ov, ou) {
        this.tokenBean;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.tokenBean = ov;
    }
    ga(i6, ax);
    i6.prototype.positionChildren = function () {
        ax.prototype.positionChildren.call(this);
        this.getContent().positionChildrenOnBaseline();
        this.getContent().returnYToZero();
    };
    i6.prototype.calculateBaseline = function () {
        var ov = this.getContent();
        for (var ou = 0; ou < ov.getChildren().size(); ou++) {
            var ow = ov.getChildren().get(ou);
            if (ow.getDim().getBaseline() == bu) {
                continue;
            }
            this.getDim().setBaseline(
                ow.getDim().getY() + ow.getDim().getBaseline(),
            );
            break;
        }
    };
    i6.prototype.calculateSuperscriptLine = function () {
        var ow = -bu;
        var ov = this.getContent();
        for (var ou = 0; ou < ov.getChildren().size(); ou++) {
            var ox = ov.getChildren().get(ou);
            if (ox.getDim().getSuperscriptline() == bu) {
                continue;
            }
            ow = Math.min(ow, ox.getDim().getSuperscriptline());
        }
        if (ow != -bu) {
            this.getDim().setSuperscriptline(ow);
        } else {
            this.getDim().setSuperscriptline(0);
        }
    };
    i6.prototype.calculateAxisLine = function () {
        var ow = -bu;
        var ov = this.getContent();
        for (var ou = 0; ou < ov.getChildren().size(); ou++) {
            var ox = ov.getChildren().get(ou);
            if (ox.getDim().getAxis() == bu) {
                continue;
            }
            ow = Math.min(ow, ox.getDim().getAxis());
        }
        if (ow != -bu) {
            this.getDim().setAxis(ow);
        } else {
            this.getDim().setAxis(this.getDim().getContentHeight() / 2);
        }
    };
    i6.prototype.isStrongAxisBaseline = function () {
        var ou = this.tokenBean.getText();
        if (
            ou == "=" ||
            ou == "−" ||
            ou == "+" ||
            ou == "-" ||
            ou == "×" ||
            ou == "·" ||
            ou == "÷" ||
            ou == "≠" ||
            ou == "≈" ||
            ou == "<" ||
            ou == ">" ||
            ou == "±"
        ) {
            return true;
        }
        return false;
    };

    function iC(ov, ou) {
        this.dKP = i6;
        this.dKP(ov, ou);
    }
    ga(iC, i6);

    function mw(ov, ou) {
        this.dKQ = iC;
        this.dKQ(ov, ou);
    }
    ga(mw, iC);

    function H(ov, ou) {
        this.dKP = i6;
        this.dKP(ov, ou);
    }
    ga(H, i6);
    H.prototype.calculateDecimalPosition = function () {
        ax.prototype.calculateDecimalPosition.call(this);
        if (this.getDim().getDecimalPosition() == bu) {
            this.getDim().setDecimalPosition(this.getDim().getContentWidth());
        }
    };

    function dI(ov, ou) {
        this.dKR = H;
        this.dKR(ov, ou);
    }
    ga(dI, H);

    function kp(ov, ou) {
        this.linethickness = 0;
        this.drawLine = false;
        this.space = 0;
        this.num;
        this.denum;
        this.numalign;
        this.denumalign;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(kp, ax);
    kp.prototype.positionChildren = function () {
        var ov = this.getContent();
        ov.getShapeList().clear();
        var ou = this.getMathMLBean();
        this.num = ov.getChildren().get(0);
        this.denum = ov.getChildren().get(1);
        var ow = ou.getLinethickness();
        this.linethickness = m2.getLineThickness(
            ow,
            ou.getStyle().getMathsize(),
        );
        this.drawLine = true;
        if (this.linethickness == 0) {
            this.drawLine = false;
        }
        this.space = m2.getLength(ou.getSpace(), ou.getStyle().getMathsize());
        this.numalign = ou.getNumalign();
        this.denumalign = ou.getDenomalign();
        this.rePositionChildren();
    };
    kp.prototype.rePositionChildren = function () {
        var ou = this.getMathMLBean();
        var oz = this.getContent();
        oz.getShapeList().clear();
        if (!ou.isBevelled()) {
            this.getDim().setInsideMarginLeft(1);
            this.getDim().setInsideMarginRight(1);
            this.num.getDim().setY(0);
            this.denum
                .getDim()
                .setY(
                    this.num.getDim().getHeight() +
                        2 * this.space +
                        this.linethickness,
                );
            var oy = this.num.getDim().getWidth();
            if (this.denum.getDim().getWidth() > oy) {
                oy = this.denum.getDim().getWidth();
            }
            if (this.numalign == null || this.numalign.length == 0) {
                this.numalign = "center";
            }
            this.numalign = this.numalign.toLowerCase();
            if (this.denumalign == null || this.denumalign.length == 0) {
                this.denumalign = "center";
            }
            this.denumalign = this.denumalign.toLowerCase();
            if ("left" == this.numalign) {
                this.num.getDim().setX(0);
            } else {
                if ("right" == this.numalign) {
                    this.num.getDim().setX(oy - this.num.getDim().getWidth());
                } else {
                    this.num
                        .getDim()
                        .setX((oy - this.num.getDim().getWidth()) / 2);
                }
            }
            if ("left" == this.denumalign) {
                this.denum.getDim().setX(0);
            } else {
                if ("right" == this.denumalign) {
                    this.denum
                        .getDim()
                        .setX(oy - this.denum.getDim().getWidth());
                } else {
                    this.denum
                        .getDim()
                        .setX((oy - this.denum.getDim().getWidth()) / 2);
                }
            }
            if (this.drawLine) {
                var ov = new jQ();
                ov.setLinethickness(this.linethickness);
                var ow = jF.getCenterOfBorder(this.linethickness);
                ov.setBorderColor(c2.getColor(ou.getStyle().getColor(), 0));
                ov.setAntialias(false);
                ov.setX(0);
                ov.setY(this.num.getDim().getHeight() + this.space + ow);
                ov.setEndX(oy);
                ov.setEndY(this.num.getDim().getHeight() + this.space + ow);
                oz.getShapeList().add(ov);
            }
            this.getDim().setAxis(
                this.num.getDim().getHeight() +
                    this.space +
                    lv.getIntFromDouble(this.linethickness / 2),
            );
        } else {
            var ox = this.num.getDim().getHeight();
            if (this.denum.getDim().getHeight() > ox) {
                ox = this.denum.getDim().getHeight();
            }
            this.num.getDim().setY((ox - this.num.getDim().getHeight()) / 2);
            this.denum
                .getDim()
                .setY((ox - this.denum.getDim().getHeight()) / 2);
            this.num.getDim().setX(0);
            this.denum
                .getDim()
                .setX(
                    this.num.getDim().getWidth() +
                        2 * this.space +
                        this.linethickness,
                );
            this.num
                .getDim()
                .setY(
                    this.num.getDim().getY() -
                        this.num.getDim().getHeight() / 5,
                );
            this.denum
                .getDim()
                .setY(
                    this.denum.getDim().getY() +
                        this.denum.getDim().getHeight() / 5,
                );
            this.getContent().returnYToZero();
            ox = this.num.getDim().getY() + this.num.getDim().getHeight();
            if (
                this.denum.getDim().getY() + this.denum.getDim().getHeight() >
                ox
            ) {
                ox =
                    this.denum.getDim().getY() +
                    this.denum.getDim().getHeight();
            }
            var oA = lv.getIntegerValue(ox / 8 + "", 0);
            if (this.drawLine) {
                var ov = new jQ();
                ov.setLinethickness(this.linethickness);
                ov.setBorderColor(c2.getColor(ou.getStyle().getColor(), 0));
                ov.setX(
                    this.num.getDim().getWidth() +
                        this.space +
                        this.linethickness / 2 +
                        oA,
                );
                ov.setY(0);
                ov.setEndX(
                    this.num.getDim().getWidth() +
                        this.space +
                        this.linethickness / 2 -
                        oA,
                );
                ov.setEndY(ox);
                oz.getShapeList().add(ov);
            }
            this.getDim().setAxis(ox / 2);
        }
        this.getDim().setBaseline(bu);
        this.calculateWidth();
        this.calculateHeight();
        if (!this.isLeftToRight()) {
            this.flipFraction();
        }
    };
    kp.prototype.flipFraction = function () {
        var oA = this.getDim().getContentWidth();
        var ox = this.getContent().getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oz = ox.get(ow);
            oz.getDim().setX(oA - oz.getDim().getX() - oz.getDim().getWidth());
        }
        var ov = this.getContent().getShapeList();
        for (var ow = 0; ow < ov.size(); ow++) {
            var ou = ov.get(ow);
            var oy = lv.getIntFromDouble(ou.getLinethickness());
            if (ou.getX() == ou.getEndX()) {
                ou.setX(oA - ou.getX() - (oy % 2));
                ou.setEndX(oA - ou.getEndX() - (oy % 2));
            } else {
                ou.setX(oA - ou.getX());
                ou.setEndX(oA - ou.getEndX());
            }
        }
    };
    kp.prototype.calculateAxisLine = function () {};
    kp.prototype.calculateBaseline = function () {};
    kp.prototype.isHorizontalStretchy = function (ou) {
        return (
            this.num.isHorizontalStretchy(ou) ||
            this.denum.isHorizontalStretchy(ou)
        );
    };
    kp.prototype.isVerticalStretchy = function (ou) {
        return (
            this.num.isVerticalStretchy(ou) || this.denum.isVerticalStretchy(ou)
        );
    };
    kp.prototype.stretchPanelHorizontalRecursive = function (ov, oy) {
        var ou = this.getMathMLBean();
        ov =
            ov -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ov <= this.getDim().getWidth()) {
            return false;
        }
        var oz = false;
        if (!ou.isBevelled()) {
            var ow = b9.stretchPanelHorizontalRecursive(this.num, ov - 2, oy);
            var ox = b9.stretchPanelHorizontalRecursive(this.denum, ov - 2, oy);
            oz = ow || ox;
        } else {
            oz = this.incrementPixelChildrenHorizontal(ov, oy);
        }
        if (oz) {
            this.rePositionChildren();
            this.recalculateDim();
        }
        return oz;
    };
    kp.prototype.stretchPanelVerticalRecursive = function (ov, ow) {
        var ou =
            ov.getHeightToStretchWithBorder() -
            this.getDim().getHeightTop() -
            this.getDim().getHeightBottom();
        if (ou <= this.getDim().getHeight()) {
            return false;
        }
        var oy = ov.copy();
        oy.setHeightToStretchWithBorder(ou);
        var ox = this.incrementPixelChildrenVertical(oy, ow);
        if (ox) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ox;
    };

    function gA(ov, ou) {
        this.dKS = kp;
        this.dKS(ov, ou);
    }
    ga(gA, kp);

    function lR(ov, ou) {
        this._base;
        this.sup;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(lR, ax);
    lR.prototype.getBase = function () {
        return this._base;
    };
    lR.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        this.sup = this.getContent().getChildren().get(1);
    };
    lR.prototype.positionChildren = function () {
        ax.prototype.positionChildren.call(this);
        var ou = this.getMathMLBean();
        var ov = ou.getSuperscriptshift();
        lR.positionSupChildren(
            this,
            this._base,
            this.sup,
            ov,
            this.isLeftToRight(),
        );
    };
    lR.positionSupChildren = function (oF, oA, oH, ov, oy) {
        var oG = oH.getBase();
        var oz = oA.findIsItalic(oA.getMathMLBean());
        var ow = gK.findIsBigOperator(oA.getMathMLBean());
        var ou = oA.getDim().getSuperscriptline();
        var ox = oG.getMathMLBean().getStyle().getMathsize();
        var oE = oG.getAbsolutPositionInPanelY(0, oH);
        var oD = lv.getIntFromDouble(oH.getDim().getAxis());
        if (oH.getDim().getBaseline() != bu) {
            oE = 0;
            oD =
                oH.getDim().getHeightTop() +
                oH.getDim().getBaseline() -
                lv.getIntFromDouble(ox * 0.33);
        }
        if (ow) {
            oH.getDim().setY(
                oA.getDim().getY() + oA.getDim().getHeightTop() - oE - oD,
            );
        } else {
            oH.getDim().setY(
                oA.getDim().getY() + oA.getDim().getHeightTop() + ou - oE - oD,
            );
        }
        var oB = m2.getLength(ov, oG.getDim().getHeight());
        oH.getDim().setY(oH.getDim().getY() - oB);
        if (!oy) {
            if (oz) {
                var oC = lv.getIntFromDouble(oA.getDim().getHeight() * 0.1);
                oH.getDim().setX(oH.getDim().getX() + oC);
            }
        }
        oF.getContent().returnYToZero();
        oF.getContent().returnXToZero();
    };
    lR.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    lR.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    lR.prototype.calculateSuperscriptLine = function () {
        if (this.sup.getDim().getSuperscriptline() != bu) {
            var ou =
                this.sup.getDim().getY() +
                this.sup.getDim().getHeightTop() +
                this.sup.getDim().getSuperscriptline();
            this.getDim().setSuperscriptline(ou);
        }
    };
    lR.prototype.stretchPanelHorizontalRecursive = function (ou, ov) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ow =
            this.getDim().getContentWidth() - this._base.getDim().getWidth();
        var ox = b9.stretchPanelHorizontalRecursive(this._base, ou - ow, ov);
        if (ox) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ox;
    };
    lR.prototype.stretchPanelVerticalRecursive = function (ov, ow) {
        var oz = false;
        if (ow.isTdSource() || ow.isHeightWidthSource()) {
            var ou =
                ov.getHeightToStretchWithBorder() -
                this.getDim().getHeightTop() -
                this.getDim().getHeightBottom();
            var ox =
                this.getDim().getContentHeight() -
                this._base.getDim().getHeight();
            var oy = ov.copy();
            oy.setHeightToStretchWithBorder(ou - ox);
            oz = hL.stretchPanelVerticalRecursive(this._base, oy, ow);
        } else {
            oz = hL.stretchPanelVerticalRecursive(this._base, ov, ow);
        }
        if (oz) {
            this.recalculateDim();
        }
        return oz;
    };
    lR.prototype.isEmbellished = function () {
        return this._base.isEmbellished();
    };
    lR.prototype.isVerticalStretchy = function (ou) {
        return this._base.isVerticalStretchy(ou);
    };
    lR.prototype.isHorizontalStretchy = function (ou) {
        return this._base.isHorizontalStretchy(ou);
    };

    function lZ(ov, ou) {
        this.dKT = lR;
        this.dKT(ov, ou);
    }
    ga(lZ, lR);

    function at(ov, ou) {
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(at, ax);
    at.prototype.positionChildren = function () {
        var ow = this.getContent();
        var ou = 0;
        for (var ov = 0; ov < ow.getChildren().size(); ov++) {
            var ox = ow.getChildren().get(ov);
            if (ov > 0) {
                ou = ou + ox.getLineleading();
            }
            ox.getDim().setX(0);
            ox.getDim().setY(ou);
            ou = ou + ox.getDim().getHeight();
        }
        d0.positionLinesOnXForRowPanel(this);
        this.getContent().returnXToZero();
    };
    at.prototype.calculateAxisLine = function () {
        this.getDim().setAxis(bu);
        if (this.getContent().getChildren().size() == 1) {
            var ov = this.getContent().getChildren().get(0);
            if (ov.getDim().getAxis() != bu) {
                var ou =
                    ov.getDim().getY() +
                    ov.getDim().getHeightTop() +
                    ov.getDim().getAxis();
                this.getDim().setAxis(ou);
            }
        }
        if (this.getDim().getAxis() == bu) {
            this.getDim().setAxis(
                lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
            );
        }
    };
    at.prototype.calculateBaseline = function () {
        this.getDim().setBaseline(bu);
        if (this.getContent().getChildren().size() == 1) {
            var ov = this.getContent().getChildren().get(0);
            if (ov.getDim().getBaseline() != bu) {
                var ou =
                    ov.getDim().getY() +
                    ov.getDim().getHeightTop() +
                    ov.getDim().getBaseline();
                this.getDim().setBaseline(ou);
            }
        }
    };
    at.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(bu);
        if (this.getContent().getChildren().size() == 1) {
            var ov = this.getContent().getChildren().get(0);
            if (ov.getDim().getSuperscriptline() != bu) {
                var ou =
                    ov.getDim().getY() +
                    ov.getDim().getHeightTop() +
                    ov.getDim().getSuperscriptline();
                this.getDim().setSuperscriptline(ou);
            }
        }
        if (this.getDim().getSuperscriptline() == bu) {
            this.getDim().setSuperscriptline(0);
        }
    };
    at.prototype.getBase = function () {
        var ou = this.getContent().getChildren();
        if (ou.size() == 1) {
            var ov = this.getContent().getChildren().get(0);
            return ov.getBase();
        }
        return this;
    };
    at.prototype.isInferred = function () {
        return true;
    };
    at.prototype.isSpaceLikePanel = function () {
        var ov = this.getContent().getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = this.getContent().getChildren().get(ou);
            if (!ow.isSpaceLikePanel()) {
                return false;
            }
        }
        return true;
    };
    at.prototype.isEmbellished = function () {
        var ox = 0;
        var ov = this.getContent().getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = this.getContent().getChildren().get(ou);
            if (!ow.isSpaceLikePanel()) {
                return false;
            }
            if (ow.isEmbellished()) {
                ox++;
            }
        }
        return ox == 1;
    };
    at.prototype.isVerticalStretchy = function (ow) {
        var ov = this.getContent().getChildren();
        if (ow.isTdSource() || ow.isHeightWidthSource()) {
            if (ov.size() != 1) {
                return false;
            }
            var ox = ov.get(0);
            return ox.isVerticalStretchy(ow);
        } else {
            if (ow.isRowlineSource()) {
                if (this.isInferred()) {
                    for (var ou = 0; ou < ov.size(); ou++) {
                        var ox = this.getContent().getChildren().get(ou);
                        if (ox.isVerticalStretchy(ow)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    at.prototype.isHorizontalStretchy = function (ow) {
        var ov = this.getContent().getChildren();
        if (ow.isTdSource()) {
            if (ov.size() != 1) {
                return false;
            }
            var ox = ov.get(0);
            return ox.isHorizontalStretchy(ow);
        } else {
            if (ow.isRowlineSource() || ow.isHeightWidthSource()) {
                if (this.isInferred()) {
                    for (var ou = 0; ou < ov.size(); ou++) {
                        var ox = this.getContent().getChildren().get(ou);
                        if (ox.isHorizontalStretchy(ow)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    at.prototype.stretchPanelHorizontalRecursive = function (ou, ow) {
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        var oy = false;
        for (var ov = 0; ov < this.getContent().getChildren().size(); ov++) {
            var ox = this.getContent().getChildren().get(ov);
            if (b9.stretchPanelHorizontalRecursive(ox, ou, ow)) {
                oy = true;
            }
        }
        if (oy) {
            this.positionChildren();
            this.recalculateDim();
        }
        return oy;
    };
    at.prototype.stretchPanelVerticalRecursive = function (ov, ow) {
        var ou =
            ov.getHeightToStretchWithBorder() -
            this.getDim().getHeightTop() -
            this.getDim().getHeightBottom();
        if (ou <= this.getDim().getHeight()) {
            return false;
        }
        var oy = ov.copy();
        oy.setHeightToStretchWithBorder(ou);
        var ox = this.incrementPixelChildrenVertical(oy, ow);
        if (ox) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ox;
    };

    function jR(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(jR, at);

    function hj(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(hj, at);

    function fd(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(fd, at);

    function nz(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(nz, at);

    function op(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(op, at);

    function mA(ov, ou) {
        this.dKT = lR;
        this.dKT(ov, ou);
    }
    ga(mA, lR);

    function ed(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(ed, at);

    function gS(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(gS, at);

    function ca(ov, ou) {
        this._base;
        this.index;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(ca, ax);
    ca.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        this.index = this.getContent().getChildren().get(1);
    };
    ca.prototype.positionChildren = function () {
        ax.prototype.positionChildren.call(this);
        var oA = this.getMathMLBean();
        var oC = this.getContent();
        var oy = this.getDim();
        oC.getShapeList().clear();
        var oz = this._base.getDim().getHeight();
        var oF = this._base.getDim().getWidth();
        var ov = oA.getStyle();
        var oD = ov.getMathsize();
        var ow = m2.getLength(oA.getThickness(), oD);
        var ox = oA.isClosed();
        var ou = m2.getLength(oA.getClosedLength(), oz);
        if (ou < 1) {
            ox = false;
        }
        var oG = null;
        if (!this.isLeftToRight()) {
            oG = ku.drawSqrt(
                this,
                oF,
                0,
                oF,
                oz,
                ov,
                ox,
                oA.getClosedLength(),
                this.isLeftToRight(),
                oA.getThickness(),
            );
            if (ox) {
                this._base.getDim().setX(oG.getY() + 1);
            } else {
                this._base.getDim().setX(1);
            }
        } else {
            oG = ku.drawSqrt(
                this,
                0,
                0,
                oF,
                oz,
                ov,
                ox,
                oA.getClosedLength(),
                this.isLeftToRight(),
                oA.getThickness(),
            );
            this._base.getDim().setX(oG.getX());
            if (ox) {
                oy.setInsideMarginRight(1 + oG.getY());
            } else {
                oy.setInsideMarginRight(1);
            }
        }
        this._base.getDim().setY(oG.getY() + 1);
        var oE = lv.getIntFromDouble(ku.getSqrtWidth(ow) * 0.7);
        var oB = lv.getIntFromDouble(ku.getSqrtHeight(oz, ov) * 0.3);
        if (!this.isLeftToRight()) {
            this.index.getDim().setX(oy.getContentWidth() - oE);
        } else {
            this.index.getDim().setX(oE - this.index.getDim().getWidth());
        }
        this.index.getDim().setY(oB - this.index.getDim().getHeight());
        this.getContent().returnYToZero();
        this.getContent().returnXToZero();
    };
    ca.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    ca.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    ca.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(this._base.getDim().getY());
    };

    function dt(ov, ou) {
        this.dKV = ca;
        this.dKV(ov, ou);
    }
    ga(dt, ca);

    function ku(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(ku, at);
    ku.prototype.calculateDimension = function () {
        ax.prototype.calculateDimension.call(this);
        var oB = this.getContent();
        var oz = this.getDim();
        oB.getShapeList().clear();
        var oy = this.getMathMLBean();
        var oA = oz.getContentHeight();
        var oD = oz.getContentWidth();
        var ov = oy.getStyle();
        var ow = oy.isClosed();
        var ou = m2.getLength(oy.getClosedLength(), oA);
        if (ou < 1) {
            ow = false;
        }
        var ox = null;
        if (!this.isLeftToRight()) {
            ox = ku.drawSqrt(
                this,
                oD,
                0,
                oD,
                oA,
                ov,
                ow,
                oy.getClosedLength(),
                this.isLeftToRight(),
                oy.getThickness(),
            );
            var oC = ox.getX() - oD;
            oB.moveChildrenOnX(oC);
            oz.setInsideMarginRight(ox.getX() - oD);
        } else {
            ox = ku.drawSqrt(
                this,
                0,
                0,
                oD,
                oA,
                ov,
                ow,
                oy.getClosedLength(),
                this.isLeftToRight(),
                oy.getThickness(),
            );
            oB.moveChildrenOnX(ox.getX());
            oz.setInsideMarginRight(1);
        }
        oB.moveChildrenOnY(ox.getY() + 1);
        this.getContent().returnYToZero();
        this.getContent().returnXToZero();
        this.calculateAxisLine();
        this.calculateBaseline();
        this.getDim().setSuperscriptline(ox.getY() + 1);
    };
    ku.drawSqrt = function (oD, oz, oy, oA, oP, oQ, oH, oB, ov, oO) {
        var oM = oD.getContent();
        var oN = oD.getDim();
        var ou = oQ.getMathsize();
        var oC = m2.getLength(oO, ou);
        var oJ = lv.getIntFromDouble(ou * gx);
        var oG = ku.getSqrtWidth(oC);
        var oS = ku.getSqrtHeight(oP, oQ);
        var oF = lv.getIntFromDouble(oS * ku.getPercentForTick(oS));
        if (oG < oF) {
            oG = oF;
        }
        var oE = ku.getSqrtTick(oC);
        if (!ov) {
            oz = oz + 1;
            if (oH) {
                oz = oz + oE + 1;
            }
        }
        var oR = new jL(oz, oy + 1, oG, oS, 1);
        var ow = h.convertToChars("&Sqrt;");
        gQ.draw(oD, ow, oR, oQ, ov, null);
        var oL = c2.getColor(oQ.getColor(), 0);
        var oI = m2.getLength(oB, oP);
        if (oI < 3) {
            oI = 3;
        }
        var oK = null;
        if (!ov) {
            if (oH) {
                var ox = new jr(oL);
                ox.moveTo(1, oy + 1);
                ox.lineTo(oA + 2 * oE + 2, oy + 1);
                ox.lineTo(oA + 2 * oE + 2, oy + oE + 1);
                ox.lineTo(1 + oE, oy + oE + 1);
                ox.lineTo(1 + oE, oy + oI);
                ox.lineTo(1, oy + oI);
                ox.lineTo(1, oy + oE + 1);
                ox.setWidth(oA + oE);
                oM.getShapeList().add(ox);
                oN.setContentWidth(oz + oG);
            } else {
                var ox = new jr(oL);
                ox.moveTo(1, oy + 1);
                ox.lineTo(oA + oE, oy + 1);
                ox.lineTo(oA + oE, oy + oE + 1);
                ox.lineTo(1, oy + oE + 1);
                ox.setWidth(oA + oE);
                oM.getShapeList().add(ox);
                oN.setContentWidth(oz + oG);
            }
            oK = new lo(oz, oy + oE + 1);
        } else {
            if (oH) {
                var ox = new jr(oL);
                ox.moveTo(oz + (oG - oE), oy + 1);
                ox.lineTo(oz + oG + oA + oE + 1, oy + 1);
                ox.lineTo(oz + oG + oA + oE + 1, oy + oI);
                ox.lineTo(oz + oG + oA + 1, oy + oI);
                ox.lineTo(oz + oG + oA + 1, oy + oE + 1);
                ox.lineTo(oz + (oG - oE), oy + oE + 1);
                ox.setWidth(oA + oE);
                oM.getShapeList().add(ox);
                oN.setContentWidth(oz + oG + oA + oE + 2);
            } else {
                var ox = new jr(oL);
                ox.moveTo(oz + (oG - oE), oy + 1);
                ox.lineTo(oz + oG + oA, oy + 1);
                ox.lineTo(oz + oG + oA, oy + oE + 1);
                ox.lineTo(oz + (oG - oE), oy + oE + 1);
                ox.setWidth(oA + oE);
                oM.getShapeList().add(ox);
                oN.setContentWidth(oz + oG + oA + 1);
            }
            oK = new lo(oz + oG, oy + oE + 1);
        }
        oN.setContentHeight(oy + oP + 2 + oJ);
        return oK;
    };
    ku.getPercentForTick = function (ou) {
        if (ou < 50) {
            return 0.2 + 0.7 * ((50 - ou) / 50);
        }
        return 0.2;
    };
    ku.getSqrtWidth = function (ou) {
        var ov = lv.getIntFromDouble(ou * Y);
        if (ov < 5) {
            ov = 5;
        }
        return ov;
    };
    ku.getSqrtTick = function (ou) {
        var ov = lv.getIntFromDouble(ou * Y * 0.07);
        if (ov < 1) {
            ov = 1;
        }
        return ov;
    };
    ku.getSqrtHeight = function (ov, ow) {
        var ou = ow.getMathsize();
        var ox = lv.getIntFromDouble(ou * gx);
        return ov + ox;
    };
    ku.prototype.isEmbellished = function () {
        return false;
    };

    function fm(ov, ou) {
        this.dKW = ku;
        this.dKW(ov, ou);
    }
    ga(fm, ku);

    function K(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(K, at);

    function c7(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(c7, at);

    function bz(ov, ou) {
        this.bean;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.bean = ov;
    }
    ga(bz, ax);

    function cR(ov, ou) {
        this.img = new fJ();
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(cR, ax);
    cR.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        var ov = this.getMathMLBean();
        var ou = this.getContent();
        this.img.setSrc(ov.getSrc());
        if (ov.getValign() != null) {
            this.img.setValign(
                m2.getLength(ov.getValign(), ov.getStyle().getMathsize()),
            );
        }
        if (ov.getHeight() != null) {
            this.img.setHeight(
                m2.getLength(ov.getHeight(), ov.getStyle().getMathsize()),
            );
        }
        if (ov.getWidth() != null) {
            this.img.setWidth(
                m2.getLength(ov.getWidth(), ov.getStyle().getMathsize()),
            );
        }
        if (ov.getHeight() == null || ov.getWidth() == null) {
            eH.calculateDimensionForImage(this.img);
        }
        if (this.img.getWidth() > 0 && this.img.getHeight() > 0) {
            ou.getShapeList().add(this.img);
        }
    };
    cR.prototype.calculateChildrenDimension = function () {};
    cR.prototype.positionChildren = function () {};
    cR.prototype.calculateWidth = function () {
        this.getDim().setContentWidth(this.img.getWidth());
    };
    cR.prototype.calculateHeight = function () {
        this.getDim().setContentHeight(this.img.getHeight());
    };
    cR.prototype.calculateBaseline = function () {
        var ov = this.getMathMLBean();
        var ou = this.img.getHeight();
        if (ov.getValign() != null) {
            ou = ou + m2.getLength(ov.getValign(), this.img.getHeight());
        }
        this.getDim().setBaseline(ou);
    };
    cR.prototype.toString = function () {
        return "";
    };

    function nX(ov, ou) {
        this.closedBean;
        this.dKX = cR;
        this.dKX(ov, ou);
    }
    ga(nX, cR);
    nX.prototype.getClosedBean = function () {
        return this.closedBean;
    };
    nX.prototype.setClosedBean = function (ou) {
        this.closedBean = ou;
    };

    function hT(ov, ou) {
        this.bean;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.bean = ov;
    }
    ga(hT, ax);

    function jY(ov, ou) {
        this.dKX = cR;
        this.dKX(ov, ou);
    }
    ga(jY, cR);

    function of(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(of, at);

    function it(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(it, at);
    it.prototype.isBreakablePanelBefore = function (ou, ov) {
        return false;
    };
    it.prototype.isEmbellished = function () {
        return false;
    };

    function jE(ov, ou) {
        this.mathBean = null;
        this.scale = 1;
        this.maxWidthScale = 1;
        this.maxWidth = -1;
        this.overflow = "truncate";
        this.dKU = at;
        this.dKU(ov, ou);
        this.mathBean = ov;
        if (this.mathBean.getCssstyle().getMaxWidth() != null) {
            this.setMaxWidth(this.mathBean.getCssstyle().getMaxWidthInt());
            if (this.mathBean.getCssstyle().getOverflow() != null) {
                this.setOverflow(this.mathBean.getCssstyle().getOverflow());
            } else {
                this.setOverflow("truncate");
            }
        }
    }
    ga(jE, at);
    jE.prototype.reinitializationAllPanels = function (ou) {
        ou.reInitialization();
        var ov = ou.getContent().getChildren();
        for (var ow = 0; ow < ov.size(); ow++) {
            var ox = ov.get(ow);
            this.reinitializationAllPanels(ox);
        }
    };
    jE.prototype.resize = function (ov, ou) {};
    jE.prototype.setMaxWidth = function (ou) {
        this.maxWidth = ou;
    };
    jE.prototype.setOverflow = function (ou) {
        this.overflow = ou;
    };
    jE.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        k6.processForm(this);
    };
    jE.prototype.calculateDimension = function () {
        ax.prototype.calculateDimension.call(this);
        gT.processRTL(this);
        jF.processPanels(this);
        this.maxWidthScale = 1;
        if (this.maxWidth > -1) {
            var ou = lv.getIntFromDouble(this.maxWidth / this.scale);
            if (this.overflow == "scale") {
                this.maxWidthScale = (ou * 1) / this.getDim().getWidth();
            }
        }
    };
    jE.prototype.getScale = function () {
        return this.scale * this.maxWidthScale;
    };
    jE.prototype.setScale = function (ou) {
        this.scale = ou;
    };
    jE.prototype.getCanvasWidth = function () {
        if (this.maxWidth > -1) {
            var ov = lv.getIntFromDouble(this.maxWidth / this.scale);
            if (this.overflow == "scale") {
            } else {
                if (ov < this.getDim().getWidth()) {
                    return ov;
                }
            }
        }
        var ou = this.getDim().getWidth();
        ou = this.addMpaddedHiddenChildrenW(this, 0, ou);
        return ou;
    };
    jE.prototype.addMpaddedHiddenChildrenW = function (ow, ou, oy) {
        var ox = ow.getContent().getChildren();
        for (var oz = 0; oz < ox.size(); oz++) {
            var oA = ox.get(oz);
            var ov = ou + oA.getDim().getX() + oA.getDim().getWidth();
            oy = Math.max(oy, ov);
            oy = this.addMpaddedHiddenChildrenW(
                oA,
                ou + oA.getDim().getX(),
                oy,
            );
        }
        return oy;
    };
    jE.prototype.getCanvasHeight = function () {
        var ou = this.getDim().getHeight();
        ou = this.addMpaddedHiddenChildrenH(this, 0, ou);
        return ou;
    };
    jE.prototype.addMpaddedHiddenChildrenH = function (ou, oA, oz) {
        var ov = ou.getContent().getChildren();
        for (var ow = 0; ow < ov.size(); ow++) {
            var oy = ov.get(ow);
            var ox = oA + oy.getDim().getY() + oy.getDim().getHeight();
            oz = Math.max(oz, ox);
            oz = this.addMpaddedHiddenChildrenH(
                oy,
                oA + oy.getDim().getY(),
                oz,
            );
        }
        return oz;
    };

    function iX(ov, ou) {
        this.mencloseBean = null;
        this.content = null;
        this.dKU = at;
        this.dKU(ov, ou);
        this.mencloseBean = this.getMathMLBean();
        this.content = this.getContent();
    }
    ga(iX, at);
    iX.prototype.calculateDimension = function () {
        ax.prototype.calculateDimension.call(this);
        this.calculateWidth();
        this.calculateHeight();
        var oy = this.mencloseBean.getNotation();
        if (oy == null) {
            oy = "longdiv";
        }
        var oS = this.getMathMLBean().getStyle();
        var ow = oS.getMathsize();
        var ox = m2.getLineThickness(
            this.mencloseBean.getLinethickness(),
            this.mencloseBean.getStyle().getMathsize(),
        );
        if (ox < 1) {
            ox = 1;
        }
        var oX = m2.getLineThickness(
            this.mencloseBean.getRadius(),
            this.mencloseBean.getStyle().getMathsize(),
        );
        var oB = m2.getLineThickness(
            "medium",
            this.mencloseBean.getStyle().getMathsize(),
        );
        var oW = lv.getIntFromDouble(
            eF.getWidth(")", this.getDim().getContentHeight() + oB),
        );
        var oE = ku.getSqrtWidth(ow);
        var oV = ku.getSqrtHeight(
            this.getDim().getContentHeight(),
            this.mencloseBean.getStyle(),
        );
        var oA = ku.getSqrtTick(ow);
        var ov = lv.getIntFromDouble(this.getDim().getContentWidth() * 0.1);
        var oz = lv.getIntFromDouble(this.getDim().getContentHeight() * 0.2);
        var oR = this.getDim().getContentHeight();
        var oD = 0;
        var oG = 0;
        var ou = 0;
        var oO = 0;
        if (this.hasNotation(oy, "madruwb")) {
            oD = Math.max(oD, ov);
            oG = Math.max(oG, ov);
            oO = Math.max(oO, oz);
        }
        if (this.hasNotation(oy, "longdiv")) {
            ou = Math.max(ou, oB);
            oD = Math.max(oD, oW);
        }
        if (this.hasNotation(oy, "actuarial")) {
            ou = Math.max(ou, ox);
            oG = Math.max(oG, ox);
        }
        if (this.hasNotation(oy, "phasorangle")) {
            if (!this.isLeftToRight()) {
                oG = Math.max(oG, oR);
            } else {
                oD = Math.max(oD, oR);
            }
            oO = Math.max(oO, ox);
        }
        if (this.hasNotation(oy, "left")) {
            oD = Math.max(oD, ox);
        }
        if (this.hasNotation(oy, "right")) {
            oG = Math.max(oG, ox);
        }
        if (this.hasNotation(oy, "top")) {
            ou = Math.max(ou, ox);
        }
        if (this.hasNotation(oy, "bottom")) {
            oO = Math.max(oO, ox);
        }
        if (
            this.hasNotation(oy, "box") ||
            this.hasNotation(oy, "roundedbox") ||
            this.hasNotation(oy, "circle") ||
            this.hasNotation(oy, "updiagonalstrike") ||
            this.hasNotation(oy, "downdiagonalstrike")
        ) {
            ou = Math.max(ou, ox);
            oD = Math.max(oD, ox);
            oO = Math.max(oO, ox);
            oG = Math.max(oG, ox);
        }
        if (this.hasNotation(oy, "radical")) {
            if (!this.isLeftToRight()) {
                oG = Math.max(oG, oE);
            } else {
                oD = Math.max(oD, oE);
            }
            ou = Math.max(ou, oA + 1);
            var oJ = oV - this.getDim().getContentHeight() - oA;
            oO = Math.max(oO, oJ);
        }
        this.getContent().moveChildrenOnY(ou);
        this.getContent().moveChildrenOnX(oD);
        var oI = oD + this.getDim().getContentWidth() + oG;
        var oQ = ou + this.getDim().getContentHeight() + oO;
        if (this.hasNotation(oy, "longdiv")) {
            var oC = new jL(0, 0, oI - oW + 1, oQ, 1);
            gQ.drawLongDiv(
                this,
                oC,
                this.mencloseBean.getStyle(),
                oB,
                c2.getColor(this.mencloseBean.getStyle().getColor(), 0),
                oW,
            );
        }
        if (this.hasNotation(oy, "actuarial")) {
            jF.drawHorizontalLine(
                0,
                0,
                oI,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
            jF.drawVerticalLine(
                oI - ox,
                0,
                oQ,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
        }
        if (this.hasNotation(oy, "phasorangle")) {
            var oF = new jr(
                c2.getColor(this.mencloseBean.getStyle().getColor(), 0),
            );
            if (!this.isLeftToRight()) {
            } else {
                oF.moveTo(0, oQ);
                oF.lineTo(oI, oQ);
                oF.lineTo(oI, oQ - ox);
                oF.lineTo(2 * ox, oQ - ox);
                oF.lineTo(oR, 0);
                oF.lineTo(oR - ox, 0);
            }
            oF.setWidth(oI);
            oF.setHeight(oQ);
            this.getContent().getShapeList().add(oF);
        }
        if (this.hasNotation(oy, "madruwb")) {
            var oC = new jL(0, 0, oI, oQ, 1);
            gQ.drawMadruwb(this, oC, this.mencloseBean.getStyle(), "ltr");
        }
        if (this.hasNotation(oy, "left")) {
            jF.drawVerticalLine(
                0,
                0,
                oQ,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
        }
        if (this.hasNotation(oy, "right")) {
            jF.drawVerticalLine(
                oI - ox,
                0,
                oQ,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
        }
        if (this.hasNotation(oy, "verticalstrike")) {
            jF.drawVerticalLine(
                (oI - ox) / 2,
                0,
                oQ,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
        }
        if (this.hasNotation(oy, "horizontalstrike")) {
            jF.drawHorizontalLine(
                0,
                (oQ - ox) / 2,
                oI,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
        }
        if (this.hasNotation(oy, "uparrow")) {
            var oY = h.convertToChars("&#x2191;");
            var oT = this.mencloseBean.getStyle().getMathsize() / 3;
            var oU = new jL((oI - oT) / 2, 0, oT, oQ, 1);
            gQ.draw(this, oY, oU, oS, true, null);
        }
        if (this.hasNotation(oy, "downarrow")) {
            var oY = h.convertToChars("&#x2193;");
            var oT = this.mencloseBean.getStyle().getMathsize() / 3;
            var oU = new jL((oI - oT) / 2, 0, oT, oQ, 1);
            gQ.draw(this, oY, oU, oS, true, null);
        }
        if (this.hasNotation(oy, "updownarrow")) {
            var oY = h.convertToChars("&#x2195;");
            var oT = this.mencloseBean.getStyle().getMathsize() / 3;
            var oU = new jL((oI - oT) / 2, 0, oT, oQ, 1);
            gQ.draw(this, oY, oU, oS, true, null);
        }
        if (this.hasNotation(oy, "leftarrow")) {
            var oY = h.convertToChars("&#x2190;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oU = new jL(0, (oQ - oZ) / 2, oI, oZ, 1);
            gQ.draw(this, oY, oU, oS, true, null);
        }
        if (this.hasNotation(oy, "southwestarrow")) {
            var oY = h.convertToChars("&#x2190;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oH = lv.getIntFromDouble(Math.sqrt(oI * oI + oQ * oQ));
            var oU = new jL((oI - oH) / 2, (oQ - oZ) / 2, oH, oZ, 1);
            var oP = new gU(
                lv.getIntFromDouble(oI / 2),
                lv.getIntFromDouble(oQ / 2),
            );
            oP.setRotation(Math.atan((-oQ * 1) / oI));
            oP.setRealWidth(oI);
            oP.setRealHeight(oZ);
            gQ.draw(this, oY, oU, oS, true, oP);
        }
        if (this.hasNotation(oy, "northwestarrow")) {
            var oY = h.convertToChars("&#x2190;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oH = lv.getIntFromDouble(Math.sqrt(oI * oI + oQ * oQ));
            var oU = new jL((oI - oH) / 2, (oQ - oZ) / 2, oH, oZ, 1);
            var oP = new gU(
                lv.getIntFromDouble(oI / 2),
                lv.getIntFromDouble(oQ / 2),
            );
            oP.setRotation(Math.atan((oQ * 1) / oI));
            oP.setRealWidth(oI);
            oP.setRealHeight(oZ);
            gQ.draw(this, oY, oU, oS, true, oP);
        }
        if (this.hasNotation(oy, "rightarrow")) {
            var oY = h.convertToChars("&#x2192;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oU = new jL(0, (oQ - oZ) / 2, oI, oZ, 1);
            gQ.draw(this, oY, oU, oS, true, null);
        }
        if (this.hasNotation(oy, "northeastarrow")) {
            var oY = h.convertToChars("&#x2192;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oH = lv.getIntFromDouble(Math.sqrt(oI * oI + oQ * oQ));
            var oU = new jL((oI - oH) / 2, (oQ - oZ) / 2, oH, oZ, 1);
            var oP = new gU(
                lv.getIntFromDouble(oI / 2),
                lv.getIntFromDouble(oQ / 2),
            );
            oP.setRotation(Math.atan((-oQ * 1) / oI));
            oP.setRealWidth(oI);
            oP.setRealHeight(oZ);
            gQ.draw(this, oY, oU, oS, true, oP);
        }
        if (this.hasNotation(oy, "southeastarrow")) {
            var oY = h.convertToChars("&#x2192;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oH = lv.getIntFromDouble(Math.sqrt(oI * oI + oQ * oQ));
            var oU = new jL((oI - oH) / 2, (oQ - oZ) / 2, oH, oZ, 1);
            var oP = new gU(
                lv.getIntFromDouble(oI / 2),
                lv.getIntFromDouble(oQ / 2),
            );
            oP.setRotation(Math.atan((oQ * 1) / oI));
            oP.setRealWidth(oI);
            oP.setRealHeight(oZ);
            gQ.draw(this, oY, oU, oS, true, oP);
        }
        if (this.hasNotation(oy, "leftrightarrow")) {
            var oY = h.convertToChars("&#x2194;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oU = new jL(0, (oQ - oZ) / 2, oI, oZ, 1);
            gQ.draw(this, oY, oU, oS, true, null);
        }
        if (this.hasNotation(oy, "northwestsoutheastarrow")) {
            var oY = h.convertToChars("&#x2194;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oH = lv.getIntFromDouble(Math.sqrt(oI * oI + oQ * oQ));
            var oU = new jL((oI - oH) / 2, (oQ - oZ) / 2, oH, oZ, 1);
            var oP = new gU(
                lv.getIntFromDouble(oI / 2),
                lv.getIntFromDouble(oQ / 2),
            );
            oP.setRotation(Math.atan((oQ * 1) / oI));
            oP.setRealWidth(oI);
            oP.setRealHeight(oZ);
            gQ.draw(this, oY, oU, oS, true, oP);
        }
        if (this.hasNotation(oy, "northeastsouthwestarrow")) {
            var oY = h.convertToChars("&#x2194;");
            var oZ = this.mencloseBean.getStyle().getMathsize() / 3;
            var oH = lv.getIntFromDouble(Math.sqrt(oI * oI + oQ * oQ));
            var oU = new jL((oI - oH) / 2, (oQ - oZ) / 2, oH, oZ, 1);
            var oP = new gU(
                lv.getIntFromDouble(oI / 2),
                lv.getIntFromDouble(oQ / 2),
            );
            oP.setRotation(Math.atan((-oQ * 1) / oI));
            oP.setRealWidth(oI);
            oP.setRealHeight(oZ);
            gQ.draw(this, oY, oU, oS, true, oP);
        }
        if (this.hasNotation(oy, "top")) {
            jF.drawHorizontalLine(
                0,
                0,
                oI,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
        }
        if (this.hasNotation(oy, "bottom")) {
            jF.drawHorizontalLine(
                0,
                oQ - ox,
                oI,
                ox,
                this,
                this.mencloseBean.getStyle().getColor(),
                "solid",
            );
        }
        if (this.hasNotation(oy, "updiagonalstrike")) {
            var oN = new jQ();
            oN.setLinethickness(ox);
            oN.setBorderColor(
                c2.getColor(this.mencloseBean.getStyle().getColor(), 0),
            );
            oN.setX(ox / 2);
            oN.setY(oQ - ox / 2);
            oN.setEndX(oI - ox / 2);
            oN.setEndY(ox / 2);
            oN.setWidth(oI - ox / 2);
            oN.setHeight(oQ - ox / 2);
            this.getContent().getShapeList().add(oN);
        }
        if (this.hasNotation(oy, "downdiagonalstrike")) {
            var oM = new jQ();
            oM.setLinethickness(ox);
            oM.setBorderColor(
                c2.getColor(this.mencloseBean.getStyle().getColor(), 0),
            );
            oM.setX(ox / 2);
            oM.setY(ox / 2);
            oM.setEndX(oI - ox / 2);
            oM.setEndY(oQ - ox / 2);
            oM.setWidth(oI - ox / 2);
            oM.setHeight(oQ - ox / 2);
            this.getContent().getShapeList().add(oM);
        }
        if (this.hasNotation(oy, "box")) {
            var oL = new j3();
            oL.setAntialias(false);
            oL.setLinethickness(ox);
            oL.setBorderColor(
                c2.getColor(this.mencloseBean.getStyle().getColor(), 0),
            );
            oL.setX(0);
            oL.setY(0);
            oL.setWidth(oI);
            oL.setHeight(oQ);
            this.getContent().getShapeList().add(oL);
        }
        if (this.hasNotation(oy, "roundedbox")) {
            var oL = new j3();
            oL.setAntialias(false);
            oL.setLinethickness(ox);
            oL.setBorderColor(
                c2.getColor(this.mencloseBean.getStyle().getColor(), 0),
            );
            oL.setX(0);
            oL.setY(0);
            oL.setWidth(oI);
            oL.setHeight(oQ);
            oL.setRondedCorner(oX);
            this.getContent().getShapeList().add(oL);
        }
        if (this.hasNotation(oy, "circle")) {
            var oK = new cG();
            oK.setLinethickness(ox);
            oK.setBorderColor(
                c2.getColor(this.mencloseBean.getStyle().getColor(), 0),
            );
            oK.setX(lv.getIntFromDouble(ox / 2));
            oK.setY(lv.getIntFromDouble(ox / 2));
            oK.setRadiusX(lv.getIntFromDouble((oI - ox) / 2));
            oK.setRadiusY(lv.getIntFromDouble((oQ - ox) / 2));
            oK.setWidth(oI);
            oK.setHeight(oQ);
            this.getContent().getShapeList().add(oK);
        }
        if (this.hasNotation(oy, "radical")) {
            if (!this.isLeftToRight()) {
                ku.drawSqrt(
                    this,
                    oI - oE,
                    0,
                    this.getDim().getContentWidth(),
                    this.getDim().getContentHeight(),
                    this.mencloseBean.getStyle(),
                    false,
                    "0",
                    this.isLeftToRight(),
                    "100%",
                );
            } else {
                ku.drawSqrt(
                    this,
                    0,
                    0,
                    this.getDim().getContentWidth(),
                    this.getDim().getContentHeight(),
                    this.mencloseBean.getStyle(),
                    false,
                    "0",
                    this.isLeftToRight(),
                    "100%",
                );
            }
        }
        this.calculateWidth();
        this.calculateHeight();
        this.calculateBaseline();
        this.calculateAxisLine();
        this.getDim().setSuperscriptline(0);
    };
    iX.prototype.hasNotation = function (ow, ov) {
        var ou = ow.indexOf(" ") > -1;
        if (ou) {
            if (ow.indexOf(ov) == 0) {
                return true;
            }
            if (ow.indexOf(" " + ov) > -1) {
                return true;
            }
        } else {
            if (ow == ov) {
                return true;
            }
        }
        return false;
    };

    function mR(ov, ou) {
        this.mLongdivBean = null;
        this.realChildren = new fM();
        this.dKO = ax;
        this.dKO(ov, ou);
        this.mLongdivBean = this.getMathMLBean();
    }
    ga(mR, ax);
    mR.prototype.initAfterChildrenLoaded = function () {
        var ox = this.mLongdivBean.getLongdivstyle();
        if ("lefttop" == ox || "righttop" == ox || "stackedleftlinetop" == ox) {
            var ow = this.getContent();
            var ou = ow.getChildren().get(0);
            var ov = m2.getLineThickness(
                "medium",
                this.mLongdivBean.getStyle().getMathsize(),
            );
            ou.setAddSpaceForSecondRow(ov);
        }
    };
    mR.prototype.positionChildren = function () {
        var oI = this.getContent();
        var oF = this.mLongdivBean.getLongdivstyle();
        var oy = oI.getChildren().get(0);
        var oO = oy.getStackTableInfo().getSpaceV();
        var oE = oy.getFirstSRowLine();
        var ow = oy.getSecondSRowLine();
        if (oE == null) {
            return;
        }
        var oG = oI.getChildren().get(1);
        this.addSpace(oG, oy.getStackTableInfo().getSpaceV());
        var oP = oI.getChildren().get(2);
        this.addSpace(oP, oy.getStackTableInfo().getSpaceV());
        this.realChildren.add(oG);
        if (oP != null) {
            this.realChildren.add(oP);
        }
        this.realChildren.addAll(oy.getRealChildren());
        var oC = null;
        var oA = null;
        if (oI.getChildren().size() > 3) {
            oC = oI.getChildren().get(3);
        }
        if (oI.getChildren().size() > 4) {
            oA = oI.getChildren().get(4);
        }
        var ou = m2.getLineThickness(
            "medium",
            this.mLongdivBean.getStyle().getMathsize(),
        );
        if ("righttop" == oF) {
            var ov = oE.getDim().getHeight();
            var oM = oy.getDim().getWidth();
            oG.getDim().setY(ov + oy.getStackTableInfo().getSpaceV() + ou);
            oG.getDim().setX(oM + 3 * oy.getStackTableInfo().getSpaceV());
            this.drawHorizontalLine(
                0,
                ov + 0.5 * oO,
                oM + 4 * oO + oG.getDim().getWidth(),
                ou,
            );
            this.drawVerticalLine(
                oM + oO,
                ov + 0.5 * oO,
                oG.getDim().getHeight() + oO + ou,
                ou,
            );
            this.drawHorizontalLine(
                oM + oO - ou / 2,
                ov + 1.5 * oO + oG.getDim().getHeight() + ou,
                3 * oO + oG.getDim().getWidth() + 0.5 * ou,
                ou,
            );
        } else {
            if ("stackedrightright" == oF) {
                oG.getDim().setX(oy.getDim().getWidth() + 3 * oO);
                oP.getDim().setX(oy.getDim().getWidth() + 3 * oO);
                oP.getDim().setY(oG.getDim().getHeight() + oO + ou);
                var oH = oP.getDim().getWidth();
                if (oH < oG.getDim().getWidth()) {
                    oH = oG.getDim().getWidth();
                }
                var oN = Math.max(
                    oy.getDim().getHeight(),
                    oP.getDim().getY() + oP.getDim().getHeight(),
                );
                this.drawVerticalLine(
                    oy.getDim().getWidth() + 1.5 * oO,
                    0,
                    oN,
                    ou,
                );
                this.drawHorizontalLine(
                    oy.getDim().getWidth() + 1.5 * oO,
                    oG.getDim().getHeight() + 0.5 * oO,
                    oH + 1.5 * oO,
                    ou,
                );
            } else {
                if ("mediumstackedrightright" == oF) {
                    var oB = oE.getWidthNoNone();
                    if (ow != null && ow.getDim().getWidth() > oB) {
                        oB = Math.max(oB, ow.getWidthNoNone());
                    }
                    oG.getDim().setX(oB + 3 * oO);
                    oP.getDim().setX(oB + 3 * oO);
                    oP.getDim().setY(oG.getDim().getHeight() + oO + ou);
                    var oH = oP.getDim().getWidth();
                    if (oH < oG.getDim().getWidth()) {
                        oH = oG.getDim().getWidth();
                    }
                    oB = oB + 1.5 * oO;
                    this.drawVerticalLine(
                        oB,
                        0,
                        oG.getDim().getHeight() +
                            2 * oO +
                            oP.getDim().getHeight(),
                        ou,
                    );
                    this.drawHorizontalLine(
                        oB,
                        oG.getDim().getHeight() + 0.5 * oO,
                        oH + 1.5 * oO,
                        ou,
                    );
                } else {
                    if ("shortstackedrightright" == oF) {
                        var oB = oE.getWidthNoNone();
                        if (ow != null && ow.getDim().getWidth() > oB) {
                            oB = ow.getWidthNoNone();
                        }
                        oG.getDim().setX(oB + 3 * oO);
                        oP.getDim().setX(oB + 3 * oO);
                        oP.getDim().setY(oG.getDim().getHeight() + oO + ou);
                        var oH = oP.getDim().getWidth();
                        if (oH < oG.getDim().getWidth()) {
                            oH = oG.getDim().getWidth();
                        }
                        oB = oB + 1.5 * oO;
                        this.drawVerticalLine(
                            oB,
                            0,
                            oG.getDim().getHeight() + 0.5 * oO + ou / 2,
                            ou,
                        );
                        this.drawHorizontalLine(
                            oB,
                            oG.getDim().getHeight() + 0.5 * oO,
                            oH + 1.5 * oO,
                            ou,
                        );
                    } else {
                        if ("left/\\right" == oF || "left)(right" == oF) {
                            oC.getDim().setX(oG.getDim().getWidth() + 2 * oO);
                            oy.getDim().setX(
                                oC.getDim().getX() +
                                    oC.getDim().getWidth() +
                                    2 * oO,
                            );
                            oA.getDim().setX(
                                oy.getDim().getX() +
                                    oE.getWidthNoNone() +
                                    2 * oO,
                            );
                            oP.getDim().setX(
                                oA.getDim().getX() +
                                    oA.getDim().getWidth() +
                                    2 * oO,
                            );
                            oC.getDim().setY(
                                lv.getIntFromDouble(
                                    (oP.getDim().getHeight() -
                                        oC.getDim().getHeight()) /
                                        2,
                                ),
                            );
                            oA.getDim().setY(
                                lv.getIntFromDouble(
                                    (oP.getDim().getHeight() -
                                        oA.getDim().getHeight()) /
                                        2,
                                ),
                            );
                        } else {
                            if (":right=right" == oF) {
                                oC.getDim().setX(oE.getWidthNoNone() + 2 * oO);
                                oG.getDim().setX(
                                    oC.getDim().getX() +
                                        oC.getDim().getWidth() +
                                        2 * oO,
                                );
                                oA.getDim().setX(
                                    oG.getDim().getX() +
                                        oG.getDim().getWidth() +
                                        2 * oO,
                                );
                                oP.getDim().setX(
                                    oA.getDim().getX() +
                                        oA.getDim().getWidth() +
                                        2 * oO,
                                );
                                oC.getDim().setY(
                                    lv.getIntFromDouble(
                                        (oP.getDim().getHeight() -
                                            oC.getDim().getHeight()) /
                                            2,
                                    ),
                                );
                                oA.getDim().setY(
                                    lv.getIntFromDouble(
                                        (oP.getDim().getHeight() -
                                            oA.getDim().getHeight()) /
                                            2,
                                    ),
                                );
                            } else {
                                if ("stackedleftleft" == oF) {
                                    var oH = oP.getDim().getWidth();
                                    if (oH < oG.getDim().getWidth()) {
                                        oH = oG.getDim().getWidth();
                                    }
                                    oG.getDim().setX(
                                        oH - oG.getDim().getWidth(),
                                    );
                                    oP.getDim().setX(
                                        oH - oP.getDim().getWidth(),
                                    );
                                    oy.getDim().setX(oH + 3 * oO);
                                    oP.getDim().setY(
                                        oG.getDim().getHeight() + oO + ou,
                                    );
                                    var oN = Math.max(
                                        oy.getDim().getHeight(),
                                        oP.getDim().getY() +
                                            oP.getDim().getHeight(),
                                    );
                                    this.drawVerticalLine(
                                        oH + 1.5 * oO,
                                        0,
                                        oN,
                                        ou,
                                    );
                                    this.drawHorizontalLine(
                                        0,
                                        oG.getDim().getHeight() + 0.5 * oO,
                                        oH + 1.5 * oO,
                                        ou,
                                    );
                                } else {
                                    if ("stackedleftlinetop" == oF) {
                                        var ov = oE.getDim().getHeight();
                                        oG.getDim().setY(
                                            lv.getIntFromDouble(ov + oO + ou),
                                        );
                                        oy.getDim().setX(
                                            oG.getDim().getWidth() + 3 * oO,
                                        );
                                        this.drawHorizontalLine(
                                            0,
                                            oG.getDim().getY() +
                                                oG.getDim().getHeight() +
                                                oO,
                                            oG.getDim().getWidth() + 1.5 * oO,
                                            ou,
                                        );
                                        this.drawHorizontalLine(
                                            oG.getDim().getWidth() + 1.5 * oO,
                                            ov + 0.5 * oO,
                                            oy.getDim().getWidth() + 1.5 * oO,
                                            ou,
                                        );
                                        this.drawVerticalLine(
                                            oG.getDim().getWidth() + 1.5 * oO,
                                            ov + 0.5 * oO,
                                            oG.getDim().getHeight() + 2 * oO,
                                            ou,
                                        );
                                    } else {
                                        var ov = oE.getDim().getHeight();
                                        var oB = oG.getDim().getWidth() + oO;
                                        var oz = lv.getIntFromDouble(
                                            ov + oO * 0.5,
                                        );
                                        var oD = oy.getDim().getWidth() + oO;
                                        var oJ =
                                            oG.getDim().getHeight() +
                                            2 * oO +
                                            ou;
                                        var ox = new jL(oB, oz, oD, oJ, 1);
                                        var oL = ")";
                                        var oK = eF.getWidth(
                                            oL,
                                            ox.getHeight(),
                                        );
                                        gQ.drawLongDiv(
                                            this,
                                            ox,
                                            this.mLongdivBean.getStyle(),
                                            ou,
                                            c2.getColor(
                                                this.mLongdivBean
                                                    .getStyle()
                                                    .getColor(),
                                                0,
                                            ),
                                            oK,
                                        );
                                        oG.getDim().setY(ov + oO + ou);
                                        oy.getDim().setX(
                                            oG.getDim().getWidth() +
                                                oK +
                                                2 * oO,
                                        );
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        oI.returnYToZero();
    };
    mR.prototype.addSpace = function (oy, ox) {
        if (oy instanceof aY) {
            oy.getContent().positionChildrenOnBaseline();
            var ow = oy.getContent().getChildren();
            var ou = 0;
            for (var ov = 0; ov < ow.size(); ov++) {
                var oz = ow.get(ov);
                oz.getDim().setX(ou);
                ou = ou + oz.getDim().getWidth();
                ou = ou + ox;
            }
            oy.calculateWidth();
        }
    };
    mR.prototype.drawVerticalLine = function (ow, oC, oy, ox) {
        var oA = lv.getIntFromDouble(ow);
        var oz = lv.getIntFromDouble(oC);
        var oB = lv.getIntFromDouble(oy);
        var ou = lv.getIntFromDouble(ox);
        var ov = new jQ();
        ov.setAntialias(false);
        ov.setLinethickness(ou);
        ov.setBorderColor(
            c2.getColor(this.mLongdivBean.getStyle().getColor(), 0),
        );
        ov.setX(oA);
        ov.setY(oz);
        ov.setEndX(oA);
        ov.setEndY(oz + oB);
        this.getContent().getShapeList().add(ov);
    };
    mR.prototype.drawHorizontalLine = function (ox, oC, oy, oz) {
        var oB = lv.getIntFromDouble(ox);
        var oA = lv.getIntFromDouble(oC);
        var ou = lv.getIntFromDouble(oy);
        var ov = lv.getIntFromDouble(oz);
        var ow = new jQ();
        ow.setAntialias(false);
        ow.setLinethickness(ov);
        ow.setBorderColor(
            c2.getColor(this.mLongdivBean.getStyle().getColor(), 0),
        );
        ow.setX(oB);
        ow.setY(oA);
        ow.setEndX(oB + ou);
        ow.setEndY(oA);
        ow.setWidth(ou);
        this.getContent().getShapeList().add(ow);
    };
    mR.prototype.getRealChildren = function () {
        return this.realChildren;
    };

    function j5(ov, ou) {
        this.multiBean = null;
        this.preExplist = new fM();
        this.preSublist = new fM();
        this._base = null;
        this.postExplist = new fM();
        this.postSublist = new fM();
        this.dKO = ax;
        this.dKO(ov, ou);
        this.multiBean = this.getMathMLBean();
    }
    ga(j5, ax);
    j5.prototype.getBase = function () {
        return this._base;
    };
    j5.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        var ow = this.getContent().getChildren();
        var ov = true;
        for (var ou = 1; ou < ow.size(); ou++) {
            var oz = ow.get(ou);
            if (oz instanceof f7) {
                ov = false;
                continue;
            }
            var oy = ow.get(ou);
            ou++;
            var ox = ow.get(ou);
            if (ov) {
                if (!this.isLeftToRight()) {
                    this.preSublist.addTo(0, oy);
                    this.preExplist.addTo(0, ox);
                } else {
                    this.postSublist.add(oy);
                    this.postExplist.add(ox);
                }
            } else {
                if (!this.isLeftToRight()) {
                    this.postSublist.addTo(0, oy);
                    this.postExplist.addTo(0, ox);
                } else {
                    this.preSublist.add(oy);
                    this.preExplist.add(ox);
                }
            }
        }
    };
    j5.prototype.positionChildren = function () {
        var oz = this.multiBean.getSupscriptshift();
        var oC = this.multiBean.getSubscriptshift();
        var ow = 0;
        for (var oA = 0; oA < this.preExplist.size(); oA++) {
            var ox = this.preExplist.get(oA);
            var ou = this.preSublist.get(oA);
            var ov = Math.max(ox.getDim().getWidth(), ou.getDim().getWidth());
            ox.getDim().setX(ow + (ov - ox.getDim().getWidth()));
            ou.getDim().setX(ow + (ov - ou.getDim().getWidth()));
            ow = ow + ov;
        }
        this._base.getDim().setX(ow);
        ow = ow + this._base.getDim().getWidth();
        for (var oA = 0; oA < this.postExplist.size(); oA++) {
            var ox = this.postExplist.get(oA);
            var ou = this.postSublist.get(oA);
            var ov = Math.max(ox.getDim().getWidth(), ou.getDim().getWidth());
            ox.getDim().setX(ow);
            ou.getDim().setX(ow);
            ow = ow + ov;
        }
        for (var oA = 0; oA < this.preExplist.size(); oA++) {
            var ox = this.preExplist.get(oA);
            var ou = this.preSublist.get(oA);
            lR.positionSupChildren(this, this._base, ox, oz, false);
            iD.positionSubChildren(this, this._base, ou, oC, false);
            if (
                ox.getDim().getY() + ox.getDim().getHeight() >=
                ou.getDim().getY()
            ) {
                var oB =
                    ox.getDim().getY() +
                    ox.getDim().getHeight() -
                    ou.getDim().getY();
                if (oB % 2 == 1) {
                    oB = oB + 1;
                }
                var oy = oB / 2 + 1;
                ox.getDim().setY(ox.getDim().getY() - oy);
                ou.getDim().setY(ou.getDim().getY() + oy);
            }
        }
        for (var oA = 0; oA < this.postExplist.size(); oA++) {
            var ox = this.postExplist.get(oA);
            var ou = this.postSublist.get(oA);
            lR.positionSupChildren(this, this._base, ox, oz, true);
            iD.positionSubChildren(this, this._base, ou, oC, true);
            if (
                ox.getDim().getY() + ox.getDim().getHeight() >=
                ou.getDim().getY()
            ) {
                var oB =
                    ox.getDim().getY() +
                    ox.getDim().getHeight() -
                    ou.getDim().getY();
                if (oB % 2 == 1) {
                    oB = oB + 1;
                }
                var oy = oB / 2 + 1;
                ox.getDim().setY(ox.getDim().getY() - oy);
                ou.getDim().setY(ou.getDim().getY() + oy);
            }
        }
        this.getContent().returnYToZero();
    };
    j5.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    j5.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    j5.prototype.stretchPanelHorizontalRecursive = function (ou, ov) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ow =
            this.getDim().getContentWidth() - this._base.getDim().getWidth();
        var ox = b9.stretchPanelHorizontalRecursive(this._base, ou - ow, ov);
        if (ox) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ox;
    };
    j5.prototype.stretchPanelVerticalRecursive = function (oy, ow) {
        var oz = false;
        var oC = this._base.getDim().getHeight();
        if (ow.isTdSource() || ow.isHeightWidthSource()) {
            var ox =
                oy.getHeightToStretchWithBorder() -
                this.getDim().getHeightTop() -
                this.getDim().getHeightBottom();
            var oB =
                this.getDim().getContentHeight() -
                this._base.getDim().getHeight();
            var ov = oy.copy();
            ov.setHeightToStretchWithBorder(ox - oB);
            oz = hL.stretchPanelVerticalRecursive(this._base, ov, ow);
        } else {
            oz = hL.stretchPanelVerticalRecursive(this._base, oy, ow);
        }
        if (oz) {
            for (var oA = 0; oA < this.preExplist.size(); oA++) {
                var ou = this.preSublist.get(oA);
                ou.getDim().setY(
                    ou.getDim().getY() + (this._base.getDim().getHeight() - oC),
                );
            }
            for (var oA = 0; oA < this.postExplist.size(); oA++) {
                var ou = this.postSublist.get(oA);
                ou.getDim().setY(
                    ou.getDim().getY() + (this._base.getDim().getHeight() - oC),
                );
            }
            this.recalculateDim();
        }
        return oz;
    };
    j5.prototype.isEmbellished = function () {
        return this._base.isEmbellished();
    };
    j5.prototype.isVerticalStretchy = function (ou) {
        return this._base.isVerticalStretchy(ou);
    };
    j5.prototype.isHorizontalStretchy = function (ou) {
        return this._base.isHorizontalStretchy(ou);
    };

    function cC(ov, ou) {
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(cC, ax);

    function h4(ov, ou) {
        this.noneBean;
        this.dKX = cR;
        this.dKX(ov, ou);
        this.noneBean = ov;
    }
    ga(h4, cR);

    function bf(ov, ou) {
        this.obean = null;
        this.stretched = false;
        this.saved = false;
        this.realContentWidth = 0;
        this.realContentHeight = 0;
        this.realBaseline = 0;
        this.realAxis = 0;
        this.realSuperscript = 0;
        this.dKP = i6;
        this.dKP(ov, ou);
        this.obean = ov;
    }
    ga(bf, i6);
    bf.prototype.getObean = function () {
        return this.obean;
    };
    bf.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this.setSpaces();
    };
    bf.prototype.calculateWidth = function () {
        if (this.stretched) {
            var ow = 0;
            for (
                var ov = 0;
                ov < this.getContent().getShapeList().size();
                ov++
            ) {
                var ou = this.getContent().getShapeList().get(ov);
                if (ou.getMinX() + ou.getWidth() > ow) {
                    ow = ou.getMinX() + ou.getWidth();
                }
            }
            this.getDim().setContentWidth(ow);
        } else {
            ax.prototype.calculateWidth.call(this);
        }
    };
    bf.prototype.calculateHeight = function () {
        if (this.stretched) {
            var ow = 0;
            for (
                var ov = 0;
                ov < this.getContent().getShapeList().size();
                ov++
            ) {
                var ou = this.getContent().getShapeList().get(ov);
                if (ou.getMinY() + ou.getHeight() > ow) {
                    ow = ou.getMinY() + ou.getHeight();
                }
            }
            this.getDim().setContentHeight(ow);
        } else {
            ax.prototype.calculateHeight.call(this);
        }
    };
    bf.prototype.endCalculateDimension = function () {
        ax.prototype.endCalculateDimension.call(this);
        if (!this.saved) {
            hL.stretchVerticalIfMinSize(this);
            b9.stretchHorizontalIfMinSize(this);
        }
    };
    bf.prototype.calculateAxisLine = function () {
        if (this.stretched) {
        } else {
            i6.prototype.calculateAxisLine.call(this);
        }
    };
    bf.prototype.calculateBaseline = function () {
        if (this.stretched) {
            return;
        }
        i6.prototype.calculateBaseline.call(this);
    };
    bf.prototype.setSpaces = function () {
        var ou = this.obean.getText();
        if (ou.trim().length == 0) {
            return;
        }
        if (this.isLeftToRight()) {
            this.getDim().setLspace(this.obean.getLspace());
            this.getDim().setRspace(this.obean.getRspace());
        } else {
            this.getDim().setRspace(this.obean.getLspace());
            this.getDim().setLspace(this.obean.getRspace());
        }
    };
    bf.prototype.getRealContentWidth = function () {
        return this.realContentWidth;
    };
    bf.prototype.getRealContentHeight = function () {
        return this.realContentHeight;
    };
    bf.prototype.getRealBaseline = function () {
        return this.realBaseline;
    };
    bf.prototype.getRealAxis = function () {
        return this.realAxis;
    };
    bf.prototype.getRealSuperscript = function () {
        return this.realSuperscript;
    };
    bf.prototype.saveOneTime = function () {
        if (this.saved) {
            return;
        }
        this.realContentWidth = this.getDim().getContentWidth();
        this.realContentHeight = this.getDim().getContentHeight();
        this.realBaseline = this.getDim().getBaseline();
        this.realAxis = this.getDim().getAxis();
        this.realSuperscript = this.getDim().getSuperscriptline();
        this.saved = true;
    };
    bf.prototype.setStretched = function (ox) {
        this.stretched = ox;
        var ov = this.getContent();
        for (var ou = 0; ou < ov.getChildren().size(); ou++) {
            var ow = ov.getChildren().get(ou);
            ow.getContent().getShapeList().clear();
        }
    };
    bf.prototype.isStrongAxisBaseline = function () {
        if (this.obean.getOperatorStyle().isInvisible()) {
            return false;
        }
        if (this.obean.getOperatorStyle().isFence()) {
            return false;
        }
        if (this.obean.getOperatorStyle().isSeparator()) {
            return false;
        }
        if (this.obean.getOperatorStyle().isIntegral()) {
            return false;
        }
        if (this.obean.getOperatorStyle().isLargeop()) {
            return false;
        }
        if (this.obean.isHorizontalStretchy()) {
            return false;
        }
        if (this.obean.isVerticalStretchy()) {
            return false;
        }
        return true;
    };
    bf.prototype.isEmbellished = function () {
        return true;
    };
    bf.prototype.isVerticalStretchy = function (ou) {
        return this.obean.isVerticalStretchy();
    };
    bf.prototype.isHorizontalStretchy = function (ou) {
        return this.obean.isHorizontalStretchy();
    };

    function oe(ov, ou) {
        this._base;
        this.over;
        this.overPos;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(oe, ax);
    oe.prototype.getBase = function () {
        return this._base;
    };
    oe.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        this.over = this.getContent().getChildren().get(1);
    };
    oe.prototype.positionChildren = function () {
        var ov = this.getMathMLBean();
        if (
            !ov.getStyle().isDisplaystyle() &&
            this._base.getMathMLBean().getMovablelimits()
        ) {
        } else {
            var ow = ov.isAccent();
            this.overPos = m2.getLength(
                ov.getCurrentDefStyle().getUnderSpace(),
                this._base.getDim().getHeight(),
            );
            if (ow) {
                this.overPos = 0;
            }
            if (ov.getOverSpace() != null) {
                this.overPos = m2.getLength(
                    ov.getOverSpace(),
                    this._base.getDim().getHeight(),
                );
            }
            var ou = Math.max(
                this._base.getDim().getWidth(),
                this.over.getDim().getWidth(),
            );
            if (this._base.getDim().getWidth() < ou) {
                b9.stretchPanelHorizontalRecursive(
                    this._base,
                    ou,
                    bD.getRowlineStretchingSource(),
                );
            } else {
                if (this.over.getDim().getWidth() < ou) {
                    b9.stretchPanelHorizontalRecursive(
                        this.over,
                        ou,
                        bD.getRowlineStretchingSource(),
                    );
                }
            }
        }
        this.rePositionChildren();
    };
    oe.prototype.rePositionChildren = function () {
        var ov = this.getMathMLBean();
        if (
            !ov.getStyle().isDisplaystyle() &&
            this._base.getMathMLBean().getMovablelimits()
        ) {
            ax.prototype.positionChildren.call(this);
            lR.positionSupChildren(
                this,
                this._base,
                this.over,
                ov.getCurrentDefStyle().getSubscriptshift(),
                this.isLeftToRight(),
            );
        } else {
            var ou = Math.max(
                this._base.getDim().getWidth(),
                this.over.getDim().getWidth(),
            );
            this.over.getDim().setX(0);
            this.over.getDim().setY(0);
            this._base.getDim().setX(0);
            this._base
                .getDim()
                .setY(this.over.getDim().getHeight() + this.overPos);
            var ow = ov.getAlign();
            if (!this.isLeftToRight()) {
                if (ow == null || "center" == ow) {
                    this.over
                        .getDim()
                        .setX((ou - this.over.getDim().getWidth()) / 2);
                    this._base
                        .getDim()
                        .setX((ou - this._base.getDim().getWidth()) / 2);
                } else {
                    if ("left" == ow || ow == null) {
                        this.over
                            .getDim()
                            .setX(ou - this.over.getDim().getWidth());
                        this._base
                            .getDim()
                            .setX(ou - this._base.getDim().getWidth());
                    }
                }
            } else {
                if (ow == null || "center" == ow) {
                    this.over
                        .getDim()
                        .setX((ou - this.over.getDim().getWidth()) / 2);
                    this._base
                        .getDim()
                        .setX((ou - this._base.getDim().getWidth()) / 2);
                } else {
                    if ("right" == ow) {
                        this.over
                            .getDim()
                            .setX(ou - this.over.getDim().getWidth());
                        this._base
                            .getDim()
                            .setX(ou - this._base.getDim().getWidth());
                    }
                }
            }
        }
    };
    oe.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    oe.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    oe.prototype.calculateSuperscriptLine = function () {
        if (this.over.getDim().getSuperscriptline() != bu) {
            var ou =
                this.over.getDim().getY() +
                this.over.getDim().getHeightTop() +
                this.over.getDim().getSuperscriptline();
            this.getDim().setSuperscriptline(ou);
        }
    };
    oe.prototype.stretchPanelHorizontalRecursive = function (ou, ox) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ov = b9.stretchPanelHorizontalRecursive(this._base, ou, ox);
        var ow = b9.stretchPanelHorizontalRecursive(this.over, ou, ox);
        if (ov || ow) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ov || ow;
    };
    oe.prototype.stretchPanelVerticalRecursive = function (ov, ow) {
        var oA = false;
        if (ow.isTdSource() || ow.isHeightWidthSource()) {
            var ou =
                ov.getHeightToStretchWithBorder() -
                this.getDim().getHeightTop() -
                this.getDim().getHeightBottom();
            var ox =
                this.getDim().getContentHeight() -
                this._base.getDim().getHeight();
            var oz = ov.copy();
            oz.setHeightToStretchWithBorder(ou - ox);
            oA = hL.stretchPanelVerticalRecursive(this._base, oz, ow);
        } else {
            oA = hL.stretchPanelVerticalRecursive(this._base, ov, ow);
        }
        if (oA) {
            var oy = this.getMathMLBean();
            if (
                !oy.getStyle().isDisplaystyle() &&
                this._base.getMathMLBean().getMovablelimits()
            ) {
            } else {
                this.rePositionChildren();
            }
            this.recalculateDim();
        }
        return oA;
    };
    oe.prototype.isEmbellished = function () {
        return this._base.isEmbellished();
    };
    oe.prototype.isVerticalStretchy = function (ou) {
        return this._base.isVerticalStretchy(ou);
    };
    oe.prototype.isHorizontalStretchy = function (ou) {
        return (
            this._base.isHorizontalStretchy(ou) ||
            this.over.isHorizontalStretchy(ou)
        );
    };

    function n7(ov, ou) {
        this.paddedBean;
        this.dKU = at;
        this.dKU(ov, ou);
        this.paddedBean = this.getMathMLBean();
    }
    ga(n7, at);
    n7.prototype.alignContent = function () {};
    n7.prototype.endCalculateDimension = function () {
        var oB = this.getContent();
        var oz = this.getDim();
        var ov = oz.getContentWidth();
        var oA = 0;
        var ox = 0;
        if (oz.getBaseline() != bu) {
            oA = oz.getBaseline();
            ox = oz.getContentHeight() - oz.getBaseline();
        } else {
            oA = lv.getIntFromDouble(oz.getContentHeight() / 2);
            ox = oz.getContentHeight() - oA;
        }
        var oy = ov;
        var ou = oA;
        var oC = ox;
        var oD = 0;
        var oE = 0;
        if (this.paddedBean.getWidth() != null) {
            oy = this.calculateValue(
                this.paddedBean.getWidth(),
                oA,
                ov,
                ox,
                ov,
                false,
            );
            oz.setContentWidthNoChange(oy);
        }
        if (this.paddedBean.getHeight() != null) {
            ou = this.calculateValue(
                this.paddedBean.getHeight(),
                oA,
                ov,
                ox,
                oA,
                false,
            );
        }
        if (this.paddedBean.getDepth() != null) {
            oC = this.calculateValue(
                this.paddedBean.getDepth(),
                oA,
                ov,
                ox,
                ox,
                false,
            );
        }
        if (this.paddedBean.getLspace() != null) {
            oD = this.calculateValue(
                this.paddedBean.getLspace(),
                oA,
                ov,
                ox,
                0,
                true,
            );
        }
        if (this.paddedBean.getVoffset() != null) {
            oE = this.calculateValue(
                this.paddedBean.getVoffset(),
                oA,
                ov,
                ox,
                0,
                true,
            );
        }
        oz.setContentHeightNoChange(ou + oC);
        if (oz.getBaseline() != bu) {
            oB.moveChildrenOnY(ou - oz.getBaseline() - oE);
            oz.setBaseline(ou);
        } else {
            oz.setBaseline(bu);
            var ow = oz.getAxis();
            ow = ow + (ou - oA);
            oz.setAxis(ow);
            oB.moveChildrenOnY(ou - oA - oE);
        }
        oB.moveChildrenOnX(oD);
    };
    n7.prototype.calculateValue = function (oz, ox, ou, oA, oy, ow) {
        if (oz.length == 0) {
            return oy;
        }
        if (oz.charAt(0) == "+") {
            return (
                oy + this.getValue(oz.substring(1, oz.length), ox, ou, oA, oy)
            );
        } else {
            if (oz.charAt(0) == "-") {
                var ov =
                    oy -
                    this.getValue(oz.substring(1, oz.length), ox, ou, oA, oy);
                if (ow) {
                    return ov;
                }
                if (ov < 0) {
                    return 0;
                }
                return ov;
            }
        }
        var oB = this.getValue(oz, ox, ou, oA, oy);
        if (ow) {
            return oB;
        }
        if (oB < 0) {
            return 0;
        }
        return oB;
    };
    n7.prototype.getValue = function (ox, ov, ou, oy, ow) {
        if (ox.indexOf("width") > 0) {
            ox = ox.substring(0, ox.indexOf("width"));
            return this.calculateExactValue(ox, ou);
        } else {
            if (ox.indexOf("height") > 0) {
                ox = ox.substring(0, ox.indexOf("height"));
                return this.calculateExactValue(ox, ov);
            } else {
                if (ox.indexOf("depth") > 0) {
                    ox = ox.substring(0, ox.indexOf("depth"));
                    return this.calculateExactValue(ox, oy);
                } else {
                    if (ox.indexOf("em") > 0) {
                        ow = this.paddedBean.getStyle().getMathsize();
                        return m2.getLength(ox, ow);
                    } else {
                        if (ox.indexOf("ex") > 0) {
                            ow = this.paddedBean.getStyle().getMathsize();
                            return m2.getLength(ox, ow);
                        }
                    }
                }
            }
        }
        ox = W.trim(ox);
        if (ox.length == 0) {
            ox = "100%";
        }
        return m2.getLength(ox, ow);
    };
    n7.prototype.calculateExactValue = function (ov, ou) {
        ov = W.trim(ov);
        if (ov.length == 0) {
            ov = "1";
        }
        if (m2.isPercent(ov)) {
            return m2.getLength(ov, ou);
        }
        return lv.getIntFromDouble(m2.getDoubleLength(ov, 1) * ou);
    };

    function dx() {
        this.panelChildren = new fM();
        this.shapeList = new fM();
        this.bgShapeList = new fM();
    }
    dx.prototype.copyFrom = function (ou) {
        this.copyArrayFrom(ou.panelChildren, this.panelChildren);
        this.copyArrayFrom(ou.shapeList, this.shapeList);
        this.copyArrayFrom(ou.bgShapeList, this.bgShapeList);
    };
    dx.prototype.initialization = function () {};
    dx.prototype.reInitialization = function () {
        this.bgShapeList.clear();
    };
    dx.prototype.positionChildren = function (ou) {
        for (var ov = 0; ov < this.getChildren().size(); ov++) {
            var ow = this.getChildren().get(ov);
            ow.getDim().setY(0);
            ow.getDim().setX(0);
        }
        if (this.panelChildren.size() < 2) {
            return;
        }
        if (ou) {
            this.putChildrenOneAfterOneLTR();
        } else {
            this.putChildrenOneAfterOneRTL();
        }
    };
    dx.prototype.positionChildrenOnBottom = function () {
        var ov = this.ignoreTdWithRowspan(this.panelChildren);
        if (ov.size() == 0) {
            return;
        }
        var ow = 0;
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            ow = Math.max(ow, ox.getDim().getHeight());
        }
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            ox.getDim().setY(ow - ox.getDim().getHeight());
        }
    };
    dx.prototype.positionChildrenOnCenter = function () {
        var ov = this.ignoreTdWithRowspan(this.panelChildren);
        if (ov.size() == 0) {
            return;
        }
        var ow = 0;
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            ow = Math.max(ow, ox.getDim().getHeight());
        }
        for (var ou = 0; ou < ov.size(); ou++) {
            var ox = ov.get(ou);
            ox.getDim().setY(
                lv.getIntFromDouble((ow - ox.getDim().getHeight()) / 2),
            );
        }
    };
    dx.prototype.positionChildrenOnBaseline = function () {
        var ov = bu;
        for (var ou = 0; ou < this.getChildren().size(); ou++) {
            var ox = this.getChildren().get(ou);
            if (ox.getDim().getBaseline() != bu) {
                var ow =
                    ox.getDim().getY() +
                    ox.getDim().getHeightTop() +
                    ox.getDim().getBaseline();
                if (ow > ov) {
                    ov = ow;
                }
            }
        }
        if (ov != bu) {
            for (var ou = 0; ou < this.getChildren().size(); ou++) {
                var ox = this.getChildren().get(ou);
                if (ox.getDim().getBaseline() != bu) {
                    var ow =
                        ox.getDim().getY() +
                        ox.getDim().getHeightTop() +
                        ox.getDim().getBaseline();
                    ox.getDim().setY(ov - ow);
                }
            }
        }
    };
    dx.prototype.positionChildrenOnAxis = function () {
        var ow = this.ignoreTdWithRowspan(this.panelChildren);
        if (ow.size() == 0) {
            return;
        }
        var ou = 0;
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy.getDim().getAxis() != bu) {
                var ox = oy.getDim().getHeightTop() + oy.getDim().getAxis();
                ou = Math.max(ou, ox);
            }
        }
        for (var ov = 0; ov < ow.size(); ov++) {
            var oy = ow.get(ov);
            if (oy.getDim().getAxis() != bu) {
                var ox = oy.getDim().getHeightTop() + oy.getDim().getAxis();
                oy.getDim().setY(ou - ox);
            }
        }
        this.returnYToZero();
    };
    dx.prototype.positionChildrenOnTop = function () {
        var ov = this.ignoreTdWithRowspan(this.panelChildren);
        if (ov.size() == 0) {
            return;
        }
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            ow.getDim().setY(0);
        }
    };
    dx.prototype.ignoreTdWithRowspan = function (ow) {
        var ox = new fM();
        for (var ov = 0; ov < ow.size(); ov++) {
            var oz = ow.get(ov);
            if (oz instanceof gp) {
                var oy = oz;
                var ou = oy.getMathMLBean();
                if (ou.getRowspanInt() > 1) {
                    continue;
                }
            }
            ox.add(oz);
        }
        return ox;
    };
    dx.prototype.putChildrenOneAfterOneLTR = function () {
        var ox = 0;
        for (var ov = 0; ov < this.panelChildren.size(); ov++) {
            var ow = this.panelChildren.get(ov);
            ow.getDim().setX(ox);
            ox = ox + ow.getDim().getWidth();
            if (this.isSubOrSupIntegral(ow)) {
                var ou = this.getSubOrSupIntegralHeight(ow);
                ox = ox - lv.getIntFromDouble(ou * 0.1);
            }
            ow.getDim().setY(0);
        }
    };
    dx.prototype.getSubOrSupIntegralHeight = function (ov) {
        if (ov instanceof at && ov.getContent().getChildren().size() == 1) {
            var ou = ov.getContent().getChildren().get(0);
            return this.getSubOrSupIntegralHeight(ou);
        }
        if (ov instanceof ci && ov.getContent().getChildren().size() == 1) {
            var ou = ov.getContent().getChildren().get(0);
            return this.getSubOrSupIntegralHeight(ou);
        }
        if (ov instanceof iD || ov instanceof lR || ov instanceof fX) {
            var ou = ov.getContent().getChildren().get(0);
            return ou.getDim().getHeight();
        }
        return 0;
    };
    dx.prototype.isSubOrSupIntegral = function (ov) {
        if (ov instanceof at && ov.getContent().getChildren().size() == 1) {
            var ou = ov.getContent().getChildren().get(0);
            return this.isSubOrSupIntegral(ou);
        }
        if (ov instanceof ci && ov.getContent().getChildren().size() == 1) {
            var ou = ov.getContent().getChildren().get(0);
            return this.isSubOrSupIntegral(ou);
        }
        if (ov instanceof iD || ov instanceof lR || ov instanceof fX) {
            var ou = ov.getContent().getChildren().get(0);
            return gK.findIsIntegrale(ou.getMathMLBean());
        }
        return false;
    };
    dx.prototype.putChildrenOneAfterOneRTL = function () {
        var ox = 0;
        for (var ov = this.panelChildren.size() - 1; ov > -1; ov--) {
            var ow = this.panelChildren.get(ov);
            if (this.isSubOrSupIntegral(ow)) {
                var ou = this.getSubOrSupIntegralHeight(ow);
                ox = ox - lv.getIntFromDouble(ou * 0.1);
            }
            ow.getDim().setX(ox);
            ox = ox + ow.getDim().getWidth();
            ow.getDim().setY(0);
        }
    };
    dx.prototype.returnYToZero = function () {
        if (this.getChildren().size() == 0 && this.getShapeList().size() == 0) {
            return 0;
        }
        var ox = -bu;
        for (var ov = 0; ov < this.getChildren().size(); ov++) {
            var ow = this.getChildren().get(ov);
            if (ow.getDim().getY() < ox) {
                ox = ow.getDim().getY();
            }
        }
        for (var ov = 0; ov < this.getShapeList().size(); ov++) {
            var ou = this.getShapeList().get(ov);
            if (ou.getY() < ox) {
                ox = ou.getY();
            }
        }
        if (ox != 0) {
            for (var ov = 0; ov < this.getChildren().size(); ov++) {
                var ow = this.getChildren().get(ov);
                ow.getDim().setY(ow.getDim().getY() - ox);
            }
            for (var ov = 0; ov < this.getShapeList().size(); ov++) {
                var ou = this.getShapeList().get(ov);
                ou.moveAllOnY(-ox);
            }
        }
        return ox;
    };
    dx.prototype.returnMinShapeY = function () {
        if (this.getShapeList().size() == 0) {
            return 0;
        }
        var ow = -bu;
        for (var ov = 0; ov < this.getShapeList().size(); ov++) {
            var ou = this.getShapeList().get(ov);
            if (ou.getY() < ow) {
                ow = ou.getY();
            }
        }
        return ow;
    };
    dx.prototype.returnXToZero = function () {
        if (this.getChildren().size() == 0 && this.getShapeList().size() == 0) {
            return 0;
        }
        var ou = -bu;
        for (var ow = 0; ow < this.getChildren().size(); ow++) {
            var ox = this.getChildren().get(ow);
            if (ou > ox.getDim().getX()) {
                ou = ox.getDim().getX();
            }
        }
        for (var ow = 0; ow < this.getShapeList().size(); ow++) {
            var ov = this.getShapeList().get(ow);
            if (ov.getX() < ou) {
                ou = ov.getX();
            }
        }
        if (ou != 0) {
            for (var ow = 0; ow < this.getChildren().size(); ow++) {
                var ox = this.getChildren().get(ow);
                ox.getDim().setX(ox.getDim().getX() - ou);
            }
            for (var ow = 0; ow < this.getShapeList().size(); ow++) {
                var ov = this.getShapeList().get(ow);
                ov.moveAllOnX(-ou);
            }
        }
        return ou;
    };
    dx.prototype.getChildren = function () {
        return this.panelChildren;
    };
    dx.prototype.getChildrenIgnoreTd = function () {
        return this.ignoreTdWithRowspan(this.panelChildren);
    };
    dx.prototype.getShapeList = function () {
        return this.shapeList;
    };
    dx.prototype.getBgShapeList = function () {
        return this.bgShapeList;
    };
    dx.prototype.copyArrayFrom = function (ow, ou) {
        for (var ov = 0; ov < ow.size(); ov++) {
            ou.add(ow.get(ov));
        }
    };
    dx.prototype.getAllChildrenIgnoreRowsAndLines = function () {
        var ov = new fM();
        for (var ou = 0; ou < this.getChildren().size(); ou++) {
            var ow = this.getChildren().get(ou);
            if (ow instanceof at) {
                ov.addAll(ow.getContent().getAllChildrenIgnoreRowsAndLines());
            } else {
                if (ow instanceof ci) {
                    ov.addAll(
                        ow.getContent().getAllChildrenIgnoreRowsAndLines(),
                    );
                } else {
                    ov.add(ow);
                }
            }
        }
        return ov;
    };
    dx.prototype.moveChildrenOnX = function (ow) {
        for (var ou = 0; ou < this.getChildren().size(); ou++) {
            var ov = this.getChildren().get(ou);
            ov.getDim().setX(ov.getDim().getX() + ow);
        }
    };
    dx.prototype.moveChildrenOnY = function (ow) {
        for (var ou = 0; ou < this.getChildren().size(); ou++) {
            var ov = this.getChildren().get(ou);
            ov.getDim().setY(ov.getDim().getY() + ow);
        }
    };
    dx.prototype.moveShapeOnX = function (ow) {
        for (var ov = 0; ov < this.getShapeList().size(); ov++) {
            var ou = this.getShapeList().get(ov);
            ou.moveAllOnX(ow);
        }
    };
    dx.prototype.moveShapeOnY = function (ow) {
        for (var ov = 0; ov < this.getShapeList().size(); ov++) {
            var ou = this.getShapeList().get(ov);
            ou.moveAllOnY(ow);
        }
    };

    function aS() {
        this.changedDimension = true;
        this.widthSet = 0;
        this.heightSet = 0;
        this.widthMaxSet = 0;
        this.x = 0;
        this.y = 0;
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.contentHeightForStretch = 0;
        this.contentDepthForStretch = 0;
        this.margin_bottom = 0;
        this.margin_left = 0;
        this.margin_right = 0;
        this.margin_top = 0;
        this.border_width_bottom = 0;
        this.border_width_left = 0;
        this.border_width_right = 0;
        this.border_width_top = 0;
        this.padding_bottom = 0;
        this.padding_left = 0;
        this.padding_right = 0;
        this.padding_top = 0;
        this.insideMarginLeft = 0;
        this.insideMarginRight = 0;
        this.insideMarginTop = 0;
        this.insideMarginBottom = 0;
        this.lspace = 0;
        this.rspace = 0;
        this.baseline = bu;
        this.superscriptline = bu;
        this.axis = bu;
        this.decimalPosition = bu;
    }
    aS.prototype.copyFrom = function (ou) {
        this.widthSet = ou.widthSet;
        this.heightSet = ou.heightSet;
        this.widthMaxSet = ou.widthMaxSet;
        this.x = ou.x;
        this.y = ou.y;
        this.contentWidth = ou.contentWidth;
        this.contentHeight = ou.contentHeight;
        this.margin_bottom = ou.margin_bottom;
        this.margin_left = ou.margin_left;
        this.margin_right = ou.margin_right;
        this.margin_top = ou.margin_top;
        this.border_width_bottom = ou.border_width_bottom;
        this.border_width_left = ou.border_width_left;
        this.border_width_right = ou.border_width_right;
        this.border_width_top = ou.border_width_top;
        this.padding_bottom = ou.padding_bottom;
        this.padding_left = ou.padding_left;
        this.padding_right = ou.padding_right;
        this.padding_top = ou.padding_top;
        this.insideMarginLeft = ou.insideMarginLeft;
        this.insideMarginRight = ou.insideMarginRight;
        this.insideMarginTop = ou.insideMarginTop;
        this.insideMarginBottom = ou.insideMarginBottom;
        this.lspace = ou.lspace;
        this.rspace = ou.rspace;
        this.baseline = ou.baseline;
        this.superscriptline = ou.superscriptline;
        this.axis = ou.axis;
        this.decimalPosition = ou.decimalPosition;
    };
    aS.prototype.initialization = function (ou) {
        var ov = ou.getCssstyle();
        var ow = ou.getStyle();
        this.margin_bottom = ov.getMargin_bottom(ow.getMathsize());
        this.margin_left = ov.getMargin_left(ow.getMathsize());
        this.margin_right = ov.getMargin_right(ow.getMathsize());
        this.margin_top = ov.getMargin_top(ow.getMathsize());
        this.border_width_bottom = ov.getBorder_width_bottom(ow.getMathsize());
        this.border_width_left = ov.getBorder_width_left(ow.getMathsize());
        this.border_width_right = ov.getBorder_width_right(ow.getMathsize());
        this.border_width_top = ov.getBorder_width_top(ow.getMathsize());
        this.padding_bottom = ov.getPadding_bottom(ow.getMathsize());
        this.padding_left = ov.getPadding_left(ow.getMathsize());
        this.padding_right = ov.getPadding_right(ow.getMathsize());
        this.padding_top = ov.getPadding_top(ow.getMathsize());
        this.widthSet = ov.getWidth();
        this.heightSet = ov.getHeight();
        this.widthMaxSet = ov.getMaxWidthInt();
    };
    aS.prototype.reInitialization = function () {
        this.changedDimension = true;
        this.widthSet = 0;
        this.heightSet = 0;
        this.widthMaxSet = 0;
        this.x = 0;
        this.y = 0;
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.insideMarginLeft = 0;
        this.insideMarginRight = 0;
        this.insideMarginTop = 0;
        this.insideMarginBottom = 0;
        this.lspace = 0;
        this.rspace = 0;
        this.decimalPosition = bu;
    };
    aS.prototype.isChangedDimension = function () {
        return this.changedDimension;
    };
    aS.prototype.setChangedDimension = function (ou) {
        this.changedDimension = ou;
    };
    aS.prototype.getX = function () {
        return this.x;
    };
    aS.prototype.setX = function (ou) {
        this.x = ou;
    };
    aS.prototype.getY = function () {
        return this.y;
    };
    aS.prototype.setY = function (ou) {
        this.y = ou;
    };
    aS.prototype.getLspace = function () {
        return this.lspace;
    };
    aS.prototype.setLspace = function (ou) {
        this.lspace = ou;
    };
    aS.prototype.getRspace = function () {
        return this.rspace;
    };
    aS.prototype.setRspace = function (ou) {
        this.rspace = ou;
    };
    aS.prototype.getMargin_bottom = function () {
        return this.margin_bottom;
    };
    aS.prototype.setMargin_bottom = function (ou) {
        this.margin_bottom = ou;
    };
    aS.prototype.getMargin_left = function () {
        return this.margin_left;
    };
    aS.prototype.setMargin_left = function (ou) {
        this.margin_left = ou;
    };
    aS.prototype.getMargin_right = function () {
        return this.margin_right;
    };
    aS.prototype.setMargin_right = function (ou) {
        this.margin_right = ou;
    };
    aS.prototype.getMargin_top = function () {
        return this.margin_top;
    };
    aS.prototype.setMargin_top = function (ou) {
        this.margin_top = ou;
    };
    aS.prototype.getBorder_width_bottom = function () {
        return this.border_width_bottom;
    };
    aS.prototype.setBorder_width_bottom = function (ou) {
        this.border_width_bottom = ou;
    };
    aS.prototype.getBorder_width_left = function () {
        return this.border_width_left;
    };
    aS.prototype.setBorder_width_left = function (ou) {
        this.border_width_left = ou;
    };
    aS.prototype.getBorder_width_right = function () {
        return this.border_width_right;
    };
    aS.prototype.setBorder_width_right = function (ou) {
        this.border_width_right = ou;
    };
    aS.prototype.getBorder_width_top = function () {
        return this.border_width_top;
    };
    aS.prototype.setBorder_width_top = function (ou) {
        this.border_width_top = ou;
    };
    aS.prototype.getPadding_bottom = function () {
        return this.padding_bottom;
    };
    aS.prototype.setPadding_bottom = function (ou) {
        this.padding_bottom = ou;
    };
    aS.prototype.getPadding_left = function () {
        return this.padding_left;
    };
    aS.prototype.setPadding_left = function (ou) {
        this.padding_left = ou;
    };
    aS.prototype.getPadding_right = function () {
        return this.padding_right;
    };
    aS.prototype.setPadding_right = function (ou) {
        this.padding_right = ou;
    };
    aS.prototype.getPadding_top = function () {
        return this.padding_top;
    };
    aS.prototype.setPadding_top = function (ou) {
        this.padding_top = ou;
    };
    aS.prototype.getInsideMarginLeft = function () {
        return this.insideMarginLeft;
    };
    aS.prototype.setInsideMarginLeft = function (ou) {
        if (this.insideMarginLeft != ou) {
            this.changedDimension = true;
        }
        this.insideMarginLeft = ou;
    };
    aS.prototype.getInsideMarginRight = function () {
        return this.insideMarginRight;
    };
    aS.prototype.setInsideMarginRight = function (ou) {
        if (this.insideMarginRight != ou) {
            this.changedDimension = true;
        }
        this.insideMarginRight = ou;
    };
    aS.prototype.getInsideMarginTop = function () {
        return this.insideMarginTop;
    };
    aS.prototype.setInsideMarginTop = function (ou) {
        if (this.insideMarginTop != ou) {
            this.changedDimension = true;
        }
        this.insideMarginTop = ou;
    };
    aS.prototype.getInsideMarginBottom = function () {
        return this.insideMarginBottom;
    };
    aS.prototype.setInsideMarginBottom = function (ou) {
        if (this.insideMarginBottom != ou) {
            this.changedDimension = true;
        }
        this.insideMarginBottom = ou;
    };
    aS.prototype.getBaseline = function () {
        return this.baseline;
    };
    aS.prototype.setBaseline = function (ou) {
        this.baseline = ou;
    };
    aS.prototype.getSuperscriptline = function () {
        return this.superscriptline;
    };
    aS.prototype.setSuperscriptline = function (ou) {
        this.superscriptline = ou;
    };
    aS.prototype.getAxis = function () {
        return this.axis;
    };
    aS.prototype.setAxis = function (ou) {
        this.axis = ou;
    };
    aS.prototype.getDecimalPosition = function () {
        return this.decimalPosition;
    };
    aS.prototype.setDecimalPosition = function (ou) {
        this.decimalPosition = ou;
    };
    aS.prototype.getContentWidth = function () {
        return this.contentWidth;
    };
    aS.prototype.setContentWidth = function (ou) {
        if (this.contentWidth != ou) {
            this.changedDimension = true;
        }
        this.contentWidth = ou;
    };
    aS.prototype.setContentWidthNoChange = function (ou) {
        this.contentWidth = ou;
    };
    aS.prototype.getContentHeight = function () {
        return this.contentHeight;
    };
    aS.prototype.setContentHeight = function (ou) {
        if (this.contentHeight != ou) {
            this.changedDimension = true;
        }
        this.contentHeight = ou;
    };
    aS.prototype.setContentHeightNoChange = function (ou) {
        this.contentHeight = ou;
    };
    aS.prototype.getWidth = function () {
        return (
            this.getMargin_left() +
            this.getBorder_width_left() +
            this.getPadding_left() +
            this.insideMarginLeft +
            this.lspace +
            this.getContentWidth() +
            this.rspace +
            this.insideMarginRight +
            this.getPadding_right() +
            this.getBorder_width_right() +
            this.getMargin_right()
        );
    };
    aS.prototype.getHeight = function () {
        return (
            this.getMargin_top() +
            this.getBorder_width_top() +
            this.getPadding_top() +
            this.insideMarginTop +
            this.getContentHeight() +
            this.insideMarginBottom +
            this.getPadding_bottom() +
            this.getBorder_width_bottom() +
            this.getMargin_bottom()
        );
    };
    aS.prototype.getHeightTop = function () {
        return (
            this.getMargin_top() +
            this.getBorder_width_top() +
            this.getPadding_top() +
            this.insideMarginTop
        );
    };
    aS.prototype.getHeightBottom = function () {
        return (
            this.getMargin_bottom() +
            this.getBorder_width_bottom() +
            this.getPadding_bottom() +
            this.insideMarginBottom
        );
    };
    aS.prototype.getWidthLeft = function () {
        return (
            this.getMargin_left() +
            this.getBorder_width_left() +
            this.getPadding_left() +
            this.insideMarginLeft +
            this.lspace
        );
    };
    aS.prototype.getWidthRight = function () {
        return (
            this.getMargin_right() +
            this.getBorder_width_right() +
            this.getPadding_right() +
            this.insideMarginRight +
            this.rspace
        );
    };
    aS.prototype.getHeightTopOnly = function () {
        return (
            this.getMargin_top() +
            this.getBorder_width_top() +
            this.getPadding_top()
        );
    };
    aS.prototype.getHeightBottomOnly = function () {
        return (
            this.getMargin_bottom() +
            this.getBorder_width_bottom() +
            this.getPadding_bottom()
        );
    };
    aS.prototype.getWidthLeftOnly = function () {
        return (
            this.getMargin_left() +
            this.getBorder_width_left() +
            this.getPadding_left()
        );
    };
    aS.prototype.getWidthRightOnly = function () {
        return (
            this.getMargin_right() +
            this.getBorder_width_right() +
            this.getPadding_right()
        );
    };
    aS.prototype.getWidthSet = function () {
        return this.widthSet;
    };
    aS.prototype.getHeightSet = function () {
        return this.heightSet;
    };
    aS.prototype.setWidthSet = function (ou) {
        this.widthSet = ou;
    };
    aS.prototype.setHeightSet = function (ou) {
        this.heightSet = ou;
    };
    aS.prototype.getWidthMaxSet = function () {
        return this.widthMaxSet;
    };
    aS.prototype.setWidthMaxSet = function (ou) {
        this.widthMaxSet = ou;
    };
    aS.prototype.getContentHeightForStretch = function () {
        return this.contentHeightForStretch;
    };
    aS.prototype.setContentHeightForStretch = function (ou) {
        this.contentHeightForStretch = this.contentHeightForStretch;
    };
    aS.prototype.getContentDepthForStretch = function () {
        return this.contentDepthForStretch;
    };
    aS.prototype.setContentDepthForStretch = function (ou) {
        this.contentDepthForStretch = this.contentDepthForStretch;
    };

    function lN() {}
    lN.getPanelWithId = function (ov, ow) {
        if (ow == null) {
            return null;
        }
        var ou = lN.getRootPanel(ov);
        return lN.findPanel(ou, ow);
    };
    lN.findPanel = function (ov, oz) {
        if (ov.getId() == oz) {
        }
        var ox = ov.getContent().getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oy = ox.get(ow);
            var ou = lN.findPanel(oy, oz);
            if (ou != null) {
                return ou;
            }
        }
        return null;
    };
    lN.getRootPanel = function (ou) {
        var ov = ou.getParent();
        if (ov == null) {
            return ou;
        }
        while (ov != null) {
            if (ov.getParent() == null) {
                return ov;
            }
            ov = ov.getParent();
        }
        return null;
    };
    lN.findIsItalic = function (ox) {
        if (ox instanceof bW) {
            var ov = ox;
            var ou = ov.getChildren();
            if (ou.size() == 1) {
                var ow = ou.get(0);
                return lN.findIsItalic(ow);
            }
        } else {
            if (ox instanceof aB) {
                return ox.getStyle().isItalic();
            }
        }
        return false;
    };
    lN.getMultipleListStringValues = function (ow, oA, ou) {
        ow = W.replace(ow, "  ", " ");
        ow = W.replace(ow, "} {", "}{");
        var oy = ow.split("}{");
        var oz = new fM();
        for (var ox = 0; ox < ou; ox++) {
            var ov = oy[ox];
            if (ov.indexOf("{") == 0) {
                ov = ov.substring(1, ov.length);
            }
            if (ov.indexOf("}") > -1) {
                ov = ov.substring(0, ov.indexOf("}"));
            }
            if (ox < oy.length) {
                oz.add(lN.getMultipleStringValues(ov, oA[ox]));
            } else {
                oz.add(oz.get(ox - 1));
            }
        }
        return oz;
    };
    lN.getMultipleLengthValues = function (ov, oz, ow) {
        var ou = new Array(oz);
        if (ov == null || ov.length == 0) {
            return ou;
        }
        ov = W.replace(ov, "  ", " ");
        var oy = ov.split(" ");
        for (var ox = 0; ox < ou.length; ox++) {
            if (ox < oy.length) {
                ou[ox] = m2.getLength(oy[ox], ow);
            } else {
                ou[ox] = ou[ox - 1];
            }
        }
        return ou;
    };
    lN.getMultipleStringValues = function (ov, oy) {
        var ou = new Array(oy);
        if (ov == null || ov.length == 0) {
            return ou;
        }
        ov = W.replace(ov, "  ", " ");
        var ox = ov.split(" ");
        for (var ow = 0; ow < oy; ow++) {
            if (ow < ox.length) {
                ou[ow] = ox[ow];
            } else {
                ou[ow] = ou[ow - 1];
            }
        }
        return ou;
    };
    lN.getFontFromText = function (ov) {
        var oy = ov.getContent().getChildren();
        for (var ox = 0; ox < oy.size(); ox++) {
            var oB = oy.get(ox);
            if (oB instanceof fZ) {
                var ou = oB.getContent().getShapeList();
                for (var ow = 0; ow < ou.size(); ow++) {
                    var oz = ou.get(ow);
                    if (oz instanceof ip) {
                        var oA = oz;
                        return oA.getFont().getFontName();
                    }
                }
            }
        }
        return null;
    };
    lN.getChildren = function (ou) {
        if (ou instanceof ci) {
            ou = ou.getParent();
        }
        var ox = new fM();
        if (ou instanceof at) {
            var oz = ou.getContent().getChildren();
            for (var ow = 0; ow < oz.size(); ow++) {
                var oy = oz.get(ow);
                ox.addAll(oy.getContent().getChildren());
            }
        } else {
            if (ou instanceof aY) {
                var oz = ou.getContent().getChildren();
                for (var ow = 0; ow < oz.size(); ow++) {
                    var oy = oz.get(ow);
                    if (oy instanceof aP) {
                        ox.add(oy.getContent().getChildren().get(0));
                    } else {
                        ox.add(oy);
                    }
                }
            } else {
                ox = ou.getContent().getChildren();
            }
        }
        var ov = new fM();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oy = ox.get(ow);
            if (oy instanceof j2) {
                ov.addAll(oy.getContent().getChildren());
            } else {
                ov.add(oy);
            }
        }
        return ov;
    };

    function hb(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(hb, at);

    function f7(ov, ou) {
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(f7, ax);

    function ci(ov, ou) {
        this.rowLineBean;
        this.position = "";
        this.baselineChild;
        this.axisChild;
        this.verticalStretched = false;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.rowLineBean = ov;
    }
    ga(ci, ax);
    ci.prototype.positionChildren = function () {
        ax.prototype.positionChildren.call(this);
        var ou = this.rowLineBean.getRowBean().getRowalign();
        if (ou == null || ou == "baseline") {
            this.positionChildrenOnBaselineAndAxis();
        } else {
            if (ou == "top") {
                this.getContent().positionChildrenOnTop();
            } else {
                if (ou == "bottom") {
                    this.getContent().positionChildrenOnBottom();
                } else {
                    if (ou == "center") {
                        this.getContent().positionChildrenOnCenter();
                    } else {
                        if (ou == "axis") {
                            this.getContent().positionChildrenOnAxis();
                        }
                    }
                }
            }
        }
    };
    ci.prototype.positionChildrenOnBaselineAndAxis = function () {
        this.position = "BASELINE";
        this.baselineChild = null;
        this.axisChild = null;
        var oy = this.getContent().ignoreTdWithRowspan(
            this.getContent().getChildren(),
        );
        if (oy.size() < 1) {
            return;
        }
        var ow = bu;
        for (var ov = 0; ov < oy.size(); ov++) {
            var oA = oy.get(ov);
            if (oA.getDim().getBaseline() != bu) {
                var oz =
                    oA.getDim().getY() +
                    oA.getDim().getHeightTop() +
                    oA.getDim().getBaseline();
                if (oz > ow) {
                    ow = oz;
                    this.baselineChild = oA;
                }
                if (this.axisChild == null && oA.isStrongAxisBaseline()) {
                    this.axisChild = oA;
                }
            }
        }
        if (ow != bu) {
            for (var ov = 0; ov < oy.size(); ov++) {
                var oA = oy.get(ov);
                if (oA.getDim().getBaseline() != bu) {
                    var oz =
                        oA.getDim().getY() +
                        oA.getDim().getHeightTop() +
                        oA.getDim().getBaseline();
                    oA.getDim().setY(ow - oz);
                }
            }
        }
        if (this.axisChild == null) {
            var oA = this.getFirstChildWithBaseline(oy);
            if (oA == null) {
                oA = oy.get(0);
            }
            this.axisChild = oA;
        }
        var ou =
            this.axisChild.getDim().getY() +
            this.axisChild.getDim().getHeightTop() +
            this.axisChild.getDim().getAxis();
        for (var ov = 0; ov < oy.size(); ov++) {
            var oA = oy.get(ov);
            if (oA.getDim().getBaseline() == bu) {
                var ox =
                    oA.getDim().getY() +
                    oA.getDim().getHeightTop() +
                    oA.getDim().getAxis();
                oA.getDim().setY(ou - ox);
            }
        }
        this.getContent().returnYToZero();
    };
    ci.prototype.getFirstChildWithBaseline = function (ov) {
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (ow.getDim().getBaseline() != bu) {
                if (ow.isVerticalStretchy(bD.getRowlineStretchingSource())) {
                    continue;
                }
                if (ow.isHorizontalStretchy(bD.getRowlineStretchingSource())) {
                    continue;
                }
                if (ow instanceof dy) {
                    continue;
                }
                return ow;
            }
        }
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            if (ow.getDim().getBaseline() != bu) {
                return ow;
            }
        }
        return null;
    };
    ci.prototype.calculateAxisLine = function () {
        this.getDim().setAxis(bu);
        if ("BASELINE" == this.position) {
            if (this.axisChild != null) {
                var ou =
                    this.axisChild.getDim().getY() +
                    this.axisChild.getDim().getHeightTop() +
                    this.axisChild.getDim().getAxis();
                this.getDim().setAxis(ou);
            }
        }
        if (this.getDim().getAxis() == bu) {
            this.getDim().setAxis(this.getDim().getContentHeight() / 2);
        }
    };
    ci.prototype.calculateBaseline = function () {
        this.getDim().setBaseline(bu);
        if ("BASELINE" == this.position) {
            if (
                this.baselineChild != null &&
                this.baselineChild.getDim().getBaseline() != bu
            ) {
                var ou =
                    this.baselineChild.getDim().getY() +
                    this.baselineChild.getDim().getHeightTop() +
                    this.baselineChild.getDim().getBaseline();
                this.getDim().setBaseline(ou);
            }
        }
    };
    ci.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(bu);
        var ov = -bu;
        for (var ou = 0; ou < this.getContent().getChildren().size(); ou++) {
            var ox = this.getContent().getChildren().get(ou);
            if (ox.getDim().getSuperscriptline() != bu) {
                var ow =
                    ox.getDim().getY() +
                    ox.getDim().getHeightTop() +
                    ox.getDim().getSuperscriptline();
                if (ow < ov) {
                    ov = ow;
                }
            }
        }
        this.getDim().setSuperscriptline(ov);
        if (this.getDim().getSuperscriptline() == bu) {
            this.getDim().setSuperscriptline(0);
        }
    };
    ci.prototype.streatchVerticalChildrenIfNeed = function () {
        if (this.verticalStretched) {
            return false;
        }
        var ov = bD.getRowlineStretchingSource();
        if (this.getParent() instanceof gp) {
            return false;
        } else {
            if (this.getParent().isInferred() && this.isVerticalStretchy(ov)) {
                this.verticalStretched = true;
                ov.setDirectSubexpression(1);
                var ou = this.getStrechingValue(ov);
                if (ou != null && ou.getHeightToStretchWithBorder() > 0) {
                    return hL.stretchPanelVerticalRecursive(
                        this,
                        ou,
                        bD.getRowlineStretchingSource(),
                    );
                }
            }
        }
        return false;
    };
    ci.prototype.getLineleading = function () {
        var ou = this.rowLineBean.getLineleading();
        if (ou == null) {
            return this.rowLineBean.getStyle().getMathsize() / 10;
        }
        return m2.getLength(ou, this.rowLineBean.getStyle().getMathsize());
    };
    ci.prototype.getBase = function () {
        var ou = this.getContent().getChildren();
        if (ou.size() == 1) {
            var ov = this.getContent().getChildren().get(0);
            return ov.getBase();
        }
        return this;
    };
    ci.prototype.getSymetricHeight = function (ou) {
        this.calculateAxisLine();
        if (this.getDim().getAxis() != bu) {
            return (
                2 * this.getDim().getAxis() +
                this.getDim().getHeightTopOnly() +
                this.getDim().getHeightBottomOnly()
            );
        }
        return ou;
    };
    ci.prototype.isSpaceLikePanel = function () {
        var ov = this.getContent().getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = this.getContent().getChildren().get(ou);
            if (!ow.isSpaceLikePanel()) {
                return false;
            }
        }
        return true;
    };
    ci.prototype.isEmbellished = function () {
        var ox = 0;
        var ov = this.getContent().getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = this.getContent().getChildren().get(ou);
            if (!ow.isSpaceLikePanel()) {
                return false;
            }
            if (ow.isEmbellished()) {
                ox++;
            }
        }
        return ox == 1;
    };
    ci.prototype.getStrechingValue = function (ou) {
        var oy = new cV();
        var ow = this.getContent().getChildren();
        var oA = this.rowLineBean.getRowBean().getRowalign();
        if (oA == null || oA == "baseline" || oA == "axis") {
            oy.setCanSymetric(true);
            var ox = this.getDim().getAxis();
            var oC = 0;
            var ov = 0;
            for (var oz = 0; oz < ow.size(); oz++) {
                var oB = ow.get(oz);
                if (oB.isVerticalStretchy(ou)) {
                    continue;
                }
                oC = Math.max(oC, ox - oB.getDim().getY());
                ov = Math.max(
                    ov,
                    oB.getDim().getY() + oB.getDim().getHeight() - ox,
                );
            }
            oy.setMaxHeight(oC);
            oy.setMaxDepth(ov);
            oy.setHeightToStretchWithBorder(oC + ov);
        } else {
            var oC = 0;
            for (var oz = 0; oz < ow.size(); oz++) {
                var oB = ow.get(oz);
                if (oB.isVerticalStretchy(ou)) {
                    continue;
                }
                oC = Math.max(oC, oB.getDim().getHeight());
            }
            oy.setHeightToStretchWithBorder(oC);
        }
        return oy;
    };
    ci.prototype.stretchPanelHorizontalRecursive = function (ou, ov) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ow = this.incrementPixelChildrenHorizontal(ou, ov);
        if (ow) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ow;
    };
    ci.prototype.stretchPanelVerticalRecursive = function (ov, oy) {
        var ox = this.getContent().getChildren();
        if (oy.isNotDirectSubexpression()) {
            return false;
        }
        var oA = oy.incrementLevel();
        var oB = false;
        for (var ow = 0; ow < ox.size(); ow++) {
            var oz = ox.get(ow);
            var ou = hL.stretchPanelVerticalRecursive(oz, ov, oA);
            oB = oB || ou;
        }
        if (oB) {
            this.positionChildren();
            this.recalculateDim();
        }
        return oB;
    };
    ci.prototype.isVerticalStretchy = function (ow) {
        var ov = this.getContent().getChildren();
        if (ow.isTdSource() || ow.isHeightWidthSource()) {
            if (ov.size() != 1) {
                return false;
            }
            var oy = ov.get(0);
            return oy.isVerticalStretchy(ow);
        } else {
            if (ow.isRowlineSource()) {
                if (ow.isNotDirectSubexpression()) {
                    return false;
                }
                var ox = ow.incrementLevel();
                for (var ou = 0; ou < ov.size(); ou++) {
                    var oy = this.getContent().getChildren().get(ou);
                    if (oy.isVerticalStretchy(ox)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    ci.prototype.isHorizontalStretchy = function (ow) {
        var ov = this.getContent().getChildren();
        if (ow.isTdSource()) {
            if (ov.size() != 1) {
                return false;
            }
            var ox = ov.get(0);
            return ox.isHorizontalStretchy(ow);
        } else {
            if (ow.isRowlineSource() || ow.isHeightWidthSource()) {
                for (var ou = 0; ou < ov.size(); ou++) {
                    var ox = this.getContent().getChildren().get(ou);
                    if (ox.isHorizontalStretchy(ow)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };

    function k3(ov, ou) {
        this.leftPosition = 0;
        this.groupPosition = 0;
        this.position = 0;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(k3, ax);
    k3.prototype.getLength = function () {
        return 0;
    };
    k3.prototype.getDecimalLength = function () {
        return 0;
    };
    k3.prototype.getLeftPosition = function () {
        return this.leftPosition;
    };
    k3.prototype.setLeftPosition = function (ou) {
        this.leftPosition = ou;
    };
    k3.prototype.getGroupPosition = function () {
        return this.groupPosition;
    };
    k3.prototype.setGroupPosition = function (ou) {
        this.groupPosition = ou;
    };
    k3.prototype.getPosition = function () {
        return this.position;
    };
    k3.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    k3.prototype.getStartPosition = function () {
        return this.leftPosition - this.groupPosition - this.position;
    };
    k3.prototype.calculateParentUntilStack = function () {
        dp.calculateDimUntilStack(this);
    };

    function eE(ov, ou) {
        this.sCarriesBean = null;
        this.zeroPanel = null;
        this.positionSet = 0;
        this.dKY = k3;
        this.dKY(ov, ou);
        this.sCarriesBean = this.getMathMLBean();
        this.positionSet = this.sCarriesBean.getPosition();
    }
    ga(eE, k3);
    eE.prototype.calculateChildrenDimension = function () {
        ax.prototype.calculateChildrenDimension.call(this);
        if (this.zeroPanel != null) {
            this.zeroPanel.calculateDimension();
        }
        var ov = this.getContent().getChildren();
        for (var ou = 0; ou < ov.size(); ou++) {
            var ow = ov.get(ou);
            ow.setDimIfZero(this);
        }
    };
    eE.prototype.getLength = function () {
        return this.getContent().getChildren().size();
    };
    eE.prototype.getDecimalLength = function () {
        return this.getContent().getChildren().size() - 1;
    };
    eE.prototype.getPanelFromIndex = function (ou) {
        if (ou < this.getStartPosition()) {
            return null;
        }
        ou = ou - this.getStartPosition();
        if (ou > this.getLength() - 1) {
            return null;
        }
        return this.getContent().getChildren().get(ou);
    };
    eE.prototype.getZeroPanel = function () {
        return this.zeroPanel;
    };
    eE.prototype.setZeroPanel = function (ou) {
        this.zeroPanel = ou;
    };
    eE.prototype.replacePositionWithNonePanel = function () {
        if (this.positionSet > 0) {
            for (var ov = 0; ov < this.positionSet; ov++) {
                var ou = this.getContent().getChildren();
                ou.remove(0);
            }
        } else {
            if (this.positionSet < 0) {
                for (var ov = 0; ov < -this.positionSet; ov++) {
                    this.createNullPanel(0);
                }
            }
        }
        this.positionSet = 0;
    };
    eE.prototype.createNullPanel = function (oz) {
        var ov = new b0(this.sCarriesBean);
        ov.setCurrentDefStyle(this.sCarriesBean.getCurrentDefStyle());
        ov.setDynamicCreated(true);
        var ow = new mx(ov);
        ow.setDynamicCreated(true);
        ow.setCurrentDefStyle(this.sCarriesBean.getCurrentDefStyle());
        ov.addChild(ow);
        var ou = new eq(ov, this);
        var ox = new h4(ow, ou);
        ou.getContent().getChildren().add(ox);
        var oy = this.getContent().getChildren();
        oy.addTo(oz, ou);
        return ou;
    };

    function eq(ov, ou) {
        this.sCarryBean = null;
        this.sCarriesBean = null;
        this.location = null;
        this.crossout = null;
        this.carrythickness;
        this.realParent = null;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.realParent = ou;
        this.sCarryBean = this.getMathMLBean();
        this.sCarriesBean = this.sCarryBean.getParentBean();
        this.location = this.sCarryBean.getLocation();
        if (this.location == null) {
            this.location = this.sCarriesBean.getLocation();
        }
        if (this.location == null) {
            this.location = "n";
        }
        this.location = this.location.toLowerCase();
        if (this.sCarryBean.isNone()) {
            this.crossout = "none";
        } else {
            this.crossout = this.sCarryBean.getCrossout();
            if (this.crossout == null) {
                this.crossout = this.sCarriesBean.getCrossout();
            }
            if (this.crossout == null) {
                this.crossout = "none";
            }
            this.crossout = this.crossout.toLowerCase();
        }
        this.carrythickness = this.sCarryBean.getCarrythickness();
    }
    ga(eq, ax);
    eq.prototype.positionChildren = function () {
        for (var ou = 0; ou < this.getContent().getChildren().size(); ou++) {
            var ov = this.getContent().getChildren().get(ou);
            ov.getDim().setY(0);
            ov.getDim().setX(0);
        }
    };
    eq.prototype.getLocation = function () {
        return this.location;
    };
    eq.prototype.getCrossout = function () {
        return this.crossout;
    };
    eq.prototype.getCarrythickness = function () {
        return this.carrythickness;
    };
    eq.prototype.getRealParent = function () {
        return this.realParent;
    };
    eq.prototype.setDimIfZero = function (ov) {
        if (this.getDim().getContentWidth() == 0) {
            this.getDim().setContentWidth(
                ov.getZeroPanel().getDim().getContentWidth(),
            );
            this.getDim().setContentHeight(
                ov.getZeroPanel().getDim().getContentHeight(),
            );
            if (this.getContent().getChildren().size() == 1) {
                var ou = this.getContent().getChildren().get(0);
                ou.getDim().setContentWidth(
                    ov.getZeroPanel().getDim().getContentWidth(),
                );
                ou.getDim().setContentHeight(
                    ov.getZeroPanel().getDim().getContentHeight(),
                );
            }
        }
    };

    function aP(ov, ou) {
        this.sDigitBean = null;
        this.baseDigit = null;
        this.carriesDelta = 1;
        this.listOfCarries = new fM();
        this.dKO = ax;
        this.dKO(ov, ou);
        this.sDigitBean = ov;
    }
    ga(aP, ax);
    aP.prototype.addAndPositionCarry = function (ov, oz) {
        this.baseDigit = this.getContent().getChildren().get(0);
        if (this.listOfCarries.size() == 0) {
            return;
        }
        var oD = lv.getIntFromDouble(ov.getSpaceV() * 0.5);
        var oy = this.getDim().getHeight();
        var ou = this.baseDigit.getDim().getWidth();
        if (ou == 0) {
            ou = ov.getColumnWidth()[oz];
        }
        var oC = 0;
        for (var ow = 0; ow < this.listOfCarries.size(); ow++) {
            var oF = this.listOfCarries.get(ow);
            oF.getDim().setX(
                lv.getIntFromDouble((ou - oF.getDim().getWidth()) / 2),
            );
            oF.getDim().setY(oC);
            oC = oC + oF.getParent().getDim().getHeight() + oD;
        }
        var oA = oC - oD;
        var ox = this.listOfCarries.get(0);
        var oE = this.listOfCarries.get(this.listOfCarries.size() - 1);
        if (this.sDigitBean.isNumber()) {
            this.drawLine(
                this.baseDigit,
                ox.getCrossout(),
                ox.getCarrythickness(),
                ou,
                ox.getBean().getStyle().getColor(),
            );
        }
        if (ox.getLocation() == "n") {
            this.getContent().moveChildrenOnY(oA + oD);
            this.getContent().moveShapeOnY(oA + oD);
        } else {
            if (ox.getLocation() == "ne") {
                for (var ow = 0; ow < this.listOfCarries.size(); ow++) {
                    var oF = this.listOfCarries.get(ow);
                    oF.getDim().setX(
                        lv.getIntFromDouble(this.carriesDelta * ou),
                    );
                }
                oA =
                    oA -
                    lv.getIntFromDouble(
                        oE.getParent().getDim().getHeight() / 2,
                    );
                this.getContent().moveChildrenOnY(oA);
                this.getContent().moveShapeOnY(oA);
            } else {
                if (ox.getLocation() == "e") {
                    for (var ow = 0; ow < this.listOfCarries.size(); ow++) {
                        var oF = this.listOfCarries.get(ow);
                        oF.getDim().setX(
                            lv.getIntFromDouble(this.carriesDelta * ou),
                        );
                    }
                    oA = oA - oE.getParent().getDim().getHeight();
                    oA =
                        oA -
                        lv.getIntFromDouble(
                            (oy - oE.getParent().getDim().getHeight()) / 2,
                        );
                    this.getContent().moveChildrenOnY(oA);
                    this.getContent().moveShapeOnY(oA);
                } else {
                    if (ox.getLocation() == "se") {
                        var oB =
                            oy -
                            lv.getIntFromDouble(
                                ox.getParent().getDim().getHeight() / 2,
                            );
                        for (var ow = 0; ow < this.listOfCarries.size(); ow++) {
                            var oF = this.listOfCarries.get(ow);
                            oF.getDim().setX(
                                lv.getIntFromDouble(this.carriesDelta * ou),
                            );
                            oF.getDim().setY(oF.getDim().getY() + oB);
                        }
                    } else {
                        if (ox.getLocation() == "s") {
                            for (
                                var ow = 0;
                                ow < this.listOfCarries.size();
                                ow++
                            ) {
                                var oF = this.listOfCarries.get(ow);
                                oF.getDim().setY(oF.getDim().getY() + oy + oD);
                            }
                        } else {
                            if (ox.getLocation() == "sw") {
                                var oB =
                                    oy -
                                    lv.getIntFromDouble(
                                        ox.getParent().getDim().getHeight() / 2,
                                    );
                                for (
                                    var ow = 0;
                                    ow < this.listOfCarries.size();
                                    ow++
                                ) {
                                    var oF = this.listOfCarries.get(ow);
                                    oF.getDim().setX(
                                        -lv.getIntFromDouble(
                                            this.carriesDelta *
                                                oF.getDim().getWidth(),
                                        ),
                                    );
                                    oF.getDim().setY(oF.getDim().getY() + oB);
                                }
                                this.getContent().returnXToZero();
                            } else {
                                if (ox.getLocation() == "w") {
                                    for (
                                        var ow = 0;
                                        ow < this.listOfCarries.size();
                                        ow++
                                    ) {
                                        var oF = this.listOfCarries.get(ow);
                                        oF.getDim().setX(
                                            -lv.getIntFromDouble(
                                                this.carriesDelta *
                                                    oF.getDim().getWidth(),
                                            ),
                                        );
                                    }
                                    oA =
                                        oA -
                                        oE.getParent().getDim().getHeight();
                                    oA =
                                        oA -
                                        lv.getIntFromDouble(
                                            (oy -
                                                oE
                                                    .getParent()
                                                    .getDim()
                                                    .getHeight()) /
                                                2,
                                        );
                                    this.getContent().moveChildrenOnY(oA);
                                    this.getContent().moveShapeOnY(oA);
                                    this.getContent().returnXToZero();
                                } else {
                                    if (ox.getLocation() == "nw") {
                                        for (
                                            var ow = 0;
                                            ow < this.listOfCarries.size();
                                            ow++
                                        ) {
                                            var oF = this.listOfCarries.get(ow);
                                            oF.getDim().setX(
                                                -lv.getIntFromDouble(
                                                    this.carriesDelta *
                                                        oF.getDim().getWidth(),
                                                ),
                                            );
                                        }
                                        oA =
                                            oA -
                                            lv.getIntFromDouble(
                                                oE
                                                    .getParent()
                                                    .getDim()
                                                    .getHeight() / 2,
                                            );
                                        this.getContent().moveChildrenOnY(oA);
                                        this.getContent().moveShapeOnY(oA);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        for (var ow = 0; ow < this.listOfCarries.size(); ow++) {
            var oF = this.listOfCarries.get(ow);
            this.getContent().getChildren().add(oF);
        }
        this.getContent().returnYToZero();
        dp.calculateDim(this);
    };
    aP.prototype.drawLine = function (ou, oA, ox, oz, oB) {
        if (oA == null || "none" == oA) {
            return;
        }
        var oy = m2.getLineThickness(ox, ou.getBean().getStyle().getMathsize());
        if (oy < 1) {
            oy = 1;
        }
        var ow = c2.getColor(oB, 0);
        if (oA.indexOf("updiagonalstrike") > -1) {
            var ov = new jQ();
            ov.setAntialias(true);
            ov.setLinethickness(oy);
            ov.setBorderColor(ow);
            ov.setX(lv.getIntFromDouble(oy / 2));
            ov.setY(ou.getDim().getHeight() - 1);
            ov.setEndX(lv.getIntFromDouble(oz - 1 - oy / 2));
            ov.setEndY(1);
            ou.getContent().getShapeList().add(ov);
        }
        if (oA.indexOf("downdiagonalstrike") > -1) {
            var ov = new jQ();
            ov.setAntialias(true);
            ov.setLinethickness(oy);
            ov.setBorderColor(ow);
            ov.setX(lv.getIntFromDouble(oy / 2));
            ov.setY(1);
            ov.setEndX(lv.getIntFromDouble(oz - 1 - oy / 2));
            ov.setEndY(ou.getDim().getHeight() - 1);
            ou.getContent().getShapeList().add(ov);
        }
        if (oA.indexOf("verticalstrike") > -1) {
            var ov = new jQ();
            ov.setAntialias(true);
            ov.setLinethickness(oy);
            ov.setBorderColor(ow);
            ov.setX(lv.getIntFromDouble(oz / 2));
            ov.setY(1);
            ov.setEndX(lv.getIntFromDouble(oz / 2));
            ov.setEndY(ou.getDim().getHeight() - 1);
            ou.getContent().getShapeList().add(ov);
        }
        if (oA.indexOf("horizontalstrike") > -1) {
            var ov = new jQ();
            ov.setAntialias(true);
            ov.setLinethickness(oy);
            ov.setBorderColor(ow);
            ov.setX(lv.getIntFromDouble(oy / 2));
            ov.setY(lv.getIntFromDouble(ou.getDim().getHeight() - 1) / 2);
            ov.setEndX(lv.getIntFromDouble(oz - 1 - oy / 2));
            ov.setEndY(lv.getIntFromDouble((ou.getDim().getHeight() - 1) / 2));
            ou.getContent().getShapeList().add(ov);
        }
    };
    aP.prototype.calculateBaseline = function () {
        var ov = this.getContent();
        for (var ou = 0; ou < ov.getChildren().size(); ou++) {
            var ow = ov.getChildren().get(ou);
            if (ow instanceof eq) {
                continue;
            }
            if (ow.getDim().getBaseline() == bu) {
                continue;
            }
            this.getDim().setBaseline(
                ow.getDim().getY() + ow.getDim().getBaseline(),
            );
            break;
        }
    };
    aP.prototype.calculateAxisLine = function () {
        var ow = -bu;
        var ov = this.getContent();
        for (var ou = 0; ou < ov.getChildren().size(); ou++) {
            var ox = ov.getChildren().get(ou);
            if (ox instanceof eq) {
                continue;
            }
            if (ox.getDim().getAxis() == bu) {
                continue;
            }
            ow = Math.min(ow, ox.getDim().getAxis());
        }
        if (ow != -bu) {
            this.getDim().setAxis(ow);
        } else {
            this.getDim().setAxis(this.getDim().getContentHeight() / 2);
        }
    };
    aP.prototype.getsDigitBean = function () {
        return this.sDigitBean;
    };
    aP.prototype.addCarryPanel = function (ou) {
        this.listOfCarries.add(ou);
    };
    aP.prototype.getBaseDigit = function () {
        return this.baseDigit;
    };

    function h8(ov, ou) {
        this.sGroupBean = null;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.sGroupBean = this.getMathMLBean();
    }
    ga(h8, ax);
    h8.prototype.positionChildren = function () {
        for (var ou = 0; ou < this.getContent().getChildren().size(); ou++) {
            var ov = this.getContent().getChildren().get(ou);
            ov.getDim().setY(0);
            ov.getDim().setX(0);
        }
    };
    h8.prototype.getAllRows = function () {
        var oz = new fM();
        var oy = this.getContent().getChildren();
        for (var ox = 0; ox < oy.size(); ox++) {
            var oB = oy.get(ox);
            var ov = ox * this.sGroupBean.getShift();
            var ou = this.sGroupBean.getPosition();
            if (oB instanceof h8) {
                var oA = oB;
                var ow = oA.getAllRows();
                this.addGroupPositionForList(ow, ou + ov);
                oz.addAll(ow);
            } else {
                if (oB instanceof eE) {
                    this.addGroupPosition(oB, ou + ov);
                    oz.add(oB);
                } else {
                    if (oB instanceof aY) {
                        this.addGroupPosition(oB, ou + ov);
                        oz.add(oB);
                    } else {
                        if (oB instanceof G) {
                            this.addGroupPosition(oB, ou + ov);
                            oz.add(oB);
                        }
                    }
                }
            }
        }
        return oz;
    };
    h8.prototype.addGroupPosition = function (ow, ov) {
        var ou = ow;
        ou.setGroupPosition(ou.getGroupPosition() + ov);
    };
    h8.prototype.addGroupPositionForList = function (ou, ox) {
        for (var ow = 0; ow < ou.size(); ow++) {
            var ov = ou.get(ow);
            ov.setGroupPosition(ov.getGroupPosition() + ox);
        }
    };
    h8.prototype.deleteCarries = function () {
        var ov = this.getContent().getChildren();
        for (var ou = ov.size() - 1; ou >= 0; ou--) {
            var ox = ov.get(ou);
            if (ox instanceof h8) {
                var ow = ox;
                ow.deleteCarries();
            } else {
                if (ox instanceof eE) {
                    ov.remove(ou);
                }
            }
        }
    };

    function G(ov, ou) {
        this.sLineBean = null;
        this.dKY = k3;
        this.dKY(ov, ou);
        this.sLineBean = this.getMathMLBean();
        this.setPosition(this.sLineBean.getPosition());
    }
    ga(G, k3);
    G.prototype.getLength = function () {
        return this.sLineBean.getLength();
    };
    G.prototype.getDecimalLength = function () {
        if (this.getLength() == 0) {
            return 0;
        }
        return this.getLength() - 1;
    };
    G.prototype.setLeftPosition = function (ou) {
        if (this.getLength() == 0) {
            return;
        }
        k3.prototype.setLeftPosition.call(this, ou);
    };
    G.prototype.drawLine = function (ow) {
        var ou = 0;
        var oA = 0;
        if (this.getLength() > 0) {
            for (var oz = 0; oz < this.getStartPosition(); oz++) {
                oA = oA + ow.getColumnWidth()[oz] + ow.getSpaceH();
            }
            for (var oz = 0; oz < this.getLength(); oz++) {
                var oB = this.getStartPosition() + oz;
                if (oB >= ow.getColumnWidth().length) {
                    break;
                }
                ou = ou + ow.getColumnWidth()[oB] + ow.getSpaceH();
            }
            ou = ou - ow.getSpaceH();
        } else {
            ou =
                this.getParent().getDim().getContentWidth() +
                this.getDim().getWidthLeft() +
                this.getDim().getWidthRight();
        }
        var ov = m2.getLineThickness(
            this.sLineBean.getMslinethickness(),
            this.sLineBean.getStyle().getMathsize(),
        );
        if (ov < 1) {
            ov = 1;
        }
        var oD = 0;
        if (this.sLineBean.getLeftoverhang() != null) {
            oD = m2.getLineThickness(
                this.sLineBean.getLeftoverhang(),
                this.sLineBean.getStyle().getMathsize(),
            );
            ou = ou + oD;
            this.getDim().setX(-oD);
        }
        if (this.sLineBean.getRightoverhang() != null) {
            var oC = m2.getLineThickness(
                this.sLineBean.getRightoverhang(),
                this.sLineBean.getStyle().getMathsize(),
            );
            ou = ou + oC;
        }
        var ox = new jQ();
        ox.setAntialias(false);
        ox.setLinethickness(ov);
        ox.setBorderColor(c2.getColor(this.sLineBean.getStyle().getColor(), 0));
        var oE = ov / 2;
        if (oE < 1) {
            oE = 1;
        }
        var oy = lv.getIntFromDouble(oE);
        ox.setX(oA);
        ox.setY(oy);
        ox.setEndX(oA + ou);
        ox.setEndY(oy);
        ox.setWidth(ou);
        ox.setHeight(ov);
        this.getContent().getShapeList().add(ox);
        this.getDim().setContentHeight(ov);
        this.calculateWidth();
        this.getParent().calculateWidth();
        this.getParent().calculateHeight();
        this.calculateBaseline();
        this.calculateAxisLine();
        this.calculateSuperscriptLine();
        this.getDim().setChangedDimension(false);
    };
    G.prototype.calculateBaseline = function () {
        this.getDim().setBaseline(
            lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
        );
    };
    G.prototype.calculateAxisLine = function () {
        this.getDim().setAxis(
            lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
        );
    };

    function dy(ov, ou) {
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(dy, ax);
    dy.prototype.calculateWidth = function () {
        var ou = this.getBean();
        var ov = "0";
        if (ou.getWidth() != null) {
            ov = ou.getWidth();
        }
        this.getDim().setContentWidth(
            m2.getLength(ov, ou.getStyle().getMathsize()),
        );
    };
    dy.prototype.calculateHeight = function () {
        var ov = this.getBean();
        var ou = "0";
        if (ov.getHeight() != null) {
            ou = ov.getHeight();
        }
        var oy = m2.getLength(ou, ov.getStyle().getMathsize());
        var ox = "0";
        if (ov.getDepth() != null) {
            ox = ov.getDepth();
        }
        var ow = m2.getLength(ox, ov.getStyle().getMathsize());
        this.getDim().setContentHeight(oy + ow);
    };
    dy.prototype.calculateBaseline = function () {
        var ov = this.getBean();
        var ou = "0";
        if (ov.getHeight() != null) {
            ou = ov.getHeight();
        }
        var ow = m2.getLength(ou, ov.getStyle().getMathsize());
        this.getDim().setBaseline(ow);
    };
    dy.prototype.isSpaceLikePanel = function () {
        return true;
    };

    function gk(ov, ou) {
        this.dKP = i6;
        this.dKP(ov, ou);
    }
    ga(gk, i6);

    function gp(ov, ou) {
        this.allAligngroup = new fM();
        this.aligngroupComp = new fM();
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(gp, at);
    gp.prototype.getAllAligngroup = function () {
        return this.allAligngroup;
    };
    gp.prototype.setAllAligngroup = function (ou) {
        this.allAligngroup = ou;
    };
    gp.prototype.getAligngroupComp = function () {
        return this.aligngroupComp;
    };
    gp.prototype.setAligngroupComp = function (ou) {
        this.aligngroupComp = ou;
    };
    gp.prototype.isEmbellished = function () {
        return false;
    };

    function mI(ow, ou, ov) {
        this.tdPanel;
        this.colspan;
        this.dKZ = gp;
        this.dKZ(new al(ow.getMathMLBean()), ow);
        this.tdPanel = ou;
        this.colspan = ov;
    }
    ga(mI, gp);

    function aY(ov, ou) {
        this.sRowBean = null;
        this.zeroPanel = null;
        this.decimalPoint = -1;
        this.dKY = k3;
        this.dKY(ov, ou);
        this.sRowBean = this.getMathMLBean();
        this.setPosition(this.sRowBean.getPosition());
    }
    ga(aY, k3);
    aY.prototype.calculateChildrenDimension = function () {
        ax.prototype.calculateChildrenDimension.call(this);
        if (this.zeroPanel != null) {
            this.zeroPanel.calculateDimension();
        }
        var ox = this.getContent().getChildren();
        for (var ow = 0; ow < ox.size(); ow++) {
            var oy = ox.get(ow);
            var ou = oy.getBean();
            if (ou.isNone()) {
                var ov = oy.getContent().getChildren().get(0);
                oy.getDim().setContentHeight(
                    this.zeroPanel.getDim().getContentHeight(),
                );
                ov.getDim().setContentHeight(
                    this.zeroPanel.getDim().getContentHeight(),
                );
            }
        }
    };
    aY.prototype.getLength = function () {
        return this.getContent().getChildren().size();
    };
    aY.prototype.getDecimalLength = function () {
        if (this.decimalPoint > -1) {
            return this.decimalPoint;
        }
        this.decimalPoint = this.sRowBean.calculateDecimalLength();
        return this.decimalPoint;
    };
    aY.prototype.replacePositionWithNonePanel = function (ov) {
        for (var ou = 0; ou < ov; ou++) {
            this.createOneIfNull(ou);
        }
        this.setPosition(0);
        this.setLeftPosition(0);
        this.setGroupPosition(0);
    };
    aY.prototype.createOneIfNull = function (ou) {
        if (ou < this.getStartPosition()) {
            return this.createNullPanel(ou);
        }
        if (ou > this.getLength() - 1) {
            return this.createNullPanel(ou);
        }
        return this.getContent().getChildren().get(ou);
    };
    aY.prototype.createNullPanel = function (ox) {
        var oy = new bI(this.sRowBean);
        oy.setCurrentDefStyle(this.sRowBean.getCurrentDefStyle());
        oy.setNone(true);
        oy.setDynamicCreated(true);
        var ou = new mx(oy);
        ou.setDynamicCreated(true);
        ou.setCurrentDefStyle(this.sRowBean.getCurrentDefStyle());
        oy.addChild(ou);
        var oz = new aP(oy, this);
        var ov = new h4(ou, oz);
        oz.getContent().getChildren().add(ov);
        var ow = this.getContent().getChildren();
        ow.addTo(ox, oz);
        return oz;
    };
    aY.prototype.positionDigits = function (oy) {
        this.getDim().setX(
            oy.getMaxLeftMargin() - this.getDim().getWidthLeft(),
        );
        for (var oA = 0; oA < oy.getNumberOfColumns(); oA++) {
            var ov = this.getDigitFromIndex(oA);
            if (ov != null) {
                ov.addAndPositionCarry(oy, oA);
            }
        }
        this.getContent().positionChildrenOnBaseline();
        var oC = 0;
        for (var oA = 0; oA < oy.getNumberOfColumns(); oA++) {
            var ov = this.getDigitFromIndex(oA);
            if (ov != null) {
                var oB = oC;
                ov.getDim().setX(oB);
                var ow = oy.getColumnWidth()[oA];
                var ou = ov.getBaseDigit().getDim().getWidth();
                if (ov.getsDigitBean().isNone()) {
                    ou = ow;
                    var oz = this.zeroPanel.getDim().getContentWidth();
                    if (ow > 0) {
                        oz = ow;
                    }
                    var ox = ov.getContent().getChildren().get(0);
                    ov.getDim().setContentWidth(oz);
                    ox.getDim().setContentWidth(oz);
                }
                if (oy.getCharalign() == null || oy.getCharalign() == "right") {
                    ov.getDim().setX(oB + (ow - ou));
                } else {
                    if (oy.getCharalign() == "left") {
                        ov.getDim().setX(oB);
                    } else {
                        if (oy.getCharalign() == "center") {
                            ov.getDim().setX(
                                oB + lv.getIntFromDouble((ow - ou) / 2),
                            );
                        }
                    }
                }
            }
            oC = oC + oy.getColumnWidth()[oA] + oy.getSpaceH();
        }
        dp.calculateDimUntilStack(this);
    };
    aY.prototype.getDigitFromIndex = function (ou) {
        return this.getContent().getChildren().get(ou);
    };
    aY.prototype.calculateBaseline = function () {
        this.getDim().setBaseline(bu);
        for (var ou = 0; ou < this.getContent().getChildren().size(); ou++) {
            var ow = this.getContent().getChildren().get(ou);
            if (ow.getDim().getBaseline() != bu) {
                var ov =
                    ow.getDim().getY() +
                    ow.getDim().getHeightTop() +
                    ow.getDim().getBaseline();
                this.getDim().setBaseline(ov);
                break;
            }
        }
    };
    aY.prototype.calculateAxisLine = function () {
        for (var ou = 0; ou < this.getContent().getChildren().size(); ou++) {
            var ow = this.getContent().getChildren().get(ou);
            if (ow.isStrongAxisBaseline()) {
                var ov =
                    ow.getDim().getY() +
                    ow.getDim().getHeightTop() +
                    ow.getDim().getAxis();
                this.getDim().setAxis(ov);
                break;
            }
        }
        if (this.getDim().getAxis() == bu) {
            this.getDim().setAxis(
                lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
            );
        }
    };
    aY.prototype.getZeroPanel = function () {
        return this.zeroPanel;
    };
    aY.prototype.setZeroPanel = function (ou) {
        this.zeroPanel = ou;
    };
    aY.prototype.getWidthNoNone = function () {
        for (var ow = 0; ow < this.getContent().getChildren().size(); ow++) {
            var ov = this.getContent().getChildren().size() - ow - 1;
            var ox = this.getContent().getChildren().get(ov);
            if (ox instanceof aP) {
                var ou = ox;
                if (!ou.getsDigitBean().isNone()) {
                    return (
                        ou.getDim().getX() +
                        ou.getDim().getWidth() +
                        this.getDim().getWidthRightOnly()
                    );
                }
            }
        }
        return this.getDim().getWidthRightOnly();
    };

    function dp(ov, ou) {
        this.stackBean = null;
        this.listOfRows = new fM();
        this.align = null;
        this.rowNumberAlign = 0;
        this.addSpaceForSecondRow = 0;
        this.realChildren = new fM();
        this.stackTableInfo = new lE();
        this.dLa = h8;
        this.dLa(ov, ou);
        this.stackBean = this.getMathMLBean();
        this.stackTableInfo.setCharalign(this.stackBean.getCharalign());
        this.stackTableInfo.setSpaceV(
            this.spaceInt(this.stackBean.getCharspacingV()),
        );
        this.stackTableInfo.setSpaceH(
            this.spaceInt(this.stackBean.getCharspacingH()),
        );
        this.setAlign();
    }
    ga(dp, h8);
    dp.prototype.spaceInt = function (ov) {
        var ou = m2.getLength(ov, this.stackBean.getStyle().getMathsize());
        return lv.getIntFromDouble(ou * 1.2);
    };
    dp.prototype.positionChildren = function () {
        for (var ou = 0; ou < this.getContent().getChildren().size(); ou++) {
            var ov = this.getContent().getChildren().get(ou);
            ov.getDim().setY(0);
            ov.getDim().setX(0);
            this.realChildren.add(ov);
        }
    };
    dp.prototype.setAlign = function () {
        if (this.stackBean.getAlign() != null) {
            var ov = this.stackBean.getAlign();
            ov = ov.trim();
            ov = W.replace(ov, " ", ",");
            if (ov.indexOf(",") == -1) {
                this.align = ov;
            } else {
                this.align = ov.substring(0, ov.indexOf(","));
                var ou = ov.substring(ov.indexOf(",") + 1, ov.length);
                this.rowNumberAlign = lv.getIntegerValue(ou, 0);
            }
        }
    };
    dp.prototype.endCalculateDimension = function () {
        this.listOfRows = this.getAllRows();
        for (var oB = this.listOfRows.size() - 1; oB >= 0; oB--) {
            var ox = this.listOfRows.get(oB);
            if (ox instanceof eE) {
                this.listOfRows.remove(ox);
            } else {
                break;
            }
        }
        if (
            this.stackBean.getStackalign() != null &&
            this.stackBean.getStackalign() == "right"
        ) {
            this.alignToRight();
        } else {
            if (
                this.stackBean.getStackalign() != null &&
                this.stackBean.getStackalign() == "center"
            ) {
                this.alignToCenter();
            } else {
                if (
                    this.stackBean.getStackalign() != null &&
                    this.stackBean.getStackalign() == "left"
                ) {
                } else {
                    this.alignToDecimalPoint();
                }
            }
        }
        this.returnToZeroPosition();
        var oC = this.getMaxColumns();
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            if (ox instanceof aY) {
                var oD = ox;
                oD.replacePositionWithNonePanel(oC);
            } else {
                if (ox instanceof eE) {
                    var ov = ox;
                    ov.replacePositionWithNonePanel();
                }
            }
        }
        while (this.mergeCarries()) {}
        this.deleteCarries();
        this.stackTableInfo.setNumberOfRows(this.listOfRows.size());
        var oJ = -bu;
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            if (ox instanceof aY) {
                var oD = ox;
                if (oD != null && oD.getZeroPanel() != null) {
                    var oy = oD.getZeroPanel();
                    oJ = Math.min(oJ, oy.getDim().getWidth());
                }
            }
        }
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            if (ox instanceof aY) {
                var oD = ox;
                if (oD != null && oD.getZeroPanel() != null) {
                    var oy = oD.getZeroPanel();
                    var oz = oy.getDim().getWidth();
                    if (oz > oJ + this.stackTableInfo.getSpaceH()) {
                        oJ = oz - this.stackTableInfo.getSpaceH();
                    }
                }
            }
        }
        var ow = new Array(oC);
        for (var oA = 0; oA < oC; oA++) {
            ow[oA] = 0;
            for (var oB = 0; oB < this.listOfRows.size(); oB++) {
                var ox = this.listOfRows.get(oB);
                if (ox instanceof aY) {
                    var oD = ox;
                    var ou = oD.getDigitFromIndex(oA);
                    if (ou != null) {
                        if (oA == 0 || oA == oC - 1) {
                            ow[oA] = Math.max(ow[oA], ou.getDim().getWidth());
                        } else {
                            if (ou.getsDigitBean().isNumber()) {
                                if (ou.getsDigitBean().isSpace()) {
                                    ow[oA] = lv.getIntFromDouble(oJ / 5);
                                } else {
                                    ow[oA] = oJ;
                                }
                            }
                        }
                    }
                }
            }
            if (ow[oA] == 0) {
                for (var oB = 0; oB < this.listOfRows.size(); oB++) {
                    var ox = this.listOfRows.get(oB);
                    if (ox instanceof aY) {
                        var oD = ox;
                        var ou = oD.getDigitFromIndex(oA);
                        if (ou != null) {
                            ow[oA] = Math.max(ow[oA], ou.getDim().getWidth());
                        }
                    }
                }
            }
            if (ow[oA] == 0) {
                for (var oB = 0; oB < this.listOfRows.size(); oB++) {
                    var ox = this.listOfRows.get(oB);
                    if (ox instanceof aY) {
                        var oD = ox;
                        ow[oA] = Math.max(
                            ow[oA],
                            oD.getZeroPanel().getDim().getWidth(),
                        );
                        break;
                    }
                }
            }
        }
        this.stackTableInfo.setNumberOfColumns(oC);
        this.stackTableInfo.setColumnWidth(ow);
        var oH = 0;
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            if (ox instanceof aY) {
                oH = Math.max(oH, ox.getDim().getWidthLeft());
            }
        }
        this.stackTableInfo.setMaxLeftMargin(oH);
        var oE = 0;
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            if (ox instanceof aY) {
                var oD = ox;
                var ou = oD.getDigitFromIndex(oC - 1);
                if (ou != null) {
                    oE = Math.max(oE, ox.getDim().getWidthRight());
                }
            }
        }
        this.stackTableInfo.setMaxRightMargin(oE);
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            ox.getDim().setX(0);
            if (ox instanceof aY) {
                var oD = ox;
                oD.positionDigits(this.stackTableInfo);
            }
        }
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            if (ox instanceof G) {
                var oG = ox;
                oG.drawLine(this.stackTableInfo);
            }
        }
        this.getContent().returnXToZero();
        var oF = 0;
        for (var oB = 0; oB < this.listOfRows.size(); oB++) {
            var ox = this.listOfRows.get(oB);
            if (oB == 1) {
                oF = oF + this.addSpaceForSecondRow;
            }
            var oI = 0;
            if (oF > this.stackTableInfo.getSpaceV() && ox instanceof G) {
                oI = lv.getIntFromDouble(this.stackTableInfo.getSpaceV() * 0.7);
                oF = oF - oI;
            }
            ox.getDim().setY(oF);
            if (oI > 0) {
                oF = oF + ox.getDim().getHeight() + oI;
            } else {
                oF =
                    oF +
                    ox.getDim().getHeight() +
                    this.stackTableInfo.getSpaceV();
            }
            ox.calculateParentUntilStack();
        }
        this.moveGroupPositionFor(this);
        this.calculateWidth();
        this.calculateHeight();
        this.calculateBaseline();
        this.calculateAxisLine();
        this.calculateSuperscriptLine();
        this.getDim().setChangedDimension(false);
    };
    dp.prototype.moveGroupPositionFor = function (oz) {
        var oy = oz.getContent().getChildren();
        if (oy.size() == 0) {
            return 0;
        }
        for (var oC = 0; oC < oy.size(); oC++) {
            var ow = oy.get(oC);
            if (ow instanceof h8) {
                var ox = ow;
                var oD = this.moveGroupPositionFor(ox);
                if (oD > 0) {
                    for (var oA = oC + 1; oA < oy.size(); oA++) {
                        var oG = oy.get(oA);
                        oG.getDim().setY(oG.getDim().getY() + oD);
                    }
                }
            }
        }
        var oB = 0;
        if (!(oz instanceof dp)) {
            var oE = oy.get(0);
            var ov = oy.get(oy.size() - 1);
            var oI = oE.getAbsolutPositionInPanelY(0, oz);
            oI = oI - oE.getDim().getHeightTop();
            var oH = ov.getDim().getY() + ov.getDim().getHeight() - oI;
            oz.getDim().setY(oI - oz.getDim().getHeightTop());
            var oF = oI - oz.getDim().getHeightTop();
            oz.getContent().moveChildrenOnY(-oF);
            oz.getDim().setContentHeight(
                ov.getDim().getY() + ov.getDim().getHeight(),
            );
            var ou =
                ov.getDim().getY() +
                ov.getDim().getHeight() +
                oz.getDim().getHeightBottom();
            oB = ou - oH;
        }
        return oB;
    };
    dp.prototype.calculateAxisLine = function () {
        var ov = this.getContent().getChildren().size();
        if ("axis" == this.align) {
            if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                var ou = this.getContent()
                    .getChildren()
                    .get(this.rowNumberAlign - 1);
                this.getDim().setAxis(
                    ou.getDim().getY() +
                        ou.getDim().getHeightTop() +
                        ou.getDim().getAxis(),
                );
                return;
            }
            if (this.rowNumberAlign < 0 && ov + this.rowNumberAlign >= 0) {
                var ou = this.getContent()
                    .getChildren()
                    .get(ov + this.rowNumberAlign);
                this.getDim().setAxis(
                    ou.getDim().getY() +
                        ou.getDim().getHeightTop() +
                        ou.getDim().getAxis(),
                );
                return;
            }
        }
        this.getDim().setAxis(
            lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
        );
    };
    dp.prototype.calculateBaseline = function () {
        var ov = this.getContent().getChildren().size();
        if ("baseline" == this.align) {
            if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                var ou = this.getContent()
                    .getChildren()
                    .get(this.rowNumberAlign - 1);
                if (ou.getDim().getBaseline() != bu) {
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            ou.getDim().getBaseline(),
                    );
                }
                return;
            }
            if (this.rowNumberAlign < 0 && ov + this.rowNumberAlign >= 0) {
                var ou = this.getContent()
                    .getChildren()
                    .get(ov + this.rowNumberAlign);
                if (ou.getDim().getBaseline() != bu) {
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            ou.getDim().getBaseline(),
                    );
                }
                return;
            }
            this.getDim().setBaseline(
                lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
            );
            return;
        } else {
            if ("center" == this.align) {
                if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                    var ou = this.getContent()
                        .getChildren()
                        .get(this.rowNumberAlign - 1);
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            lv.getIntFromDouble(
                                ou.getDim().getContentHeight() / 2,
                            ),
                    );
                    return;
                }
                if (this.rowNumberAlign < 0 && ov + this.rowNumberAlign >= 0) {
                    var ou = this.getContent()
                        .getChildren()
                        .get(ov + this.rowNumberAlign);
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            lv.getIntFromDouble(
                                ou.getDim().getContentHeight() / 2,
                            ),
                    );
                    return;
                }
                this.getDim().setBaseline(
                    lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
                );
                return;
            } else {
                if ("top" == this.align) {
                    if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                        var ou = this.getContent()
                            .getChildren()
                            .get(this.rowNumberAlign - 1);
                        this.getDim().setBaseline(ou.getDim().getY());
                        return;
                    }
                    if (
                        this.rowNumberAlign < 0 &&
                        ov + this.rowNumberAlign >= 0
                    ) {
                        var ou = this.getContent()
                            .getChildren()
                            .get(ov + this.rowNumberAlign);
                        this.getDim().setBaseline(ou.getDim().getY());
                        return;
                    }
                    this.getDim().setBaseline(-this.getDim().getHeightTop());
                    return;
                } else {
                    if ("bottom" == this.align) {
                        if (
                            this.rowNumberAlign > 0 &&
                            this.rowNumberAlign <= ov
                        ) {
                            var ou = this.getContent()
                                .getChildren()
                                .get(this.rowNumberAlign - 1);
                            this.getDim().setBaseline(
                                ou.getDim().getY() + ou.getDim().getHeight(),
                            );
                            return;
                        }
                        if (
                            this.rowNumberAlign < 0 &&
                            ov + this.rowNumberAlign >= 0
                        ) {
                            var ou = this.getContent()
                                .getChildren()
                                .get(ov + this.rowNumberAlign);
                            this.getDim().setBaseline(
                                ou.getDim().getY() + ou.getDim().getHeight(),
                            );
                            return;
                        }
                        this.getDim().setBaseline(
                            this.getDim().getHeight() -
                                this.getDim().getHeightTop(),
                        );
                        return;
                    }
                }
            }
        }
        this.getDim().setBaseline(bu);
    };
    dp.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(-this.getDim().getHeightTop());
    };
    dp.prototype.getMaxColumns = function () {
        var ou = 0;
        for (var ov = 0; ov < this.listOfRows.size(); ov++) {
            var ow = this.listOfRows.get(ov);
            ou = Math.max(ou, ow.getStartPosition() + ow.getLength());
        }
        return ou;
    };
    dp.prototype.returnToZeroPosition = function () {
        var ov = -bu;
        for (var ou = 0; ou < this.listOfRows.size(); ou++) {
            var ow = this.listOfRows.get(ou);
            ov = Math.min(ov, ow.getStartPosition());
        }
        for (var ou = 0; ou < this.listOfRows.size(); ou++) {
            var ow = this.listOfRows.get(ou);
            ow.setLeftPosition(ow.getLeftPosition() - ov);
        }
    };
    dp.prototype.mergeCarries = function () {
        var oD = 0;
        var ov = null;
        var oA = null;
        for (var oz = 0; oz < this.listOfRows.size(); oz++) {
            var ow = this.listOfRows.get(oz);
            if (ov != null) {
                if (ow instanceof aY) {
                    oA = ow;
                    break;
                }
            } else {
                if (ow instanceof eE) {
                    ov = ow;
                    oD = oz;
                }
            }
        }
        if (ov != null && oA != null) {
            var oy = ov.getStartPosition() + ov.getLength();
            var oC = oA.getStartPosition() + oA.getLength();
            var ox = Math.min(oy, oC);
            for (var oz = 0; oz < ox; oz++) {
                var ou = oA.getDigitFromIndex(oz);
                var oB = ov.getPanelFromIndex(oz);
                if (ou != null && oB != null) {
                    ou.addCarryPanel(oB);
                }
            }
            this.listOfRows.remove(oD);
            return true;
        }
        return false;
    };
    dp.prototype.alignToDecimalPoint = function () {
        var ow = 0;
        for (var ov = 0; ov < this.listOfRows.size(); ov++) {
            var ox = this.listOfRows.get(ov);
            if (ox instanceof eE) {
                continue;
            }
            if (ox instanceof G) {
                continue;
            }
            ow = Math.max(ow, ox.getDecimalLength());
        }
        for (var ov = 0; ov < this.listOfRows.size(); ov++) {
            var ox = this.listOfRows.get(ov);
            if (ox instanceof eE) {
                continue;
            }
            if (ox instanceof G) {
                continue;
            }
            var ou = ox.getDecimalLength();
            ox.setLeftPosition(ow - ou);
        }
    };
    dp.prototype.alignToCenter = function () {
        var ou = this.getMaxLength();
        for (var ow = 0; ow < this.listOfRows.size(); ow++) {
            var oy = this.listOfRows.get(ow);
            if (oy instanceof eE) {
                continue;
            }
            var ov = oy.getLength();
            var ox = lv.getIntFromDouble((ou - ov) / 2);
            oy.setLeftPosition(ox);
        }
    };
    dp.prototype.alignToRight = function () {
        var ou = this.getMaxLength();
        for (var ow = 0; ow < this.listOfRows.size(); ow++) {
            var ox = this.listOfRows.get(ow);
            if (ox instanceof eE) {
                continue;
            }
            var ov = ox.getLength();
            ox.setLeftPosition(ou - ov);
        }
    };
    dp.prototype.getMaxLength = function () {
        var ou = 0;
        for (var ov = 0; ov < this.listOfRows.size(); ov++) {
            var ow = this.listOfRows.get(ov);
            ou = Math.max(ou, ow.getLength());
        }
        return ou;
    };
    dp.calculateDim = function (ou) {
        ou.calculateWidth();
        ou.calculateHeight();
        ou.calculateBaseline();
        ou.calculateAxisLine();
        ou.calculateSuperscriptLine();
        ou.getDim().setChangedDimension(false);
    };
    dp.calculateDimUntilStack = function (ou) {
        ou.calculateWidth();
        ou.calculateHeight();
        ou.calculateBaseline();
        ou.calculateAxisLine();
        ou.calculateSuperscriptLine();
        ou.getDim().setChangedDimension(false);
        if (ou instanceof dp) {
            return;
        }
        var ov = ou.getParent();
        if (ov == null) {
            return;
        }
        dp.calculateDimUntilStack(ov);
    };
    dp.prototype.getFirstSRowLine = function () {
        for (var ou = 0; ou < this.listOfRows.size(); ou++) {
            var ov = this.listOfRows.get(ou);
            if (ov instanceof aY) {
                return ov;
            }
        }
        return null;
    };
    dp.prototype.getSecondSRowLine = function () {
        var ov = false;
        for (var ou = 0; ou < this.listOfRows.size(); ou++) {
            var ow = this.listOfRows.get(ou);
            if (ow instanceof aY) {
                if (ov) {
                    return ow;
                }
                ov = true;
            }
        }
        return null;
    };
    dp.prototype.getStackTableInfo = function () {
        return this.stackTableInfo;
    };
    dp.prototype.getRealChildren = function () {
        return this.realChildren;
    };
    dp.prototype.setAddSpaceForSecondRow = function (ou) {
        this.addSpaceForSecondRow = ou;
    };

    function lE() {
        this.spaceV = 0;
        this.spaceH = 0;
        this.numberOfRows = 0;
        this.numberOfColumns = 0;
        this.rowsHeight;
        this.columnWidth;
        this.maxLeftMargin;
        this.maxRightMargin;
        this.charalign;
    }
    lE.prototype.getSpaceV = function () {
        return this.spaceV;
    };
    lE.prototype.setSpaceV = function (ou) {
        this.spaceV = ou;
    };
    lE.prototype.getSpaceH = function () {
        return this.spaceH;
    };
    lE.prototype.setSpaceH = function (ou) {
        this.spaceH = ou;
    };
    lE.prototype.getNumberOfRows = function () {
        return this.numberOfRows;
    };
    lE.prototype.setNumberOfRows = function (ou) {
        this.numberOfRows = ou;
    };
    lE.prototype.getNumberOfColumns = function () {
        return this.numberOfColumns;
    };
    lE.prototype.setNumberOfColumns = function (ou) {
        this.numberOfColumns = ou;
    };
    lE.prototype.getRowsHeight = function () {
        return this.rowsHeight;
    };
    lE.prototype.setRowsHeight = function (ou) {
        this.rowsHeight = ou;
    };
    lE.prototype.getColumnWidth = function () {
        return this.columnWidth;
    };
    lE.prototype.setColumnWidth = function (ou) {
        this.columnWidth = ou;
    };
    lE.prototype.getCharalign = function () {
        return this.charalign;
    };
    lE.prototype.setCharalign = function (ou) {
        if (ou != null) {
            ou = ou.toLowerCase();
        }
        this.charalign = ou;
    };
    lE.prototype.getWidth = function () {
        var ov = this.maxLeftMargin;
        for (var ou = 0; ou < this.getNumberOfColumns(); ou++) {
            ov = ov + this.getColumnWidth()[ou];
            if (ou < this.getNumberOfColumns() - 1) {
                ov = ov + this.getSpaceH();
            }
        }
        return ov + this.maxRightMargin;
    };
    lE.prototype.getMaxLeftMargin = function () {
        return this.maxLeftMargin;
    };
    lE.prototype.setMaxLeftMargin = function (ou) {
        this.maxLeftMargin = ou;
    };
    lE.prototype.getMaxRightMargin = function () {
        return this.maxRightMargin;
    };
    lE.prototype.setMaxRightMargin = function (ou) {
        this.maxRightMargin = ou;
    };

    function kc(ov, ou) {
        this.dKU = at;
        this.dKU(ov, ou);
    }
    ga(kc, at);

    function iD(ov, ou) {
        this._base;
        this.sub;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(iD, ax);
    iD.prototype.getBase = function () {
        return this._base;
    };
    iD.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        this.sub = this.getContent().getChildren().get(1);
    };
    iD.prototype.positionChildren = function () {
        ax.prototype.positionChildren.call(this);
        var ov = this.getMathMLBean();
        var ou = ov.getSubscriptshift();
        iD.positionSubChildren(
            this,
            this._base,
            this.sub,
            ou,
            this.isLeftToRight(),
        );
    };
    iD.positionSubChildren = function (oF, oC, oG, oH, oA) {
        var oB = oC.findIsItalic(oC.getMathMLBean());
        var oy = gK.findIsIntegrale(oC.getMathMLBean());
        var ox = gK.findIsBigOperator(oC.getMathMLBean());
        var ou = oG.getBase();
        var oz = ou.getMathMLBean().getStyle().getMathsize();
        var ow = ou.getAbsolutPositionInPanelY(0, oG);
        var ov = lv.getIntFromDouble(oG.getDim().getAxis());
        if (oG.getDim().getBaseline() != bu) {
            ow = 0;
            ov =
                oG.getDim().getHeightTop() +
                oG.getDim().getBaseline() -
                lv.getIntFromDouble(oz * 0.33);
        }
        if (oC.getDim().getBaseline() == bu || ox) {
            oG.getDim().setY(
                oC.getDim().getY() +
                    oC.getDim().getHeight() -
                    oC.getDim().getHeightBottomOnly() -
                    ow -
                    ov,
            );
        } else {
            oG.getDim().setY(
                oC.getDim().getY() +
                    oC.getDim().getHeightTopOnly() +
                    oC.getDim().getBaseline() -
                    ow -
                    ov,
            );
        }
        var oD = m2.getLength(oH, oG.getDim().getHeight());
        oG.getDim().setY(oG.getDim().getY() + oD);
        if (oA) {
            if (oy) {
                var oE = lv.getIntFromDouble(oC.getDim().getHeight() * 0.3);
                oG.getDim().setX(oG.getDim().getX() - oE);
            } else {
                if (oB) {
                    var oE = lv.getIntFromDouble(oC.getDim().getHeight() * 0.1);
                    oG.getDim().setX(oG.getDim().getX() - oE);
                }
            }
        } else {
            if (oy) {
                var oE = lv.getIntFromDouble(oC.getDim().getHeight() * 0.3);
                oG.getDim().setX(oG.getDim().getX() + oE);
            }
        }
        oF.getContent().returnYToZero();
        oF.getContent().returnXToZero();
    };
    iD.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    iD.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    iD.prototype.calculateSuperscriptLine = function () {
        if (this._base.getDim().getSuperscriptline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getSuperscriptline();
            this.getDim().setSuperscriptline(ou);
        }
    };
    iD.prototype.stretchPanelHorizontalRecursive = function (ou, ov) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ow =
            this.getDim().getContentWidth() - this._base.getDim().getWidth();
        var ox = b9.stretchPanelHorizontalRecursive(this._base, ou - ow, ov);
        if (ox) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ox;
    };
    iD.prototype.stretchPanelVerticalRecursive = function (ov, ox) {
        var oA = false;
        var ow = this._base.getDim().getHeight();
        if (ox.isTdSource() || ox.isHeightWidthSource()) {
            var ou =
                ov.getHeightToStretchWithBorder() -
                this.getDim().getHeightTop() -
                this.getDim().getHeightBottom();
            var oy =
                this.getDim().getContentHeight() -
                this._base.getDim().getHeight();
            var oz = ov.copy();
            oz.setHeightToStretchWithBorder(ou - oy);
            oA = hL.stretchPanelVerticalRecursive(this._base, oz, ox);
        } else {
            oA = hL.stretchPanelVerticalRecursive(this._base, ov, ox);
        }
        if (oA) {
            this.sub
                .getDim()
                .setY(
                    this.sub.getDim().getY() +
                        (this._base.getDim().getHeight() - ow),
                );
            this.recalculateDim();
        }
        return oA;
    };
    iD.prototype.isEmbellished = function () {
        return this._base.isEmbellished();
    };
    iD.prototype.isVerticalStretchy = function (ou) {
        return this._base.isVerticalStretchy(ou);
    };
    iD.prototype.isHorizontalStretchy = function (ou) {
        return this._base.isHorizontalStretchy(ou);
    };

    function fX(ov, ou) {
        this._base;
        this.sub;
        this.sup;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(fX, ax);
    fX.prototype.getBase = function () {
        return this._base;
    };
    fX.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        this.sub = this.getContent().getChildren().get(1);
        this.sup = this.getContent().getChildren().get(2);
    };
    fX.prototype.positionChildren = function () {
        ax.prototype.positionChildren.call(this);
        var ou = this.getMathMLBean();
        var ow = ou.getSuperscriptshift();
        var ov = ou.getSubscriptshift();
        fX.positionSubSupChildren(
            this,
            this._base,
            this.sup,
            this.sub,
            ov,
            ow,
            this.isLeftToRight(),
        );
    };
    fX.positionSubSupChildren = function (oC, oz, ou, oy, oD, ow, ox) {
        var oB = Math.max(ou.getDim().getWidth(), oy.getDim().getWidth());
        if (!ox) {
            ou.getDim().setX(oB - ou.getDim().getWidth());
            oy.getDim().setX(oB - oy.getDim().getWidth());
            oz.getDim().setX(oB);
        } else {
            ou.getDim().setX(oz.getDim().getWidth());
            oy.getDim().setX(oz.getDim().getWidth());
            oz.getDim().setX(0);
        }
        lR.positionSupChildren(oC, oz, ou, ow, ox);
        iD.positionSubChildren(oC, oz, oy, oD, ox);
        oC.getContent().returnYToZero();
        oC.getContent().returnXToZero();
        if (
            ou.getDim().getY() + ou.getDim().getHeight() >=
            oy.getDim().getY()
        ) {
            var oA =
                ou.getDim().getY() +
                ou.getDim().getHeight() -
                oy.getDim().getY();
            if (oA % 2 == 1) {
                oA = oA + 1;
            }
            var ov = oA / 2 + 1;
            ou.getDim().setY(ou.getDim().getY() - ov);
            oy.getDim().setY(oy.getDim().getY() + ov);
            oC.getContent().returnYToZero();
        }
    };
    fX.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    fX.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    fX.prototype.calculateSuperscriptLine = function () {
        if (this.sup.getDim().getSuperscriptline() != bu) {
            var ou =
                this.sup.getDim().getY() +
                this.sup.getDim().getHeightTop() +
                this.sup.getDim().getSuperscriptline();
            this.getDim().setSuperscriptline(ou);
        }
    };
    fX.prototype.stretchPanelHorizontalRecursive = function (ou, ov) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ow =
            this.getDim().getContentWidth() - this._base.getDim().getWidth();
        var ox = b9.stretchPanelHorizontalRecursive(this._base, ou - ow, ov);
        if (ox) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ox;
    };
    fX.prototype.stretchPanelVerticalRecursive = function (ov, ox) {
        var oA = false;
        var ow = this._base.getDim().getHeight();
        if (ox.isTdSource() || ox.isHeightWidthSource()) {
            var ou =
                ov.getHeightToStretchWithBorder() -
                this.getDim().getHeightTop() -
                this.getDim().getHeightBottom();
            var oy =
                this.getDim().getContentHeight() -
                this._base.getDim().getHeight();
            var oz = ov.copy();
            oz.setHeightToStretchWithBorder(ou - oy);
            oA = hL.stretchPanelVerticalRecursive(this._base, oz, ox);
        } else {
            oA = hL.stretchPanelVerticalRecursive(this._base, ov, ox);
        }
        if (oA) {
            this.sub
                .getDim()
                .setY(
                    this.sub.getDim().getY() +
                        (this._base.getDim().getHeight() - ow),
                );
            this.recalculateDim();
        }
        return oA;
    };
    fX.prototype.isEmbellished = function () {
        return this._base.isEmbellished();
    };
    fX.prototype.isVerticalStretchy = function (ou) {
        return this._base.isVerticalStretchy(ou);
    };
    fX.prototype.isHorizontalStretchy = function (ou) {
        return this._base.isHorizontalStretchy(ou);
    };

    function f6() {
        this.index;
        this.span;
        this.need;
    }
    f6.prototype.getIndex = function () {
        return this.index;
    };
    f6.prototype.setIndex = function (ou) {
        this.index = ou;
    };
    f6.prototype.getSpan = function () {
        return this.span;
    };
    f6.prototype.setSpan = function (ou) {
        this.span = ou;
    };
    f6.prototype.getNeed = function () {
        return this.need;
    };
    f6.prototype.setNeed = function (ou) {
        this.need = ou;
    };

    function j2(ov, ou) {
        this.tableBean = null;
        this.tablePanel = null;
        this.tableWidthSet = 0;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(j2, ax);
    j2.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this.tablePanel = this.getContent().getChildren().get(0);
        this.tableBean = this.tablePanel.getMathMLBean();
        if (!this.tableBean.getHasLabel()) {
            return;
        }
        this.tableWidthSet = this.tablePanel.getDim().getWidthSet();
        this.tablePanel.getDim().setWidthSet(0);
        var ow = this.tablePanel.getContent().getChildren();
        for (var ox = 0; ox < ow.size(); ox++) {
            var ov = ow.get(ox);
            if (ov instanceof fY) {
                var ou = ov;
                var oy = ou.getLabelPanel();
                this.getContent().getChildren().add(oy);
            }
        }
    };
    j2.prototype.calculateDimension = function () {
        ax.prototype.calculateDimension.call(this);
        if (!this.tableBean.getHasLabel()) {
            return;
        }
        var oM = 0;
        var oI = this.tablePanel.getContent().getChildren();
        for (var oL = 0; oL < oI.size(); oL++) {
            var oD = oI.get(oL);
            if (oD instanceof fY) {
                var oP = oD;
                var oE = oP.getLabelPanel();
                oM = Math.max(oM, oE.getDim().getWidth());
            }
        }
        var oN = this.tablePanel.getDim().getWidth();
        var oy = m2.getLength(
            this.tableBean.getLabelspacing(),
            this.tableBean.getStyle().getMathsize(),
        );
        var oB = m2.getLength(
            this.tableBean.getMinlabelspacing(),
            this.tableBean.getStyle().getMathsize(),
        );
        if (oy < oB) {
            oy = oB;
        }
        var ou = this.tableBean.getSide();
        if (ou == null) {
            ou = "right";
        }
        ou = ou.toLowerCase();
        if (this.tableWidthSet > 0) {
            var oS = this.tableWidthSet - oN - oM;
            oy = oS;
            if (ou.indexOf("overlap") == -1) {
                if (oS < oB) {
                    oy = oB;
                }
            }
        }
        var oC = 0;
        var oQ = 0;
        if (ou.startsWith("left")) {
            oC = oM + oy;
        } else {
            oQ = oN + oy;
        }
        this.tablePanel.getDim().setX(oC);
        var oK = this.tablePanel.getDim().getHeightTop();
        for (var oL = 0; oL < oI.size(); oL++) {
            var oD = oI.get(oL);
            var oO = oD.getMathMLBean();
            if (oD instanceof fY) {
                var oP = oD;
                var oE = oP.getLabelPanel();
                var oz = oE.getMathMLBean();
                var oH = oM - oE.getDim().getWidth();
                var oR = "center";
                if (oz.getColumnalign() != null) {
                    oR = oz.getColumnalign();
                }
                if ("center" == oR) {
                    var ox = lv.getIntFromDouble(oH / 2);
                    oE.getDim().setX(oQ + ox);
                } else {
                    if ("left" == oR) {
                        oE.getDim().setX(oQ);
                    } else {
                        if ("right" == oR) {
                            oE.getDim().setX(oQ + oH);
                        }
                    }
                }
                var oA = oK + oD.getDim().getY();
                var ov = oD.getDim().getHeight();
                var ow = new cV();
                ow.setHeightToStretchWithBorder(ov);
                hL.stretchPanelVerticalRecursive(
                    oE,
                    ow,
                    bD.getTdStretchingSource(),
                );
                var oF = oE.getDim().getHeight();
                var oG = ov - oF;
                var oJ = "center";
                if (oz.getRowalign() != null) {
                    oJ = oz.getRowalign();
                } else {
                    if (oO.getRowalign() != null) {
                        oJ = oO.getRowalign();
                    }
                }
                if ("top" == oJ) {
                } else {
                    if ("bottom" == oJ) {
                        oA = oA + oG;
                    } else {
                        oA = oA + lv.getIntFromDouble(oG / 2);
                    }
                }
                oE.getDim().setY(oA);
            }
        }
        this.calculateWidth();
    };
    j2.prototype.calculateAxisLine = function () {
        this.getDim().setAxis(
            this.tablePanel.getDim().getY() +
                this.tablePanel.getDim().getHeightTop() +
                this.tablePanel.getDim().getAxis(),
        );
    };
    j2.prototype.calculateBaseline = function () {
        if (this.tablePanel.getDim().getBaseline() == bu) {
            this.getDim().setBaseline(bu);
        } else {
            this.getDim().setBaseline(
                this.tablePanel.getDim().getY() +
                    this.tablePanel.getDim().getBaseline() +
                    this.tablePanel.getDim().getHeightTop(),
            );
        }
    };
    j2.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(this.tablePanel.getDim().getY());
    };

    function ct(ov, ou) {
        this.tableBean = null;
        this.columnSize = new V();
        this.rowSize = new hH();
        this.align = null;
        this.rowNumberAlign = 0;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.tableBean = this.getMathMLBean();
        this.setAlign();
    }
    ga(ct, ax);
    ct.prototype.setAlign = function () {
        if (this.tableBean.getAlign() != null) {
            var ov = this.tableBean.getAlign();
            ov = ov.trim();
            ov = W.replace(ov, " ", ",");
            if (ov.indexOf(",") == -1) {
                this.align = ov;
            } else {
                this.align = ov.substring(0, ov.indexOf(","));
                var ou = ov.substring(ov.indexOf(",") + 1, ov.length);
                this.rowNumberAlign = lv.getIntegerValue(ou, 0);
            }
        }
    };
    ct.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        var ov = this.getContent().getChildren();
        var ox = lN.getMultipleStringValues(
            this.tableBean.getRowalign(),
            ov.size(),
        );
        for (var ow = 0; ow < ov.size(); ow++) {
            var ou = ov.get(ow);
            var oy = ou.getMathMLBean();
            if (oy.getRowalign() == null) {
                oy.setRowalign(ox[ow]);
            }
        }
    };
    ct.prototype.calculateDimension = function () {
        ax.prototype.calculateDimension.call(this);
        this.getDim().setInsideMarginTop(0);
        this.getDim().setInsideMarginBottom(0);
        this.getDim().setInsideMarginLeft(0);
        this.getDim().setInsideMarginRight(0);
        this.setFrameSpaces();
        M.setAlignmentMarkers(this);
        this.columnSize.calculate(this);
        this.rowSize.calculate(this);
        var o5 = this.getContent().getChildren();
        for (var o2 = 0; o2 < o5.size(); o2++) {
            var oE = o5.get(o2);
            var ov = oE.getContent().getChildren().get(0);
            var oY = ov.getContent().getChildren();
            var oK = false;
            for (var o1 = 0; o1 < oY.size(); o1++) {
                var ox = oY.get(o1);
                var ow = ox.getMathMLBean();
                var oR = ow.getRowStart();
                var o0 = this.rowSize.getHeightFor(oR, ow.getRowspanInt());
                var oN = new cV();
                oN.setHeightToStretchWithBorder(o0);
                var oQ = hL.stretchPanelVerticalRecursive(
                    ox,
                    oN,
                    bD.getTdStretchingSource(),
                );
                oK = oK || oQ;
                var oX = ow.getColumnStart();
                var oF = this.columnSize.getWidthFor(oX, ow.getColumnspanInt());
                oQ = b9.stretchPanelHorizontalRecursive(
                    ox,
                    oF,
                    bD.getTdStretchingSource(),
                );
                oK = oK || oQ;
            }
            if (oK) {
                ov.positionChildren();
            }
        }
        for (var o2 = 0; o2 < o5.size(); o2++) {
            var oE = o5.get(o2);
            oE.getDim().setY(
                this.rowSize.getYForLine(o2) + this.rowSize.getTopForLine(o2),
            );
            oE.getDim().setX(0);
            oE.calculateHeight();
            var ov = oE.getContent().getChildren().get(0);
            var oY = ov.getContent().getChildren();
            for (var o1 = 0; o1 < oY.size(); o1++) {
                var ox = oY.get(o1);
                var ow = ox.getMathMLBean();
                var oy = ow.getColumnStart();
                ox.getDim().setX(
                    this.columnSize.getXForLine(oy) -
                        oE.getDim().getWidthLeftOnly() +
                        this.columnSize.getLeftForLine(oy),
                );
                this.alignHorizontal(ox, oE);
                ox.calculateWidth();
            }
            oE.getDim().setInsideMarginRight(
                oE.getDim().getInsideMarginRight() +
                    this.columnSize.getTrWidthRight() -
                    oE.getDim().getWidthRightOnly(),
            );
            var oO = this.rowSize.getRowHeight(o2) - oE.getDim().getHeight();
            if (oO > 0) {
                var oI = oE.getMathMLBean();
                if ("top" == oI.getRowalign()) {
                    oE.getDim().setInsideMarginTop(0);
                    oE.getDim().setInsideMarginBottom(oO);
                } else {
                    if ("bottom" == oI.getRowalign()) {
                        oE.getDim().setInsideMarginTop(oO);
                        oE.getDim().setInsideMarginBottom(0);
                    } else {
                        var oC = lv.getIntFromDouble(oO / 2);
                        oE.getDim().setInsideMarginTop(oC);
                        oE.getDim().setInsideMarginBottom(oO - oC);
                    }
                }
            }
            oE.positionRowspanChildren(this.rowSize, this.columnSize);
            ov.getDim().setContentHeight(
                this.rowSize.getRowHeight(o2) -
                    oE.getDim().getInsideMarginTop() -
                    oE.getDim().getInsideMarginBottom(),
            );
            ov.calculateWidth();
            ov.calculateAxisLine();
            ov.calculateBaseline();
            ov.calculateSuperscriptLine();
            oE.calculateWidth();
            ov.calculateHeight();
            oE.calculateAxisLine();
            oE.calculateBaseline();
            oE.calculateSuperscriptLine();
        }
        var oB = lN.getMultipleStringValues(
            this.tableBean.getRowlines(),
            this.rowSize.getNbRows(),
        );
        var oZ = lN.getMultipleLengthValues(
            this.tableBean.getRowlinesthickness(),
            this.rowSize.getNbRows(),
            this.tableBean.getStyle().getMathsize(),
        );
        var o4 = lN.getMultipleStringValues(
            this.tableBean.getRowlinescolor(),
            this.rowSize.getNbRows(),
        );
        for (var o2 = 0; o2 < o5.size() - 1; o2++) {
            var oE = o5.get(o2);
            var o7 = oB[o2];
            if (!("none" == o7)) {
                var oS = oZ[o2];
                if (oS > 0) {
                    var oP = o4[o2];
                    if (oP == null) {
                        oP = "#000000";
                    }
                    var oV = this.rowSize.getYForLine(o2 + 1) - oS;
                    var oJ = -this.getDim().getInsideMarginLeft();
                    var ov = oE.getContent().getChildren().get(0);
                    var oY = ov.getContent().getChildren();
                    for (
                        var o1 = 0;
                        o1 < this.columnSize.getNbColumns();
                        o1++
                    ) {
                        var ox = this.getTdForColumn(oY, o1);
                        var oT = false;
                        var oy = o1;
                        var oG = 1;
                        if (ox != null) {
                            var ow = ox.getMathMLBean();
                            oG = ow.getColumnspanInt();
                            if (ow.getRowspanInt() == 1) {
                                oT = true;
                            }
                            o1 = o1 + oG - 1;
                        } else {
                            oT = this.hasNextUnderTdForColumn(o5, o2, o1);
                        }
                        if (!oT) {
                            continue;
                        }
                        if (oy == 0) {
                            oJ = -this.getDim().getInsideMarginLeft();
                        } else {
                            oJ =
                                this.columnSize.getXForLine(oy) -
                                this.columnSize.getLineThickness(oy - 1);
                        }
                        var oz = oy + oG - 1;
                        var oD = this.columnSize.getXForLine(oz);
                        oD = oD + this.columnSize.getLeftForLine(oz);
                        oD = oD + this.columnSize.getColumnWidth(oz);
                        oD = oD + this.columnSize.getRightForLine(oz);
                        if (oz == this.columnSize.getNbColumns() - 1) {
                            oD = oD + this.columnSize.getTrWidthRight();
                            oD = oD + this.getDim().getInsideMarginRight();
                        } else {
                            oD = oD + this.columnSize.getLineThickness(oz);
                        }
                        jF.drawHorizontalLine(
                            oJ,
                            oV,
                            oD - oJ,
                            oS,
                            this,
                            oP,
                            o7,
                        );
                    }
                }
            }
        }
        var oU = lN.getMultipleLengthValues(
            this.tableBean.getColumnlinesthickness(),
            this.columnSize.getNbColumns(),
            this.tableBean.getStyle().getMathsize(),
        );
        var o3 = lN.getMultipleStringValues(
            this.tableBean.getColumnlines(),
            this.columnSize.getNbColumns(),
        );
        var o6 = lN.getMultipleStringValues(
            this.tableBean.getColumnlinescolor(),
            this.columnSize.getNbColumns(),
        );
        for (var o2 = 0; o2 < o5.size(); o2++) {
            var oE = o5.get(o2);
            var ov = oE.getContent().getChildren().get(0);
            var oY = ov.getContent().getChildren();
            for (var o1 = 0; o1 < this.columnSize.getNbColumns() - 1; o1++) {
                var o7 = o3[o1];
                if (!("none" == o7)) {
                    var oS = oU[o1];
                    if (oS > 0) {
                        var oP = o6[o1];
                        if (oP == null) {
                            oP = "#000000";
                        }
                        var oM = this.getTdForColumn(oY, o1);
                        if (oM != null) {
                            var ou = oM.getMathMLBean();
                            if (ou.getColumnspanInt() > 1) {
                                continue;
                            }
                        } else {
                            var oL = this.getTdForColumn(oY, o1 + 1);
                            if (oL == null) {
                                continue;
                            }
                        }
                        var oH = -this.getDim().getInsideMarginTop();
                        if (o2 > 0) {
                            oH =
                                this.rowSize.getYForLine(o2) -
                                this.rowSize.getLineThickness(o2 - 1);
                        }
                        var oA = this.rowSize.getYForLine(o2);
                        oA = oA + this.rowSize.getTopForLine(o2);
                        oA = oA + this.rowSize.getRowHeight(o2);
                        oA = oA + this.rowSize.getBottomForLine(o2);
                        if (o2 == this.rowSize.getNbRows() - 1) {
                            oA = oA + this.getDim().getInsideMarginBottom();
                        } else {
                            oA = oA + this.rowSize.getLineThickness(o2);
                        }
                        var oW = this.columnSize.getXForLine(o1 + 1) - oS;
                        jF.drawVerticalLine(oW, oH, oA - oH, oS, this, oP, o7);
                    }
                }
            }
        }
        this.getDim().setContentWidth(this.columnSize.getWidth());
        this.getDim().setContentHeight(this.rowSize.getHeight());
        this.calculateAxisLine();
        this.calculateBaseline();
        this.calculateSuperscriptLine();
        if (!this.isLeftToRight()) {
            this.flipTable();
        }
    };
    ct.prototype.flipTable = function () {
        var oB = this.columnSize.getWidth();
        var oC = this.getContent().getChildren();
        for (var oz = 0; oz < oC.size(); oz++) {
            var oF = oC.get(oz);
            var ox = oF.getDim().getContentWidth();
            var oE = oF.getContent().getChildren().get(0);
            var oD = oE.getContent().getChildren();
            for (var oy = 0; oy < oD.size(); oy++) {
                var ow = oD.get(oy);
                ow.getDim().setX(
                    ox - ow.getDim().getX() - ow.getDim().getWidth(),
                );
            }
        }
        var oA = this.getContent().getShapeList();
        for (var oz = 0; oz < oA.size(); oz++) {
            var ov = oA.get(oz);
            var ou = lv.getIntFromDouble(ov.getLinethickness());
            if (ov.getX() == ov.getEndX()) {
                ov.setX(oB - ov.getX() - (ou % 2));
                ov.setEndX(oB - ov.getEndX() - (ou % 2));
            } else {
                ov.setX(oB - ov.getX());
                ov.setEndX(oB - ov.getEndX());
            }
        }
    };
    ct.prototype.getTdForColumn = function (ox, ow) {
        for (var ov = 0; ov < ox.size(); ov++) {
            var oy = ox.get(ov);
            var ou = oy.getMathMLBean();
            if (ou.getColumnStart() == ow) {
                return oy;
            }
        }
        return null;
    };
    ct.prototype.hasNextUnderTdForColumn = function (oy, oA, ox) {
        var oD = oy.get(oA + 1);
        var oB = oD.getContent().getChildren().get(0);
        var oz = oB.getContent().getChildren();
        for (var ow = 0; ow < oz.size(); ow++) {
            var ov = oz.get(ow);
            var ou = ov.getMathMLBean();
            var oC = ou.getColumnStart() + ou.getColumnspanInt() - 1;
            if (ou.getColumnStart() <= ox && ox <= oC) {
                return true;
            }
        }
        return false;
    };
    ct.prototype.alignHorizontal = function (oy, oC) {
        var ou = oy.getMathMLBean();
        var oA = oC.getMathMLBean();
        var oB = "center";
        var oz = ou.getColumnStart();
        if (ou.getColumnalign() != null) {
            oB = ou.getColumnalign();
        } else {
            if (oA.getColumnalign() != null) {
                oB = lN.getMultipleStringValues(
                    oA.getColumnalign(),
                    this.columnSize.getNbColumns(),
                )[oz];
            } else {
                if (this.tableBean.getColumnalign() != null) {
                    oB = lN.getMultipleStringValues(
                        this.tableBean.getColumnalign(),
                        this.columnSize.getNbColumns(),
                    )[oz];
                }
            }
        }
        if (this.tableBean.hasAlignmentGroup(ou)) {
            oB = "left";
        }
        var ow = this.columnSize.getWidthFor(oz, ou.getColumnspanInt());
        var ov = oy.getDim().getWidth();
        if ("center" == oB) {
            var ox = lv.getIntFromDouble((ow - ov) / 2);
            oy.getDim().setInsideMarginLeft(
                oy.getDim().getInsideMarginLeft() + ox,
            );
            oy.getDim().setInsideMarginRight(
                oy.getDim().getInsideMarginRight() + ow - ov - ox,
            );
        } else {
            if ("left" == oB) {
                oy.getDim().setInsideMarginRight(
                    oy.getDim().getInsideMarginRight() + ow - ov,
                );
            } else {
                if ("right" == oB) {
                    oy.getDim().setInsideMarginLeft(
                        oy.getDim().getInsideMarginLeft() + ow - ov,
                    );
                }
            }
        }
    };
    ct.prototype.setFrameSpaces = function () {
        if (this.tableBean.getFramespacing() == null) {
            return;
        }
        var oz = this.tableBean.getFramespacing();
        oz = W.replace(oz, "  ", " ");
        var ox = oz.split(" ");
        if (ox.length == 1) {
            var oy = m2.getLength(
                ox[0],
                this.tableBean.getStyle().getMathsize(),
            );
            this.getDim().setInsideMarginLeft(oy);
            this.getDim().setInsideMarginRight(oy);
            this.getDim().setInsideMarginTop(oy);
            this.getDim().setInsideMarginBottom(oy);
        } else {
            if (ox.length == 2 || ox.length == 3) {
                var ow = m2.getLength(
                    ox[0],
                    this.tableBean.getStyle().getMathsize(),
                );
                var ov = m2.getLength(
                    ox[1],
                    this.tableBean.getStyle().getMathsize(),
                );
                this.getDim().setInsideMarginLeft(ow);
                this.getDim().setInsideMarginRight(ow);
                this.getDim().setInsideMarginTop(ov);
                this.getDim().setInsideMarginBottom(ov);
            } else {
                if (ox.length > 3) {
                    var ow = m2.getLength(
                        ox[0],
                        this.tableBean.getStyle().getMathsize(),
                    );
                    var ov = m2.getLength(
                        ox[1],
                        this.tableBean.getStyle().getMathsize(),
                    );
                    var ou = m2.getLength(
                        ox[2],
                        this.tableBean.getStyle().getMathsize(),
                    );
                    var oA = m2.getLength(
                        ox[3],
                        this.tableBean.getStyle().getMathsize(),
                    );
                    this.getDim().setInsideMarginLeft(oA);
                    this.getDim().setInsideMarginRight(ov);
                    this.getDim().setInsideMarginTop(ow);
                    this.getDim().setInsideMarginBottom(ou);
                }
            }
        }
    };
    ct.prototype.calculateAxisLine = function () {
        var ov = this.getContent().getChildren().size();
        if ("axis" == this.align) {
            if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                var ou = this.getContent()
                    .getChildren()
                    .get(this.rowNumberAlign - 1);
                this.getDim().setAxis(
                    ou.getDim().getY() +
                        ou.getDim().getHeightTop() +
                        ou.getDim().getAxis(),
                );
                return;
            }
            if (this.rowNumberAlign < 0 && ov + this.rowNumberAlign >= 0) {
                var ou = this.getContent()
                    .getChildren()
                    .get(ov + this.rowNumberAlign);
                this.getDim().setAxis(
                    ou.getDim().getY() +
                        ou.getDim().getHeightTop() +
                        ou.getDim().getAxis(),
                );
                return;
            }
        }
        this.getDim().setAxis(
            lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
        );
    };
    ct.prototype.calculateBaseline = function () {
        var ov = this.getContent().getChildren().size();
        if ("baseline" == this.align) {
            if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                var ou = this.getContent()
                    .getChildren()
                    .get(this.rowNumberAlign - 1);
                if (ou.getDim().getBaseline() != bu) {
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            ou.getDim().getBaseline(),
                    );
                }
                return;
            }
            if (this.rowNumberAlign < 0 && ov + this.rowNumberAlign >= 0) {
                var ou = this.getContent()
                    .getChildren()
                    .get(ov + this.rowNumberAlign);
                if (ou.getDim().getBaseline() != bu) {
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            ou.getDim().getBaseline(),
                    );
                }
                return;
            }
            this.getDim().setBaseline(
                lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
            );
            return;
        } else {
            if ("center" == this.align) {
                if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                    var ou = this.getContent()
                        .getChildren()
                        .get(this.rowNumberAlign - 1);
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            lv.getIntFromDouble(
                                ou.getDim().getContentHeight() / 2,
                            ),
                    );
                    return;
                }
                if (this.rowNumberAlign < 0 && ov + this.rowNumberAlign >= 0) {
                    var ou = this.getContent()
                        .getChildren()
                        .get(ov + this.rowNumberAlign);
                    this.getDim().setBaseline(
                        ou.getDim().getY() +
                            ou.getDim().getHeightTop() +
                            lv.getIntFromDouble(
                                ou.getDim().getContentHeight() / 2,
                            ),
                    );
                    return;
                }
                this.getDim().setBaseline(
                    lv.getIntFromDouble(this.getDim().getContentHeight() / 2),
                );
                return;
            } else {
                if ("top" == this.align) {
                    if (this.rowNumberAlign > 0 && this.rowNumberAlign <= ov) {
                        var ou = this.getContent()
                            .getChildren()
                            .get(this.rowNumberAlign - 1);
                        this.getDim().setBaseline(ou.getDim().getY());
                        return;
                    }
                    if (
                        this.rowNumberAlign < 0 &&
                        ov + this.rowNumberAlign >= 0
                    ) {
                        var ou = this.getContent()
                            .getChildren()
                            .get(ov + this.rowNumberAlign);
                        this.getDim().setBaseline(ou.getDim().getY());
                        return;
                    }
                    this.getDim().setBaseline(-this.getDim().getHeightTop());
                    return;
                } else {
                    if ("bottom" == this.align) {
                        if (
                            this.rowNumberAlign > 0 &&
                            this.rowNumberAlign <= ov
                        ) {
                            var ou = this.getContent()
                                .getChildren()
                                .get(this.rowNumberAlign - 1);
                            this.getDim().setBaseline(
                                ou.getDim().getY() + ou.getDim().getHeight(),
                            );
                            return;
                        }
                        if (
                            this.rowNumberAlign < 0 &&
                            ov + this.rowNumberAlign >= 0
                        ) {
                            var ou = this.getContent()
                                .getChildren()
                                .get(ov + this.rowNumberAlign);
                            this.getDim().setBaseline(
                                ou.getDim().getY() + ou.getDim().getHeight(),
                            );
                            return;
                        }
                        this.getDim().setBaseline(
                            this.getDim().getHeight() -
                                this.getDim().getHeightTop(),
                        );
                        return;
                    }
                }
            }
        }
        this.getDim().setBaseline(bu);
    };
    ct.prototype.calculateSuperscriptLine = function () {
        this.getDim().setSuperscriptline(-this.getDim().getHeightTop());
    };

    function V() {
        this.tableWidth = 0;
        this.columnWidthSettings;
        this.fixColumnWidth;
        this.equalColumns = false;
        this.nbColumns;
        this.trWidthLeft = 0;
        this.columnLeftSpace;
        this.columnWidth;
        this.columnRightSpace;
        this.trWidthRight = 0;
        this.lineRightType;
        this.lineRightThickness;
    }
    V.prototype.calculate = function (oB) {
        var oD = oB.getMathMLBean();
        this.nbColumns = oD.getNumberOfColumns();
        this.equalColumns = lv.getBooleanValue(oD.getEqualcolumns(), false);
        this.tableWidth = oB.getDim().getWidthSet();
        var oE = this.nbColumns;
        this.columnLeftSpace = new Array(oE);
        this.columnWidth = new Array(oE);
        this.columnRightSpace = new Array(oE);
        this.fixColumnWidth = new Array(oE);
        for (var oA = 0; oA < oE; oA++) {
            this.columnLeftSpace[oA] = 0;
            this.columnWidth[oA] = 0;
            this.columnRightSpace[oA] = 0;
            this.fixColumnWidth[oA] = 0;
        }
        this.calcultateMinimumSpaceForTable(oB);
        var ou = lN.getMultipleLengthValues(
            oD.getColumnspacing(),
            this.nbColumns,
            oD.getStyle().getMathsize(),
        );
        for (var oA = 0; oA < this.nbColumns; oA++) {
            var ov = 0;
            if (oA > 0) {
                var oF = ou[oA - 1];
                var oG = this.columnRightSpace[oA - 1];
                ov = oF - oG;
            }
            this.columnLeftSpace[oA] = ov;
            if (oA < this.nbColumns - 1) {
                var oy = ou[oA];
                this.columnRightSpace[oA] = lv.getIntFromDouble(oy / 2);
            }
        }
        if (this.equalColumns) {
            var ox = 0;
            for (var oA = 0; oA < this.columnWidth.length; oA++) {
                ox = Math.max(ox, this.columnWidth[oA]);
            }
            for (var oA = 0; oA < this.columnWidth.length; oA++) {
                this.columnWidth[oA] = ox;
            }
        }
        var ow =
            oB.getDim().getWidthLeft() +
            this.getWidth() +
            oB.getDim().getWidthRight();
        if (this.tableWidth > ow) {
            var oC = 0;
            for (var oA = 0; oA < this.nbColumns; oA++) {
                var oH = this.columnWidthSettings[oA];
                if ("fit" == oH) {
                    oC = oC + 1;
                }
            }
            if (oC > 0) {
                var oz = this.tableWidth - ow;
                for (var oA = 0; oA < oz; oA++) {
                    this.addPixelToFit();
                }
            } else {
                var oz = this.tableWidth - ow;
                for (var oA = 0; oA < oz; oA++) {
                    this.addPixelToAll();
                }
            }
        }
    };
    V.prototype.calcultateMinimumSpaceForTable = function (oA) {
        var oE = oA.getMathMLBean();
        this.lineRightThickness = lN.getMultipleLengthValues(
            oE.getColumnlinesthickness(),
            this.nbColumns,
            oE.getStyle().getMathsize(),
        );
        this.lineRightType = lN.getMultipleStringValues(
            oE.getColumnlines(),
            this.nbColumns,
        );
        for (var oz = 0; oz < this.lineRightType.length; oz++) {
            if ("none" == this.lineRightType[oz]) {
                this.lineRightThickness[oz] = 0;
            }
        }
        var oD = oA.getContent().getChildren();
        for (var oz = 0; oz < oD.size(); oz++) {
            var oK = oD.get(oz);
            this.trWidthLeft = Math.max(
                this.trWidthLeft,
                oK.getDim().getWidthLeftOnly(),
            );
            this.trWidthRight = Math.max(
                this.trWidthRight,
                oK.getDim().getWidthRightOnly(),
            );
        }
        for (var oz = 0; oz < oD.size(); oz++) {
            var oK = oD.get(oz);
            var oH = oK.getContent().getChildren().get(0);
            var oG = oH.getContent().getChildren();
            for (var oy = 0; oy < oG.size(); oy++) {
                var ox = oG.get(oy);
                var ow = ox.getMathMLBean();
                if (ow.getColumnspanInt() == 1) {
                    var oC = ow.getColumnStart();
                    this.columnWidth[oC] = Math.max(
                        this.columnWidth[oC],
                        ox.getDim().getWidth(),
                    );
                }
            }
        }
        var ov = new fM();
        for (var oz = 0; oz < oD.size(); oz++) {
            var oK = oD.get(oz);
            var oH = oK.getContent().getChildren().get(0);
            var oG = oH.getContent().getChildren();
            for (var oy = 0; oy < oG.size(); oy++) {
                var ox = oG.get(oy);
                var ow = ox.getMathMLBean();
                var oC = ow.getColumnStart();
                if (ow.getColumnspanInt() > 1) {
                    var oF = ox.getDim().getWidth();
                    var ou = this.getWidthFor(oC, ow.getColumnspanInt());
                    if (oF > ou) {
                        var oJ = new f6();
                        oJ.setIndex(oC);
                        oJ.setSpan(ow.getColumnspanInt());
                        oJ.setNeed(oF);
                        ov.add(oJ);
                        this.growWidth(oC, ow.getColumnspanInt(), oF - ou);
                    }
                }
            }
        }
        this.orderByMinWidth(ov);
        for (var oz = 0; oz < ov.size(); oz++) {
            var oJ = ov.get(oz);
            var oB = this.getWidthFor(oJ.getIndex(), oJ.getSpan());
            this.growWidth(oJ.getIndex(), oJ.getSpan(), oJ.getNeed() - oB);
        }
        this.columnWidthSettings = lN.getMultipleStringValues(
            oE.getColumnwidth(),
            this.nbColumns,
        );
        for (var oz = 0; oz < this.nbColumns; oz++) {
            var oI = this.columnWidthSettings[oz];
            if (oI == null) {
                continue;
            }
            if ("auto" == oI) {
                continue;
            }
            if ("fit" == oI) {
                continue;
            }
            if (oI.indexOf("%") > -1) {
                continue;
            }
            this.columnWidth[oz] = Math.max(
                this.columnWidth[oz],
                m2.getLength(oI, 0),
            );
            this.fixColumnWidth[oz] = 1;
        }
    };
    V.prototype.orderByMinWidth = function (oy) {
        for (var ox = 0; ox < oy.size() - 1; ox++) {
            var oA = oy.get(ox);
            var oz = oy.get(ox + 1);
            var ow = ox + 1;
            for (var ov = ox + 2; ov < oy.size(); ov++) {
                var ou = oy.get(ov);
                if (ou.getNeed() < oz.getNeed()) {
                    oz = ou;
                    ow = ov;
                }
            }
            if (oz.getNeed() < oA.getNeed()) {
                oy.remove(ox);
                oy.addTo(ox, oz);
                oy.remove(ow);
                oy.addTo(ow, oA);
            }
        }
    };
    V.prototype.growWidth = function (ov, ou, oy) {
        var oz = ov;
        var ox = ov + ou;
        for (var ow = 0; ow < oy; ow++) {
            this.addPixelTo(oz, ox);
        }
    };
    V.prototype.addPixelToFit = function () {
        var ow = -1;
        for (var ou = 0; ou < this.nbColumns; ou++) {
            var ov = this.columnWidthSettings[ou];
            if ("fit" == ov) {
                if (ow == -1) {
                    ow = this.columnWidth[ou];
                } else {
                    ow = Math.min(ow, this.columnWidth[ou]);
                }
            }
        }
        for (var ou = 0; ou < this.nbColumns; ou++) {
            var ov = this.columnWidthSettings[ou];
            if ("fit" == ov) {
                if (ow == this.columnWidth[ou]) {
                    this.columnWidth[ou] = this.columnWidth[ou] + 1;
                    return;
                }
            }
        }
    };
    V.prototype.addPixelToAll = function () {
        var ov = -1;
        for (var ou = 0; ou < this.nbColumns; ou++) {
            if (ov == -1) {
                ov = this.columnWidth[ou];
            } else {
                ov = Math.min(ov, this.columnWidth[ou]);
            }
        }
        for (var ou = 0; ou < this.nbColumns; ou++) {
            if (ov == this.columnWidth[ou]) {
                this.columnWidth[ou] = this.columnWidth[ou] + 1;
                return;
            }
        }
    };
    V.prototype.addPixelTo = function (ox, ow) {
        var ov = this.columnWidth[ox];
        for (var ou = ox; ou < ow; ou++) {
            ov = Math.min(ov, this.columnWidth[ou]);
        }
        for (var ou = ox; ou < ow; ou++) {
            if (ov == this.columnWidth[ou]) {
                this.columnWidth[ou] = this.columnWidth[ou] + 1;
                return;
            }
        }
    };
    V.prototype.getWidthFor = function (ov, ou) {
        var oy = ov;
        var ox = ov + ou;
        var oz = 0;
        for (var ow = oy; ow < ox; ow++) {
            if (ow > oy) {
                oz = oz + this.columnLeftSpace[ow];
            }
            oz = oz + this.columnWidth[ow];
            if (ow < ox - 1) {
                oz = oz + this.columnRightSpace[ow];
                oz = oz + this.lineRightThickness[ow];
            }
        }
        return oz;
    };
    V.prototype.getXForLine = function (ou) {
        var ow = this.trWidthLeft;
        for (var ov = 0; ov < ou; ov++) {
            ow = ow + this.columnLeftSpace[ov];
            ow = ow + this.columnWidth[ov];
            ow = ow + this.columnRightSpace[ov];
            ow = ow + this.lineRightThickness[ov];
        }
        return ow;
    };
    V.prototype.getLeftForLine = function (ou) {
        return this.columnLeftSpace[ou];
    };
    V.prototype.getRightForLine = function (ou) {
        return this.columnRightSpace[ou];
    };
    V.prototype.getLineThickness = function (ou) {
        return this.lineRightThickness[ou];
    };
    V.prototype.getNbColumns = function () {
        return this.nbColumns;
    };
    V.prototype.getColumnWidth = function (ou) {
        return this.columnWidth[ou];
    };
    V.prototype.getWidth = function () {
        var ov = this.trWidthLeft;
        for (var ou = 0; ou < this.nbColumns; ou++) {
            ov = ov + this.columnLeftSpace[ou];
            ov = ov + this.columnWidth[ou];
            ov = ov + this.columnRightSpace[ou];
            if (ou < this.nbColumns - 1) {
                ov = ov + this.lineRightThickness[ou];
            }
        }
        return ov + this.trWidthRight;
    };
    V.prototype.getTrWidthRight = function () {
        return this.trWidthRight;
    };

    function hH() {
        this.tableHeight = 0;
        this.equalRows = false;
        this.nbRows = 0;
        this.rowTopSpace;
        this.trHeightTop;
        this.rowHeight;
        this.trHeightBottom;
        this.rowBottomSpace;
        this.lineBottomType;
        this.lineBottomThickness;
    }
    hH.prototype.calculate = function (oL) {
        var oD = oL.getMathMLBean();
        this.nbRows = oD.getNumberOfRows();
        this.equalRows = lv.getBooleanValue(oD.getEqualrows(), false);
        this.tableHeight = oL.getDim().getHeightSet();
        var ox = this.nbRows;
        this.rowTopSpace = new Array(ox);
        this.trHeightTop = new Array(ox);
        this.rowHeight = new Array(ox);
        this.trHeightBottom = new Array(ox);
        this.rowBottomSpace = new Array(ox);
        for (var oO = 0; oO < ox; oO++) {
            this.rowTopSpace[oO] = 0;
            this.trHeightTop[oO] = 0;
            this.rowHeight[oO] = 0;
            this.trHeightBottom[oO] = 0;
            this.rowBottomSpace[oO] = 0;
        }
        var oR = lN.getMultipleLengthValues(
            oD.getRowspacing(),
            this.nbRows,
            oD.getStyle().getMathsize(),
        );
        for (var oO = 0; oO < this.nbRows; oO++) {
            var oJ = 0;
            if (oO > 0) {
                var oS = oR[oO - 1];
                var oI = this.rowBottomSpace[oO - 1];
                oJ = oS - oI;
            }
            this.rowTopSpace[oO] = oJ;
            if (oO < this.nbRows - 1) {
                var oy = oR[oO];
                this.rowBottomSpace[oO] = lv.getIntFromDouble(oy / 2);
            }
        }
        this.lineBottomThickness = lN.getMultipleLengthValues(
            oD.getRowlinesthickness(),
            this.nbRows,
            oD.getStyle().getMathsize(),
        );
        this.lineBottomType = lN.getMultipleStringValues(
            oD.getRowlines(),
            this.nbRows,
        );
        for (var oO = 0; oO < this.lineBottomType.length; oO++) {
            if ("none" == this.lineBottomType[oO]) {
                this.lineBottomThickness[oO] = 0;
            }
        }
        var oM = oL.getContent().getChildren();
        for (var oO = 0; oO < oM.size(); oO++) {
            var oH = oM.get(oO);
            this.trHeightTop[oO] = oH.getDim().getHeightTopOnly();
            this.trHeightBottom[oO] = oH.getDim().getHeightBottomOnly();
        }
        for (var oO = 0; oO < oM.size(); oO++) {
            var oH = oM.get(oO);
            this.rowHeight[oO] = oH.getDim().getHeight();
            if (oH instanceof fY) {
                var oP = oH;
                this.rowHeight[oO] = Math.max(
                    this.rowHeight[oO],
                    oP.getLabelPanel().getDim().getHeight(),
                );
            }
        }
        var oz = new fM();
        for (var oO = 0; oO < oM.size(); oO++) {
            var oH = oM.get(oO);
            var oQ = oH.getContent().getChildren().get(0);
            var ov = oQ.getContent().getChildren();
            for (var oN = 0; oN < ov.size(); oN++) {
                var oG = ov.get(oN);
                var oF = oG.getMathMLBean();
                var oC = oF.getRowStart();
                if (oF.getRowspanInt() > 1) {
                    var ow = oG.getDim().getHeight();
                    var ou = this.getHeightFor(oC, oF.getRowspanInt());
                    if (ow > ou) {
                        var oA = new f6();
                        oA.setIndex(oC);
                        oA.setSpan(oF.getRowspanInt());
                        oA.setNeed(ow);
                        oz.add(oA);
                    }
                }
            }
        }
        this.orderByMinHeight(oz);
        for (var oO = 0; oO < oz.size(); oO++) {
            var oA = oz.get(oO);
            var ou = this.getHeightFor(oA.getIndex(), oA.getSpan());
            this.growHeight(oA.getIndex(), oA.getSpan(), oA.getNeed() - ou);
        }
        if ("true" == oD.getEqualrows()) {
            var oK = 0;
            for (var oO = 0; oO < this.rowHeight.length; oO++) {
                oK = Math.max(oK, this.rowHeight[oO]);
            }
            for (var oO = 0; oO < this.rowHeight.length; oO++) {
                this.rowHeight[oO] = oK;
            }
        }
        var oE =
            oL.getDim().getHeightTop() +
            this.getHeight() +
            oL.getDim().getHeightBottom();
        if (this.tableHeight > oE) {
            var oB = this.tableHeight - oE;
            for (var oO = 0; oO < oB; oO++) {
                this.addPixelToAll();
            }
        }
    };
    hH.prototype.orderByMinHeight = function (oy) {
        for (var ox = 0; ox < oy.size() - 1; ox++) {
            var oA = oy.get(ox);
            var oz = oy.get(ox + 1);
            var ow = ox + 1;
            for (var ov = ox + 2; ov < oy.size(); ov++) {
                var ou = oy.get(ov);
                if (ou.getNeed() < oz.getNeed()) {
                    oz = ou;
                    ow = ov;
                }
            }
            if (oz.getNeed() < oA.getNeed()) {
                oy.remove(ox);
                oy.addTo(ox, oz);
                oy.remove(ow);
                oy.addTo(ow, oA);
            }
        }
    };
    hH.prototype.growHeight = function (ou, oy, ox) {
        var oz = ou;
        var ow = ou + oy;
        for (var ov = 0; ov < ox; ov++) {
            this.addPixelTo(oz, ow);
        }
    };
    hH.prototype.addPixelTo = function (ox, ow) {
        var ov = this.rowHeight[ox];
        for (var ou = ox; ou < ow; ou++) {
            ov = Math.min(ov, this.rowHeight[ou]);
        }
        for (var ou = ox; ou < ow; ou++) {
            if (ov == this.rowHeight[ou]) {
                this.rowHeight[ou] = this.rowHeight[ou] + 1;
                return;
            }
        }
    };
    hH.prototype.addPixelToAll = function () {
        var ov = -1;
        for (var ou = 0; ou < this.nbRows; ou++) {
            if (ov == -1) {
                ov = this.rowHeight[ou];
            } else {
                ov = Math.min(ov, this.rowHeight[ou]);
            }
        }
        for (var ou = 0; ou < this.nbRows; ou++) {
            if (ov == this.rowHeight[ou]) {
                this.rowHeight[ou] = this.rowHeight[ou] + 1;
                return;
            }
        }
    };
    hH.prototype.getHeightFor = function (ou, ox) {
        var oy = ou;
        var ow = ou + ox;
        var oz = 0;
        for (var ov = oy; ov < ow; ov++) {
            if (ov > oy) {
                oz = oz + this.rowTopSpace[ov];
            } else {
                oz = oz - this.trHeightTop[ov];
            }
            oz = oz + this.rowHeight[ov];
            if (ov < ow - 1) {
                oz = oz + this.rowBottomSpace[ov];
                oz = oz + this.lineBottomThickness[ov];
            } else {
                oz = oz - this.trHeightBottom[ov];
            }
        }
        return oz;
    };
    hH.prototype.getYForLine = function (ou) {
        var ow = 0;
        for (var ov = 0; ov < ou; ov++) {
            ow = ow + this.rowTopSpace[ov];
            ow = ow + this.rowHeight[ov];
            ow = ow + this.rowBottomSpace[ov];
            ow = ow + this.lineBottomThickness[ov];
        }
        return ow;
    };
    hH.prototype.getTopForLine = function (ou) {
        return this.rowTopSpace[ou];
    };
    hH.prototype.getBottomForLine = function (ou) {
        return this.rowBottomSpace[ou];
    };
    hH.prototype.getLineThickness = function (ou) {
        return this.lineBottomThickness[ou];
    };
    hH.prototype.getNbRows = function () {
        return this.nbRows;
    };
    hH.prototype.getRowHeight = function (ou) {
        return this.rowHeight[ou];
    };
    hH.prototype.getHeight = function () {
        var ov = 0;
        for (var ou = 0; ou < this.nbRows; ou++) {
            ov = ov + this.rowTopSpace[ou];
            ov = ov + this.rowHeight[ou];
            ov = ov + this.rowBottomSpace[ou];
            if (ou < this.nbRows - 1) {
                ov = ov + this.lineBottomThickness[ou];
            }
        }
        return ov;
    };

    function fZ(ov, ou) {
        this.textBean;
        this.dKO = ax;
        this.dKO(ov, ou);
        this.textBean = ov;
    }
    ga(fZ, ax);
    fZ.prototype.positionChildren = function () {
        var oy = this.getContent();
        if (oy.getShapeList().size() == 0) {
            return;
        }
        var oB = 0;
        var oz = bu;
        var ox = bu;
        for (var ow = 0; ow < oy.getShapeList().size(); ow++) {
            var oA = oy.getShapeList().get(ow);
            oA.setX(oB);
            oB = oB + oA.getWidth();
            if (oA.getFontAscent() + oA.getShiftY() > oz) {
                oz = oA.getFontAscent() + oA.getShiftY();
            }
            ox = Math.max(ox, oA.getSuperscriptline());
        }
        for (var ow = 0; ow < oy.getShapeList().size(); ow++) {
            var oA = oy.getShapeList().get(ow);
            oA.setY(oz - (oA.getFontAscent() + oA.getShiftY()));
        }
        var ou = -bu;
        for (var ow = 0; ow < oy.getShapeList().size(); ow++) {
            var oA = oy.getShapeList().get(ow);
            ou = Math.min(ou, oA.getY());
        }
        if (ou != -bu) {
            for (var ow = 0; ow < oy.getShapeList().size(); ow++) {
                var oA = oy.getShapeList().get(ow);
                oA.setY(oA.getY() - ou);
            }
        }
        this.getDim().setBaseline(oz - ou);
        this.getDim().setSuperscriptline(this.getDim().getBaseline() - ox);
        for (var ow = 0; ow < oy.getShapeList().size(); ow++) {
            var oA = oy.getShapeList().get(ow);
            if (oA.getAxisLine() > 0) {
                this.getDim().setAxis(
                    this.getDim().getBaseline() - oA.getAxisLine(),
                );
                break;
            }
        }
        var ov = lv.getIntFromDouble(
            this.textBean.getNbSpacesBefore() * ox * 0.371,
        );
        var oC = lv.getIntFromDouble(
            this.textBean.getNbSpacesAfter() * ox * 0.371,
        );
        if (this.isLeftToRight()) {
            this.getDim().setInsideMarginLeft(ov);
        } else {
            this.getDim().setInsideMarginRight(ov);
        }
        if (this.isLeftToRight()) {
            this.getDim().setInsideMarginRight(oC);
        } else {
            this.getDim().setInsideMarginLeft(oC);
        }
        for (var ow = 0; ow < oy.getShapeList().size(); ow++) {
            var oA = oy.getShapeList().get(ow);
            if (oA.getDecimalpositionX() > -1) {
                this.getDim().setDecimalPosition(
                    oA.getX() + oA.getDecimalpositionX(),
                );
                break;
            }
        }
    };
    fZ.prototype.calculateAxisLine = function () {
        if (this.getDim().getAxis() != bu) {
            return;
        }
        this.getDim().setAxis(this.getDim().getContentHeight() / 2);
    };
    fZ.prototype.calculateSuperscriptLine = function () {};

    function hP(ov, ou) {
        this.dKP = i6;
        this.dKP(ov, ou);
    }
    ga(hP, i6);

    function jW(ov, ou) {
        this.trBean = null;
        this.dKU = at;
        this.dKU(ov, ou);
        this.trBean = ov;
    }
    ga(jW, at);
    jW.prototype.positionRowspanChildren = function (ow, ou) {
        var ov = this.trBean.getRowalign();
        if (ov == null || ov == "baseline" || ov == "center" || ov == "axis") {
            this.positionRowspanChildrenOnCenter(ow, ou);
        } else {
            if (ov == "top") {
                this.positionRowspanChildrenOnTop(ow, ou);
            } else {
                if (ov == "bottom") {
                    this.positionRowspanChildrenOnBottom(ow, ou);
                }
            }
        }
    };
    jW.prototype.positionRowspanChildrenOnBottom = function (oC, ow) {
        var oD = this.getContent().getChildren().get(0);
        var oB = oD.getContent().getChildren();
        for (var oy = 0; oy < oB.size(); oy++) {
            var ox = oB.get(oy);
            var ou = ox.getMathMLBean();
            var oA = ou.getRowStart();
            if (ou.getRowspanInt() > 1) {
                var ov = ox.getDim().getHeight();
                var oz = oC.getHeightFor(oA, ou.getRowspanInt());
                ox.getDim().setY(oz - ov - this.getDim().getInsideMarginTop());
            }
        }
    };
    jW.prototype.positionRowspanChildrenOnTop = function (oy, ox) {
        var ov = this.getContent().getChildren().get(0);
        var oz = ov.getContent().getChildren();
        for (var ow = 0; ow < oz.size(); ow++) {
            var oA = oz.get(ow);
            var ou = oA.getMathMLBean();
            if (ou.getRowspanInt() > 1) {
                oA.getDim().setY(-this.getDim().getInsideMarginTop());
            }
        }
    };
    jW.prototype.positionRowspanChildrenOnCenter = function (oC, ow) {
        var oD = this.getContent().getChildren().get(0);
        var oB = oD.getContent().getChildren();
        for (var oy = 0; oy < oB.size(); oy++) {
            var ox = oB.get(oy);
            var ou = ox.getMathMLBean();
            var oA = ou.getRowStart();
            if (ou.getRowspanInt() > 1) {
                var ov = ox.getDim().getHeight();
                var oz = oC.getHeightFor(oA, ou.getRowspanInt());
                ox.getDim().setY(
                    lv.getIntFromDouble((oz - ov) / 2) -
                        this.getDim().getInsideMarginTop(),
                );
            }
        }
    };
    jW.prototype.isInferred = function () {
        return false;
    };
    jW.prototype.isSpaceLikePanel = function () {
        return false;
    };
    jW.prototype.isEmbellished = function () {
        return false;
    };

    function fY(ov, ou) {
        this.labelPanel = null;
        this.dLb = jW;
        this.dLb(ov, ou);
    }
    ga(fY, jW);
    fY.prototype.calculateDimension = function () {
        ax.prototype.calculateDimension.call(this);
        this.labelPanel.calculateDimension();
    };
    fY.prototype.getLabelPanel = function () {
        return this.labelPanel;
    };
    fY.prototype.setLabelPanel = function (ou) {
        this.labelPanel = ou;
    };

    function eI(ov, ou) {
        this._base;
        this.under;
        this.over;
        this.underPos;
        this.overPos;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(eI, ax);
    eI.prototype.getBase = function () {
        return this._base;
    };
    eI.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        this.under = this.getContent().getChildren().get(1);
        this.over = this.getContent().getChildren().get(2);
    };
    eI.prototype.positionChildren = function () {
        var ou = this.getMathMLBean();
        if (
            !ou.getStyle().isDisplaystyle() &&
            this._base.getMathMLBean().getMovablelimits()
        ) {
        } else {
            var ox =
                this.under.getMathMLBean().isAccentunder() || ou.isAccent();
            this.underPos = m2.getLength(
                ou.getCurrentDefStyle().getUnderSpace(),
                this._base.getDim().getHeight(),
            );
            if (ox) {
                this.underPos = 0;
            }
            if (ou.getUnderSpace() != null) {
                this.underPos = m2.getLength(
                    ou.getUnderSpace(),
                    this._base.getDim().getHeight(),
                );
            }
            var ow = this.over.getMathMLBean().isAccentunder();
            this.overPos = m2.getLength(
                ou.getCurrentDefStyle().getUnderSpace(),
                this._base.getDim().getHeight(),
            );
            if (ow) {
                this.overPos = 0;
            }
            if (ou.getOverSpace() != null) {
                this.overPos = m2.getLength(
                    ou.getOverSpace(),
                    this._base.getDim().getHeight(),
                );
            }
            var ov = Math.max(
                this._base.getDim().getWidth(),
                this.under.getDim().getWidth(),
            );
            ov = Math.max(ov, this.over.getDim().getWidth());
            if (this._base.getDim().getWidth() < ov) {
                b9.stretchPanelHorizontalRecursive(
                    this._base,
                    ov,
                    bD.getRowlineStretchingSource(),
                );
            }
            if (this.under.getDim().getWidth() < ov) {
                b9.stretchPanelHorizontalRecursive(
                    this.under,
                    ov,
                    bD.getRowlineStretchingSource(),
                );
            }
            if (this.over.getDim().getWidth() < ov) {
                b9.stretchPanelHorizontalRecursive(
                    this.over,
                    ov,
                    bD.getRowlineStretchingSource(),
                );
            }
        }
        this.rePositionChildren();
    };
    eI.prototype.rePositionChildren = function () {
        var ou = this.getMathMLBean();
        if (
            !ou.getStyle().isDisplaystyle() &&
            this._base.getMathMLBean().getMovablelimits()
        ) {
            ax.prototype.positionChildren.call(this);
            fX.positionSubSupChildren(
                this,
                this._base,
                this.over,
                this.under,
                ou.getCurrentDefStyle().getSubscriptshift(),
                ou.getCurrentDefStyle().getSuperscriptshift(),
                this.isLeftToRight(),
            );
        } else {
            this.over.getDim().setX(0);
            this.over.getDim().setY(0);
            this._base.getDim().setX(0);
            this._base
                .getDim()
                .setY(this.over.getDim().getHeight() + this.overPos);
            this.under.getDim().setX(0);
            this.under
                .getDim()
                .setY(
                    this._base.getDim().getY() +
                        this._base.getDim().getHeight() +
                        this.underPos,
                );
            var ov = Math.max(
                this._base.getDim().getWidth(),
                this.under.getDim().getWidth(),
            );
            var ow = ou.getAlign();
            if (!this.isLeftToRight()) {
                if (ow == null || "center" == ow) {
                    this.under
                        .getDim()
                        .setX((ov - this.under.getDim().getWidth()) / 2);
                    this.over
                        .getDim()
                        .setX((ov - this.over.getDim().getWidth()) / 2);
                    this._base
                        .getDim()
                        .setX((ov - this._base.getDim().getWidth()) / 2);
                } else {
                    if ("left" == ow || ow == null) {
                        this.under
                            .getDim()
                            .setX(ov - this.under.getDim().getWidth());
                        this.over
                            .getDim()
                            .setX(ov - this.over.getDim().getWidth());
                        this._base
                            .getDim()
                            .setX(ov - this._base.getDim().getWidth());
                    }
                }
            } else {
                if (ow == null || "center" == ow) {
                    this.under
                        .getDim()
                        .setX((ov - this.under.getDim().getWidth()) / 2);
                    this.over
                        .getDim()
                        .setX((ov - this.over.getDim().getWidth()) / 2);
                    this._base
                        .getDim()
                        .setX((ov - this._base.getDim().getWidth()) / 2);
                } else {
                    if ("right" == ow) {
                        this.under
                            .getDim()
                            .setX(ov - this.under.getDim().getWidth());
                        this.over
                            .getDim()
                            .setX(ov - this.over.getDim().getWidth());
                        this._base
                            .getDim()
                            .setX(ov - this._base.getDim().getWidth());
                    }
                }
            }
        }
    };
    eI.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    eI.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    eI.prototype.calculateSuperscriptLine = function () {
        if (this.over.getDim().getSuperscriptline() != bu) {
            var ou =
                this.over.getDim().getY() +
                this.over.getDim().getHeightTop() +
                this.over.getDim().getSuperscriptline();
            this.getDim().setSuperscriptline(ou);
        }
    };
    eI.prototype.stretchPanelHorizontalRecursive = function (ou, oy) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ov = b9.stretchPanelHorizontalRecursive(this._base, ou, oy);
        var ox = b9.stretchPanelHorizontalRecursive(this.over, ou, oy);
        var ow = b9.stretchPanelHorizontalRecursive(this.under, ou, oy);
        if (ov || ox || ow) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ov || ox || ow;
    };
    eI.prototype.stretchPanelVerticalRecursive = function (ov, ox) {
        var oA = false;
        if (ox.isTdSource() || ox.isHeightWidthSource()) {
            var ou =
                ov.getHeightToStretchWithBorder() -
                this.getDim().getHeightTop() -
                this.getDim().getHeightBottom();
            var oy =
                this.getDim().getContentHeight() -
                this._base.getDim().getHeight();
            var oz = ov.copy();
            oz.setHeightToStretchWithBorder(ou - oy);
            oA = hL.stretchPanelVerticalRecursive(this._base, oz, ox);
        } else {
            oA = hL.stretchPanelVerticalRecursive(this._base, ov, ox);
        }
        if (oA) {
            var ow = this.getMathMLBean();
            if (
                !ow.getStyle().isDisplaystyle() &&
                this._base.getMathMLBean().getMovablelimits()
            ) {
            } else {
                this.rePositionChildren();
            }
            this.recalculateDim();
        }
        return oA;
    };
    eI.prototype.isEmbellished = function () {
        return this._base.isEmbellished();
    };
    eI.prototype.isVerticalStretchy = function (ou) {
        return this._base.isVerticalStretchy(ou);
    };
    eI.prototype.isHorizontalStretchy = function (ou) {
        return (
            this._base.isHorizontalStretchy(ou) ||
            this.under.isHorizontalStretchy(ou) ||
            this.under.isHorizontalStretchy(ou)
        );
    };

    function kv(ov, ou) {
        this._base;
        this.under;
        this.underPos;
        this.dKO = ax;
        this.dKO(ov, ou);
    }
    ga(kv, ax);
    kv.prototype.getBase = function () {
        return this._base;
    };
    kv.prototype.initAfterChildrenLoaded = function () {
        ax.prototype.initAfterChildrenLoaded.call(this);
        this._base = this.getContent().getChildren().get(0);
        this.under = this.getContent().getChildren().get(1);
    };
    kv.prototype.positionChildren = function () {
        var ow = this.getMathMLBean();
        if (
            !ow.getStyle().isDisplaystyle() &&
            this._base.getMathMLBean().getMovablelimits()
        ) {
        } else {
            var ov = ow.isAccent();
            this.underPos = m2.getLength(
                ow.getCurrentDefStyle().getUnderSpace(),
                this._base.getDim().getHeight(),
            );
            if (ov) {
                this.underPos = 0;
            }
            if (ow.getUnderSpace() != null) {
                this.underPos = m2.getLength(
                    ow.getUnderSpace(),
                    this._base.getDim().getHeight(),
                );
            }
            var ou = Math.max(
                this._base.getDim().getWidth(),
                this.under.getDim().getWidth(),
            );
            if (this._base.getDim().getWidth() < ou) {
                b9.stretchPanelHorizontalRecursive(
                    this._base,
                    ou,
                    bD.getRowlineStretchingSource(),
                );
            } else {
                if (this.under.getDim().getWidth() < ou) {
                    b9.stretchPanelHorizontalRecursive(
                        this.under,
                        ou,
                        bD.getRowlineStretchingSource(),
                    );
                }
            }
        }
        this.rePositionChildren();
    };
    kv.prototype.rePositionChildren = function () {
        var ow = this.getMathMLBean();
        if (
            !ow.getStyle().isDisplaystyle() &&
            this._base.getMathMLBean().getMovablelimits()
        ) {
            ax.prototype.positionChildren.call(this);
            iD.positionSubChildren(
                this,
                this._base,
                this.under,
                ow.getCurrentDefStyle().getSubscriptshift(),
                this.isLeftToRight(),
            );
        } else {
            var ou = Math.max(
                this._base.getDim().getWidth(),
                this.under.getDim().getWidth(),
            );
            this._base.getDim().setX(0);
            this._base.getDim().setY(0);
            this.under.getDim().setX(0);
            this.under
                .getDim()
                .setY(this._base.getDim().getHeight() + this.underPos);
            var ov = ow.getAlign();
            if (!this.isLeftToRight()) {
                if (ov == null || "center" == ov) {
                    this.under
                        .getDim()
                        .setX((ou - this.under.getDim().getWidth()) / 2);
                    this._base
                        .getDim()
                        .setX((ou - this._base.getDim().getWidth()) / 2);
                } else {
                    if ("left" == ov || ov == null) {
                        this.under
                            .getDim()
                            .setX(ou - this.under.getDim().getWidth());
                        this._base
                            .getDim()
                            .setX(ou - this._base.getDim().getWidth());
                    }
                }
            } else {
                if (ov == null || "center" == ov) {
                    this.under
                        .getDim()
                        .setX((ou - this.under.getDim().getWidth()) / 2);
                    this._base
                        .getDim()
                        .setX((ou - this._base.getDim().getWidth()) / 2);
                } else {
                    if ("right" == ov) {
                        this.under
                            .getDim()
                            .setX(ou - this.under.getDim().getWidth());
                        this._base
                            .getDim()
                            .setX(ou - this._base.getDim().getWidth());
                    }
                }
            }
        }
    };
    kv.prototype.calculateAxisLine = function () {
        var ou =
            this._base.getDim().getY() +
            this._base.getDim().getHeightTop() +
            this._base.getDim().getAxis();
        this.getDim().setAxis(ou);
    };
    kv.prototype.calculateBaseline = function () {
        if (this._base.getDim().getBaseline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getBaseline();
            this.getDim().setBaseline(ou);
        } else {
            this.getDim().setBaseline(bu);
        }
    };
    kv.prototype.calculateSuperscriptLine = function () {
        if (this._base.getDim().getSuperscriptline() != bu) {
            var ou =
                this._base.getDim().getY() +
                this._base.getDim().getHeightTop() +
                this._base.getDim().getSuperscriptline();
            this.getDim().setSuperscriptline(ou);
        }
    };
    kv.prototype.stretchPanelHorizontalRecursive = function (ou, ox) {
        ou =
            ou -
            this.getDim().getWidthLeftOnly() -
            this.getDim().getWidthRightOnly();
        if (ou <= this.getDim().getWidth()) {
            return false;
        }
        var ov = b9.stretchPanelHorizontalRecursive(this._base, ou, ox);
        var ow = b9.stretchPanelHorizontalRecursive(this.under, ou, ox);
        if (ov || ow) {
            this.positionChildren();
            this.recalculateDim();
        }
        return ov || ow;
    };
    kv.prototype.stretchPanelVerticalRecursive = function (ov, ox) {
        var oA = false;
        var ow = this._base.getDim().getHeight();
        if (ox.isTdSource() || ox.isHeightWidthSource()) {
            var ou =
                ov.getHeightToStretchWithBorder() -
                this.getDim().getHeightTop() -
                this.getDim().getHeightBottom();
            var oy =
                this.getDim().getContentHeight() -
                this._base.getDim().getHeight();
            var oz = ov.copy();
            oz.setHeightToStretchWithBorder(ou - oy);
            oA = hL.stretchPanelVerticalRecursive(this._base, oz, ox);
        } else {
            oA = hL.stretchPanelVerticalRecursive(this._base, ov, ox);
        }
        if (oA) {
            var oB = this.getMathMLBean();
            if (
                !oB.getStyle().isDisplaystyle() &&
                this._base.getMathMLBean().getMovablelimits()
            ) {
                this.under
                    .getDim()
                    .setY(
                        this.under.getDim().getY() +
                            (this._base.getDim().getHeight() - ow),
                    );
            } else {
                this.rePositionChildren();
            }
            this.recalculateDim();
        }
        return oA;
    };
    kv.prototype.isEmbellished = function () {
        return this._base.isEmbellished();
    };
    kv.prototype.isVerticalStretchy = function (ou) {
        return this._base.isVerticalStretchy(ou);
    };
    kv.prototype.isHorizontalStretchy = function (ou) {
        return (
            this._base.isHorizontalStretchy(ou) ||
            this.under.isHorizontalStretchy(ou)
        );
    };

    function ix() {}
    ix.generatePanelStructure = function (ov, oB) {
        var oC = null;
        if (ov instanceof k) {
            oC = new jE(ov, oB);
        } else {
            if (ov instanceof b6) {
                oC = new op(ov, oB);
            } else {
                if (ov instanceof eM) {
                    oC = new nz(ov, oB);
                } else {
                    if (ov instanceof h9) {
                        oC = new K(ov, oB);
                    } else {
                        if (ov instanceof eX) {
                            oC = new gA(ov, oB);
                        } else {
                            if (ov instanceof jq) {
                                oC = new mA(ov, oB);
                            } else {
                                if (ov instanceof lK) {
                                    oC = new lZ(ov, oB);
                                } else {
                                    if (ov instanceof i0) {
                                        oC = new dt(ov, oB);
                                    } else {
                                        if (ov instanceof f2) {
                                            oC = new fm(ov, oB);
                                        } else {
                                            if (ov instanceof jh) {
                                                oC = new c7(ov, oB);
                                            } else {
                                                if (ov instanceof gD) {
                                                    oC = new gS(ov, oB);
                                                } else {
                                                    if (ov instanceof m1) {
                                                        oC = new jR(ov, oB);
                                                    } else {
                                                        if (ov instanceof kb) {
                                                            oC = new hj(ov, oB);
                                                        } else {
                                                            if (
                                                                ov instanceof a5
                                                            ) {
                                                                oC = new fd(
                                                                    ov,
                                                                    oB,
                                                                );
                                                            } else {
                                                                if (
                                                                    ov instanceof
                                                                    bv
                                                                ) {
                                                                    oC = new bz(
                                                                        ov,
                                                                        oB,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        ov instanceof
                                                                        cI
                                                                    ) {
                                                                        oC =
                                                                            new mw(
                                                                                ov,
                                                                                oB,
                                                                            );
                                                                    } else {
                                                                        if (
                                                                            ov instanceof
                                                                            l
                                                                        ) {
                                                                            oC =
                                                                                new dI(
                                                                                    ov,
                                                                                    oB,
                                                                                );
                                                                        } else {
                                                                            if (
                                                                                ov instanceof
                                                                                a3
                                                                            ) {
                                                                                oC =
                                                                                    new ku(
                                                                                        ov,
                                                                                        oB,
                                                                                    );
                                                                            } else {
                                                                                if (
                                                                                    ov instanceof
                                                                                    mx
                                                                                ) {
                                                                                    oC =
                                                                                        new h4(
                                                                                            ov,
                                                                                            oB,
                                                                                        );
                                                                                } else {
                                                                                    if (
                                                                                        ov instanceof
                                                                                        bh
                                                                                    ) {
                                                                                        oC =
                                                                                            new jY(
                                                                                                ov,
                                                                                                oB,
                                                                                            );
                                                                                    } else {
                                                                                        if (
                                                                                            ov instanceof
                                                                                            ae
                                                                                        ) {
                                                                                            oC =
                                                                                                new cR(
                                                                                                    ov,
                                                                                                    oB,
                                                                                                );
                                                                                        } else {
                                                                                            if (
                                                                                                ov instanceof
                                                                                                mu
                                                                                            ) {
                                                                                                oC =
                                                                                                    new hP(
                                                                                                        ov,
                                                                                                        oB,
                                                                                                    );
                                                                                            } else {
                                                                                                if (
                                                                                                    ov instanceof
                                                                                                    no
                                                                                                ) {
                                                                                                    oC =
                                                                                                        new iC(
                                                                                                            ov,
                                                                                                            oB,
                                                                                                        );
                                                                                                } else {
                                                                                                    if (
                                                                                                        ov instanceof
                                                                                                        kq
                                                                                                    ) {
                                                                                                        oC =
                                                                                                            new H(
                                                                                                                ov,
                                                                                                                oB,
                                                                                                            );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            ov instanceof
                                                                                                            av
                                                                                                        ) {
                                                                                                            oC =
                                                                                                                new bf(
                                                                                                                    ov,
                                                                                                                    oB,
                                                                                                                );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                ov instanceof
                                                                                                                cT
                                                                                                            ) {
                                                                                                                oC =
                                                                                                                    new dy(
                                                                                                                        ov,
                                                                                                                        oB,
                                                                                                                    );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    ov instanceof
                                                                                                                    g2
                                                                                                                ) {
                                                                                                                    oC =
                                                                                                                        new gk(
                                                                                                                            ov,
                                                                                                                            oB,
                                                                                                                        );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        ov instanceof
                                                                                                                        os
                                                                                                                    ) {
                                                                                                                        oC =
                                                                                                                            new kp(
                                                                                                                                ov,
                                                                                                                                oB,
                                                                                                                            );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            ov instanceof
                                                                                                                            gb
                                                                                                                        ) {
                                                                                                                            oC =
                                                                                                                                new ca(
                                                                                                                                    ov,
                                                                                                                                    oB,
                                                                                                                                );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                ov instanceof
                                                                                                                                kj
                                                                                                                            ) {
                                                                                                                                oC =
                                                                                                                                    new of(
                                                                                                                                        ov,
                                                                                                                                        oB,
                                                                                                                                    );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    ov instanceof
                                                                                                                                    lM
                                                                                                                                ) {
                                                                                                                                    oC =
                                                                                                                                        new n7(
                                                                                                                                            ov,
                                                                                                                                            oB,
                                                                                                                                        );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        ov instanceof
                                                                                                                                        mC
                                                                                                                                    ) {
                                                                                                                                        oC =
                                                                                                                                            new hb(
                                                                                                                                                ov,
                                                                                                                                                oB,
                                                                                                                                            );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            ov instanceof
                                                                                                                                            hk
                                                                                                                                        ) {
                                                                                                                                            oC =
                                                                                                                                                new it(
                                                                                                                                                    ov,
                                                                                                                                                    oB,
                                                                                                                                                );
                                                                                                                                        } else {
                                                                                                                                            if (
                                                                                                                                                ov instanceof
                                                                                                                                                el
                                                                                                                                            ) {
                                                                                                                                                oC =
                                                                                                                                                    new iX(
                                                                                                                                                        ov,
                                                                                                                                                        oB,
                                                                                                                                                    );
                                                                                                                                            } else {
                                                                                                                                                if (
                                                                                                                                                    ov instanceof
                                                                                                                                                    mY
                                                                                                                                                ) {
                                                                                                                                                    oC =
                                                                                                                                                        new iD(
                                                                                                                                                            ov,
                                                                                                                                                            oB,
                                                                                                                                                        );
                                                                                                                                                } else {
                                                                                                                                                    if (
                                                                                                                                                        ov instanceof
                                                                                                                                                        m6
                                                                                                                                                    ) {
                                                                                                                                                        oC =
                                                                                                                                                            new lR(
                                                                                                                                                                ov,
                                                                                                                                                                oB,
                                                                                                                                                            );
                                                                                                                                                    } else {
                                                                                                                                                        if (
                                                                                                                                                            ov instanceof
                                                                                                                                                            cg
                                                                                                                                                        ) {
                                                                                                                                                            oC =
                                                                                                                                                                new fX(
                                                                                                                                                                    ov,
                                                                                                                                                                    oB,
                                                                                                                                                                );
                                                                                                                                                        } else {
                                                                                                                                                            if (
                                                                                                                                                                ov instanceof
                                                                                                                                                                aj
                                                                                                                                                            ) {
                                                                                                                                                                oC =
                                                                                                                                                                    new kv(
                                                                                                                                                                        ov,
                                                                                                                                                                        oB,
                                                                                                                                                                    );
                                                                                                                                                            } else {
                                                                                                                                                                if (
                                                                                                                                                                    ov instanceof
                                                                                                                                                                    nI
                                                                                                                                                                ) {
                                                                                                                                                                    oC =
                                                                                                                                                                        new oe(
                                                                                                                                                                            ov,
                                                                                                                                                                            oB,
                                                                                                                                                                        );
                                                                                                                                                                } else {
                                                                                                                                                                    if (
                                                                                                                                                                        ov instanceof
                                                                                                                                                                        hF
                                                                                                                                                                    ) {
                                                                                                                                                                        oC =
                                                                                                                                                                            new eI(
                                                                                                                                                                                ov,
                                                                                                                                                                                oB,
                                                                                                                                                                            );
                                                                                                                                                                    } else {
                                                                                                                                                                        if (
                                                                                                                                                                            ov instanceof
                                                                                                                                                                            lr
                                                                                                                                                                        ) {
                                                                                                                                                                            oC =
                                                                                                                                                                                new j5(
                                                                                                                                                                                    ov,
                                                                                                                                                                                    oB,
                                                                                                                                                                                );
                                                                                                                                                                        } else {
                                                                                                                                                                            if (
                                                                                                                                                                                ov instanceof
                                                                                                                                                                                ds
                                                                                                                                                                            ) {
                                                                                                                                                                                oC =
                                                                                                                                                                                    new f7(
                                                                                                                                                                                        ov,
                                                                                                                                                                                        oB,
                                                                                                                                                                                    );
                                                                                                                                                                            } else {
                                                                                                                                                                                if (
                                                                                                                                                                                    ov instanceof
                                                                                                                                                                                    iF
                                                                                                                                                                                ) {
                                                                                                                                                                                    oC =
                                                                                                                                                                                        new ct(
                                                                                                                                                                                            ov,
                                                                                                                                                                                            oB,
                                                                                                                                                                                        );
                                                                                                                                                                                } else {
                                                                                                                                                                                    if (
                                                                                                                                                                                        ov instanceof
                                                                                                                                                                                        e2
                                                                                                                                                                                    ) {
                                                                                                                                                                                        oC =
                                                                                                                                                                                            new j2(
                                                                                                                                                                                                ov,
                                                                                                                                                                                                oB,
                                                                                                                                                                                            );
                                                                                                                                                                                    } else {
                                                                                                                                                                                        if (
                                                                                                                                                                                            ov instanceof
                                                                                                                                                                                            ad
                                                                                                                                                                                        ) {
                                                                                                                                                                                            var oz =
                                                                                                                                                                                                ov;
                                                                                                                                                                                            oC =
                                                                                                                                                                                                new fY(
                                                                                                                                                                                                    ov,
                                                                                                                                                                                                    oB,
                                                                                                                                                                                                );
                                                                                                                                                                                            if (
                                                                                                                                                                                                oz.getLabel() !=
                                                                                                                                                                                                null
                                                                                                                                                                                            ) {
                                                                                                                                                                                                var oA =
                                                                                                                                                                                                    oz.getLabel();
                                                                                                                                                                                                var oI =
                                                                                                                                                                                                    ix.generatePanelStructure(
                                                                                                                                                                                                        oA,
                                                                                                                                                                                                        oC,
                                                                                                                                                                                                    );
                                                                                                                                                                                                var oK =
                                                                                                                                                                                                    oC;
                                                                                                                                                                                                oK.setLabelPanel(
                                                                                                                                                                                                    oI,
                                                                                                                                                                                                );
                                                                                                                                                                                            }
                                                                                                                                                                                        } else {
                                                                                                                                                                                            if (
                                                                                                                                                                                                ov instanceof
                                                                                                                                                                                                au
                                                                                                                                                                                            ) {
                                                                                                                                                                                                oC =
                                                                                                                                                                                                    new jW(
                                                                                                                                                                                                        ov,
                                                                                                                                                                                                        oB,
                                                                                                                                                                                                    );
                                                                                                                                                                                            } else {
                                                                                                                                                                                                if (
                                                                                                                                                                                                    ov instanceof
                                                                                                                                                                                                    al
                                                                                                                                                                                                ) {
                                                                                                                                                                                                    oC =
                                                                                                                                                                                                        new gp(
                                                                                                                                                                                                            ov,
                                                                                                                                                                                                            oB,
                                                                                                                                                                                                        );
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    if (
                                                                                                                                                                                                        ov instanceof
                                                                                                                                                                                                        dF
                                                                                                                                                                                                    ) {
                                                                                                                                                                                                        oC =
                                                                                                                                                                                                            new mR(
                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                oB,
                                                                                                                                                                                                            );
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                        if (
                                                                                                                                                                                                            ov instanceof
                                                                                                                                                                                                            hq
                                                                                                                                                                                                        ) {
                                                                                                                                                                                                            oC =
                                                                                                                                                                                                                new dp(
                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                    oB,
                                                                                                                                                                                                                );
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                            if (
                                                                                                                                                                                                                ov instanceof
                                                                                                                                                                                                                n2
                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                oC =
                                                                                                                                                                                                                    new h8(
                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                        oB,
                                                                                                                                                                                                                    );
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                if (
                                                                                                                                                                                                                    ov instanceof
                                                                                                                                                                                                                    lD
                                                                                                                                                                                                                ) {
                                                                                                                                                                                                                    oC =
                                                                                                                                                                                                                        new eE(
                                                                                                                                                                                                                            ov,
                                                                                                                                                                                                                            oB,
                                                                                                                                                                                                                        );
                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                    if (
                                                                                                                                                                                                                        ov instanceof
                                                                                                                                                                                                                        aK
                                                                                                                                                                                                                    ) {
                                                                                                                                                                                                                        oC =
                                                                                                                                                                                                                            new aY(
                                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                                oB,
                                                                                                                                                                                                                            );
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                        if (
                                                                                                                                                                                                                            ov instanceof
                                                                                                                                                                                                                            b0
                                                                                                                                                                                                                        ) {
                                                                                                                                                                                                                            oC =
                                                                                                                                                                                                                                new eq(
                                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                                    oB,
                                                                                                                                                                                                                                );
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                            if (
                                                                                                                                                                                                                                ov instanceof
                                                                                                                                                                                                                                kn
                                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                                oC =
                                                                                                                                                                                                                                    new G(
                                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                                        oB,
                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                if (
                                                                                                                                                                                                                                    ov instanceof
                                                                                                                                                                                                                                    bI
                                                                                                                                                                                                                                ) {
                                                                                                                                                                                                                                    oC =
                                                                                                                                                                                                                                        new aP(
                                                                                                                                                                                                                                            ov,
                                                                                                                                                                                                                                            oB,
                                                                                                                                                                                                                                        );
                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                    if (
                                                                                                                                                                                                                                        ov instanceof
                                                                                                                                                                                                                                        nn
                                                                                                                                                                                                                                    ) {
                                                                                                                                                                                                                                        oC =
                                                                                                                                                                                                                                            new nq(
                                                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                                                oB,
                                                                                                                                                                                                                                            );
                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                        if (
                                                                                                                                                                                                                                            ov instanceof
                                                                                                                                                                                                                                            cO
                                                                                                                                                                                                                                        ) {
                                                                                                                                                                                                                                            oC =
                                                                                                                                                                                                                                                new fZ(
                                                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                                                    oB,
                                                                                                                                                                                                                                                );
                                                                                                                                                                                                                                            var ou =
                                                                                                                                                                                                                                                ov;
                                                                                                                                                                                                                                            var oG =
                                                                                                                                                                                                                                                ou.getShapeList();
                                                                                                                                                                                                                                            for (
                                                                                                                                                                                                                                                var oJ = 0;
                                                                                                                                                                                                                                                oJ <
                                                                                                                                                                                                                                                oG.size();
                                                                                                                                                                                                                                                oJ++
                                                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                                                var oF =
                                                                                                                                                                                                                                                    oG.get(
                                                                                                                                                                                                                                                        oJ,
                                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                                oF.setDecimalPoint(
                                                                                                                                                                                                                                                    ou
                                                                                                                                                                                                                                                        .getCurrentDefStyle()
                                                                                                                                                                                                                                                        .getDecimalpoint(),
                                                                                                                                                                                                                                                );
                                                                                                                                                                                                                                                eH.calculateDimensionForText(
                                                                                                                                                                                                                                                    oF,
                                                                                                                                                                                                                                                );
                                                                                                                                                                                                                                                oC.getContent()
                                                                                                                                                                                                                                                    .getShapeList()
                                                                                                                                                                                                                                                    .add(
                                                                                                                                                                                                                                                        oF,
                                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                            if (
                                                                                                                                                                                                                                                ov instanceof
                                                                                                                                                                                                                                                jt
                                                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                                                oC =
                                                                                                                                                                                                                                                    new ci(
                                                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                                                        oB,
                                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                if (
                                                                                                                                                                                                                                                    ov instanceof
                                                                                                                                                                                                                                                    aT
                                                                                                                                                                                                                                                ) {
                                                                                                                                                                                                                                                    oC =
                                                                                                                                                                                                                                                        new hT(
                                                                                                                                                                                                                                                            ov,
                                                                                                                                                                                                                                                            oB,
                                                                                                                                                                                                                                                        );
                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                    if (
                                                                                                                                                                                                                                                        ov instanceof
                                                                                                                                                                                                                                                        bW
                                                                                                                                                                                                                                                    ) {
                                                                                                                                                                                                                                                        oC =
                                                                                                                                                                                                                                                            new at(
                                                                                                                                                                                                                                                                ov,
                                                                                                                                                                                                                                                                oB,
                                                                                                                                                                                                                                                            );
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                        if (
                                                                                                                                                                                                                                                            ov instanceof
                                                                                                                                                                                                                                                            nm
                                                                                                                                                                                                                                                        ) {
                                                                                                                                                                                                                                                            oC =
                                                                                                                                                                                                                                                                new b4(
                                                                                                                                                                                                                                                                    ov,
                                                                                                                                                                                                                                                                    oB,
                                                                                                                                                                                                                                                                );
                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                            if (
                                                                                                                                                                                                                                                                ov instanceof
                                                                                                                                                                                                                                                                dC
                                                                                                                                                                                                                                                            ) {
                                                                                                                                                                                                                                                                oC =
                                                                                                                                                                                                                                                                    new bU(
                                                                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                                                                        oB,
                                                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                oC =
                                                                                                                                                                                                                                                                    new ax(
                                                                                                                                                                                                                                                                        ov,
                                                                                                                                                                                                                                                                        oB,
                                                                                                                                                                                                                                                                    );
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        var ow = oC.getMathMLBean().getChildren();
        for (var oJ = 0; oJ < ow.size(); oJ++) {
            var oy = ow.get(oJ);
            var oL = ix.generatePanelStructure(oy, oC);
            oC.getContent().getChildren().add(oL);
        }
        if (oC instanceof aY) {
            var oM = oC;
            var oE = oC.getMathMLBean();
            if (oE.getZeroBean() != null) {
                var oH = ix.generatePanelStructure(oE.getZeroBean(), oC);
                oM.setZeroPanel(oH);
            }
        } else {
            if (oC instanceof eE) {
                var oD = oC;
                var ox = oC.getMathMLBean();
                if (ox.getZeroBean() != null) {
                    var oH = ix.generatePanelStructure(ox.getZeroBean(), oC);
                    oD.setZeroPanel(oH);
                }
            }
        }
        oC.initAfterChildrenLoaded();
        return oC;
    };

    function jS() {
        this.initWidth = 0;
        this.initHeight = 0;
        this.shapeX = 0;
        this.shapeY = 0;
        this.width = 0;
        this.height = 0;
        this.antialias = true;
    }
    jS.prototype.getX = function () {
        return this.shapeX;
    };
    jS.prototype.setX = function (ou) {
        this.shapeX = ou;
    };
    jS.prototype.getY = function () {
        return this.shapeY;
    };
    jS.prototype.setY = function (ou) {
        this.shapeY = ou;
    };
    jS.prototype.getWidth = function () {
        return this.width;
    };
    jS.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    jS.prototype.getHeight = function () {
        return this.height;
    };
    jS.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    jS.prototype.isAntialias = function () {
        return this.antialias;
    };
    jS.prototype.setAntialias = function (ou) {
        this.antialias = ou;
    };
    jS.prototype.moveAllOnX = function (ou) {
        this.shapeX = this.shapeX + ou;
    };
    jS.prototype.moveAllOnY = function (ou) {
        this.shapeY = this.shapeY + ou;
    };
    jS.prototype.getMinX = function () {
        return this.getX();
    };
    jS.prototype.getMinY = function () {
        return this.getY();
    };
    jS.prototype.getInitWidth = function () {
        return this.initWidth;
    };
    jS.prototype.setInitWidth = function (ou) {
        this.initWidth = ou;
    };
    jS.prototype.getInitHeight = function () {
        return this.initHeight;
    };
    jS.prototype.setInitHeight = function (ou) {
        this.initHeight = ou;
    };

    function cG() {
        this.linethickness = 0;
        this.borderColor;
        this.radiusX = 0;
        this.radiusY = 0;
        this.fill = false;
        this.fillColor;
        this.dLc = jS;
        this.dLc();
    }
    ga(cG, jS);
    cG.prototype.isFill = function () {
        return this.fill;
    };
    cG.prototype.setFill = function (ou) {
        this.fill = ou;
    };
    cG.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    cG.prototype.setLinethickness = function (ou) {
        this.linethickness = ou;
    };
    cG.prototype.getBorderColor = function () {
        return this.borderColor;
    };
    cG.prototype.setBorderColor = function (ou) {
        this.borderColor = ou;
    };
    cG.prototype.getFillColor = function () {
        return this.fillColor;
    };
    cG.prototype.setFillColor = function (ou) {
        this.fillColor = ou;
    };
    cG.prototype.getRadiusX = function () {
        return this.radiusX;
    };
    cG.prototype.setRadiusX = function (ou) {
        this.radiusX = ou;
    };
    cG.prototype.getRadiusY = function () {
        return this.radiusY;
    };
    cG.prototype.setRadiusY = function (ou) {
        this.radiusY = ou;
    };

    function gQ() {}
    gQ.getHeight = function (oA, ox) {
        var ov = eF.getTokensForChar(oA);
        if (ov == null) {
            return -1;
        }
        var oz = ov[2].split("/");
        var ow = lv.getDoubleValue(oz[0], 0);
        var ou = lv.getDoubleValue(oz[1], 0);
        var oy = Math.max(ow / ox.getWidth(), ou / ox.getHeight());
        return ou / oy;
    };
    gQ.draw = function (oJ, oX, oL, oU, oW, oT) {
        if (oX == null) {
            return false;
        }
        if (oX.length > 1) {
            return false;
        }
        var oH = eF.getLine(oX, oL.getpIncrease());
        if (oH == null) {
            return false;
        }
        var ox = oH.split(" ");
        var oE = false;
        var oM = false;
        var oC = false;
        var oK = false;
        if (ox[1] == "eq") {
            oH = eF.getLineForUnicode(ox[2], oL.getpIncrease());
            ox = oH.split(" ");
        }
        if (ox[1].indexOf("sym") == 0 || ox[1].indexOf("eqs") == 0) {
            if (ox[1] == "symV" || ox[1] == "eqsV") {
                oE = true;
            }
            if (ox[1] == "symH" || ox[1] == "eqsH") {
                oM = true;
            }
            if (ox[1] == "symB" || ox[1] == "eqsB") {
                oE = true;
                oM = true;
            }
            oH = eF.getLineForUnicode(ox[2], oL.getpIncrease());
            ox = oH.split(" ");
        }
        if (ox[1] == "SV") {
            oC = true;
        } else {
            if (ox[1] == "SH") {
                oK = true;
            } else {
                if (ox[1] == "SB") {
                    oC = true;
                    oK = true;
                }
            }
        }
        if (!oW) {
            oE = !oE;
        }
        var oI = ox[2].split("/");
        var oY = Math.max(
            lv.getDoubleValue(oI[0], 0) / oL.getWidth(),
            lv.getDoubleValue(oI[1], 0) / oL.getHeight(),
        );
        var oO = c2.getColor(oU.getColor(), 0);
        for (var oP = 3; oP < ox.length; oP++) {
            if (ox[oP].indexOf("P{") == 0) {
                var oN = ox[oP].substring(2, ox[oP].length - 1);
                var oQ = oN.split(",");
                var oz = oQ[0].split("/");
                var oV = gQ.convertPoint(oz[0], oz[1], oE, oM, oC, oK, oI, oL);
                var oF = new jr(oO);
                oF.setRotate(oT);
                oF.setHeight(oL.getHeight());
                oF.setWidth(oL.getWidth());
                if (oT != null) {
                    oF.setWidth(oT.getRealWidth());
                    oF.setHeight(oT.getRealHeight());
                }
                oF.moveTo(oV.getX(), oV.getY());
                for (var oS = 1; oS < oQ.length; oS++) {
                    var ow = oQ[oS].substring(2, oQ[oS].length);
                    var oD = ow.split("/");
                    if (oQ[oS].indexOf("C:") == 0) {
                        var oG = gQ.convertPoint(
                            oD[0],
                            oD[1],
                            oE,
                            oM,
                            oC,
                            oK,
                            oI,
                            oL,
                        );
                        var oR = gQ.convertPoint(
                            oD[2],
                            oD[3],
                            oE,
                            oM,
                            oC,
                            oK,
                            oI,
                            oL,
                        );
                        oF.curveTo(oR.getX(), oR.getY(), oG.getX(), oG.getY());
                    } else {
                        if (oQ[oS].indexOf("L:") == 0) {
                            var oy = gQ.convertPoint(
                                oD[0],
                                oD[1],
                                oE,
                                oM,
                                oC,
                                oK,
                                oI,
                                oL,
                            );
                            oF.lineTo(oy.getX(), oy.getY());
                        } else {
                            if (oQ[oS].indexOf("R:") == 0) {
                                var oA = lv.getDoubleValue(oD[2], 0);
                                var ou = gQ.convertPoint(
                                    oD[0],
                                    oD[1],
                                    oE,
                                    oM,
                                    oC,
                                    oK,
                                    oI,
                                    oL,
                                );
                                var ov = lv.getIntFromDouble(oA / oY);
                                var oB = new cG();
                                oB.setFill(true);
                                oB.setFillColor(oO);
                                oB.setX(ou.getX() - ov);
                                oB.setY(ou.getY() - ov);
                                oB.setRadiusX(ov);
                                oB.setRadiusY(ov);
                                oJ.getContent().getShapeList().add(oB);
                            }
                        }
                    }
                }
                oJ.getContent().getShapeList().add(oF);
            }
        }
        return true;
    };
    gQ.convertPoint = function (oB, oy, ox, ov, oI, ow, oE, ou) {
        var oD = lv.getDoubleValue(oE[0], 0);
        var oA = lv.getDoubleValue(oE[1], 0);
        var oC = lv.getDoubleValue(oB, 0);
        var oz = lv.getDoubleValue(oy, 0);
        var oH = oD / ou.getWidth();
        var oG = oA / ou.getHeight();
        var oJ = Math.max(oH, oG);
        if (oI && ow && oH < oG) {
            oI = false;
        }
        if (!ov) {
            oz = oA - oz;
        }
        if (ox) {
            oC = oD - oC;
        }
        if (oI) {
            var oF = ou.getHeight() - oA / oJ;
            if (oF > 0 && oz > oA / 2) {
                return new lo(ou.getX() + oC / oJ, ou.getY() + oz / oJ + oF);
            }
            return new lo(ou.getX() + oC / oJ, ou.getY() + oz / oJ);
        }
        if (ow) {
            var oF = ou.getWidth() - oD / oJ;
            if (oF > 0 && oC > oD / 2) {
                return new lo(ou.getX() + oC / oJ + oF, ou.getY() + oz / oJ);
            }
            return new lo(ou.getX() + oC / oJ, ou.getY() + oz / oJ);
        }
        return new lo(ou.getX() + oC / oH, ou.getY() + oz / oG);
    };
    gQ.drawLongDiv = function (ou, oC, ov, oz, oy, oD) {
        var ow = ")";
        var oA = new jL(oC.getX(), oC.getY(), oD, oC.getHeight(), 1);
        gQ.draw(ou, ow, oA, ov, true, null);
        var oE = 0;
        var oB = oC.getHeight() / 20;
        var ox = new jr(oy);
        ox.moveTo(oC.getX(), oC.getY() + oE);
        ox.lineTo(oC.getX() + oB + oC.getWidth() + oD - oz, oC.getY() + oE);
        ox.lineTo(
            oC.getX() + oB + oC.getWidth() + oD - oz,
            oC.getY() + oE + oz,
        );
        ox.lineTo(oC.getX() + 0.8 * oz, oC.getY() + oE + oz);
        ox.setWidth(lv.getIntFromDouble(oB + oC.getWidth() + oD - oz));
        ou.getContent().getShapeList().add(ox);
        return oD;
    };
    gQ.drawMadruwb = function (ow, ou, oy, ox) {
        var ov = lv.getCharFromHexCode("644");
        gQ.draw(ow, ov, ou, oy, true, null);
    };

    function lo(ov, ou) {
        this.pointX = 0;
        this.pointY = 0;
        this.pointX = lv.getIntFromDouble(ov);
        this.pointY = lv.getIntFromDouble(ou);
    }
    lo.prototype.getX = function () {
        return this.pointX;
    };
    lo.prototype.getY = function () {
        return this.pointY;
    };
    lo.prototype.setX = function (ou) {
        this.pointX = ou;
    };
    lo.prototype.setY = function (ou) {
        this.pointY = ou;
    };

    function jL(ox, ow, ou, oy, ov) {
        this.startX = 0;
        this.startY = 0;
        this.width = 0;
        this.height = 0;
        this.pIncrease = 1;
        this.startX = ox;
        this.startY = ow;
        this.width = ou;
        this.height = oy;
        this.pIncrease = ov;
    }
    jL.prototype.getX = function () {
        return this.startX;
    };
    jL.prototype.getY = function () {
        return this.startY;
    };
    jL.prototype.getWidth = function () {
        return this.width;
    };
    jL.prototype.getHeight = function () {
        return this.height;
    };
    jL.prototype.getpIncrease = function () {
        return this.pIncrease;
    };

    function fJ() {
        this.source;
        this.valign = 0;
        this.dLc = jS;
        this.dLc();
    }
    ga(fJ, jS);
    fJ.prototype.getSrc = function () {
        return this.source;
    };
    fJ.prototype.setSrc = function (ou) {
        this.source = ou;
    };
    fJ.prototype.getValign = function () {
        return this.valign;
    };
    fJ.prototype.setValign = function (ou) {
        this.valign = ou;
    };

    function jQ() {
        this.endX = 0;
        this.endY = 0;
        this.linethickness = 0;
        this.borderColor;
        this.type = "solid";
        this.dLc = jS;
        this.dLc();
    }
    ga(jQ, jS);
    jQ.prototype.getEndX = function () {
        return this.endX;
    };
    jQ.prototype.setEndX = function (ou) {
        this.endX = ou;
    };
    jQ.prototype.getEndY = function () {
        return this.endY;
    };
    jQ.prototype.setEndY = function (ou) {
        this.endY = ou;
    };
    jQ.prototype.getBorderColor = function () {
        return this.borderColor;
    };
    jQ.prototype.setBorderColor = function (ou) {
        this.borderColor = ou;
    };
    jQ.prototype.getType = function () {
        return this.type;
    };
    jQ.prototype.setType = function (ou) {
        this.type = ou;
    };
    jQ.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    jQ.prototype.setLinethickness = function (ou) {
        this.linethickness = ou;
    };
    jQ.prototype.moveAllOnX = function (ou) {
        jS.prototype.moveAllOnX.call(this, ou);
        this.endX = this.endX + ou;
    };
    jQ.prototype.moveAllOnY = function (ou) {
        jS.prototype.moveAllOnY.call(this, ou);
        this.endY = this.endY + ou;
    };
    jQ.prototype.getMinX = function () {
        if (this.getEndX() < this.getX()) {
            return this.getEndX();
        }
        return this.getX();
    };
    jQ.prototype.getMinY = function () {
        if (this.getEndY() < this.getY()) {
            return this.getEndY();
        }
        return this.getY();
    };

    function n8(ou) {
        this.type;
        this.patxX = 0;
        this.pathY = 0;
        this.pathX1 = 0;
        this.pathY1 = 0;
        this.type = ou;
    }
    n8.prototype.getType = function () {
        return this.type;
    };
    n8.prototype.getX = function () {
        return this.patxX;
    };
    n8.prototype.setX = function (ou) {
        this.patxX = ou;
    };
    n8.prototype.getY = function () {
        return this.pathY;
    };
    n8.prototype.setY = function (ou) {
        this.pathY = ou;
    };
    n8.prototype.getX1 = function () {
        return this.pathX1;
    };
    n8.prototype.setX1 = function (ou) {
        this.pathX1 = ou;
    };
    n8.prototype.getY1 = function () {
        return this.pathY1;
    };
    n8.prototype.setY1 = function (ou) {
        this.pathY1 = ou;
    };

    function jr(ou) {
        this.color;
        this.actions = new fM();
        this.rotate = null;
        this.color = ou;
        this.dLc = jS;
        this.dLc();
    }
    ga(jr, jS);
    jr.prototype.moveTo = function (ou, ow) {
        var ov = new n8("Move");
        ov.setX(ou);
        ov.setY(ow);
        this.actions.add(ov);
    };
    jr.prototype.curveTo = function (ou, oy, ov, ow) {
        var ox = new n8("Quad");
        ox.setX(ou);
        ox.setY(oy);
        ox.setX1(ov);
        ox.setY1(ow);
        this.actions.add(ox);
    };
    jr.prototype.lineTo = function (ou, ow) {
        var ov = new n8("Line");
        ov.setX(ou);
        ov.setY(ow);
        this.actions.add(ov);
    };
    jr.prototype.getColor = function () {
        return this.color;
    };
    jr.prototype.setColor = function (ou) {
        this.color = ou;
    };
    jr.prototype.getActions = function () {
        return this.actions;
    };
    jr.prototype.moveAllOnX = function (ow) {
        jS.prototype.moveAllOnX.call(this, ow);
        for (var ou = 0; ou < this.actions.size(); ou++) {
            var ov = this.actions.get(ou);
            ov.setX(ov.getX() + ow);
            ov.setX1(ov.getX1() + ow);
        }
    };
    jr.prototype.moveAllOnY = function (ow) {
        jS.prototype.moveAllOnY.call(this, ow);
        for (var ou = 0; ou < this.actions.size(); ou++) {
            var ov = this.actions.get(ou);
            ov.setY(ov.getY() + ow);
            ov.setY1(ov.getY1() + ow);
        }
    };
    jr.prototype.getRotate = function () {
        return this.rotate;
    };
    jr.prototype.setRotate = function (ou) {
        this.rotate = ou;
    };

    function g9(ou) {
        this.color;
        this.linethickness = 1;
        this.actions = new fM();
        this.color = ou;
        this.dLc = jS;
        this.dLc();
    }
    ga(g9, jS);
    g9.prototype.addPoint = function (ou, ow) {
        var ov = new n8("Line");
        ov.setX(ou);
        ov.setY(ow);
        this.actions.add(ov);
    };
    g9.prototype.getColor = function () {
        return this.color;
    };
    g9.prototype.setColor = function (ou) {
        this.color = ou;
    };
    g9.prototype.getActions = function () {
        return this.actions;
    };
    g9.prototype.moveAllOnX = function (ow) {
        jS.prototype.moveAllOnX.call(this, ow);
        for (var ou = 0; ou < this.actions.size(); ou++) {
            var ov = this.actions.get(ou);
            ov.setX(ov.getX() + ow);
            ov.setX1(ov.getX1() + ow);
        }
    };
    g9.prototype.moveAllOnY = function (ow) {
        jS.prototype.moveAllOnY.call(this, ow);
        for (var ou = 0; ou < this.actions.size(); ou++) {
            var ov = this.actions.get(ou);
            ov.setY(ov.getY() + ow);
            ov.setY1(ov.getY1() + ow);
        }
    };
    g9.prototype.getLength = function () {
        return this.actions.size();
    };
    g9.prototype.getYArray = function (ou) {
        var ow = new Array(this.getLength());
        for (var ov = 0; ov < this.actions.size(); ov++) {
            var ox = this.actions.get(ov);
            ow[ov] = lv.getIntFromDouble(ox.getY() + ou);
        }
        return ow;
    };
    g9.prototype.getXArray = function (ou) {
        var ow = new Array(this.getLength());
        for (var ov = 0; ov < this.actions.size(); ov++) {
            var ox = this.actions.get(ov);
            ow[ov] = lv.getIntFromDouble(ox.getX() + ou);
        }
        return ow;
    };
    g9.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    g9.prototype.setLinethickness = function (ou) {
        this.linethickness = this.linethickness;
    };

    function j3() {
        this.linethickness = 0;
        this.borderColor;
        this.rondedCorner = 0;
        this.fill = false;
        this.fillColor;
        this.dLc = jS;
        this.dLc();
    }
    ga(j3, jS);
    j3.prototype.isFill = function () {
        return this.fill;
    };
    j3.prototype.setFill = function (ou) {
        this.fill = ou;
    };
    j3.prototype.getLinethickness = function () {
        return this.linethickness;
    };
    j3.prototype.setLinethickness = function (ou) {
        this.linethickness = ou;
    };
    j3.prototype.getBorderColor = function () {
        return this.borderColor;
    };
    j3.prototype.setBorderColor = function (ou) {
        this.borderColor = ou;
    };
    j3.prototype.getFillColor = function () {
        return this.fillColor;
    };
    j3.prototype.setFillColor = function (ou) {
        this.fillColor = ou;
    };
    j3.prototype.getRondedCorner = function () {
        return this.rondedCorner;
    };
    j3.prototype.setRondedCorner = function (ou) {
        this.rondedCorner = ou;
    };

    function gU(ov, ou) {
        this.rotation = 0;
        this.centerX = 0;
        this.centerY = 0;
        this.realWidth = 0;
        this.realHeight = 0;
        this.centerX = ov;
        this.centerY = ou;
    }
    gU.prototype.getCenterX = function () {
        return this.centerX;
    };
    gU.prototype.getCenterY = function () {
        return this.centerY;
    };
    gU.prototype.getRotation = function () {
        return this.rotation;
    };
    gU.prototype.setRotation = function (ou) {
        this.rotation = ou;
    };
    gU.prototype.getRealWidth = function () {
        return this.realWidth;
    };
    gU.prototype.setRealWidth = function (ou) {
        this.realWidth = ou;
    };
    gU.prototype.getRealHeight = function () {
        return this.realHeight;
    };
    gU.prototype.setRealHeight = function (ou) {
        this.realHeight = ou;
    };

    function ip() {
        this.unicodeString;
        this.font;
        this.color;
        this.fontSize = 0;
        this.fontAscent = 0;
        this.flipVertical = false;
        this.shiftY = 0;
        this.shiftX = 0;
        this.superscriptline = 0;
        this.baseBottomLine = 0;
        this.axisLine = 0;
        this.decimalPoint;
        this.decimalpositionX = -1;
        this.dLc = jS;
        this.dLc();
    }
    ga(ip, jS);
    ip.prototype.getText = function () {
        return this.unicodeString.toString();
    };
    ip.prototype.getFont = function () {
        return this.font;
    };
    ip.prototype.setFont = function (ou) {
        this.font = ou;
    };
    ip.prototype.getFontSize = function () {
        return this.fontSize;
    };
    ip.prototype.setFontSize = function (ou) {
        this.fontSize = ou;
    };
    ip.prototype.getFontAscent = function () {
        return this.fontAscent;
    };
    ip.prototype.setFontAscent = function (ou) {
        this.fontAscent = ou;
    };
    ip.prototype.getShiftY = function () {
        return this.shiftY;
    };
    ip.prototype.setShiftY = function (ou) {
        this.shiftY = ou;
    };
    ip.prototype.getShiftX = function () {
        return this.shiftX;
    };
    ip.prototype.setShiftX = function (ou) {
        this.shiftX = ou;
    };
    ip.prototype.getColor = function () {
        return this.color;
    };
    ip.prototype.setColor = function (ou) {
        this.color = ou;
    };
    ip.prototype.getSuperscriptline = function () {
        return this.superscriptline;
    };
    ip.prototype.setSuperscriptline = function (ou) {
        this.superscriptline = ou;
    };
    ip.prototype.isFlipVertical = function () {
        return this.flipVertical;
    };
    ip.prototype.setFlipVertical = function (ou) {
        this.flipVertical = ou;
    };
    ip.prototype.getAxisLine = function () {
        return this.axisLine;
    };
    ip.prototype.setAxisLine = function (ou) {
        this.axisLine = ou;
    };
    ip.prototype.getBaseBottomLine = function () {
        return this.baseBottomLine;
    };
    ip.prototype.setBaseBottomLine = function (ou) {
        this.baseBottomLine = ou;
    };
    ip.prototype.getDecimalpositionX = function () {
        return this.decimalpositionX;
    };
    ip.prototype.setDecimalpositionX = function (ou) {
        this.decimalpositionX = ou;
    };
    ip.prototype.getDecimalPoint = function () {
        return this.decimalPoint;
    };
    ip.prototype.setDecimalPoint = function (ou) {
        this.decimalPoint = ou;
    };
    ip.prototype.getUnicodeText = function () {
        return this.unicodeString;
    };
    ip.prototype.setUnicodeText = function (ou) {
        this.unicodeString = ou;
    };

    function cV() {
        this.canSymetric = false;
        this.heightToStretchWithBorder;
        this.heightToStretchNoBorder;
        this.axisForSymetric;
        this.maxHeight;
        this.maxDepth;
    }
    cV.prototype.copy = function () {
        var ou = new cV();
        ou.setCanSymetric(this.canSymetric);
        ou.setHeightToStretchNoBorder(this.heightToStretchNoBorder);
        ou.setHeightToStretchWithBorder(this.heightToStretchWithBorder);
        ou.setAxisForSymetric(this.axisForSymetric);
        ou.setMaxHeight(this.maxHeight);
        ou.setMaxDepth(this.maxDepth);
        return ou;
    };
    cV.prototype.getHeightToStretchWithBorder = function () {
        return this.heightToStretchWithBorder;
    };
    cV.prototype.setHeightToStretchWithBorder = function (ou) {
        this.heightToStretchWithBorder = ou;
    };
    cV.prototype.getHeightToStretchNoBorder = function () {
        return this.heightToStretchNoBorder;
    };
    cV.prototype.setHeightToStretchNoBorder = function (ou) {
        this.heightToStretchNoBorder = ou;
    };
    cV.prototype.isCanSymetric = function () {
        return this.canSymetric;
    };
    cV.prototype.setCanSymetric = function (ou) {
        this.canSymetric = ou;
    };
    cV.prototype.getAxisForSymetric = function () {
        return this.axisForSymetric;
    };
    cV.prototype.setAxisForSymetric = function (ou) {
        this.axisForSymetric = ou;
    };
    cV.prototype.getMaxHeight = function () {
        return this.maxHeight;
    };
    cV.prototype.setMaxHeight = function (ou) {
        this.maxHeight = ou;
    };
    cV.prototype.getMaxDepth = function () {
        return this.maxDepth;
    };
    cV.prototype.setMaxDepth = function (ou) {
        this.maxDepth = ou;
    };

    function cn() {
        this.isMathml = false;
        this.value = null;
    }
    cn.prototype.getIsMathml = function () {
        return this.isMathml;
    };
    cn.prototype.setIsMathml = function (ou) {
        this.isMathml = ou;
    };
    cn.prototype.getValue = function () {
        return this.value;
    };
    cn.prototype.setValue = function (ou) {
        this.value = ou;
    };

    function fE() {}
    fE.convertToMathML = function (ox, oz) {
        var oD = new cn();
        var oB = e3.convertToMathML("$" + ox + "$");
        if (oB == null) {
            oD.setIsMathml(false);
            return oD;
        }
        if (oB.indexOf("<math") == 0) {
            var oA = oB.indexOf(">");
            oB = "<mrow" + oB.substring(oA, oB.length);
            oB = W.replace(oB, "</math>", "</mrow>");
        }
        var oy = ay.split(",");
        for (var ow = 0; ow < oy.length; ow++) {
            var oE = oy[ow];
            if (oB.indexOf("<" + oE) > -1) {
                oD.setIsMathml(true);
                var ov = fe.getBeanNotMath(oB, oz);
                if (oB.indexOf("<mrow") == 0) {
                    if (ov.getChildren().size() == 1) {
                        var oC = ov.getChildren().get(0);
                        if (oC.getChildren().size() == 1) {
                            var ou = oC.getChildren().get(0);
                            oD.setValue(ou);
                            return oD;
                        }
                    }
                }
                oD.setValue(ov);
                return oD;
            }
        }
        oD.setIsMathml(false);
        return oD;
    };

    function g0(ou, ow, ov) {
        this.config;
        this.page;
        this.id;
        this.name;
        this.code;
        this.url;
        this.init = false;
        this.name = ou;
        this.code = ow;
        this.url = ov;
    }
    g0.prototype.getName = function () {
        return this.name;
    };
    g0.prototype.setName = function (ou) {
        this.name = ou;
    };
    g0.prototype.getCode = function () {
        return this.code;
    };
    g0.prototype.setCode = function (ou) {
        this.code = ou;
    };
    g0.prototype.getUrl = function () {
        return this.url;
    };
    g0.prototype.setUrl = function (ou) {
        this.url = ou;
    };
    g0.prototype.initOneTime = function (ow, ov, ou) {
        this.config = ow;
        this.page = ov;
        this.id = ou;
    };
    g0.prototype.draw = function () {};
    g0.prototype.remove = function () {};
    g0.prototype.getCanvas = function () {};
    g0.prototype.update = function () {};
    g0.prototype.getImage = function (ou, ov, ow) {
        return null;
    };
    g0.prototype.setDim = function (ou, ov) {};
    g0.prototype.getConfig = function () {
        return this.config;
    };
    g0.prototype.getPage = function () {
        return this.page;
    };
    g0.prototype.getId = function () {
        return this.id;
    };
    g0.prototype.isInit = function () {
        return this.init;
    };
    g0.prototype.setInit = function (ou) {
        this.init = ou;
    };
    g0.prototype.getImageOrAdd = function (ow, oD, oE, ox) {
        var oz = null;
        oz = ox.toDataURL(oD, oE);
        if (this.config.getL().isF() || this.config.getL().isE()) {
            var ov = document.createElement("canvas");
            ov.height = ox.height;
            ov.width = ox.width;
            var ou = ov.getContext("2d");
            ou.globalAlpha = 0.25;
            var oy = parseInt(ov.width / 10, 10);
            var oB = parseInt(ov.width / 30, 10);
            ou.font = oy + "px Comic Sans MS";
            ou.fillStyle = "red";
            var oC = ou.measureText(this.config.getL().getW());
            var oA = oC.width;
            ou.fillText(
                this.config.getL().getW(),
                (ov.width - oA) / 2,
                (ov.height + oy) / 2,
            );
            ou.globalAlpha = 0.5;
            ou.font = oB + "px Comic Sans MS";
            var oC = ou.measureText(this.config.getL().getW());
            var oA = oC.width;
            ou.fillText(this.config.getL().getS(), ov.width - oA, ov.height);
            ou.globalAlpha = 1;
            ou.drawImage(ox, 0, 0);
            oz = ov.toDataURL(oD, oE);
        }
        return oz;
    };

    function ls() {
        this.id;
        this.element;
        this.type = "button";
        this.visible = true;
        this.disabled = false;
        this.state = false;
        this.value;
    }
    ls.prototype.getId = function () {
        return this.id;
    };
    ls.prototype.setId = function (ou) {
        this.id = ou;
    };
    ls.prototype.isVisible = function () {
        return this.visible;
    };
    ls.prototype.setVisible = function (ou) {
        this.visible = ou;
    };
    ls.prototype.isDisabled = function () {
        return this.disabled;
    };
    ls.prototype.setDisabled = function (ou) {
        this.disabled = ou;
        if ("selectmenu" == this.type) {
            this.element.attr("disabled", ou);
        } else {
            if ("spectrum" == this.type) {
                if (ou) {
                    this.element.spectrum("disable");
                } else {
                    this.element.spectrum("enable");
                }
            } else {
                r.setDisabledForButton(this.element, this.disabled);
            }
        }
    };
    ls.prototype.isState = function () {
        return this.state;
    };
    ls.prototype.setState = function (ou) {
        this.state = ou;
        if ("selectmenu" == this.type) {
            return;
        }
        r.setStateForButton(this.element, this.state);
    };
    ls.prototype.getElement = function () {
        return this.element;
    };
    ls.prototype.setElement = function (ou) {
        this.element = ou;
    };
    ls.prototype.getValue = function () {
        return this.value;
    };
    ls.prototype.setValue = function (ou) {
        this.value = ou;
    };
    ls.prototype.getType = function () {
        return this.type;
    };
    ls.prototype.setType = function (ou) {
        this.type = ou;
    };

    function ok() {
        this.show = true;
        this.splitNumber = 5;
        this.nameLocation = "end";
        this.trigonometric = false;
        this.nameTextStyle = new ek();
        this.axisLine = new jm();
        this.axisTick = new kw();
        this.minorTick = new cQ();
        this.splitLine = new gH();
        this.minorSplitLine = new hK();
        this.axisLabel = new mk();
        this.nameTextStyle.setFontSize(12);
    }
    ok.prototype.isShow = function () {
        return this.show;
    };
    ok.prototype.setShow = function (ou) {
        this.show = ou;
    };
    ok.prototype.getNameTextStyle = function () {
        return this.nameTextStyle;
    };
    ok.prototype.getNameLocation = function () {
        return this.nameLocation;
    };
    ok.prototype.setNameLocation = function (ou) {
        this.nameLocation = ou;
    };
    ok.prototype.getAxisLine = function () {
        return this.axisLine;
    };
    ok.prototype.getAxisTick = function () {
        return this.axisTick;
    };
    ok.prototype.getSplitNumber = function () {
        return this.splitNumber;
    };
    ok.prototype.setSplitNumber = function (ou) {
        this.splitNumber = ou;
    };
    ok.prototype.getMinorTick = function () {
        return this.minorTick;
    };
    ok.prototype.getSplitLine = function () {
        return this.splitLine;
    };
    ok.prototype.getMinorSplitLine = function () {
        return this.minorSplitLine;
    };
    ok.prototype.isTrigonometric = function () {
        return this.trigonometric;
    };
    ok.prototype.setTrigonometric = function (ou) {
        this.trigonometric = ou;
        this.axisLabel.setTrigFormatter(ou);
    };

    function cX() {
        this.position = "bottom";
        this.name = "x";
        this.nameLocation = "end";
        this.minInterval = null;
        this.maxInterval = null;
        this.dLd = ok;
        this.dLd();
    }
    ga(cX, ok);
    cX.prototype.init = function (ou) {
        this.getNameTextStyle().init();
        this.getNameTextStyle().setFontSize(12);
        if (
            ou._theme != null &&
            ou._theme.categoryAxis != null &&
            ou._theme.categoryAxis.nameTextStyle != null
        ) {
            this.getNameTextStyle().load(ou._theme.categoryAxis.nameTextStyle);
        }
        this.getAxisLine().init();
        if (
            ou._theme != null &&
            ou._theme.categoryAxis != null &&
            ou._theme.categoryAxis.axisLine != null
        ) {
            this.getAxisLine().load(ou._theme.categoryAxis.axisLine);
        }
        this.getAxisTick().init();
        if (
            ou._theme != null &&
            ou._theme.categoryAxis != null &&
            ou._theme.categoryAxis.axisTick != null
        ) {
            this.getAxisTick().load(ou._theme.categoryAxis.axisTick);
        }
        this.getMinorTick().init();
        if (
            ou._theme != null &&
            ou._theme.categoryAxis != null &&
            ou._theme.categoryAxis.minorTick != null
        ) {
            this.getMinorTick().load(ou._theme.categoryAxis.minorTick);
        }
        this.getSplitLine().init();
        if (
            ou._theme != null &&
            ou._theme.categoryAxis != null &&
            ou._theme.categoryAxis.splitLine != null
        ) {
            this.getSplitLine().load(ou._theme.categoryAxis.splitLine);
        }
        this.getMinorSplitLine().init();
        if (
            ou._theme != null &&
            ou._theme.categoryAxis != null &&
            ou._theme.categoryAxis.minorSplitLine != null
        ) {
            this.getMinorSplitLine().load(
                ou._theme.categoryAxis.minorSplitLine,
            );
        }
    };
    cX.prototype.getPosition = function () {
        return this.position;
    };
    cX.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    cX.prototype.getName = function () {
        return this.name;
    };
    cX.prototype.setName = function (ou) {
        this.name = ou;
    };
    cX.prototype.getNameLocation = function () {
        return this.nameLocation;
    };
    cX.prototype.setNameLocation = function (ou) {
        this.nameLocation = ou;
    };
    cX.prototype.setTrigonometric = function (ou) {
        ok.prototype.setTrigonometric.call(this, ou);
        if (ou) {
            this.minInterval = 1.57079632679;
            this.maxInterval = 1.57079632679;
        } else {
            this.minInterval = null;
            this.maxInterval = null;
        }
    };

    function u() {
        this.show = true;
        this.type = "slider";
        this.filterMode = "none";
        this.startValue = 0;
        this.endValue = 0;
        this.xAxisIndex;
        this.top = "auto";
        this.left = "center";
        this.right = "auto";
        this.bottom = "10";
        this.xAxisIndex = [0];
    }
    u.prototype.getShow = function () {
        return this.show;
    };
    u.prototype.setShow = function (ou) {
        this.show = ou;
    };
    u.prototype.getType = function () {
        return this.type;
    };
    u.prototype.setType = function (ou) {
        this.type = ou;
    };
    u.prototype.getFilterMode = function () {
        return this.filterMode;
    };
    u.prototype.setFilterMode = function (ou) {
        this.filterMode = ou;
    };
    u.prototype.getStartValue = function () {
        return this.startValue;
    };
    u.prototype.setStartValue = function (ou) {
        this.startValue = ou;
    };
    u.prototype.getEndValue = function () {
        return this.endValue;
    };
    u.prototype.setEndValue = function (ou) {
        this.endValue = ou;
    };
    u.prototype.getTop = function () {
        return this.top;
    };
    u.prototype.setTop = function (ou) {
        this.top = ou;
    };
    u.prototype.getLeft = function () {
        return this.left;
    };
    u.prototype.setLeft = function (ou) {
        this.left = ou;
    };
    u.prototype.getRight = function () {
        return this.right;
    };
    u.prototype.setRight = function (ou) {
        this.right = ou;
    };
    u.prototype.getBottom = function () {
        return this.bottom;
    };
    u.prototype.setBottom = function (ou) {
        this.bottom = ou;
    };

    function mq() {
        this.position = "left";
        this.name = "y";
        this.dLd = ok;
        this.dLd();
    }
    ga(mq, ok);
    mq.prototype.init = function (ou) {
        this.getNameTextStyle().init();
        this.getNameTextStyle().setFontSize(12);
        if (
            ou._theme != null &&
            ou._theme.valueAxis != null &&
            ou._theme.valueAxis.nameTextStyle != null
        ) {
            this.getNameTextStyle().load(ou._theme.valueAxis.nameTextStyle);
        }
        this.getAxisLine().init();
        if (
            ou._theme != null &&
            ou._theme.valueAxis != null &&
            ou._theme.valueAxis.axisLine != null
        ) {
            this.getAxisLine().load(ou._theme.valueAxis.axisLine);
        }
        this.getAxisTick().init();
        if (
            ou._theme != null &&
            ou._theme.valueAxis != null &&
            ou._theme.valueAxis.axisTick != null
        ) {
            this.getAxisTick().load(ou._theme.valueAxis.axisTick);
        }
        this.getMinorTick().init();
        if (
            ou._theme != null &&
            ou._theme.valueAxis != null &&
            ou._theme.valueAxis.minorTick != null
        ) {
            this.getMinorTick().load(ou._theme.valueAxis.minorTick);
        }
        this.getSplitLine().init();
        if (
            ou._theme != null &&
            ou._theme.valueAxis != null &&
            ou._theme.valueAxis.splitLine != null
        ) {
            this.getSplitLine().load(ou._theme.valueAxis.splitLine);
        }
        this.getMinorSplitLine().init();
        if (
            ou._theme != null &&
            ou._theme.valueAxis != null &&
            ou._theme.valueAxis.minorSplitLine != null
        ) {
            this.getMinorSplitLine().load(ou._theme.valueAxis.minorSplitLine);
        }
    };
    mq.prototype.getPosition = function () {
        return this.position;
    };
    mq.prototype.setPosition = function (ou) {
        this.position = ou;
    };
    mq.prototype.getName = function () {
        return this.name;
    };
    mq.prototype.setName = function (ou) {
        this.name = ou;
    };

    function kx() {
        this.show = true;
        this.type = "slider";
        this.filterMode = "none";
        this.startValue = 0;
        this.endValue = 0;
        this.yAxisIndex;
        this.top = "middle";
        this.left = "auto";
        this.right = "10";
        this.bottom = "auto";
        this.yAxisIndex = [0];
    }
    kx.prototype.getShow = function () {
        return this.show;
    };
    kx.prototype.setShow = function (ou) {
        this.show = ou;
    };
    kx.prototype.getType = function () {
        return this.type;
    };
    kx.prototype.setType = function (ou) {
        this.type = ou;
    };
    kx.prototype.getFilterMode = function () {
        return this.filterMode;
    };
    kx.prototype.setFilterMode = function (ou) {
        this.filterMode = ou;
    };
    kx.prototype.getStartValue = function () {
        return this.startValue;
    };
    kx.prototype.setStartValue = function (ou) {
        this.startValue = ou;
    };
    kx.prototype.getEndValue = function () {
        return this.endValue;
    };
    kx.prototype.setEndValue = function (ou) {
        this.endValue = ou;
    };
    kx.prototype.getTop = function () {
        return this.top;
    };
    kx.prototype.setTop = function (ou) {
        this.top = ou;
    };
    kx.prototype.getLeft = function () {
        return this.left;
    };
    kx.prototype.setLeft = function (ou) {
        this.left = ou;
    };
    kx.prototype.getRight = function () {
        return this.right;
    };
    kx.prototype.setRight = function (ou) {
        this.right = ou;
    };
    kx.prototype.getBottom = function () {
        return this.bottom;
    };
    kx.prototype.setBottom = function (ou) {
        this.bottom = ou;
    };

    function cm() {}

    function fs() {
        this.color;
        this.color = [
            "#313695",
            "#4575b4",
            "#74add1",
            "#abd9e9",
            "#e0f3f8",
            "#ffffbf",
            "#fee090",
            "#fdae61",
            "#f46d43",
            "#d73027",
            "#a50026",
        ];
    }

    function ne() {
        this.type = "surface";
        this.data;
        this.data = [];
    }
    ne.prototype.clearData = function () {
        this.data = [];
    };
    ne.prototype.add = function (ou, ow, ov) {
        this.data.push([ou, ow, ov]);
    };
    ne.prototype.addParam = function (ow, ov, ou, oy, ox) {
        this.data.push([ou, oy, ox, ow, ov]);
    };
    ne.prototype.addBlank = function () {
        this.data.push(["-"]);
    };

    function cK() {
        this.show = false;
        this.dimension = 2;
        this.min = -1;
        this.max = 1;
        this.inRange = new fs();
    }

    function dG() {}

    function lW() {
        this.name = "Y";
    }

    function ht() {
        this.name = "X";
    }

    function cU() {}

    function lI() {
        this.theme = "default";
        this.lastTheme = "default";
        this.coordinate = "cartesian2d";
        this.option2D = new c1();
        this.option3D = new aq();
        this.optionPolar = new or();
        this.domainDataBean = new on();
        this.listFunctions = new fM();
        this.activeChartFunctionBean;
        this.index = -1;
        var ov = new u();
        this.option2D.addDataZoomX(ov);
        var ou = new kx();
        this.option2D.addDataZoomY(ou);
        this.optionPolar.setTitle(this.option2D.getTitle());
        this.optionPolar.setLegend(this.option2D.getLegend());
    }
    lI.prototype.init = function (ou) {
        if (this.coordinate == "cartesian2d") {
            this.option2D.init(ou);
        } else {
            if (this.coordinate == "polar") {
                this.optionPolar.init(ou);
            } else {
                if (this.coordinate == "cartesian3d") {
                    this.option3D.init(ou);
                }
            }
        }
    };
    lI.prototype.updateData = function () {
        if (this.coordinate == "cartesian2d") {
            var ov = this.option2D.getDataZoomX();
            ov.setType(this.domainDataBean.getZoomType());
            ov.setStartValue(this.domainDataBean.getMinZoomX());
            ov.setEndValue(this.domainDataBean.getMaxZoomX());
            var ou = this.option2D.getDataZoomY();
            ou.setType(this.domainDataBean.getZoomType());
            ou.setStartValue(this.domainDataBean.getMinZoomY());
            ou.setEndValue(this.domainDataBean.getMaxZoomY());
            this.option2D
                .getxAxis()
                .setTrigonometric(this.domainDataBean.isTrigonometric());
        }
        this.calculateData();
    };
    lI.prototype.calculateData = function () {
        var oN =
            (this.domainDataBean.getMaxZoomX() -
                this.domainDataBean.getMinZoomX()) /
            this.domainDataBean.getNumbrePoints();
        this.option2D.clearSerie();
        this.option2D.getLegend().clearData();
        this.optionPolar.clearSerie();
        this.optionPolar.getLegend().clearData();
        this.option3D.clearData();
        for (var oG = 0; oG < this.listFunctions.size(); oG++) {
            var oP = this.listFunctions.get(oG);
            oP.getSeriesData().clearData();
            oP.getSeriesData().setCoordinateSystem(this.coordinate);
            oP.getSeriesData().setName(oP.getName());
            var oL = oP.getGraphFunctionBean().getVariables();
            var oD = oP.getGraphFunctionBean().getVariableMap();
            var ow = oP.getMapConstant();
            if (this.coordinate == "cartesian2d") {
                oP.getSeriesData().clearData();
                var oM = this.domainDataBean.getMaxY();
                var oO = this.domainDataBean.getMinY();
                var oA = 0;
                var oQ = null;
                var oJ = this.domainDataBean.getMinX();
                var ov = this.domainDataBean.getMaxX();
                for (
                    var oF = oJ;
                    oF <= ov;
                    oF = oF + this.getStep(oA, oO, oM, oP, oN)
                ) {
                    var ox = this.getFirstVariable(oL);
                    oD.setAttribute(ox, oF + "");
                    var oC = oP.getGraphFunctionBean().calculateResult(oD, ow);
                    if (!oC.isError()) {
                        if (
                            oC.getValue() >= this.domainDataBean.getMinY() &&
                            oC.getValue() <= this.domainDataBean.getMaxY()
                        ) {
                            oP.getSeriesData().add(oF, oC.getValue());
                        } else {
                            oP.getSeriesData().addEmpty2D(oF);
                        }
                        if (oQ != null) {
                            oA = Math.abs(oC.getValue() - oQ.getValue());
                        }
                        oQ = oC;
                    } else {
                        oQ = null;
                    }
                }
                this.option2D.addSerie(oP.getSeriesData());
                this.option2D.getLegend().addData(oP.getName());
            } else {
                if (this.coordinate == "polar") {
                    oP.getSeriesData().clearData();
                    var oJ = this.domainDataBean.getMinPolarX();
                    var ov = this.domainDataBean.getMaxPolarX();
                    for (var oF = oJ; oF < ov; oF = oF + 1) {
                        var oy = (oF / 180) * Math.PI;
                        var ox = this.getFirstVariable(oL);
                        oD.setAttribute(ox, oy + "");
                        var oC = oP
                            .getGraphFunctionBean()
                            .calculateResult(oD, ow);
                        if (!oC.isError()) {
                            var oK = oF % 360;
                            if (
                                oC.getValue() >=
                                    this.domainDataBean.getMinY() &&
                                oC.getValue() <= this.domainDataBean.getMaxY()
                            ) {
                                oP.getSeriesData().add(oC.getValue(), oK);
                            } else {
                                oP.getSeriesData().addEmptyPolar(oK);
                            }
                        }
                    }
                    this.optionPolar.addSerie(oP.getSeriesData());
                    this.optionPolar.getLegend().addData(oP.getName());
                } else {
                    if (this.coordinate == "cartesian3d") {
                        var oB = new ne();
                        var oJ = this.domainDataBean.getMinZoomX();
                        var ov = this.domainDataBean.getMaxZoomX();
                        var oI = this.domainDataBean.getMinZoomY();
                        var ou = this.domainDataBean.getMaxZoomY();
                        for (var oF = 0; oF < 50; oF = oF + 1) {
                            var oS = oJ + (oF * (ov - oJ)) / 50;
                            oS = oS.toFixed(4);
                            for (var oE = 0; oE < 50; oE = oE + 1) {
                                var oR = oI + (oE * (ou - oI)) / 50;
                                oR = oR.toFixed(4);
                                var ox = this.getFirstVariable(oL);
                                oD.setAttribute(ox, oS + "");
                                var oH = this.getSecondVariable(oL);
                                oD.setAttribute(oH, oR + "");
                                var oC = oP
                                    .getGraphFunctionBean()
                                    .calculateResult(oD, ow);
                                if (!oC.isError()) {
                                    var oz = oC.getValue();
                                    oz = oz.toFixed(4);
                                    oB.add(oR, oS, oz);
                                }
                            }
                        }
                        this.option3D.add(oB);
                    }
                }
            }
        }
    };
    lI.prototype.getFirstVariable = function (ou) {
        if (ou == null || ou.trim().length == 0) {
            return "x";
        }
        var ov = ou.split(",");
        return ov[0];
    };
    lI.prototype.getSecondVariable = function (ou) {
        if (ou == null || ou.trim().length == 0) {
            return "y";
        }
        var ov = ou.split(",");
        if (ov.length < 2) {
            return "y";
        }
        return ov[1];
    };
    lI.prototype.getStep = function (oz, oA, oy, ov, ox) {
        if (ov.getSeriesData().getType() == "bar") {
            return this.getFunctionStep(ov, ox);
        }
        var ow = this.getFunctionStep(ov, ox);
        var ou = oy - oA;
        if (oz > ou / 100) {
            return ow / 10;
        }
        return ow;
    };
    lI.prototype.getFunctionStep = function (ou, ov) {
        if (ou.getSeriesData().getType() == "bar") {
            if (ou.getStepBar() == -1) {
                return ov;
            }
            return ou.getStepBar();
        }
        if (ou.getStepLine() == -1) {
            return ov;
        }
        return ou.getStepLine();
    };
    lI.prototype.addFunction = function (ox) {
        var ow = new fe(new he());
        var ou = ow.createBeans(ox, false);
        var oy = new c0();
        oy.setFixVariableNumber(this.getFixVariableNumber());
        oy.loadDataFromMathml(ox);
        ou.setVariables(oy.getVariables());
        ou.setName(ou.getName() + (this.listFunctions.size() + 1));
        var ov = new d();
        ov.setGraphFunctionBean(ou, ox);
        this.listFunctions.add(ov);
        this.setActiveChartFunctionBean(this.listFunctions.size() - 1);
        return ou;
    };
    lI.prototype.updateFunction = function (ox, ow) {
        var ov = new fe(new he());
        var ou = ov.createBeans(ow, false);
        var oy = new c0();
        oy.setFixVariableNumber(this.getFixVariableNumber());
        oy.loadDataFromMathml(ow);
        ou.setVariables(oy.getVariables());
        ou.setName(ou.getName() + (this.listFunctions.size() + 1));
        ox.setGraphFunctionBean(ou, ow);
        ox.setMapConstant(ox.getGraphFunctionBean().getConstantMap());
        return ou;
    };
    lI.prototype.updateFunctions = function () {
        for (var ov = 0; ov < this.listFunctions.size(); ov++) {
            var ou = this.listFunctions.get(ov);
            var ow = new c0();
            ow.setFixVariableNumber(this.getFixVariableNumber());
            ow.loadDataFromMathml(ou.getMathml());
            ou.getGraphFunctionBean().setVariables(ow.getVariables());
            ou.setMapConstant(ou.getGraphFunctionBean().getConstantMap());
        }
    };
    lI.prototype.setActiveChartFunctionBean = function (ou) {
        if (ou >= 0 && ou < this.listFunctions.size()) {
            this.activeChartFunctionBean = this.listFunctions.get(ou);
            this.index = ou;
        } else {
            this.activeChartFunctionBean = null;
            this.index = -1;
        }
    };
    lI.prototype.removeActiveChartFunctionBean = function () {
        if (this.index >= 0 && this.index < this.listFunctions.size()) {
            this.listFunctions.remove(this.index);
        }
        this.index = -1;
        this.activeChartFunctionBean = null;
    };
    lI.prototype.getDomainDataBean = function () {
        return this.domainDataBean;
    };
    lI.prototype.getListFunctions = function () {
        return this.listFunctions;
    };
    lI.prototype.getTheme = function () {
        return this.theme;
    };
    lI.prototype.setTheme = function (ou) {
        this.theme = ou;
    };
    lI.prototype.getActiveChartFunctionBean = function () {
        return this.activeChartFunctionBean;
    };
    lI.prototype.getLastTheme = function () {
        return this.lastTheme;
    };
    lI.prototype.setLastTheme = function (ou) {
        this.lastTheme = ou;
    };
    lI.prototype.getCoordinate = function () {
        return this.coordinate;
    };
    lI.prototype.setCoordinate = function (ou) {
        this.coordinate = ou;
    };
    lI.prototype.getOption2D = function () {
        return this.option2D;
    };
    lI.prototype.getOption3D = function () {
        return this.option3D;
    };
    lI.prototype.getOptionPolar = function () {
        return this.optionPolar;
    };
    lI.prototype.isCartesian2D = function () {
        return "cartesian2d" == this.coordinate;
    };
    lI.prototype.isCartesian3D = function () {
        return "cartesian3d" == this.coordinate;
    };
    lI.prototype.isPolar = function () {
        return "polar" == this.coordinate;
    };
    lI.prototype.getFixVariableNumber = function () {
        if (this.isCartesian3D()) {
            return 2;
        }
        return 1;
    };

    function d() {
        this.mathml = null;
        this.graphFunctionBean;
        this.name;
        this.seriesData = new gC();
        this.mapConstant;
        this.stepLine = -1;
        this.stepBar = -1;
    }
    d.prototype.getGraphFunctionBean = function () {
        return this.graphFunctionBean;
    };
    d.prototype.setGraphFunctionBean = function (ov, ou) {
        this.graphFunctionBean = ov;
        this.mathml = ou;
        this.mapConstant = ov.getConstantMap();
    };
    d.prototype.getName = function () {
        if (this.name != null) {
            return this.name;
        }
        return this.graphFunctionBean.toString(this.mapConstant);
    };
    d.prototype.getShortName = function () {
        var ou = this.getName();
        if (ou.length > 12) {
            return ou.substring(0, 12) + "...";
        }
        return ou;
    };
    d.prototype.setName = function (ou) {
        this.name = ou;
    };
    d.prototype.getSeriesData = function () {
        return this.seriesData;
    };
    d.prototype.getMapConstant = function () {
        return this.mapConstant;
    };
    d.prototype.setMapConstant = function (ou) {
        this.mapConstant = ou;
    };
    d.prototype.getMathml = function () {
        return this.mathml;
    };
    d.prototype.getStepLine = function () {
        return this.stepLine;
    };
    d.prototype.setStepLine = function (ou) {
        this.stepLine = ou;
    };
    d.prototype.getStepBar = function () {
        return this.stepBar;
    };
    d.prototype.setStepBar = function (ou) {
        this.stepBar = ou;
    };

    function k5() {
        this.origin = "auto";
    }
    k5.prototype.getOrigin = function () {
        return this.origin;
    };
    k5.prototype.setOrigin = function (ou) {
        this.origin = ou;
    };

    function mk() {
        this.formatter = null;
    }
    mk.prototype.setTrigFormatter = function (ou) {
        if (ou) {
            this.formatter = function (ox, ov) {
                var ow = Math.round(ox / 1.57079632679);
                if (ow == 0) {
                    return "0";
                }
                if (ow == 2) {
                    return "\u03C0";
                }
                if (ow == -2) {
                    return "-\u03C0";
                }
                if (ow % 2 == 0) {
                    return ow / 2 + "\u03C0";
                }
                return ow + "/2 \u03C0";
            };
        } else {
            this.formatter = null;
        }
    };

    function jm() {
        this.show = true;
        this.onZero = true;
        this.lineStyle = new X();
    }
    jm.prototype.init = function () {
        this.lineStyle.init();
    };
    jm.prototype.load = function (ou) {
        if (ou.lineStyle != null) {
            this.lineStyle.load(ou.lineStyle);
        }
    };
    jm.prototype.isShow = function () {
        return this.show;
    };
    jm.prototype.setShow = function (ou) {
        this.show = ou;
    };
    jm.prototype.isOnZero = function () {
        return this.onZero;
    };
    jm.prototype.setOnZero = function (ou) {
        this.onZero = ou;
    };
    jm.prototype.getLineStyle = function () {
        return this.lineStyle;
    };

    function hC() {
        this.dataZoom = new eU();
        this.restore = new ju();
    }

    function eU() {
        this.yAxisIndex = "none";
    }

    function ju() {}

    function hw() {
        this.top = "60";
        this.left = "5%";
        this.right = "10%";
        this.bottom = "70";
    }
    hw.prototype.getTop = function () {
        return this.top;
    };
    hw.prototype.setTop = function (ou) {
        this.top = ou;
    };
    hw.prototype.getLeft = function () {
        return this.left;
    };
    hw.prototype.setLeft = function (ou) {
        this.left = ou;
    };
    hw.prototype.getRight = function () {
        return this.right;
    };
    hw.prototype.setRight = function (ou) {
        this.right = ou;
    };
    hw.prototype.getBottom = function () {
        return this.bottom;
    };
    hw.prototype.setBottom = function (ou) {
        this.bottom = ou;
    };

    function ec() {
        this.show = true;
        this.data;
        this.left = "center";
        this.top = "auto";
        this.right = "auto";
        this.bottom = "auto";
        this.data = [];
    }
    ec.prototype.isShow = function () {
        return this.show;
    };
    ec.prototype.setShow = function (ou) {
        this.show = ou;
    };
    ec.prototype.clearData = function () {
        this.data = [];
    };
    ec.prototype.addData = function (ou) {
        this.data.push(ou);
    };
    ec.prototype.getLeft = function () {
        return this.left;
    };
    ec.prototype.setLeft = function (ou) {
        this.left = ou;
    };
    ec.prototype.getTop = function () {
        return this.top;
    };
    ec.prototype.setTop = function (ou) {
        this.top = ou;
    };
    ec.prototype.getRight = function () {
        return this.right;
    };
    ec.prototype.setRight = function (ou) {
        this.right = ou;
    };
    ec.prototype.getBottom = function () {
        return this.bottom;
    };
    ec.prototype.setBottom = function (ou) {
        this.bottom = ou;
    };

    function mi() {
        this.width = 2;
        this.type = "solid";
    }
    mi.prototype.getWidth = function () {
        return this.width;
    };
    mi.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    mi.prototype.getType = function () {
        return this.type;
    };
    mi.prototype.setType = function (ou) {
        this.type = ou;
    };

    function X() {
        this.color = "#333333";
        this.width = 1;
        this.type = "solid";
        this.opacity = 1;
        this.opacityString = "1.0";
    }
    X.prototype.init = function () {
        this.color = "#333333";
        this.width = 1;
        this.type = "solid";
        this.opacity = 1;
        this.opacityString = "1.0";
    };
    X.prototype.load = function (ou) {
        if (ou.color != null) {
            this.color = ou.color;
        }
        if (ou.width != null) {
            this.width = ou.width;
        }
        if (ou.type != null) {
            this.type = ou.type;
        }
        if (ou.opacity != null) {
            this.opacity = ou.opacity;
            this.opacityString = ou.opacity + "";
        }
    };
    X.prototype.getColor = function () {
        return this.color;
    };
    X.prototype.setColor = function (ou) {
        this.color = ou;
    };
    X.prototype.getWidth = function () {
        return this.width;
    };
    X.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    X.prototype.getType = function () {
        return this.type;
    };
    X.prototype.setType = function (ou) {
        this.type = ou;
    };
    X.prototype.getOpacity = function () {
        return this.opacity;
    };
    X.prototype.setOpacity = function (ou) {
        this.opacity = ou;
    };
    X.prototype.getOpacityString = function () {
        return this.opacityString;
    };
    X.prototype.setOpacityString = function (ou) {
        this.opacityString = ou;
    };

    function gC() {
        this.name;
        this.type = "line";
        this.data;
        this.clip = true;
        this.showSymbol = false;
        this.areaStyle = null;
        this.lineStyle = new mi();
        this.coordinateSystem = "cartesian2d";
        this.data = [];
    }
    gC.prototype.getName = function () {
        return this.name;
    };
    gC.prototype.setName = function (ou) {
        this.name = ou;
    };
    gC.prototype.getType = function () {
        return this.type;
    };
    gC.prototype.setType = function (ou) {
        this.type = ou;
    };
    gC.prototype.getClip = function () {
        return this.clip;
    };
    gC.prototype.setClip = function (ou) {
        this.clip = ou;
    };
    gC.prototype.getShowSymbol = function () {
        return this.showSymbol;
    };
    gC.prototype.setShowSymbol = function (ou) {
        this.showSymbol = ou;
    };
    gC.prototype.getAreaStyle = function () {
        return this.areaStyle;
    };
    gC.prototype.setAreaStyle = function (ou) {
        this.areaStyle = ou;
    };
    gC.prototype.clearData = function () {
        this.data = [];
    };
    gC.prototype.add = function (ou, ov) {
        this.data.push([ou, ov]);
    };
    gC.prototype.addEmptyPolar = function (ou) {
        this.data.push(["-", ou]);
    };
    gC.prototype.addEmpty2D = function (ou) {
        this.data.push([ou, "-"]);
    };
    gC.prototype.getLineStyle = function () {
        return this.lineStyle;
    };
    gC.prototype.getCoordinateSystem = function () {
        return this.coordinateSystem;
    };
    gC.prototype.setCoordinateSystem = function (ou) {
        this.coordinateSystem = ou;
    };

    function gH() {
        this.show = true;
        this.lineStyle = new X();
        this.lineStyle.setColor("#cccccc");
    }
    gH.prototype.init = function () {
        this.lineStyle.init();
        this.lineStyle.setColor("#cccccc");
    };
    gH.prototype.load = function (ou) {
        if (ou.lineStyle != null) {
            this.lineStyle.load(ou.lineStyle);
        }
    };
    gH.prototype.isShow = function () {
        return this.show;
    };
    gH.prototype.setShow = function (ou) {
        this.show = ou;
    };
    gH.prototype.getLineStyle = function () {
        return this.lineStyle;
    };

    function hK() {
        this.show = true;
        this.lineStyle = new X();
        this.lineStyle.setColor("#eeeeee");
    }
    hK.prototype.init = function () {
        this.lineStyle.init();
        this.lineStyle.setColor("#eeeeee");
    };
    hK.prototype.load = function (ou) {
        if (ou.lineStyle != null) {
            this.lineStyle.load(ou.lineStyle);
        }
    };
    hK.prototype.isShow = function () {
        return this.show;
    };
    hK.prototype.setShow = function (ou) {
        this.show = ou;
    };
    hK.prototype.getLineStyle = function () {
        return this.lineStyle;
    };

    function ek() {
        this.fontFamily = "Arial";
        this.fontSize = 12;
        this.fontWeight = "normal";
        this.fontStyle = "normal";
        this.color = "#333333";
    }
    ek.prototype.init = function () {
        this.fontFamily = "Arial";
        this.fontSize = 12;
        this.fontWeight = "normal";
        this.fontStyle = "normal";
        this.color = "#333333";
    };
    ek.prototype.load = function (ou) {
        if (ou.fontFamily != null) {
            this.fontFamily = ou.fontFamily;
        }
        if (ou.fontSize != null) {
            this.fontSize = ou.fontSize;
        }
        if (ou.fontWeight != null) {
            this.fontWeight = ou.fontWeight;
        }
        if (ou.fontStyle != null) {
            this.fontStyle = ou.fontStyle;
        }
        if (ou.fontStyle != null) {
            this.fontStyle = ou.fontStyle;
        }
    };
    ek.prototype.getFontFamily = function () {
        return this.fontFamily;
    };
    ek.prototype.setFontFamily = function (ou) {
        this.fontFamily = ou;
    };
    ek.prototype.getFontSize = function () {
        return this.fontSize;
    };
    ek.prototype.setFontSize = function (ou) {
        this.fontSize = ou;
    };
    ek.prototype.getFontWeight = function () {
        return this.fontWeight;
    };
    ek.prototype.setFontWeight = function (ou) {
        this.fontWeight = ou;
    };
    ek.prototype.getFontStyle = function () {
        return this.fontStyle;
    };
    ek.prototype.setFontStyle = function (ou) {
        this.fontStyle = ou;
    };
    ek.prototype.getColor = function () {
        return this.color;
    };
    ek.prototype.setColor = function (ou) {
        this.color = ou;
    };

    function kw() {
        this.show = true;
        this.inside = false;
        this.length = 5;
        this.lineStyle = new X();
    }
    kw.prototype.init = function () {
        this.lineStyle.init();
    };
    kw.prototype.load = function (ou) {
        if (ou.lineStyle != null) {
            this.lineStyle.load(ou.lineStyle);
        }
    };
    kw.prototype.isShow = function () {
        return this.show;
    };
    kw.prototype.setShow = function (ou) {
        this.show = ou;
    };
    kw.prototype.isInside = function () {
        return this.inside;
    };
    kw.prototype.setInside = function (ou) {
        this.inside = ou;
    };
    kw.prototype.getLength = function () {
        return this.length;
    };
    kw.prototype.setLength = function (ou) {
        this.length = ou;
    };
    kw.prototype.getLineStyle = function () {
        return this.lineStyle;
    };

    function cQ() {
        this.show = true;
        this.splitNumber = 5;
        this.length = 3;
        this.lineStyle = new X();
    }
    cQ.prototype.init = function () {
        this.lineStyle.init();
    };
    cQ.prototype.load = function (ou) {
        if (ou.lineStyle != null) {
            this.lineStyle.load(ou.lineStyle);
        }
    };
    cQ.prototype.isShow = function () {
        return this.show;
    };
    cQ.prototype.setShow = function (ou) {
        this.show = ou;
    };
    cQ.prototype.getSplitNumber = function () {
        return this.splitNumber;
    };
    cQ.prototype.setSplitNumber = function (ou) {
        this.splitNumber = ou;
    };
    cQ.prototype.getLength = function () {
        return this.length;
    };
    cQ.prototype.setLength = function (ou) {
        this.length = ou;
    };
    cQ.prototype.getLineStyle = function () {
        return this.lineStyle;
    };

    function kM() {
        this.show = true;
        this.text = "My Title";
        this.left = "left";
        this.top = "top";
        this.right = "auto";
        this.bottom = "auto";
        this.textStyle = new ek();
        this.textStyle.setFontSize(20);
        this.textStyle.setFontWeight("bold");
    }
    kM.prototype.init = function (ou) {
        this.textStyle.init();
        this.textStyle.setFontSize(20);
        this.textStyle.setFontWeight("bold");
        if (
            ou._theme != null &&
            ou._theme.title != null &&
            ou._theme.title.textStyle != null
        ) {
            this.textStyle.load(ou._theme.title.textStyle);
        }
    };
    kM.prototype.isShow = function () {
        return this.show;
    };
    kM.prototype.setShow = function (ou) {
        this.show = ou;
    };
    kM.prototype.getText = function () {
        return this.text;
    };
    kM.prototype.setText = function (ou) {
        this.text = ou;
    };
    kM.prototype.getLeft = function () {
        return this.left;
    };
    kM.prototype.setLeft = function (ou) {
        this.left = ou;
    };
    kM.prototype.getTop = function () {
        return this.top;
    };
    kM.prototype.setTop = function (ou) {
        this.top = ou;
    };
    kM.prototype.getTextStyle = function () {
        return this.textStyle;
    };
    kM.prototype.getRight = function () {
        return this.right;
    };
    kM.prototype.setRight = function (ou) {
        this.right = ou;
    };
    kM.prototype.getBottom = function () {
        return this.bottom;
    };
    kM.prototype.setBottom = function (ou) {
        this.bottom = ou;
    };

    function bC() {
        this.show = true;
        this.left = "right";
        this.top = "top";
        this.right = "auto";
        this.bottom = "auto";
        this.feature = new hC();
    }
    bC.prototype.isShow = function () {
        return this.show;
    };
    bC.prototype.setShow = function (ou) {
        this.show = ou;
    };
    bC.prototype.getLeft = function () {
        return this.left;
    };
    bC.prototype.setLeft = function (ou) {
        this.left = ou;
    };
    bC.prototype.getTop = function () {
        return this.top;
    };
    bC.prototype.setTop = function (ou) {
        this.top = ou;
    };
    bC.prototype.getRight = function () {
        return this.right;
    };
    bC.prototype.setRight = function (ou) {
        this.right = ou;
    };
    bC.prototype.getBottom = function () {
        return this.bottom;
    };
    bC.prototype.setBottom = function (ou) {
        this.bottom = ou;
    };
    bC.prototype.getFeature = function () {
        return this.feature;
    };

    function ex() {
        this.trigger = "axis";
    }

    function on() {
        this.numbrePoints = 1000;
        this.trigonometric = false;
        this.zoomType = "slider";
        this.minX = -20;
        this.maxX = 20;
        this.minPolarX = 0;
        this.maxPolarX = 360;
        this.minY = -20;
        this.maxY = 20;
        this.minZoomX = -5;
        this.maxZoomX = 5;
        this.minZoomY = -1.5;
        this.maxZoomY = 1.5;
    }
    on.prototype.getMinX = function () {
        return this.minX;
    };
    on.prototype.setMinX = function (ou) {
        this.minX = ou;
    };
    on.prototype.getMaxX = function () {
        return this.maxX;
    };
    on.prototype.setMaxX = function (ou) {
        this.maxX = ou;
    };
    on.prototype.getMinY = function () {
        return this.minY;
    };
    on.prototype.setMinY = function (ou) {
        this.minY = ou;
    };
    on.prototype.getMaxY = function () {
        return this.maxY;
    };
    on.prototype.setMaxY = function (ou) {
        this.maxY = ou;
    };
    on.prototype.getMinZoomX = function () {
        return this.minZoomX;
    };
    on.prototype.setMinZoomX = function (ou) {
        this.minZoomX = ou;
    };
    on.prototype.getMaxZoomX = function () {
        return this.maxZoomX;
    };
    on.prototype.setMaxZoomX = function (ou) {
        this.maxZoomX = ou;
    };
    on.prototype.getMinZoomY = function () {
        return this.minZoomY;
    };
    on.prototype.setMinZoomY = function (ou) {
        this.minZoomY = ou;
    };
    on.prototype.getMaxZoomY = function () {
        return this.maxZoomY;
    };
    on.prototype.setMaxZoomY = function (ou) {
        this.maxZoomY = ou;
    };
    on.prototype.getNumbrePoints = function () {
        return this.numbrePoints;
    };
    on.prototype.isTrigonometric = function () {
        return this.trigonometric;
    };
    on.prototype.setTrigonometric = function (ou) {
        this.trigonometric = ou;
    };
    on.prototype.getZoomType = function () {
        return this.zoomType;
    };
    on.prototype.setZoomType = function (ou) {
        this.zoomType = ou;
    };
    on.prototype.getMinPolarX = function () {
        return this.minPolarX;
    };
    on.prototype.setMinPolarX = function (ou) {
        this.minPolarX = ou;
    };
    on.prototype.getMaxPolarX = function () {
        return this.maxPolarX;
    };
    on.prototype.setMaxPolarX = function (ou) {
        this.maxPolarX = ou;
    };

    function fo() {
        this.title = new kM();
        this.legend = new ec();
        this.grid = new hw();
        this.series;
        this.animation = false;
        this.series = [];
    }
    fo.prototype.init = function (ou) {
        this.title.init(ou);
    };
    fo.prototype.clearSerie = function () {
        this.series = [];
    };
    fo.prototype.addSerie = function (ou) {
        this.series.push(ou);
    };
    fo.prototype.isAnimation = function () {
        return this.animation;
    };
    fo.prototype.setAnimation = function (ou) {
        this.animation = ou;
    };
    fo.prototype.getTitle = function () {
        return this.title;
    };
    fo.prototype.getLegend = function () {
        return this.legend;
    };
    fo.prototype.getGrid = function () {
        return this.grid;
    };
    fo.prototype.getSeries = function () {
        return this.series;
    };
    fo.prototype.setTitle = function (ou) {
        this.title = ou;
    };
    fo.prototype.setLegend = function (ou) {
        this.legend = ou;
    };
    fo.prototype.setGrid = function (ou) {
        this.grid = ou;
    };

    function c1() {
        this.xAxis = new cX();
        this.yAxis = new mq();
        this.tooltip = new ex();
        this.toolbox = new bC();
        this.dataZoom;
        this.dataZoom = [];
        this.dLe = fo;
        this.dLe();
    }
    ga(c1, fo);
    c1.prototype.init = function (ou) {
        fo.prototype.init.call(this, ou);
        this.xAxis.init(ou);
        this.yAxis.init(ou);
    };
    c1.prototype.addDataZoomX = function (ou) {
        this.dataZoom.push(ou);
    };
    c1.prototype.addDataZoomY = function (ou) {
        this.dataZoom.push(ou);
    };
    c1.prototype.getDataZoomX = function () {
        var ou = null;
        ou = this.dataZoom[0];
        return ou;
    };
    c1.prototype.getDataZoomY = function () {
        var ou = null;
        ou = this.dataZoom[1];
        return ou;
    };
    c1.prototype.getxAxis = function () {
        return this.xAxis;
    };
    c1.prototype.getyAxis = function () {
        return this.yAxis;
    };
    c1.prototype.getToolbox = function () {
        return this.toolbox;
    };

    function aq() {
        this.visualMap = new cK();
        this.xAxis3D = new lW();
        this.yAxis3D = new ht();
        this.zAxis3D = new cU();
        this.grid3D = new cm();
        this.series;
        this.series = [];
    }
    aq.prototype.init = function (ou) {};
    aq.prototype.clearData = function () {
        this.series = [];
    };
    aq.prototype.add = function (ou) {
        this.series.push(ou);
    };
    aq.prototype.getVisualMap = function () {
        return this.visualMap;
    };
    aq.prototype.getxAxis3D = function () {
        return this.xAxis3D;
    };
    aq.prototype.getyAxis3D = function () {
        return this.yAxis3D;
    };
    aq.prototype.getzAxis3D = function () {
        return this.zAxis3D;
    };
    aq.prototype.getGrid3D = function () {
        return this.grid3D;
    };

    function or() {
        this.polar = new hd();
        this.angleAxis = new ce();
        this.radiusAxis = new mo();
        this.dLe = fo;
        this.dLe();
    }
    ga(or, fo);
    or.prototype.init = function (ou) {
        fo.prototype.init.call(this, ou);
    };
    or.prototype.getPolar = function () {
        return this.polar;
    };
    or.prototype.setPolar = function (ou) {
        this.polar = ou;
    };
    or.prototype.getAngleAxis = function () {
        return this.angleAxis;
    };
    or.prototype.setAngleAxis = function (ou) {
        this.angleAxis = ou;
    };
    or.prototype.getRadiusAxis = function () {
        return this.radiusAxis;
    };
    or.prototype.setRadiusAxis = function (ou) {
        this.radiusAxis = ou;
    };

    function ce() {
        this.type = "value";
        this.startAngle = 0;
    }
    ce.prototype.getType = function () {
        return this.type;
    };
    ce.prototype.setType = function (ou) {
        this.type = this.type;
    };
    ce.prototype.getStartAngle = function () {
        return this.startAngle;
    };
    ce.prototype.setStartAngle = function (ou) {
        this.startAngle = this.startAngle;
    };

    function hd() {}

    function mo() {}

    function dV() {
        this.name;
        this.value;
        this.remove = false;
    }
    dV.prototype.getName = function () {
        return this.name;
    };
    dV.prototype.setName = function (ou) {
        this.name = ou;
    };
    dV.prototype.getValue = function () {
        return this.value;
    };
    dV.prototype.setValue = function (ou) {
        this.value = ou;
    };
    dV.prototype.isRemove = function () {
        return this.remove;
    };
    dV.prototype.setRemove = function (ou) {
        this.remove = ou;
    };

    function bY() {
        this.name;
        this.mathml;
        this.folder;
        this.img;
    }
    bY.prototype.getName = function () {
        return this.name;
    };
    bY.prototype.setName = function (ou) {
        this.name = ou;
    };
    bY.prototype.getMathml = function () {
        return this.mathml;
    };
    bY.prototype.setMathml = function (ou) {
        this.mathml = ou;
    };
    bY.prototype.getFolder = function () {
        return this.folder;
    };
    bY.prototype.setFolder = function (ou) {
        this.folder = ou;
    };
    bY.prototype.getImg = function () {
        return this.img;
    };
    bY.prototype.setImg = function (ou) {
        this.img = ou;
    };

    function ef() {
        this.name;
        this.minArgumentLength;
        this.maxArgumentLength;
        this.mathml;
    }
    ef.prototype.getName = function () {
        return this.name;
    };
    ef.prototype.setName = function (ou) {
        this.name = ou;
    };
    ef.prototype.getMinArgumentLength = function () {
        return this.minArgumentLength;
    };
    ef.prototype.setMinArgumentLength = function (ou) {
        this.minArgumentLength = ou;
    };
    ef.prototype.getMaxArgumentLength = function () {
        return this.maxArgumentLength;
    };
    ef.prototype.setMaxArgumentLength = function (ou) {
        this.maxArgumentLength = ou;
    };
    ef.prototype.getMathml = function () {
        return this.mathml;
    };
    ef.prototype.setMathml = function (ou) {
        this.mathml = ou;
    };

    function c0() {
        this.functionName = "fn";
        this.variables = "x";
        this.constants = "";
        this.fixVariableNumber = -1;
    }
    c0.prototype.getFunctionName = function () {
        return this.functionName;
    };
    c0.prototype.setFunctionName = function (ou) {
        this.functionName = ou;
    };
    c0.prototype.getVariables = function () {
        return this.variables;
    };
    c0.prototype.addVariables = function (ou) {
        if (this.hasVariable(ou)) {
            return;
        }
        if (this.variables.length > 0) {
            this.variables = this.variables + "," + ou;
        } else {
            this.variables = ou;
        }
    };
    c0.prototype.hasVariable = function (ow) {
        var ov = this.variables.split(",");
        for (var ou = 0; ou < ov.length; ou++) {
            if (ov[ou] == ow) {
                return true;
            }
        }
        return false;
    };
    c0.prototype.getNbOfVariable = function () {
        var ou = this.variables.split(",");
        return ou.length;
    };
    c0.prototype.setVariables = function (ou) {
        this.variables = ou;
    };
    c0.prototype.getUserConstants = function () {
        return this.constants;
    };
    c0.prototype.setUserConstants = function (ou) {
        this.constants = ou;
    };
    c0.prototype.addUserConstant = function (ow) {
        var ov = this.constants.split(",");
        for (var ou = 0; ou < ov.length; ou++) {
            if (ov[ou] == ow) {
                return;
            }
        }
        ov = this.variables.split(",");
        for (var ou = 0; ou < ov.length; ou++) {
            if (ov[ou] == ow) {
                return;
            }
        }
        if (this.constants.length > 0) {
            this.constants = this.constants + ",";
        }
        this.constants = this.constants + ow;
    };
    c0.prototype.loadDataFromMathml = function (ou) {
        this.setVariables("");
        this.setUserConstants("");
        var oz = ou.indexOf('<mi id="variable');
        while (oz > -1) {
            ou = ou.substring(oz + 3, ou.length);
            ou = ou.substring(ou.indexOf(">") + 1, ou.length);
            var oB = ou.substring(0, ou.indexOf("<"));
            this.addVariables(oB);
            oz = ou.indexOf('<mi id="variable');
        }
        oz = ou.indexOf("<apply");
        if (oz == -1) {
            return;
        }
        ou = ou.substring(oz, ou.length);
        var ov = ou;
        oz = ou.indexOf("<ci");
        while (oz > -1) {
            ou = ou.substring(oz + 3, ou.length);
            ou = ou.substring(ou.indexOf(">") + 1, ou.length);
            var oB = ou.substring(0, ou.indexOf("<"));
            if (!lv.stringIsNumber(oB)) {
                this.addVariables(oB);
            }
            oz = ou.indexOf("<ci");
        }
        ou = ov;
        oz = ou.indexOf("<cn");
        while (oz > -1) {
            ou = ou.substring(oz + 3, ou.length);
            ou = ou.substring(ou.indexOf(">") + 1, ou.length);
            var oB = ou.substring(0, ou.indexOf("<"));
            if (!lv.stringIsNumber(oB)) {
                this.addUserConstant(oB);
            }
            oz = ou.indexOf("<cn");
        }
        if (this.getFixVariableNumber() != -1) {
            var oy = this.getNbOfVariable();
            var ow = this.getFixVariableNumber();
            if (oy < ow) {
                var oD = "x,y,z,k,w".split(",");
                for (var ox = oy; ox < ow; ox++) {
                    var oC = this.getNextVariable(oD);
                    this.addVariables(oC);
                }
            } else {
                if (oy > ow) {
                    var oA = this.variables.split(",");
                    this.setVariables("");
                    for (var ox = 0; ox < ow; ox++) {
                        this.addVariables(oA[ox]);
                    }
                }
            }
        }
    };
    c0.prototype.getNextVariable = function (ow) {
        for (var ov = 0; ov < ow.length; ov++) {
            var ou = ow[ov];
            if (this.hasVariable(ou.toLowerCase())) {
                continue;
            }
            if (this.hasVariable(ou.toUpperCase())) {
                continue;
            }
            return ou;
        }
        return null;
    };
    c0.prototype.getFixVariableNumber = function () {
        return this.fixVariableNumber;
    };
    c0.prototype.setFixVariableNumber = function (ou) {
        this.fixVariableNumber = ou;
    };

    function lU() {
        this.list = new fM();
        this.currentIndex = -1;
    }
    lU.prototype.resetHistory = function () {
        this.list.clear();
        this.currentIndex = -1;
    };
    lU.prototype.addMathML = function (ow) {
        if (this.list.size() > 0) {
            var ov = this.list.get(this.currentIndex);
            if (ov == ow) {
                return;
            }
        }
        for (var ou = this.list.size(); ou > this.currentIndex; ou--) {
            this.list.remove(ou);
        }
        this.list.add(ow);
        this.currentIndex = this.list.size() - 1;
    };
    lU.prototype.removeLastMathML = function () {
        if (this.currentIndex > 0) {
            this.list.remove(this.currentIndex);
            this.currentIndex = this.currentIndex - 1;
        }
    };
    lU.prototype.canUndoMathML = function () {
        return this.currentIndex > 0;
    };
    lU.prototype.undoMathML = function () {
        if (this.canUndoMathML()) {
            this.currentIndex = this.currentIndex - 1;
            return this.list.get(this.currentIndex);
        }
        return null;
    };
    lU.prototype.canRedoMathML = function () {
        return this.currentIndex < this.list.size() - 1;
    };
    lU.prototype.redoMathML = function () {
        if (this.canRedoMathML()) {
            this.currentIndex = this.currentIndex + 1;
            return this.list.get(this.currentIndex);
        }
        return null;
    };
    lU.prototype.hasChanges = function () {
        return this.list.size() > 1;
    };

    function kN() {
        this.marginPageTop = -1;
        this.marginPageLeft = -1;
        this.marginPageRight = -1;
        this.marginPageBottom = -1;
    }
    kN.prototype.getMarginPageTop = function () {
        return this.marginPageTop;
    };
    kN.prototype.getMarginPageLeft = function () {
        return this.marginPageLeft;
    };
    kN.prototype.getMarginPageRight = function () {
        return this.marginPageRight;
    };
    kN.prototype.getMarginPageBottom = function () {
        return this.marginPageBottom;
    };

    function aL() {
        this.dLf = kN;
        this.dLf();
    }
    ga(aL, kN);
    aL.prototype.getMarginPageTop = function () {
        return 18 / 2;
    };
    aL.prototype.getMarginPageLeft = function () {
        return 6 / 2;
    };
    aL.prototype.getMarginPageRight = function () {
        return 6 / 2;
    };
    aL.prototype.getMarginPageBottom = function () {
        return 18 / 2;
    };

    function dc() {
        this.dLf = kN;
        this.dLf();
    }
    ga(dc, kN);
    dc.prototype.getMarginPageTop = function () {
        return 25 / 2;
    };
    dc.prototype.getMarginPageLeft = function () {
        return 13 / 2;
    };
    dc.prototype.getMarginPageRight = function () {
        return 13 / 2;
    };
    dc.prototype.getMarginPageBottom = function () {
        return 36 / 2;
    };

    function lC() {
        this.widthPx;
        this.heightPx;
        this.width;
        this.height;
        this.portrait = false;
        this.margins = new aL();
    }
    lC.prototype.getWidth = function () {
        return this.width;
    };
    lC.prototype.getHeight = function () {
        return this.height;
    };
    lC.prototype.getMargins = function () {
        return this.margins;
    };
    lC.prototype.setMargins = function (ou) {
        this.margins = ou;
    };
    lC.prototype.isPortrait = function () {
        return this.portrait;
    };
    lC.prototype.setPortrait = function (ou) {
        this.portrait = ou;
    };
    lC.prototype.setWidth = function (ou) {
        this.width = ou;
    };
    lC.prototype.setHeight = function (ou) {
        this.height = ou;
    };
    lC.prototype.getWidthPx = function () {
        return this.widthPx;
    };
    lC.prototype.setWidthPx = function (ou) {
        this.widthPx = ou;
    };
    lC.prototype.getHeightPx = function () {
        return this.heightPx;
    };
    lC.prototype.setHeightPx = function (ou) {
        this.heightPx = ou;
    };

    function bM() {
        this.dLg = lC;
        this.dLg();
    }
    ga(bM, lC);
    bM.prototype.getWidth = function () {
        if (this.isPortrait()) {
            return 210;
        }
        return 297;
    };
    bM.prototype.getHeight = function () {
        if (this.isPortrait()) {
            return 297;
        }
        return 210;
    };

    function dT() {
        this.dLg = lC;
        this.dLg();
    }
    ga(dT, lC);

    function jb() {
        this.dLf = kN;
        this.dLf();
    }
    ga(jb, kN);
    jb.prototype.getMarginPageTop = function () {
        return 0;
    };
    jb.prototype.getMarginPageLeft = function () {
        return 0;
    };
    jb.prototype.getMarginPageRight = function () {
        return 0;
    };
    jb.prototype.getMarginPageBottom = function () {
        return 0;
    };

    function mn() {
        this.listCustomFonts = new fM();
    }
    mn.prototype.getListCustomFonts = function () {
        return this.listCustomFonts;
    };
    mn.prototype.addCustomFonts = function (ov) {
        for (var ow = 0; ow < this.listCustomFonts.size(); ow++) {
            var ou = this.listCustomFonts.get(ow);
            if (ou.getName() == ov.getName()) {
                return;
            }
        }
        this.listCustomFonts.add(ov);
    };
    mn.prototype.listCustomFontsToString = function () {
        var ow = "";
        for (var ov = 0; ov < this.listCustomFonts.size(); ov++) {
            var ou = this.listCustomFonts.get(ov);
            if (ou.isRemove()) {
                continue;
            }
            if (ow.length > 0) {
                ow = ow + "|";
            }
            ow = ow + ou.getName() + ";" + ou.getValue();
        }
        return ow;
    };
    mn.prototype.loadListCustomFontsFromString = function (oz) {
        if (oz == null || oz.length == 0) {
            return;
        }
        this.listCustomFonts.clear();
        var oy = oz.split("|");
        for (var ow = 0; ow < oy.length; ow++) {
            var ou = oy[ow];
            var ox = ou.split(";");
            if (ox.length == 2) {
                var ov = new dV();
                ov.setName(ox[0]);
                ov.setValue(ox[1]);
                this.addCustomFonts(ov);
            }
        }
    };

    function an() {
        this.saveClientData = new mn();
    }
    an.prototype.loadAll = function (ou) {
        this.loadFonts(ou);
    };
    an.prototype.getJwt = function () {
        var ou = null;
        try {
            if (localStorage.getItem("JWT") != null) {
                ou = localStorage.getItem("JWT");
            }
        } catch (ov) {
            gn.displayErr(ov);
        }
        return ou;
    };
    an.prototype.saveFonts = function (ou) {
        try {
            localStorage.setItem(
                "clientSettingsFonts" + ou,
                this.saveClientData.listCustomFontsToString(),
            );
        } catch (ov) {
            gn.displayErr(ov);
        }
    };
    an.prototype.loadFonts = function (ov) {
        try {
            var ou = "";
            ou = localStorage.getItem("clientSettingsFonts" + ov);
            this.saveClientData.loadListCustomFontsFromString(ou);
        } catch (ow) {
            gn.displayErr(ow);
        }
    };
    an.prototype.saveLanguage = function (ou, ow) {
        try {
            localStorage.setItem("clientLanguage" + ou, ow);
        } catch (ov) {
            gn.displayErr(ov);
        }
    };
    an.prototype.getLanguage = function (ov) {
        try {
            var ou = null;
            ou = localStorage.getItem("clientLanguage" + ov);
            if (ou == null) {
                return "en";
            }
            return ou;
        } catch (ow) {
            gn.displayErr(ow);
        }
        return "en";
    };
    an.prototype.saveDefFormula = function (ou, ov) {
        try {
            localStorage.setItem("defaultFunction" + ou, ov);
        } catch (ow) {
            gn.displayErr(ow);
        }
    };
    an.prototype.getDefFormula = function (ov) {
        try {
            var ou = null;
            ou = localStorage.getItem("defaultFunction" + ov);
            return ou;
        } catch (ow) {
            gn.displayErr(ow);
        }
        return null;
    };
    an.prototype.saveHideTips = function (ou, ov) {
        try {
            localStorage.setItem("hideTips" + ou, ov);
        } catch (ow) {
            gn.displayErr(ow);
        }
    };
    an.prototype.getHideTips = function (ov) {
        try {
            var ou = "false";
            ou = localStorage.getItem("hideTips" + ov);
            return ou;
        } catch (ow) {
            gn.displayErr(ow);
        }
        return "false";
    };
    an.prototype.getSaveClientData = function () {
        return this.saveClientData;
    };

    function C() {
        this.viewScale = 1;
        this.scrollbarWidth = 17;
        this.parentWidth;
        this.parentHeight;
        this.border = 2;
        this.marginPageWindow = 5;
        this.realViewportWidth = -1;
        this.realViewportHeight = -1;
        this.totalWidthPixels = -1;
        this.totalHeightPixels = -1;
        this.scrollV = false;
        this.scrollH = false;
        this.pageWidth = -1;
        this.pageHeight = -1;
        this.paper;
    }
    C.prototype.setScreenWidth = function (ou, ow, ov) {
        this.parentWidth = ou;
        this.parentHeight = ow;
        this.paper = ov;
    };
    C.prototype.calculate = function () {
        this.pageWidth = lv.getIntFromDouble(this.paper.getWidth() * ia);
        this.pageHeight = lv.getIntFromDouble(this.paper.getHeight() * ia);
        this.totalWidthPixels =
            lv.getIntFromDouble(this.pageWidth * this.viewScale) +
            2 * this.marginPageWindow;
        this.totalHeightPixels =
            lv.getIntFromDouble(this.pageHeight * this.viewScale) +
            2 * this.marginPageWindow;
        this.realViewportWidth = this.parentWidth - this.border * 2;
        this.realViewportHeight = this.parentHeight - this.border * 2;
        this.scrollH = false;
        if (this.totalWidthPixels > this.realViewportWidth) {
            this.scrollH = true;
        }
        this.scrollV = false;
        if (this.totalHeightPixels > this.realViewportHeight) {
            this.scrollV = true;
        }
    };
    C.prototype.getViewScale = function () {
        return this.viewScale;
    };
    C.prototype.setViewScale = function (ou) {
        this.viewScale = ou;
    };
    C.prototype.addPixelsOnX = function () {
        if (this.scrollH) {
            return 0;
        }
        if (this.scrollV) {
            return this.scrollbarWidth;
        }
        return 0;
    };
    C.prototype.addPixelsOnY = function () {
        if (this.scrollV) {
            return 0;
        }
        if (this.scrollH) {
            return this.scrollbarWidth;
        }
        return 0;
    };
    C.prototype.getPageWidth = function () {
        return lv.getIntFromDouble(this.pageWidth * this.viewScale);
    };
    C.prototype.getPageHeight = function () {
        return lv.getIntFromDouble(this.pageHeight * this.viewScale);
    };
    C.prototype.getTotalWidthPixels = function () {
        return this.totalWidthPixels;
    };
    C.prototype.getTotalHeightPixels = function () {
        return this.totalHeightPixels;
    };
    C.prototype.setMarginPageWindow = function (ou) {
        this.marginPageWindow = ou;
    };
    C.prototype.getMarginPageWindow = function () {
        return this.marginPageWindow;
    };
    C.prototype.isScrollbarV = function () {
        return this.scrollV;
    };
    C.prototype.isScrollbarH = function () {
        return this.scrollH;
    };
    C.prototype.getMarginPageTop = function () {
        return lv.getIntFromDouble(
            this.paper.getMargins().getMarginPageTop() * ia * this.viewScale,
        );
    };
    C.prototype.getMarginPageLeft = function () {
        return lv.getIntFromDouble(
            this.paper.getMargins().getMarginPageLeft() * ia * this.viewScale,
        );
    };
    C.prototype.getMarginPageRight = function () {
        return lv.getIntFromDouble(
            this.paper.getMargins().getMarginPageRight() * ia * this.viewScale,
        );
    };
    C.prototype.getMarginPageBottom = function () {
        return lv.getIntFromDouble(
            this.paper.getMargins().getMarginPageBottom() * ia * this.viewScale,
        );
    };
    C.prototype.getRealViewportWidth = function () {
        return this.realViewportWidth;
    };
    C.prototype.getRealViewportHeight = function () {
        return this.realViewportHeight;
    };
    C.prototype.getPageContentWidth = function () {
        return (
            this.getPageWidth() -
            this.getMarginPageLeft() -
            this.getMarginPageRight()
        );
    };
    C.prototype.getPageContentHeight = function () {
        return (
            this.getPageHeight() -
            this.getMarginPageTop() -
            this.getMarginPageBottom()
        );
    };
    C.prototype.getRealPageContentWidth = function () {
        var ou = lv.getIntFromDouble(
            (this.paper.getMargins().getMarginPageTop() +
                this.paper.getMargins().getMarginPageRight()) *
                ia,
        );
        return this.pageWidth - ou;
    };
    C.prototype.calculateScaleWidth = function () {
        return (
            (1 *
                (this.realViewportWidth -
                    this.scrollbarWidth -
                    2 * this.marginPageWindow)) /
            this.pageWidth
        );
    };
    C.prototype.calculateScalePage = function () {
        var ov =
            (1 * (this.realViewportWidth - 2 * this.marginPageWindow)) /
            this.pageWidth;
        var ou =
            (1 * (this.realViewportHeight - 2 * this.marginPageWindow)) /
            this.pageHeight;
        if (ou < ov) {
            return ou;
        }
        return ov;
    };
    C.prototype.setPortrait = function (ou) {
        this.paper.setPortrait(ou);
    };
    C.prototype.getPaper = function () {
        return this.paper;
    };

    function aG() {
        this.selectedList;
        this.selectedCurrentPanel;
        this.selectedIndex = -1;
        this.selectedBackground;
        this.copiedSelectedElement = null;
        this.lastLineSelected = -1;
        this.selectedOverPanel;
        this.selectedOverBackground;
        this.imageSelectionActive;
        this.imageSelectionLast;
        this.selectedPropGroup;
        this.selectedPropFunctGroup;
    }
    aG.prototype.getImageSelectionLast = function (ou) {
        if (this.imageSelectionLast == null) {
            return "";
        }
        if (this.imageSelectionLast.indexOf(ou) == -1) {
            return "";
        }
        return this.imageSelectionLast.substring(
            ou.length,
            this.imageSelectionLast.length,
        );
    };
    aG.prototype.setImageSelectionLast = function (ou) {
        this.imageSelectionLast = ou;
    };
    aG.prototype.getSelectedList = function () {
        return this.selectedList;
    };
    aG.prototype.setSelectedList = function (ou) {
        this.selectedList = ou;
    };
    aG.prototype.getSelectedPanel = function () {
        return this.selectedCurrentPanel;
    };
    aG.prototype.setSelectedPanel = function (ou) {
        this.selectedCurrentPanel = ou;
    };
    aG.prototype.getSelectedIndex = function () {
        return this.selectedIndex;
    };
    aG.prototype.setSelectedIndex = function (ou) {
        this.selectedIndex = ou;
    };
    aG.prototype.getSelectedBackground = function () {
        return this.selectedBackground;
    };
    aG.prototype.setSelectedBackground = function (ou) {
        this.selectedBackground = ou;
    };
    aG.prototype.getHierarchy = function () {
        return this.selectedList;
    };
    aG.prototype.getLastLineSelected = function () {
        return this.lastLineSelected;
    };
    aG.prototype.setLastLineSelected = function (ou) {
        this.lastLineSelected = ou;
    };
    aG.prototype.getCopiedSelectedElement = function () {
        return this.copiedSelectedElement;
    };
    aG.prototype.setCopiedSelectedElement = function (ou) {
        this.copiedSelectedElement = ou;
    };
    aG.prototype.getSelectedOverPanel = function () {
        return this.selectedOverPanel;
    };
    aG.prototype.setSelectedOverPanel = function (ou) {
        this.selectedOverPanel = ou;
    };
    aG.prototype.getSelectedOverBackground = function () {
        return this.selectedOverBackground;
    };
    aG.prototype.setSelectedOverBackground = function (ou) {
        this.selectedOverBackground = ou;
    };
    aG.prototype.getImageSelectionActive = function () {
        return this.imageSelectionActive;
    };
    aG.prototype.setImageSelectionActive = function (ou) {
        this.imageSelectionActive = ou;
    };
    aG.prototype.getSelectedPropGroup = function () {
        return this.selectedPropGroup;
    };
    aG.prototype.setSelectedPropGroup = function (ou) {
        this.selectedPropGroup = ou;
    };
    aG.prototype.getSelectedPropFunctGroup = function () {
        return this.selectedPropFunctGroup;
    };
    aG.prototype.setSelectedPropFunctGroup = function (ou) {
        this.selectedPropFunctGroup = ou;
    };

    function kC() {
        this.editorId;
        this.editorType = "editor";
        this.language = "en";
        this.minimum = false;
        this.windowWidth = 800;
        this.windowHeight = 400;
        this.mathsize;
        this.layout = "H";
        this.windowChanged = false;
        this.saveImageOnServer;
        this.saveImageOnServerUrl;
        this.topMenuHeight = 200;
        this.imgPath;
        this.imgFontPath;
        this.basicIdent;
        this.basicOperators;
        this.geometryOperators;
        this.algebraOperators;
        this.linearAlgebraOp;
        this.arrowOp;
        this.largeOperators;
        this.fencedOperators;
        this.letterlikeOp;
        this.logicalRelOp;
        this.constantSymboles;
        this.defFormula = "<math><mi>A</mi><mo>+</mo><mi>B</mi></math>";
        this.dragAction = false;
        this.fontSize = 0;
        this.selectedColor;
        this.selectedOverColor = "#F1948A";
        this.leftPaneHidden = false;
        this.rightPaneHidden = true;
        this.keyPaneHidden = false;
        this.latexPaneShow = false;
        this.mathmlPaneShow = true;
        this.codeMirror;
        this.mainFormula = new gf();
        this.l = new lP();
        this.selectedElement = new aG();
        this.screen = new C();
        this.paper = new bM();
        this.buttons = new fM();
        this.actions = new fM();
        this.blockActions = new fM();
        this.history = new lU();
        this.saveCallback;
        this.allSettingsBorder = true;
        this.allSettingsMargin = true;
        this.allSettingsPadding = true;
        this.allSettingsRows = true;
        this.allSettingsColumns = true;
        this.flyingTarget;
        this.dim = null;
        this.functionConfig = new c0();
        this.saveLocalStorage = new an();
        this.newsTipsManager = new S();
        this.jsChart;
        this.chartDataBean = new lI();
    }
    kC.prototype.getEditorType = function () {
        return this.editorType;
    };
    kC.prototype.setEditorType = function (ou) {
        this.editorType = ou;
    };
    kC.prototype.getAllSettingsColumns = function () {
        return this.allSettingsColumns;
    };
    kC.prototype.setAllSettingsColumns = function (ou) {
        this.allSettingsColumns = ou;
    };
    kC.prototype.getAllSettingsRows = function () {
        return this.allSettingsRows;
    };
    kC.prototype.setAllSettingsRows = function (ou) {
        this.allSettingsRows = ou;
    };
    kC.prototype.getWindowWidth = function () {
        return this.windowWidth;
    };
    kC.prototype.setWindowWidth = function (ou) {
        this.windowWidth = ou;
    };
    kC.prototype.getWindowHeight = function () {
        return this.windowHeight;
    };
    kC.prototype.setWindowHeight = function (ou) {
        this.windowHeight = ou;
    };
    kC.prototype.isWindowChanged = function () {
        return this.windowChanged;
    };
    kC.prototype.setWindowChanged = function (ou) {
        this.windowChanged = ou;
    };
    kC.prototype.isLeftPaneHidden = function () {
        return this.leftPaneHidden;
    };
    kC.prototype.setLeftPaneHidden = function (ou) {
        this.leftPaneHidden = ou;
    };
    kC.prototype.isRightPaneHidden = function () {
        return this.rightPaneHidden;
    };
    kC.prototype.setRightPaneHidden = function (ou) {
        this.rightPaneHidden = ou;
    };
    kC.prototype.isKeyPaneHidden = function () {
        return this.keyPaneHidden;
    };
    kC.prototype.setKeyPaneHidden = function (ou) {
        this.keyPaneHidden = ou;
    };
    kC.prototype.addButton = function (ou) {
        for (var ow = 0; ow < this.buttons.size(); ow++) {
            var ov = this.buttons.get(ow);
            if (ov.getId() == ou.getId()) {
                this.buttons.remove(ow);
                break;
            }
        }
        this.buttons.add(ou);
    };
    kC.prototype.getButton = function (ow) {
        for (var ov = 0; ov < this.buttons.size(); ov++) {
            var ou = this.buttons.get(ov);
            if (ou.getId() == ow) {
                return ou;
            }
        }
        return null;
    };
    kC.prototype.getAllButtons = function () {
        return this.buttons;
    };
    kC.prototype.getImgPath = function () {
        return this.imgPath;
    };
    kC.prototype.setImgPath = function (ou) {
        this.imgPath = ou;
    };
    kC.prototype.getImgFontPath = function () {
        return this.imgFontPath;
    };
    kC.prototype.setImgFontPath = function (ou) {
        this.imgFontPath = ou;
    };
    kC.prototype.getEditorId = function () {
        return this.editorId;
    };
    kC.prototype.setEditorId = function (ou) {
        this.editorId = ou;
    };
    kC.prototype.isLatexPaneShow = function () {
        return this.latexPaneShow;
    };
    kC.prototype.setLatexPaneShow = function (ou) {
        this.latexPaneShow = ou;
    };
    kC.prototype.isMathmlPaneShow = function () {
        return this.mathmlPaneShow;
    };
    kC.prototype.setMathmlPaneShow = function (ou) {
        this.mathmlPaneShow = ou;
    };
    kC.prototype.isPreviewPaneHidden = function () {
        if (!this.ispVersion()) {
            return true;
        }
        return !(this.mathmlPaneShow || this.latexPaneShow);
    };
    kC.prototype.getFontSize = function () {
        return this.fontSize;
    };
    kC.prototype.setFontSize = function (ou) {
        this.fontSize = ou;
    };
    kC.prototype.getCodeMirror = function () {
        return this.codeMirror;
    };
    kC.prototype.setCodeMirror = function (ou) {
        this.codeMirror = ou;
    };
    kC.prototype.getDefFormula = function () {
        return this.defFormula;
    };
    kC.prototype.setDefFormula = function (ou) {
        this.defFormula = ou;
    };
    kC.prototype.getSelectedColor = function () {
        if (this.selectedColor == null) {
            var ou = $("div[name='" + this.getEditorId() + "']");
            this.selectedColor = bH.getSelectedColor(ou.parent());
        }
        return this.selectedColor;
    };
    kC.prototype.setSelectedColor = function (ou) {
        this.selectedColor = ou;
    };
    kC.prototype.getScreen = function () {
        return this.screen;
    };
    kC.prototype.getPaper = function () {
        return this.paper;
    };
    kC.prototype.setPaper = function (ou) {
        this.paper = ou;
    };
    kC.prototype.getMainFormula = function () {
        return this.mainFormula;
    };
    kC.prototype.getSelectedElement = function () {
        return this.selectedElement;
    };
    kC.prototype.resetActions = function () {
        this.actions.clear();
        this.blockActions.clear();
    };
    kC.prototype.addAction = function (ou) {
        if (this.hasAction(ou)) {
            return;
        }
        if (this.hasBlockAction(ou)) {
            return;
        }
        this.actions.add(ou);
    };
    kC.prototype.hasAction = function (ov) {
        for (var ou = 0; ou < this.actions.size(); ou++) {
            if (this.actions.get(ou) == ov) {
                return true;
            }
        }
        return false;
    };
    kC.prototype.addBlockAction = function (ou) {
        if (this.hasBlockAction(ou)) {
            return;
        }
        this.blockActions.add(ou);
    };
    kC.prototype.hasBlockAction = function (ov) {
        for (var ou = 0; ou < this.blockActions.size(); ou++) {
            if (this.blockActions.get(ou) == ov) {
                return true;
            }
        }
        return false;
    };
    kC.prototype.getHistory = function () {
        return this.history;
    };
    kC.prototype.getSaveCallback = function () {
        return this.saveCallback;
    };
    kC.prototype.setSaveMethod = function (ou) {
        this.saveCallback = ou;
    };
    kC.prototype.getBasicIdent = function () {
        return this.basicIdent;
    };
    kC.prototype.setBasicIdent = function (ou) {
        this.basicIdent = ou;
    };
    kC.prototype.getLargeOperators = function () {
        return this.largeOperators;
    };
    kC.prototype.setLargeOperators = function (ou) {
        this.largeOperators = ou;
    };
    kC.prototype.getFencedOperators = function () {
        return this.fencedOperators;
    };
    kC.prototype.setFencedOperators = function (ou) {
        this.fencedOperators = ou;
    };
    kC.prototype.getBasicOperators = function () {
        return this.basicOperators;
    };
    kC.prototype.setBasicOperators = function (ou) {
        this.basicOperators = ou;
    };
    kC.prototype.getGeometryOperators = function () {
        return this.geometryOperators;
    };
    kC.prototype.setGeometryOperators = function (ou) {
        this.geometryOperators = ou;
    };
    kC.prototype.getAlgebraOperators = function () {
        return this.algebraOperators;
    };
    kC.prototype.setAlgebraOperators = function (ou) {
        this.algebraOperators = ou;
    };
    kC.prototype.getLetterlikeOp = function () {
        return this.letterlikeOp;
    };
    kC.prototype.setLetterlikeOp = function (ou) {
        this.letterlikeOp = ou;
    };
    kC.prototype.getLogicalRelOp = function () {
        return this.logicalRelOp;
    };
    kC.prototype.setLogicalRelOp = function (ou) {
        this.logicalRelOp = ou;
    };
    kC.prototype.getArrowOp = function () {
        return this.arrowOp;
    };
    kC.prototype.setArrowOp = function (ou) {
        this.arrowOp = ou;
    };
    kC.prototype.getLinearAlgebraOp = function () {
        return this.linearAlgebraOp;
    };
    kC.prototype.setLinearAlgebraOp = function (ou) {
        this.linearAlgebraOp = ou;
    };
    kC.prototype.getConstantSymboles = function () {
        return this.constantSymboles;
    };
    kC.prototype.setConstantSymboles = function (ou) {
        this.constantSymboles = ou;
    };
    kC.prototype.isDragAction = function () {
        return this.dragAction;
    };
    kC.prototype.setDragAction = function (ou) {
        this.dragAction = ou;
    };
    kC.prototype.getSelectedOverColor = function () {
        return this.selectedOverColor;
    };
    kC.prototype.setSelectedOverColor = function (ou) {
        this.selectedOverColor = ou;
    };
    kC.prototype.isSaveImageOnServer = function () {
        return this.saveImageOnServer;
    };
    kC.prototype.setSaveImageOnServer = function (ou) {
        this.saveImageOnServer = ou;
    };
    kC.prototype.getSaveImageOnServerUrl = function () {
        return this.saveImageOnServerUrl;
    };
    kC.prototype.setSaveImageOnServerUrl = function (ou) {
        this.saveImageOnServerUrl = ou;
    };
    kC.prototype.isVerticalLayout = function () {
        return this.layout == "V";
    };
    kC.prototype.getLayout = function () {
        return this.layout;
    };
    kC.prototype.setLayout = function (ou) {
        this.layout = ou;
    };
    kC.prototype.getTopMenuHeight = function () {
        return this.topMenuHeight;
    };
    kC.prototype.setTopMenuHeight = function (ou) {
        this.topMenuHeight = ou;
    };
    kC.prototype.isAllSettingsBorder = function () {
        return this.allSettingsBorder;
    };
    kC.prototype.setAllSettingsBorder = function (ou) {
        this.allSettingsBorder = ou;
    };
    kC.prototype.isAllSettingsMargin = function () {
        return this.allSettingsMargin;
    };
    kC.prototype.setAllSettingsMargin = function (ou) {
        this.allSettingsMargin = ou;
    };
    kC.prototype.isAllSettingsPadding = function () {
        return this.allSettingsPadding;
    };
    kC.prototype.setAllSettingsPadding = function (ou) {
        this.allSettingsPadding = ou;
    };
    kC.prototype.getMathsize = function () {
        return this.mathsize;
    };
    kC.prototype.setMathsize = function (ou) {
        this.mathsize = ou;
    };
    kC.prototype.isDim = function () {
        return this.dim;
    };
    kC.prototype.setDim = function (ou) {
        this.dim = ou;
    };
    kC.prototype.getFlyingTarget = function () {
        return this.flyingTarget;
    };
    kC.prototype.setFlyingTarget = function (ou) {
        this.flyingTarget = ou;
    };
    kC.prototype.ispVersion = function () {
        var ou = false;
        ou = true;
        return ou;
    };
    kC.prototype.getL = function () {
        return this.l;
    };
    kC.prototype.setL = function (ou) {
        this.l = ou;
    };
    kC.prototype.isMinimum = function () {
        return this.minimum;
    };
    kC.prototype.setMinimum = function (ou) {
        this.minimum = ou;
    };
    kC.prototype.addListCustomFonts = function (ov, ow) {
        var ou = new dV();
        ou.setValue(ow);
        ou.setName(ov);
        this.saveLocalStorage.getSaveClientData().addCustomFonts(ou);
    };
    kC.prototype.getSaveLocalStorage = function () {
        return this.saveLocalStorage;
    };
    kC.prototype.getLanguage = function () {
        return this.language;
    };
    kC.prototype.setLanguage = function (ou) {
        this.language = ou;
    };
    kC.prototype.getNewsTipsManager = function () {
        return this.newsTipsManager;
    };
    kC.prototype.getJsChart = function () {
        return this.jsChart;
    };
    kC.prototype.setJsChart = function (ou) {
        this.jsChart = ou;
    };
    kC.prototype.getChartDataBean = function () {
        return this.chartDataBean;
    };
    kC.prototype.getFunctionConfig = function () {
        return this.functionConfig;
    };

    function b3() {}
    b3.prototype.buildEditor = function (ou) {};
    b3.prototype.executeEvent = function (ou) {};
    b3.prototype.setSaveCallback = function (ou) {
        this.config.pk(ou);
        var mN = new iK();
        mN.pq("UPDATE_INTERFACE");
        this.executeEvent(mN);
    };
    b3.prototype.setMathML = function (ou) {};
    b3.prototype.getMathML = function (ou) {
        return null;
    };
    b3.prototype.getImage = function (ou, ov) {
        return null;
    };
    b3.prototype.getBlobOrUrl = function (ou, ov, ow) {
        var mN = this.getImage(ov, ow);
       // if (!this.config?.ff()) {
            ou(mN);
            return;
     //   }
        mN = mN.substring("data:image/png;base64,".length);
        var mQ = this.config.nh().getMathMLString(ov, true);
        aG.Nl(ou, this.config.bL(), mN, mQ);
    };
    b3.prototype.updateInterface = function () {};
    b3.prototype.showEditor = function () {};

    function r() {}
    r.getCheckbox = function (ow, ov, oz) {
        var ox = gq.translate(ow, "menu_" + ov);
        var oA = $("<div></div>");
        var oy = null;
        if (oz) {
            oy = $(
                "<input id='" +
                    ow.getEditorId() +
                    "_" +
                    ov +
                    "' type='checkbox' checked/>",
            );
        } else {
            oy = $(
                "<input id='" +
                    ow.getEditorId() +
                    "_" +
                    ov +
                    "' type='checkbox'/>",
            );
        }
        oA.append(oy);
        oA.append("<span>" + ox + "</span>");
        oy.click(function (oB) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ov);
        ou.setElement(oy);
        ow.addButton(ou);
        return oA;
    };
    r.getButton = function (ox, ow, ov, oA) {
        var oy = gq.translate(ox, "menu_" + ow);
        var oz = $("<div id='" + ox.getEditorId() + "_" + ow + "'></div>");
        oz.text("")
            .append(
                "<img src='" +
                    ox.getImgPath() +
                    "/" +
                    ov +
                    "' title='" +
                    oy +
                    "' height='22' width='22'/>",
            )
            .button();
        if (oA) {
            oz.button("disable");
        }
        oz.removeClass("ui-corner-all");
        oz.click(function (oB) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ow);
        ou.setElement(oz);
        ou.setDisabled(oA);
        ou.setVisible(true);
        ox.addButton(ou);
        return oz;
    };
    r.getButtonOriginalSize = function (ox, ow, ov, oA) {
        var oy = gq.translate(ox, "menu_" + ow);
        var oz = $("<div id='" + ox.getEditorId() + "_" + ow + "'></div>");
        oz.text("")
            .append(
                "<img src='" +
                    ox.getImgPath() +
                    "/" +
                    ov +
                    "' title='" +
                    oy +
                    "'/>",
            )
            .button();
        if (oA) {
            oz.button("disable");
        }
        oz.removeClass("ui-corner-all");
        oz.click(function (oB) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ow);
        ou.setElement(oz);
        ou.setDisabled(oA);
        ou.setVisible(true);
        ox.addButton(ou);
        return oz;
    };
    r.getButtonText = function (ox, ow, ov, oA) {
        var oy = gq.translate(ox, "menu_" + ow);
        var oz = $("<div id='" + ox.getEditorId() + "_" + ow + "'></div>");
        oz.text("");
        oz.append(
            "<img src='" +
                ox.getImgPath() +
                "/" +
                ov +
                "' title='" +
                oy +
                "' height='22' valign='middle' style='margin:0px 5px'/>",
        );
        oz.append("<span style='margin:3px 5px'>" + oy + "</span>");
        oz.button();
        if (oA) {
            oz.button("disable");
        }
        oz.removeClass("ui-corner-all");
        oz.click(function (oB) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ow);
        ou.setElement(oz);
        ou.setDisabled(oA);
        ou.setVisible(true);
        ox.addButton(ou);
        return oz;
    };
    r.getButtonKeyboard = function (ow, oA, ov, oB) {
        var ox = gq.translate(ow, "menu_" + ov);
        var oz = $(
            "<div title='" +
                ox +
                "' id='" +
                ow.getEditorId() +
                "_" +
                ov +
                "' ></div>",
        );
        var oy = $("<span>" + oA + "</div>");
        oz.append(oy);
        oy.css("padding-top", "0px");
        oy.css("padding-left", "2px");
        oy.css("padding-bottom", "2px");
        oy.css("padding-right", "2px");
        oy.css("font-size", "85%");
        oz.css("margin-left", oB);
        oz.button();
        oz.addClass("ui-corner-all");
        oz.addClass("ui-state-active");
        oz.click(function (oC) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
            oC.stopPropagation();
        });
        var ou = new ls();
        ou.setId(ov);
        ou.setElement(oz);
        ou.setDisabled(true);
        ou.setVisible(true);
        ow.addButton(ou);
        return oz;
    };
    r.getButtonOnlyText = function (ow, ov) {
        var ox = gq.translate(ow, "menu_" + ov);
        var oy = $(
            "<div id='" +
                ow.getEditorId() +
                "_" +
                ov +
                "' type='normalButton'>" +
                ox +
                "</div>",
        );
        oy.button();
        oy.addClass("ui-corner-all");
        oy.click(function (oz) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ov);
        ou.setElement(oy);
        ou.setDisabled(false);
        ou.setVisible(true);
        ow.addButton(ou);
        return oy;
    };
    r.getButtonFullText = function (ow, ov) {
        var ox = gq.translate(ow, "menu_" + ov);
        var oy = $(
            "<div id='" +
                ow.getEditorId() +
                "_" +
                ov +
                "'  style='width:98%; height:22px'>" +
                ox +
                "</div>",
        );
        oy.button();
        oy.addClass("ui-corner-all");
        oy.click(function (oz) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ov);
        ou.setElement(oy);
        ou.setDisabled(false);
        ou.setVisible(true);
        ow.addButton(ou);
        return oy;
    };
    r.getButton100Text = function (ow, ov) {
        var ox = gq.translate(ow, "menu_" + ov);
        var oy = $(
            "<div id='" +
                ow.getEditorId() +
                "_" +
                ov +
                "' style='width:48%;height:21px'>" +
                ox +
                "</div>",
        );
        oy.button();
        oy.addClass("ui-corner-all");
        oy.click(function (oz) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ov);
        ou.setElement(oy);
        ou.setDisabled(false);
        ou.setVisible(true);
        ow.addButton(ou);
        return oy;
    };
    r.getStateButtonBig = function (ow, ov, ou, ox, oy) {
        return r.buildStateButton(ow, ov, ou, ox, oy, 32);
    };
    r.getStateButton = function (ow, ov, ou, ox, oy) {
        return r.buildStateButton(ow, ov, ou, ox, oy, 22);
    };
    r.buildStateButton = function (ox, ov, oz, oy, ou, oC) {
        var oB = gq.translate(ox, "menu_" + ov);
        var oA = $("<div id='" + ox.getEditorId() + "_" + ov + "'></div>");
        oA.text("")
            .append(
                "<img src='" +
                    ox.getImgPath() +
                    "/" +
                    oz +
                    "' title='" +
                    oB +
                    "'  height='" +
                    oC +
                    "'/>",
            )
            .button();
        if (oy) {
            oA.button("disable");
        }
        oA.removeClass("ui-corner-all");
        oA.click(function (oD) {
            $(this).toggleClass("ui-state-active");
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ow = new ls();
        ow.setId(ov);
        ow.setElement(oA);
        ow.setDisabled(oy);
        ow.setVisible(true);
        ow.setState(ou);
        ox.addButton(ow);
        return oA;
    };
    r.setStateForButton = function (ou, ov) {
        ou.removeClass("ui-state-active");
        if (ov) {
            ou.addClass("ui-state-active");
        }
    };
    r.setDisabledForButton = function (ou, ov) {
        ou.button();
        if (ov) {
            ou.button("disable");
        } else {
            ou.button("enable");
        }
    };
    r.getButtonMargin = function (ow, ov, ou, oy, oz) {
        var ox = r.getButton(ow, ov, ou, oy);
        ox.css("margin-top", "1px");
        ox.css("margin-right", "0px");
        ox.css("margin-left", oz + "px");
        ox.css("margin-bottom", "0px");
        return ox;
    };
    r.getButtonTextMargin = function (ow, ov, ou, oy, oz) {
        var ox = r.getButtonText(ow, ov, ou, oy);
        ox.css("margin-left", oz + "px");
        return ox;
    };
    r.getButtonUnicode = function (ov, oy, ou) {
        var ow = gq.translate(ov, oy + "_" + ou);
        var ox = $(
            "<div id='" + ov.getEditorId() + "_" + oy + "_" + ou + "'></div>",
        );
        ox.text("")
            .append(
                "<img src='" +
                    ov.getImgFontPath() +
                    "/" +
                    ou +
                    ".png' style='position:relative;top:2px' height='20' width='20' title='" +
                    ow +
                    "'/>",
            )
            .button();
        ox.click(function (oz) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        ox.on("mousedown", function (oz) {
            oz.preventDefault();
        });
        return ox;
    };
    r.getButtonImageSize = function (oy, ow, ov, oA, oz, oD) {
        var oE = "height='" + oD + "'";
        var ox = "width='" + oz + "'";
        if (oD == -1) {
            oE = "";
        }
        if (oz == -1) {
            ox = "";
        }
        var oC = gq.translate(oy, ov + "_" + oA);
        var oB = $(
            "<div id='" + oy.getEditorId() + "_" + ov + "_" + oA + "'></div>",
        );
        oB.text("")
            .append(
                "<img src='" +
                    oy.getImgPath() +
                    "/" +
                    ow +
                    "/" +
                    oA +
                    ".png' style='position:relative;top:2px;' " +
                    oE +
                    " " +
                    ox +
                    " title='" +
                    oC +
                    "'/>",
            )
            .button();
        oB.click(function (oF) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        oB.on("mousedown", function (oF) {
            oF.preventDefault();
        });
        var ou = new ls();
        ou.setId(ov);
        ou.setElement(oB);
        ou.setDisabled(false);
        ou.setVisible(true);
        oy.addButton(ou);
        return oB;
    };
    r.getButtonImage = function (ou, ow, ox, ov) {
        return r.getButtonImageSize(ou, ow, ox, ov, 20, 20);
    };
    r.getButtonImageSizeW = function (ou, ox, oy, ow, ov) {
        return r.getButtonImageSize(ou, ox, oy, ow, ov, -1);
    };
    r.getButtonImageSizeH = function (ou, ox, oy, ow, ov) {
        return r.getButtonImageSize(ou, ox, oy, ow, -1, ov);
    };
    r.getButtonImageNoSize = function (ou, ow, ox, ov) {
        return r.getButtonImageSize(ou, ow, ox, ov, -1, -1);
    };

    function af() {}
    af.addCodeMirror = function (oy, ou, ow, ox) {
        oy.empty();
        var oz = $("<textarea id='" + ou + "_code'>");
        oy.append(oz);
        var ov = null;
        oz.val(ow);
        ov = CodeMirror.fromTextArea(document.getElementById(ou + "_code"), {
            mode: ox,
            styleActiveLine: true,
            lineNumbers: true,
            readOnly: true,
        });
        af.addEvents(ov);
        return ov;
    };
    af.addCodeMirrorV = function (oz, ou, ow, oy) {
        oz.empty();
        var ox = $("<div>MathML</div>");
        ox.addClass("ui-state-active");
        ox.addClass("ui-title");
        ox.addClass("ui-corner-all");
        oz.append(ox);
        oz.append("<br/>");
        var oA = $("<textarea id='" + ou + "_code'>");
        oz.append(oA);
        var ov = null;
        oA.val(ow);
        ov = CodeMirror.fromTextArea(document.getElementById(ou + "_code"), {
            mode: oy,
            styleActiveLine: true,
            readOnly: true,
        });
        af.addEvents(ov);
        return ov;
    };
    af.updateTextCodeMirror = function (ou, ov, ow) {
        if (!af.isCodeMirrorActive(ou)) {
            return;
        }
        af.removeEvents(ov);
        var ox = ov.getCursor();
        ov.getDoc().setValue(ow);
        ov.setCursor(ox);
        ov.centerOnLine(ox.line);
        af.addEvents(ov);
    };
    af.setCursorLine = function (ou, ov, ow) {
        if (!af.isCodeMirrorActive(ou)) {
            return;
        }
        af.removeEvents(ov);
        ov.setCursor(ow);
        ov.centerOnLine(ow);
        af.addEvents(ov);
    };
    af.insertText = function (ou, oy) {
        var ow = "";
        af.removeEvents(ou.getCodeMirror());
        var ov = ou.getCodeMirror().getDoc();
        var ox = ov.getCursor();
        ov.replaceRange(oy, ox);
        ow = ov.getValue();
        af.addEvents(ou.getCodeMirror());
        return ow;
    };
    af.removeEvents = function (ou) {
        ou.off("change", fMathEditorsInterface.changedCodeMirrorHandler);
        ou.off(
            "cursorActivity",
            fMathEditorsInterface.changedCursorCodeMirrorHandler,
        );
    };
    af.addEvents = function (ou) {
        ou.on("change", fMathEditorsInterface.changedCodeMirrorHandler);
        ou.on(
            "cursorActivity",
            fMathEditorsInterface.changedCursorCodeMirrorHandler,
        );
    };
    af.isCodeMirrorActive = function (ou) {
        if (!ou.isMathmlPaneShow()) {
            return false;
        }
        if (ou.getCodeMirror() == null) {
            return false;
        }
        return true;
    };
    af.isCodeMirrorActiveAndFocus = function (ou) {
        if (!af.isCodeMirrorActive(ou)) {
            return false;
        }
        return ou.getCodeMirror().hasFocus();
    };

    function l0() {}
    l0.getSelectCoordinates = function (oy, ox) {
        var oz = gq.translate(oy, "menu_" + ox);
        var oB = gq.translate(oy, "menu_" + ox + "_over");
        var oA = oy.getChartDataBean().getCoordinate();
        var ou = $("<span title='" + oB + "'></span>");
        var ow = $(
            "<select id='" + oy.getEditorId() + "_" + ox + "'></select>",
        );
        ow.append("<option disabled>" + oz + "</option>");
        ow.append(
            "<option value='cartesian2d'>" +
                gq.translate(oy, "menu_" + ox + "_cartesian2d") +
                "</option>",
        );
        ow.append(
            "<option value='cartesian3d'>" +
                gq.translate(oy, "menu_" + ox + "_cartesian3d") +
                "</option>",
        );
        ow.append(
            "<option value='polar'>" +
                gq.translate(oy, "menu_" + ox + "_polar") +
                "</option>",
        );
        ow.selectmenu();
        ow.removeClass("ui-corner-all");
        ow.css("margin-top", "2px");
        ow.css("display", "");
        ow.change(function (oC) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        ow.val(oA);
        var ov = new ls();
        ov.setId(ox);
        ov.setType("selectmenu");
        ov.setElement(ow);
        ov.setDisabled(false);
        ov.setVisible(true);
        ov.setValue(oA);
        oy.addButton(ov);
        ou.append(ow);
        return ou;
    };
    l0.getSelectTheme = function (oy, ox) {
        var oz = gq.translate(oy, "menu_" + ox);
        var oB = gq.translate(oy, "menu_" + ox + "_over");
        var oA = bH.readLocalStorageKey("FMathEditorTheme");
        var ou = $("<span title='" + oB + "'></span>");
        var ow = $(
            "<select id='" + oy.getEditorId() + "_" + ox + "'></select>",
        );
        ow.append("<option disabled>" + oz + "</option>");
        ow.append(
            "<option value='base'>" +
                gq.translate(oy, "menu_" + ox + "_base") +
                "</option>",
        );
        ow.append(
            "<option value='blitzer'>" +
                gq.translate(oy, "menu_" + ox + "_blitzer") +
                "</option>",
        );
        ow.append(
            "<option value='cupertino'>" +
                gq.translate(oy, "menu_" + ox + "_cupertino") +
                "</option>",
        );
        ow.append(
            "<option value='flick'>" +
                gq.translate(oy, "menu_" + ox + "_flick") +
                "</option>",
        );
        ow.append(
            "<option value='humanity'>" +
                gq.translate(oy, "menu_" + ox + "_humanity") +
                "</option>",
        );
        ow.append(
            "<option value='lightness'>" +
                gq.translate(oy, "menu_" + ox + "_lightness") +
                "</option>",
        );
        ow.append(
            "<option value='overcast'>" +
                gq.translate(oy, "menu_" + ox + "_overcast") +
                "</option>",
        );
        ow.append(
            "<option value='pepper'>" +
                gq.translate(oy, "menu_" + ox + "_pepper") +
                "</option>",
        );
        ow.append(
            "<option value='redmonde'>" +
                gq.translate(oy, "menu_" + ox + "_redmonde") +
                "</option>",
        );
        ow.append(
            "<option value='smoothness'>" +
                gq.translate(oy, "menu_" + ox + "_smoothness") +
                "</option>",
        );
        ow.append(
            "<option value='southstreet'>" +
                gq.translate(oy, "menu_" + ox + "_southstreet") +
                "</option>",
        );
        ow.append(
            "<option value='start'>" +
                gq.translate(oy, "menu_" + ox + "_start") +
                "</option>",
        );
        ow.append(
            "<option value='sunny'>" +
                gq.translate(oy, "menu_" + ox + "_sunny") +
                "</option>",
        );
        ow.selectmenu();
        ow.removeClass("ui-corner-all");
        ow.css("margin-top", "2px");
        ow.css("display", "");
        ow.change(function (oC) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        ow.val(oA);
        var ov = new ls();
        ov.setId(ox);
        ov.setType("selectmenu");
        ov.setElement(ow);
        ov.setDisabled(false);
        ov.setVisible(true);
        ov.setValue(oA);
        oy.addButton(ov);
        ou.append(ow);
        return ou;
    };
    l0.getSelectLanguages = function (ox, ou) {
        var oD = gq.translate(ox, "menu_" + ou);
        var oz = $("<span title='" + oD + "'></span>");
        var oE = $(
            "<select id='" + ox.getEditorId() + "_" + ou + "'></select>",
        );
        oE.append("<option disabled>" + oD + "</option>");
        var oy = gq.getLanguages(ox.getEditorType());
        var oB = ox.getLanguage();
        for (var oA = 0; oA < oy.length; oA++) {
            var ow = oy[oA];
            var oF = gq.translate(ox, "language_" + ow);
            var oC = gq.translateFromLang(
                ox.getEditorType(),
                ow,
                "language_" + ow,
            );
            if (oB == ow) {
                oE.append(
                    "<option selected value='" + ow + "'>" + oF + "</option>",
                );
            } else {
                oE.append(
                    "<option value='" +
                        ow +
                        "'>" +
                        oF +
                        " - " +
                        oC +
                        "</option>",
                );
            }
        }
        oE.selectmenu();
        oE.removeClass("ui-corner-all");
        oE.css("margin-top", "2px");
        oE.css("display", "");
        oE.change(function (oG) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        oz.append(oE);
        var ov = new ls();
        ov.setId(ou);
        ov.setType("selectmenu");
        ov.setElement(oE);
        ov.setDisabled(false);
        ov.setVisible(true);
        ox.addButton(ov);
        return oz;
    };
    l0.getSelectZoom = function (oy, ox) {
        var oz = gq.translate(oy, "menu_" + ox);
        var oA = gq.translate(oy, "menu_" + ox + "_over");
        var ou = $("<span title='" + oA + "'></span>");
        var ow = $(
            "<select id='" + oy.getEditorId() + "_" + ox + "'></select>",
        );
        ow.append("<option disabled>" + oz + "</option>");
        ow.append("<option value='25'> 25%</option>");
        ow.append("<option value='50'> 50%</option>");
        ow.append("<option value='75'> 75%</option>");
        ow.append("<option selected value='100'>100%</option>");
        ow.append("<option value='150'>150%</option>");
        ow.append("<option value='200'>200%</option>");
        ow.append("<option value='300'>400%</option>");
        ow.append("<option value='400'>800%</option>");
        ow.selectmenu();
        ow.removeClass("ui-corner-all");
        ow.css("margin-top", "2px");
        ow.css("display", "");
        ow.change(function (oB) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ov = new ls();
        ov.setId(ox);
        ov.setType("selectmenu");
        ov.setElement(ow);
        ov.setDisabled(false);
        ov.setVisible(true);
        oy.addButton(ov);
        ou.append(ow);
        return ou;
    };
    l0.getSelectOperators = function (ow, ou) {
        var oC = gq.translate(ow, "menu_" + ou + "_basic");
        var oB = gq.translate(ow, "menu_" + ou + "_large");
        var oA = gq.translate(ow, "menu_" + ou + "_fenced");
        var oz = gq.translate(ow, "menu_" + ou + "_letter");
        var oy = gq.translate(ow, "menu_" + ou + "_logic");
        var ox = gq.translate(ow, "menu_" + ou + "_arrow");
        var oD = $(
            "<select id='" + ow.getEditorId() + "_" + ou + "'></select>",
        );
        oD.append("<option selected value='basic'>" + oC + "</option>");
        oD.append("<option value='arrow'>" + ox + "</option>");
        oD.append("<option value='large'>" + oB + "</option>");
        oD.append("<option value='fence'>" + oA + "</option>");
        oD.append("<option value='letter'>" + oz + "</option>");
        oD.append("<option value='logic'>" + oy + "</option>");
        oD.selectmenu();
        oD.removeClass("ui-corner-all");
        oD.css("display", "");
        oD.change(function (oE) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ov = new ls();
        ov.setId(ou);
        ov.setType("selectmenu");
        ov.setElement(oD);
        ov.setDisabled(false);
        ov.setVisible(true);
        ov.setValue("basic");
        ow.addButton(ov);
        return oD;
    };
    l0.getUnicodeSelect = function (pq, oQ) {
        var o4 = $(
            "<select id='" + pq.getEditorId() + "_" + oQ + "'></select>",
        );
        var oI = gq.translate(pq, "menu_unicode_0000");
        o4.append("<option value='0000'>" + oI + "</option>");
        var oH = gq.translate(pq, "menu_unicode_0080");
        o4.append("<option value='0080'>" + oH + "</option>");
        var oG = gq.translate(pq, "menu_unicode_0100");
        o4.append("<option value='0100'>" + oG + "</option>");
        var oF = gq.translate(pq, "menu_unicode_0180");
        o4.append("<option value='0180'>" + oF + "</option>");
        var oE = gq.translate(pq, "menu_unicode_0250");
        o4.append("<option value='0250'>" + oE + "</option>");
        var oD = gq.translate(pq, "menu_unicode_02B0");
        o4.append("<option value='02B0'>" + oD + "</option>");
        var oC = gq.translate(pq, "menu_unicode_0300");
        o4.append("<option value='0300'>" + oC + "</option>");
        var oB = gq.translate(pq, "menu_unicode_0370");
        o4.append("<option value='0370'>" + oB + "</option>");
        var oA = gq.translate(pq, "menu_unicode_0400");
        o4.append("<option value='0400'>" + oA + "</option>");
        var pn = gq.translate(pq, "menu_unicode_0500");
        o4.append("<option value='0500'>" + pn + "</option>");
        var pl = gq.translate(pq, "menu_unicode_0530");
        o4.append("<option value='0530'>" + pl + "</option>");
        var pj = gq.translate(pq, "menu_unicode_0590");
        o4.append("<option value='0590'>" + pj + "</option>");
        var ph = gq.translate(pq, "menu_unicode_0600");
        o4.append("<option value='0600'>" + ph + "</option>");
        var pf = gq.translate(pq, "menu_unicode_07C0");
        o4.append("<option value='07C0'>" + pf + "</option>");
        var pd = gq.translate(pq, "menu_unicode_0E80");
        o4.append("<option value='0E80'>" + pd + "</option>");
        var pb = gq.translate(pq, "menu_unicode_10A0");
        o4.append("<option value='10A0'>" + pb + "</option>");
        var o9 = gq.translate(pq, "menu_unicode_13A0");
        o4.append("<option value='13A0'>" + o9 + "</option>");
        var o7 = gq.translate(pq, "menu_unicode_1400");
        o4.append("<option value='1400'>" + o7 + "</option>");
        var o6 = gq.translate(pq, "menu_unicode_1680");
        o4.append("<option value='1680'>" + o6 + "</option>");
        var o1 = gq.translate(pq, "menu_unicode_1D00");
        o4.append("<option value='1D00'>" + o1 + "</option>");
        var oZ = gq.translate(pq, "menu_unicode_1D80");
        o4.append("<option value='1D80'>" + oZ + "</option>");
        var oX = gq.translate(pq, "menu_unicode_1DC0");
        o4.append("<option value='1DC0'>" + oX + "</option>");
        var oV = gq.translate(pq, "menu_unicode_1E00");
        o4.append("<option value='1E00'>" + oV + "</option>");
        var oT = gq.translate(pq, "menu_unicode_1F00");
        o4.append("<option value='1F00'>" + oT + "</option>");
        var oR = gq.translate(pq, "menu_unicode_2000");
        o4.append("<option value='2000'>" + oR + "</option>");
        var oO = gq.translate(pq, "menu_unicode_2070");
        o4.append("<option value='2070'>" + oO + "</option>");
        var oM = gq.translate(pq, "menu_unicode_20A0");
        o4.append("<option value='20A0'>" + oM + "</option>");
        var oK = gq.translate(pq, "menu_unicode_20D0");
        o4.append("<option value='20D0'>" + oK + "</option>");
        var oJ = gq.translate(pq, "menu_unicode_2100");
        o4.append("<option value='2100'>" + oJ + "</option>");
        var ox = gq.translate(pq, "menu_unicode_2150");
        o4.append("<option value='2150'>" + ox + "</option>");
        var ov = gq.translate(pq, "menu_unicode_2190");
        o4.append("<option value='2190'>" + ov + "</option>");
        var pA = gq.translate(pq, "menu_unicode_2200");
        o4.append("<option value='2200'>" + pA + "</option>");
        var py = gq.translate(pq, "menu_unicode_2300");
        o4.append("<option value='2300'>" + py + "</option>");
        var pw = gq.translate(pq, "menu_unicode_2460");
        o4.append("<option value='2460'>" + pw + "</option>");
        var pv = gq.translate(pq, "menu_unicode_2500");
        o4.append("<option value='2500'>" + pv + "</option>");
        var pu = gq.translate(pq, "menu_unicode_2580");
        o4.append("<option value='2580'>" + pu + "</option>");
        var pt = gq.translate(pq, "menu_unicode_25A0");
        o4.append("<option value='25A0'>" + pt + "</option>");
        var ps = gq.translate(pq, "menu_unicode_2600");
        o4.append("<option value='2600'>" + ps + "</option>");
        var pr = gq.translate(pq, "menu_unicode_2700");
        o4.append("<option value='2700'>" + pr + "</option>");
        var pp = gq.translate(pq, "menu_unicode_27C0");
        o4.append("<option value='27C0'>" + pp + "</option>");
        var po = gq.translate(pq, "menu_unicode_27F0");
        o4.append("<option value='27F0'>" + po + "</option>");
        var pm = gq.translate(pq, "menu_unicode_2800");
        o4.append("<option value='2800'>" + pm + "</option>");
        var pk = gq.translate(pq, "menu_unicode_2900");
        o4.append("<option value='2900'>" + pk + "</option>");
        var pi = gq.translate(pq, "menu_unicode_2980");
        o4.append("<option value='2980'>" + pi + "</option>");
        var pg = gq.translate(pq, "menu_unicode_2A00");
        o4.append("<option value='2A00'>" + pg + "</option>");
        var pe = gq.translate(pq, "menu_unicode_2B00");
        o4.append("<option value='2B00'>" + pe + "</option>");
        var pc = gq.translate(pq, "menu_unicode_2C60");
        o4.append("<option value='2C60'>" + pc + "</option>");
        var pa = gq.translate(pq, "menu_unicode_2D30");
        o4.append("<option value='2D30'>" + pa + "</option>");
        var o8 = gq.translate(pq, "menu_unicode_2E00");
        o4.append("<option value='2E00'>" + o8 + "</option>");
        var o3 = gq.translate(pq, "menu_unicode_3000");
        o4.append("<option value='3000'>" + o3 + "</option>");
        var o2 = gq.translate(pq, "menu_unicode_3040");
        o4.append("<option value='3040'>" + o2 + "</option>");
        var o0 = gq.translate(pq, "menu_unicode_30A0");
        o4.append("<option value='30A0'>" + o0 + "</option>");
        var oY = gq.translate(pq, "menu_unicode_4DC0");
        o4.append("<option value='4DC0'>" + oY + "</option>");
        var oW = gq.translate(pq, "menu_unicode_4E00");
        o4.append("<option value='4E00'>" + oW + "</option>");
        var oU = gq.translate(pq, "menu_unicode_A640");
        o4.append("<option value='A640'>" + oU + "</option>");
        var oS = gq.translate(pq, "menu_unicode_A700");
        o4.append("<option value='A700'>" + oS + "</option>");
        var oP = gq.translate(pq, "menu_unicode_A720");
        o4.append("<option value='A720'>" + oP + "</option>");
        var oN = gq.translate(pq, "menu_unicode_AC00");
        o4.append("<option value='AC00'>" + oN + "</option>");
        var oL = gq.translate(pq, "menu_unicode_D7B0");
        o4.append("<option value='D7B0'>" + oL + "</option>");
        var oz = gq.translate(pq, "menu_unicode_E000");
        o4.append("<option value='E000'>" + oz + "</option>");
        var oy = gq.translate(pq, "menu_unicode_F900");
        o4.append("<option value='F900'>" + oy + "</option>");
        var ow = gq.translate(pq, "menu_unicode_FB00");
        o4.append("<option value='FB00'>" + ow + "</option>");
        var ou = gq.translate(pq, "menu_unicode_FB50");
        o4.append("<option value='FB50'>" + ou + "</option>");
        var pz = gq.translate(pq, "menu_unicode_FE70");
        o4.append("<option value='FE70'>" + pz + "</option>");
        var px = gq.translate(pq, "menu_unicode_FF00");
        o4.append("<option value='FF00'>" + px + "</option>");
        o4.selectmenu();
        o4.removeClass("ui-corner-all");
        o4.css("display", "");
        o4.change(function (pB) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var o5 = new ls();
        o5.setId(oQ);
        o5.setType("selectmenu");
        o5.setElement(o4);
        o5.setDisabled(false);
        o5.setVisible(true);
        o5.setValue("0000");
        pq.addButton(o5);
        return o4;
    };
    l0.getChineseSelect = function (ox, ow) {
        var ov = $(
            "<select id='" + ox.getEditorId() + "_" + ow + "'></select>",
        );
        ov.append("<option value='4E00-4FFF'>4E00-4FFF</option>");
        ov.append("<option value='5000-51FF'>5000-51FF</option>");
        ov.append("<option value='5200-53FF'>5200-53FF</option>");
        ov.append("<option value='5400-55FF'>5400-55FF</option>");
        ov.append("<option value='5600-57FF'>5600-57FF</option>");
        ov.append("<option value='5800-59FF'>5800-59FF</option>");
        ov.append("<option value='5A00-5BFF'>5A00-5BFF</option>");
        ov.append("<option value='5C00-5DFF'>5C00-5DFF</option>");
        ov.append("<option value='5E00-5FFF'>5E00-5FFF</option>");
        ov.append("<option value='6000-61FF'>6000-61FF</option>");
        ov.append("<option value='6200-63FF'>6200-63FF</option>");
        ov.append("<option value='6400-65FF'>6400-65FF</option>");
        ov.append("<option value='6600-67FF'>6600-67FF</option>");
        ov.append("<option value='6800-69FF'>6800-69FF</option>");
        ov.append("<option value='6A00-6BFF'>6A00-6BFF</option>");
        ov.append("<option value='6C00-6DFF'>6C00-6DFF</option>");
        ov.append("<option value='6E00-6FFF'>6E00-6FFF</option>");
        ov.append("<option value='7000-71FF'>7000-71FF</option>");
        ov.append("<option value='7200-73FF'>7200-73FF</option>");
        ov.append("<option value='7400-75FF'>7400-75FF</option>");
        ov.append("<option value='7600-77FF'>7600-77FF</option>");
        ov.append("<option value='7800-79FF'>7800-79FF</option>");
        ov.append("<option value='7A00-7BFF'>7A00-7BFF</option>");
        ov.append("<option value='7C00-7DFF'>7C00-7DFF</option>");
        ov.append("<option value='7E00-7FFF'>7E00-7FFF</option>");
        ov.append("<option value='8000-81FF'>8000-81FF</option>");
        ov.append("<option value='8200-83FF'>8200-83FF</option>");
        ov.append("<option value='8400-85FF'>8400-85FF</option>");
        ov.append("<option value='8600-87FF'>8600-87FF</option>");
        ov.append("<option value='8800-89FF'>8800-89FF</option>");
        ov.append("<option value='8A00-8BFF'>8A00-8BFF</option>");
        ov.append("<option value='8C00-8DFF'>8C00-8DFF</option>");
        ov.append("<option value='8E00-8FFF'>8E00-8FFF</option>");
        ov.append("<option value='9000-91FF'>9000-91FF</option>");
        ov.append("<option value='9200-93FF'>9200-93FF</option>");
        ov.append("<option value='9400-95FF'>9400-95FF</option>");
        ov.append("<option value='9600-97FF'>9600-97FF</option>");
        ov.append("<option value='9800-99FF'>9800-99FF</option>");
        ov.append("<option value='9A00-9BFF'>9A00-9BFF</option>");
        ov.append("<option value='9C00-9DFF'>9C00-9DFF</option>");
        ov.append("<option value='9E00-9FFF'>9E00-9FFF</option>");
        ov.selectmenu();
        ov.removeClass("ui-corner-all");
        ov.css("display", "");
        ov.change(function (oy) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        var ou = new ls();
        ou.setId(ow);
        ou.setType("selectmenu");
        ou.setElement(ov);
        ou.setDisabled(false);
        ou.setVisible(true);
        ou.setValue("4E00-4FFF");
        ox.addButton(ou);
        return ov;
    };
    l0.getSelectColor = function (ow, ou, oE, ox, oC) {
        var oF = gq.translate(ow, "menu_" + ou);
        var oA = gq.translate(ow, "menu_color_more");
        var oB = gq.translate(ow, "menu_color_less");
        var oH = gq.translate(ow, "menu_color_choose");
        var oD = gq.translate(ow, "menu_color_cancel");
        var oy = $("<span title='" + oF + "'></span>");
        oE.append(oy);
        var oz = $(
            "<img src='" +
                ow.getImgPath() +
                "/" +
                oC +
                "' title='" +
                oF +
                "'  height='22'/>",
        );
        oy.append(oz);
        var oG = $(
            "<input type='text' id='" +
                ow.getEditorId() +
                "_" +
                ou +
                "' ></input>",
        );
        oy.append(oG);
        oG.spectrum({
            showPaletteOnly: true,
            togglePaletteOnly: true,
            hideAfterPaletteSelect: true,
            showInput: true,
            preferredFormat: "hex",
            togglePaletteMoreText: oA,
            togglePaletteLessText: oB,
            chooseText: oH,
            cancelText: oD,
            color: ox,
            change: function (oI) {
                fMathEditorsInterface.clickedButton($(this).attr("id"));
            },
            palette: [
                [
                    "#000",
                    "#444",
                    "#666",
                    "#999",
                    "#ccc",
                    "#eee",
                    "#f3f3f3",
                    "#fff",
                ],
                [
                    "#f00",
                    "#f90",
                    "#ff0",
                    "#0f0",
                    "#0ff",
                    "#00f",
                    "#90f",
                    "#f0f",
                ],
                [
                    "#f4cccc",
                    "#fce5cd",
                    "#fff2cc",
                    "#d9ead3",
                    "#d0e0e3",
                    "#cfe2f3",
                    "#d9d2e9",
                    "#ead1dc",
                ],
                [
                    "#ea9999",
                    "#f9cb9c",
                    "#ffe599",
                    "#b6d7a8",
                    "#a2c4c9",
                    "#9fc5e8",
                    "#b4a7d6",
                    "#d5a6bd",
                ],
                [
                    "#e06666",
                    "#f6b26b",
                    "#ffd966",
                    "#93c47d",
                    "#76a5af",
                    "#6fa8dc",
                    "#8e7cc3",
                    "#c27ba0",
                ],
                [
                    "#c00",
                    "#e69138",
                    "#f1c232",
                    "#6aa84f",
                    "#45818e",
                    "#3d85c6",
                    "#674ea7",
                    "#a64d79",
                ],
                [
                    "#900",
                    "#b45f06",
                    "#bf9000",
                    "#38761d",
                    "#134f5c",
                    "#0b5394",
                    "#351c75",
                    "#741b47",
                ],
                [
                    "#600",
                    "#783f04",
                    "#7f6000",
                    "#274e13",
                    "#0c343d",
                    "#073763",
                    "#20124d",
                    "#4c1130",
                ],
            ],
        });
        var ov = new ls();
        ov.setId(ou);
        ov.setType("spectrum");
        ov.setElement(oG);
        ov.setDisabled(false);
        ov.setVisible(true);
        ov.setValue(ox);
        ow.addButton(ov);
        return oy;
    };
    l0.getSelectColorElem = function (ow, oC, ov, ox, oE) {
        var oy = gq.translate(ow, "menu_color_more");
        var oA = gq.translate(ow, "menu_color_less");
        var oF = gq.translate(ow, "menu_color_choose");
        var oB = gq.translate(ow, "menu_color_cancel");
        var oD = $(
            "<input type='text' id='" +
                ow.getEditorId() +
                "_" +
                ov +
                "' style='height:" +
                oE +
                "px'></input>",
        );
        oC.append(oD);
        oD.spectrum({
            showPaletteOnly: true,
            togglePaletteOnly: true,
            hideAfterPaletteSelect: true,
            showInput: true,
            preferredFormat: "hex",
            togglePaletteMoreText: oy,
            togglePaletteLessText: oA,
            chooseText: oF,
            cancelText: oB,
            color: ox,
            change: function (oG) {
                fMathEditorsInterface.clickedButton($(this).attr("id"));
            },
            palette: [
                [
                    "#000",
                    "#444",
                    "#666",
                    "#999",
                    "#ccc",
                    "#eee",
                    "#f3f3f3",
                    "#fff",
                ],
                [
                    "#f00",
                    "#f90",
                    "#ff0",
                    "#0f0",
                    "#0ff",
                    "#00f",
                    "#90f",
                    "#f0f",
                ],
                [
                    "#f4cccc",
                    "#fce5cd",
                    "#fff2cc",
                    "#d9ead3",
                    "#d0e0e3",
                    "#cfe2f3",
                    "#d9d2e9",
                    "#ead1dc",
                ],
                [
                    "#ea9999",
                    "#f9cb9c",
                    "#ffe599",
                    "#b6d7a8",
                    "#a2c4c9",
                    "#9fc5e8",
                    "#b4a7d6",
                    "#d5a6bd",
                ],
                [
                    "#e06666",
                    "#f6b26b",
                    "#ffd966",
                    "#93c47d",
                    "#76a5af",
                    "#6fa8dc",
                    "#8e7cc3",
                    "#c27ba0",
                ],
                [
                    "#c00",
                    "#e69138",
                    "#f1c232",
                    "#6aa84f",
                    "#45818e",
                    "#3d85c6",
                    "#674ea7",
                    "#a64d79",
                ],
                [
                    "#900",
                    "#b45f06",
                    "#bf9000",
                    "#38761d",
                    "#134f5c",
                    "#0b5394",
                    "#351c75",
                    "#741b47",
                ],
                [
                    "#600",
                    "#783f04",
                    "#7f6000",
                    "#274e13",
                    "#0c343d",
                    "#073763",
                    "#20124d",
                    "#4c1130",
                ],
            ],
        });
        var ou = oC.find(".sp-replacer");
        ou.css("height", oE + "px");
        var oz = oC.find(".sp-preview");
        oz.css("height", oE - 2 + "px");
        return oD;
    };
    l0.getSelectTransparentColor = function (ow, ou, oE, ox, oC) {
        var oF = gq.translate(ow, "menu_" + ou);
        var oA = gq.translate(ow, "menu_color_more");
        var oB = gq.translate(ow, "menu_color_less");
        var oH = gq.translate(ow, "menu_color_choose");
        var oD = gq.translate(ow, "menu_color_cancel");
        var oy = $("<span title='" + oF + "'></span>");
        oE.append(oy);
        var oz = $(
            "<img src='" +
                ow.getImgPath() +
                "/" +
                oC +
                "' title='" +
                oF +
                "'  height='22'/>",
        );
        oy.append(oz);
        var oG = $(
            "<input type='text' id='" +
                ow.getEditorId() +
                "_" +
                ou +
                "' ></input>",
        );
        oy.append(oG);
        oG.spectrum({
            showPaletteOnly: true,
            togglePaletteOnly: true,
            hideAfterPaletteSelect: true,
            showInput: true,
            preferredFormat: "hex",
            togglePaletteMoreText: oA,
            togglePaletteLessText: oB,
            chooseText: oH,
            cancelText: oD,
            color: ox,
            change: function (oI) {
                if (oI.getAlpha() === 0) {
                    oI = "transparent";
                } else {
                    oI = oI.toHexString();
                }
                $(this).val(oI);
                fMathEditorsInterface.clickedButton($(this).attr("id"));
            },
            palette: [
                [
                    "#000",
                    "#444",
                    "#666",
                    "#999",
                    "#ccc",
                    "#eee",
                    "#fff",
                    "transparent",
                ],
                [
                    "#f00",
                    "#f90",
                    "#ff0",
                    "#0f0",
                    "#0ff",
                    "#00f",
                    "#90f",
                    "#f0f",
                ],
                [
                    "#f4cccc",
                    "#fce5cd",
                    "#fff2cc",
                    "#d9ead3",
                    "#d0e0e3",
                    "#cfe2f3",
                    "#d9d2e9",
                    "#ead1dc",
                ],
                [
                    "#ea9999",
                    "#f9cb9c",
                    "#ffe599",
                    "#b6d7a8",
                    "#a2c4c9",
                    "#9fc5e8",
                    "#b4a7d6",
                    "#d5a6bd",
                ],
                [
                    "#e06666",
                    "#f6b26b",
                    "#ffd966",
                    "#93c47d",
                    "#76a5af",
                    "#6fa8dc",
                    "#8e7cc3",
                    "#c27ba0",
                ],
                [
                    "#c00",
                    "#e69138",
                    "#f1c232",
                    "#6aa84f",
                    "#45818e",
                    "#3d85c6",
                    "#674ea7",
                    "#a64d79",
                ],
                [
                    "#900",
                    "#b45f06",
                    "#bf9000",
                    "#38761d",
                    "#134f5c",
                    "#0b5394",
                    "#351c75",
                    "#741b47",
                ],
                [
                    "#600",
                    "#783f04",
                    "#7f6000",
                    "#274e13",
                    "#0c343d",
                    "#073763",
                    "#20124d",
                    "#4c1130",
                ],
            ],
        });
        var ov = new ls();
        ov.setId(ou);
        ov.setType("spectrum");
        ov.setElement(oG);
        ov.setDisabled(false);
        ov.setVisible(true);
        ov.setValue(ox);
        ow.addButton(ov);
        return oy;
    };
    l0.getSelectFont = function (ow, ou, oC) {
        var oF = gq.translate(ow, "menu_" + ou);
        var ox = $("<span title='" + oF + "'></span>");
        var oz = $(
            "<img src='" +
                ow.getImgPath() +
                "/" +
                oC +
                "' title='" +
                oF +
                "'  height='22'/>",
        );
        ox.append(oz);
        var oG = $(
            "<select id='" + ow.getEditorId() + "_" + ou + "'></select>",
        );
        oG.append("<option disabled>" + oF + "</option>");
        oG.append("<option value='normal'>Serif</option>");
        oG.append("<option value='double-struck'>Double Struck</option>");
        oG.append("<option value='fraktur'>Fraktur</option>");
        oG.append("<option value='script'>Script</option>");
        oG.append("<option value='sans-serif'>Sans Serif</option>");
        oG.append("<option value='monospace'>Monospace</option>");
        var oB = ow
            .getSaveLocalStorage()
            .getSaveClientData()
            .getListCustomFonts();
        if (oB != null) {
            var oE = gq.translate(ow, "dialog_add_local_font_label");
            var oA = gq.translate(ow, "dialog_add_google_font_label");
            if (oB.size() > 0) {
                oG.append("<option disabled>───────────────</option>");
            }
            for (var oy = 0; oy < oB.size(); oy++) {
                var oD = oB.get(oy);
                if (oD.getValue().indexOf("local:") == 0) {
                    oG.append(
                        "<option value='" +
                            oD.getValue() +
                            "'>" +
                            oE +
                            oD.getName() +
                            "</option>",
                    );
                } else {
                    oG.append(
                        "<option value='" +
                            oD.getValue() +
                            "'>" +
                            oA +
                            oD.getName() +
                            "</option>",
                    );
                }
            }
        }
        oG.append("<option disabled>───────────────</option>");
        oG.append("<option value='addLocal'>Add Local Font ...</option>");
        oG.append("<option value='addGoogle'>Add Google Font ...</option>");
        oG.selectmenu();
        oG.removeClass("ui-corner-all");
        oG.css("display", "");
        oG.change(function (oH) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
        ox.append(oG);
        var ov = new ls();
        ov.setId(ou);
        ov.setType("selectmenu");
        ov.setElement(oG);
        ov.setDisabled(false);
        ov.setVisible(true);
        ow.addButton(ov);
        return ox;
    };
    l0.updateSelectFont = function (ov, ou) {
        var oD = gq.translate(ov, "menu_" + ou);
        var ow = ov.getButton(ou).getElement();
        ow.empty();
        ow.append("<option disabled>" + oD + "</option>");
        ow.append("<option value='normal'>Serif</option>");
        ow.append("<option value='double-struck'>Double Struck</option>");
        ow.append("<option value='fraktur'>Fraktur</option>");
        ow.append("<option value='script'>Script</option>");
        ow.append("<option value='sans-serif'>Sans Serif</option>");
        ow.append("<option value='monospace'>Monospace</option>");
        var oA = ov
            .getSaveLocalStorage()
            .getSaveClientData()
            .getListCustomFonts();
        if (oA != null) {
            var oC = gq.translate(ov, "dialog_add_local_font_label");
            var oz = gq.translate(ov, "dialog_add_google_font_label");
            var oy = true;
            for (var ox = 0; ox < oA.size(); ox++) {
                var oB = oA.get(ox);
                if (oB.isRemove()) {
                    continue;
                }
                if (oy) {
                    if (oA.size() > 0) {
                        ow.append("<option disabled>───────────────</option>");
                    }
                    oy = false;
                }
                if (oB.getValue().indexOf("local:") == 0) {
                    ow.append(
                        "<option value='" +
                            oB.getValue() +
                            "'>" +
                            oC +
                            oB.getName() +
                            "</option>",
                    );
                } else {
                    ow.append(
                        "<option value='" +
                            oB.getValue() +
                            "'>" +
                            oz +
                            oB.getName() +
                            "</option>",
                    );
                }
            }
        }
        ow.append("<option disabled>───────────────</option>");
        ow.append("<option value='addLocal'>Add Local Font ...</option>");
        ow.append("<option value='addGoogle'>Add Google Font ...</option>");
        ow.selectmenu();
    };
    l0.getSelectFontSize = function (ox, ow) {
        var ov = $(
            "<input type='number' class='selectFontSize' style='width:50px' min='7' id='" +
                ox.getEditorId() +
                "_" +
                ow +
                "'></input>",
        );
        ov.removeClass("ui-corner-all");
        ov.removeClass("ui-state-active");
        ov.css("vertical-align", "top");
        ov.change(function (oy) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
            return false;
        });
        var ou = new ls();
        ou.setId(ow);
        ou.setType("selectmenu");
        ou.setElement(ov);
        ou.setDisabled(false);
        ou.setVisible(true);
        ox.addButton(ou);
        return ov;
    };
    l0.setSelect = function (ov, ox) {
        var ow = ov.getElement();
        if (ox.indexOf(".") > -1) {
            ox = ox.substring(0, ox.indexOf("."));
        }
        ow.find("option[id='custom']").remove();
        var ou = false;
        ow.find("option").each(function () {
            if (this.value == ox) {
                ou = true;
            }
        });
        if (!ou) {
            ow.append(
                "<option id='custom' value='" + ox + "'>" + ox + "%</option>",
            );
        }
        ow.val(ox);
        ov.setValue(ox);
        ow.removeClass("ui-state-active");
    };
    l0.setSelectColor = function (ow, ou) {
        var ov = ow.getElement();
        ov.spectrum("set", ou);
        ow.setValue(ou);
    };
    l0.selectAddListener = function (ou) {
        ou.change(function (ov) {
            fMathEditorsInterface.clickedButton($(this).attr("id"));
        });
    };

    function dr() {}
    dr.makeRisizable = function (ow) {
        ow.addClass("ui-corner-all ui-widget-content");
        var ou = false;
        if (ow.parent() != null) {
            var ov = ow.parent().offset().left;
            var ox = ow.offset().left;
            if (Math.abs(ov - ox) > 2) {
                ou = true;
            }
        }
        if (ou) {
            ow.resizable({
                resize: function (oA, oB) {
                    var oz =
                        oB.originalSize.width +
                        (oB.size.width - oB.originalSize.width) * 2;
                    $(this).width(oz);
                    var oy = $(this).attr("name");
                    $("#" + oy + "_mainLayout").width(oz - 2);
                    $("#" + oy + "_mainLayout").height(oB.size.height - 2);
                    $("#" + oy + "_mainLayout").resize();
                },
            });
        } else {
            ow.resizable({
                resize: function (oz, oA) {
                    var oy = $(this).attr("name");
                    $("#" + oy + "_mainLayout").width(oA.size.width - 2);
                    $("#" + oy + "_mainLayout").height(oA.size.height - 2);
                    $("#" + oy + "_mainLayout").resize();
                },
            });
        }
    };

    function i2() {}
    i2.prototype.createDialog = function (ou, ov) {
        var ow = gq.translate(ov, "dialog_warning");
        var ox = $(
            "<div id='" +
                ov.getEditorId() +
                "dialog_warning' title='" +
                ow +
                "'><center><img src='" +
                ov.getImgPath() +
                "/warning-icon.png' border='0'/><br/><h3 id='" +
                ov.getEditorId() +
                "dialog_warning_text'></h3></center></div>",
        );
        ou.append(ox);
        ox.dialog({
            autoOpen: false,
        });
    };
    i2.show = function (ov, ox) {
        var ow = $("#" + ov.getEditorId() + "dialog_warning");
        var ou = $("#" + ov.getEditorId() + "dialog_warning_text");
        ou.text(ox);
        ow.dialog("open");
        ow.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ov.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    i2.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_warning");
        ov.dialog("destroy").remove();
    };

    function iB() {}
    iB.prototype.createDialog = function (oA, oP) {
        var oS = gq.translate(oP, "dialog_nav_title");
        var oQ = gq.translate(oP, "dialog_nav_text1");
        var oO = gq.translate(oP, "dialog_nav_text2");
        var oN = gq.translate(oP, "dialog_nav_text3");
        var oM = gq.translate(oP, "dialog_nav_text4");
        var oL = gq.translate(oP, "dialog_nav_text5");
        var oK = gq.translate(oP, "dialog_nav_text6");
        var oJ = gq.translate(oP, "dialog_nav_text7");
        var oI = gq.translate(oP, "dialog_nav_text8");
        var oF =
            "<table width='100%'><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_right.png' border='0' height='26'/></td><td><nobr><b>" +
            oQ +
            "</b></nobr></td><td align='right'><img src='" +
            oP.getImgPath() +
            "/key-del.png' border='0' height='26'/></td><td><nobr><b>" +
            oL +
            "</b></nobr></td></tr><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_left.png' border='0' height='26'/></td><td><nobr><b>" +
            oO +
            "</b></nobr></td><td  align='right'><img src='" +
            oP.getImgPath() +
            "/key-back.png' border='0' height='26'/></td><td><nobr><b>" +
            oK +
            "</b></nobr></td></tr><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_up.png' border='0' height='26'/></td><td><nobr><b>" +
            oN +
            "</b></nobr></td><td align='right'><img src='" +
            oP.getImgPath() +
            "/key-tab.png' border='0' height='26'/></td><td><nobr><b>" +
            oJ +
            "</b></nobr></td></tr><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_bottom.png' border='0' height='26'/></td><td><nobr><b>" +
            oM +
            "</b></nobr></td><td align='right'><nobr><img src='" +
            oP.getImgPath() +
            "/key-shift.png' border='0' height='26'/><img src='" +
            oP.getImgPath() +
            "/key-tab.png' border='0' height='26'/></nobr></td><td><nobr><b>" +
            oI +
            "</b></nobr></td></tr></table>";
        var oC =
            "<table width='100%'><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_right.png' border='0' height='26'/></td><td><nobr><b>" +
            oQ +
            "</b></nobr></td></tr><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_left.png' border='0' height='26'/></td><td><nobr><b>" +
            oO +
            "</b></nobr></td></tr><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_up.png' border='0' height='26'/></td><td><nobr><b>" +
            oN +
            "</b></nobr></td></tr><tr><td><img src='" +
            oP.getImgPath() +
            "/arrow_bottom.png' border='0' height='26'/></td><td><nobr><b>" +
            oM +
            "</b></nobr></td></tr><tr><td align='right'><img src='" +
            oP.getImgPath() +
            "/key-del.png' border='0' height='26'/></td><td><nobr><b>" +
            oL +
            "</b></nobr></td></tr><tr><td  align='right'><img src='" +
            oP.getImgPath() +
            "/key-back.png' border='0' height='26'/></td><td><nobr><b>" +
            oK +
            "</b></nobr></td></tr><tr><td align='right'><img src='" +
            oP.getImgPath() +
            "/key-tab.png' border='0' height='26'/></td><td><nobr><b>" +
            oJ +
            "</b></nobr></td></tr><tr><td align='right'><nobr><img src='" +
            oP.getImgPath() +
            "/key-shift.png' border='0' height='26'/><img src='" +
            oP.getImgPath() +
            "/key-tab.png' border='0' height='26'/></nobr></td><td><nobr><b>" +
            oI +
            "</b></nobr></td></tr></table>";
        var oB = oF;
        if (oP.isVerticalLayout()) {
            oB = oC;
        }
        var oz = gq.translate(oP, "dialog_nav_textM1");
        var oy = gq.translate(oP, "dialog_nav_textM2");
        var ox = gq.translate(oP, "dialog_nav_textM3");
        var ov = gq.translate(oP, "dialog_nav_textM4");
        var oD =
            "<table width='100%'><tr><td><b>" +
            oz +
            "</b></td><td><nobr><b>" +
            oy +
            "</b></nobr></td></tr><tr><td><b>" +
            ox +
            "</b></td><td><nobr><b>" +
            ov +
            "</b></nobr></td></tr></table>";
        var oR = $(
            "<div id='" +
                oP.getEditorId() +
                "dialog_nav' title='" +
                oS +
                "'></div>",
        );
        var oH = oP.getEditorId();
        var ow = gq.translate(oP, "dialog_nav_keyboard");
        var oE = gq.translate(oP, "dialog_nav_mouse");
        var ou =
            "<div id='" +
            oH +
            "_nav_tabs'>  <ul>    <li><a href='#" +
            oH +
            "_nav_keyboard'>" +
            ow +
            "</a></li>    <li><a href='#" +
            oH +
            "_nav_mouse'>" +
            oE +
            "</a></li>  </ul>  <div id='" +
            oH +
            "_nav_keyboard'>" +
            oB +
            "</div>  <div id='" +
            oH +
            "_nav_mouse'>" +
            oD +
            "</div></div>";
        var oG = $(ou);
        oG.css("border", "0px");
        oG.css("padding", "0px");
        oG.css("overflow", "hidden");
        oG.tabs();
        oR.append(oG);
        oA.append(oR);
        oR.dialog({
            autoOpen: false,
            width: 550,
        });
    };
    iB.show = function (ov) {
        var ou = $("#" + ov.getEditorId() + "dialog_nav");
        ou.dialog("open");
        ou.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ov.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    iB.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_nav");
        ov.dialog("destroy").remove();
    };

    function fn(ov, ou) {
        this.keyName;
        this.name;
        this.value;
        this.onlyPositive = false;
        this.disabled = false;
        this.type;
        this.font;
        this.img;
        this.height = 17;
        this.param;
        this.addParamToText = false;
        this.options = new fM();
        this.menuList = new fM();
        this.keyName = ov;
        this.img = ou;
    }
    fn.prototype.isAddParamToText = function () {
        return this.addParamToText;
    };
    fn.prototype.setAddParamToText = function (ou) {
        this.addParamToText = ou;
    };
    fn.prototype.getKeyName = function () {
        return this.keyName;
    };
    fn.prototype.setKeyName = function (ou) {
        this.keyName = ou;
    };
    fn.prototype.getValue = function () {
        return this.value;
    };
    fn.prototype.setValue = function (ou) {
        this.value = ou;
    };
    fn.prototype.getType = function () {
        return this.type;
    };
    fn.prototype.setType = function (ou) {
        this.type = ou;
    };
    fn.prototype.getOptions = function () {
        return this.options;
    };
    fn.prototype.addOptions = function (ou) {
        this.options.add(ou);
    };
    fn.prototype.setOptions = function (ou) {
        this.options = ou;
    };
    fn.prototype.getFont = function () {
        return this.font;
    };
    fn.prototype.setFont = function (ou) {
        this.font = ou;
    };
    fn.prototype.getImg = function () {
        return this.img;
    };
    fn.prototype.setImg = function (ou) {
        this.img = this.img;
    };
    fn.prototype.isOnlyPositive = function () {
        return this.onlyPositive;
    };
    fn.prototype.setOnlyPositive = function (ou) {
        this.onlyPositive = ou;
    };
    fn.prototype.getParam = function () {
        return this.param;
    };
    fn.prototype.setParam = function (ou) {
        this.param = ou;
    };
    fn.prototype.isDisabled = function () {
        return this.disabled;
    };
    fn.prototype.setDisabled = function (ou) {
        this.disabled = ou;
    };
    fn.prototype.getMenuList = function () {
        return this.menuList;
    };
    fn.prototype.addMenuList = function (ou) {
        this.menuList.add(ou);
    };
    fn.prototype.getName = function () {
        return this.name;
    };
    fn.prototype.setName = function (ou) {
        this.name = ou;
    };
    fn.prototype.getHeight = function () {
        return this.height;
    };
    fn.prototype.setHeight = function (ou) {
        this.height = ou;
    };

    function kY(ou) {
        this.keyName;
        this.name;
        this.attList = new fM();
        this.selected = false;
        this.toDelete = false;
        this.keyName = ou;
    }
    kY.prototype.getAttList = function () {
        return this.attList;
    };
    kY.prototype.addAttList = function (ou) {
        this.attList.add(ou);
    };
    kY.prototype.getKeyName = function () {
        return this.keyName;
    };
    kY.prototype.isSelected = function () {
        return this.selected;
    };
    kY.prototype.setSelected = function (ou) {
        this.selected = ou;
    };
    kY.prototype.addSpacer = function () {
        var ou = new fn("", "");
        ou.setType(gO);
        this.addAttList(ou);
    };
    kY.prototype.getName = function () {
        return this.name;
    };
    kY.prototype.setName = function (ou) {
        this.name = ou;
    };
    kY.prototype.isDelete = function () {
        return this.toDelete;
    };
    kY.prototype.setDelete = function (ou) {
        this.toDelete = ou;
    };

    function nJ() {}

    function cA() {}
    cA.drawProperties = function (oy, ov, oB, ow) {
        for (var oz = 0; oz < oB.size(); oz++) {
            var oD = oB.get(oz);
            var oE = cA.getTranslate(oy, oD.getKeyName(), null);
            if (oD.getName() != null) {
                oE = oE + " " + oD.getName();
            }
            var ox = "";
            if (oD.isDelete()) {
                var ou = cA.getTranslate(oy, oD.getKeyName() + "_delete", null);
                ox =
                    "<img title='" +
                    ou +
                    "' id='" +
                    oy.getEditorId() +
                    "_" +
                    oD.getKeyName() +
                    "_delete' valign='middle' src='" +
                    oy.getImgPath() +
                    "/MailDelete.png' width='16' border='1' style='float: right; background-color: white;' onclick=\"fMathEditorsInterface.clickedButton($(this).attr('id'));\"/>";
            }
            var oC = $(
                "<h3 id='" +
                    oy.getEditorId() +
                    "_" +
                    oD.getKeyName() +
                    "'>" +
                    oE +
                    ox +
                    "</h3>",
            );
            ov.append(oC);
            var oA = $("<div></div>");
            oA.css("font-size", "90%");
            ov.append(oA);
            cA.addAttributesToContent(
                oy,
                oA,
                oD.getAttList(),
                oD.getKeyName(),
                ow,
            );
        }
    };
    cA.addAttributesToContent = function (o3, oE, oX, pl, oH) {
        var oT = (oH - 70) / 2 + "px";
        var oW = (oH - 50) / 4 + "px";
        for (var pe = 0; pe < oX.size(); pe++) {
            var oP = $(
                "<table width='99%' cellspacing='0' cellpadding='0'></table>",
            );
            oE.append(oP);
            var oZ = oX.get(pe);
            var oz = "";
            if (oZ.isDisabled()) {
                oz = " disabled ";
            }
            var pj = $("<tr></tr>");
            oP.append(pj);
            if (oZ.getType() == gO) {
                var pf = $(
                    "<td align='center' colspan='2'><hr width='80%'/></td>",
                );
                pj.append(pf);
                continue;
            }
            var oB = oZ.getParam();
            if (oB == null) {
                oB = "";
            } else {
                oB = "_" + oB;
            }
            var oK = "";
            if (oZ.getName() != null) {
                oK = oZ.getName();
            } else {
                oK = cA.getTranslate(o3, pl, oZ.getKeyName());
            }
            if (oZ.isAddParamToText()) {
                oK = oZ.getParam() + " " + oK;
            }
            var oQ = $(
                "<td valign='top' ><nobr><img valign='middle' src='" +
                    o3.getImgPath() +
                    "/" +
                    oZ.getImg() +
                    "' width='20'/><b><span>" +
                    oK +
                    "</span></b></nobr></td>",
            );
            pj.append(oQ);
            var oO = $("<td valign='top' align='right'></td>");
            oO.css("padding", "1px");
            pj.append(oO);
            var ph = null;
            var oA = null;
            if (oZ.getType() == mt) {
                var o7 = $(
                    "<select style='width:" +
                        oT +
                        "' id='" +
                        o3.getEditorId() +
                        "_" +
                        pl +
                        "_" +
                        oZ.getKeyName() +
                        oB +
                        "'></select>",
                );
                if (oZ.getFont() != null) {
                    o7.css("fontFamily", oZ.getFont());
                    o7.css("font-size", "150%");
                    o7.css("padding", "0px");
                }
                o7.change(function (pn) {
                    fMathEditorsInterface.clickedButton($(this).attr("id"));
                });
                oO.append(o7);
                var o1 = oZ.getOptions();
                for (var pd = 0; pd < o1.size(); pd++) {
                    var oL = o1.get(pd);
                    var ov = null;
                    if (oL.getKey() == oZ.getValue()) {
                        ov = $(
                            "<option value='" +
                                oL.getKey() +
                                "' selected>" +
                                oL.getValue() +
                                "</option>",
                        );
                    } else {
                        ov = $(
                            "<option value='" +
                                oL.getKey() +
                                "'>" +
                                oL.getValue() +
                                "</option>",
                        );
                    }
                    o7.append(ov);
                }
            } else {
                if (oZ.getType() == jG) {
                    l0.getSelectColorElem(
                        o3,
                        oO,
                        pl + "_" + oZ.getKeyName(),
                        oZ.getValue(),
                        oZ.getHeight(),
                    );
                } else {
                    if (oZ.getType() == c8) {
                        var o8 = oZ.getMenuList();
                        for (var pd = 0; pd < o8.size(); pd++) {
                            if (pd > 0) {
                                oO.append("&nbsp;");
                            }
                            var pk = o8.get(pd);
                            var oI = null;
                            if (pk == mb) {
                                var oR = cA.getTranslate(o3, pl, "edit");
                                oI = $(
                                    "<img height='16px' title='" +
                                        oR +
                                        "' id='" +
                                        o3.getEditorId() +
                                        "_" +
                                        pl +
                                        "_" +
                                        oZ.getKeyName() +
                                        "_edit_" +
                                        pe +
                                        "' src='" +
                                        o3.getImgPath() +
                                        "/EditForm.png'/>",
                                );
                            } else {
                                if (pk == kz) {
                                    var oR = cA.getTranslate(o3, pl, "config");
                                    oI = $(
                                        "<img height='16px' title='" +
                                            oR +
                                            "' id='" +
                                            o3.getEditorId() +
                                            "_" +
                                            pl +
                                            "_" +
                                            oZ.getKeyName() +
                                            "_config_" +
                                            pe +
                                            "' src='" +
                                            o3.getImgPath() +
                                            "/prop_type.png'/>",
                                    );
                                } else {
                                    if (pk == gc) {
                                        var oR = cA.getTranslate(
                                            o3,
                                            pl,
                                            "delete",
                                        );
                                        oI = $(
                                            "<img height='16px' title='" +
                                                oR +
                                                "' id='" +
                                                o3.getEditorId() +
                                                "_" +
                                                pl +
                                                "_" +
                                                oZ.getKeyName() +
                                                "_delete_" +
                                                pe +
                                                "' src='" +
                                                o3.getImgPath() +
                                                "/MailDelete.png'/>",
                                        );
                                    } else {
                                        if (pk == aD) {
                                            var oR = cA.getTranslate(
                                                o3,
                                                pl,
                                                "down",
                                            );
                                            oI = $(
                                                "<img height='16px' title='" +
                                                    oR +
                                                    "' id='" +
                                                    o3.getEditorId() +
                                                    "_" +
                                                    pl +
                                                    "_" +
                                                    oZ.getKeyName() +
                                                    "_down_" +
                                                    pe +
                                                    "' src='" +
                                                    o3.getImgPath() +
                                                    "/DownArrow2.png'/>",
                                            );
                                        } else {
                                            if (pk == aV) {
                                                var oR = cA.getTranslate(
                                                    o3,
                                                    pl,
                                                    "up",
                                                );
                                                oI = $(
                                                    "<img height='16px' title='" +
                                                        oR +
                                                        "' id='" +
                                                        o3.getEditorId() +
                                                        "_" +
                                                        pl +
                                                        "_" +
                                                        oZ.getKeyName() +
                                                        "_up_" +
                                                        pe +
                                                        "' src='" +
                                                        o3.getImgPath() +
                                                        "/UpArrow2.png'/>",
                                                );
                                            } else {
                                                if (pk == iZ) {
                                                    oI = $(
                                                        "<span style='display: inline-block; width:16px'></span>",
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (!(pk == iZ)) {
                                oI.css("cursor", "pointer");
                                oI.click(function (pn) {
                                    fMathEditorsInterface.clickedButton(
                                        $(this).attr("id"),
                                    );
                                });
                            }
                            oO.append(oI);
                        }
                    } else {
                        if (oZ.getType() == g1) {
                            var o0 = "";
                            if (oZ.isOnlyPositive()) {
                                o0 = " min='0' ";
                            }
                            var o6 = oZ.getValue();
                            var oU = "0";
                            var oN = "px";
                            var oF = cA.isNamedUnit(o6);
                            if (oF) {
                                oN = o6;
                            } else {
                                if (o6 != null) {
                                    o6 = o6.toLowerCase();
                                    oN = cA.getValueSelect(o6);
                                    if (oN == null) {
                                        oN = "px";
                                        oU = o6;
                                    } else {
                                        oU = o6.substring(0, o6.indexOf(oN));
                                    }
                                }
                                if (oU.length == 0) {
                                    oU = "0";
                                }
                            }
                            if (!lv.stringIsNumber(oU)) {
                                oU = "0";
                            }
                            var ow = oW;
                            var ox = null;
                            if (oF) {
                                ow = oT;
                            } else {
                                ox = $(
                                    "<input style='width:" +
                                        oW +
                                        "' type='number' " +
                                        o0 +
                                        " id='" +
                                        o3.getEditorId() +
                                        "_" +
                                        pl +
                                        "_" +
                                        oZ.getKeyName() +
                                        oB +
                                        "' value='" +
                                        oU +
                                        "'/>",
                                );
                                if (oZ.getFont() != null) {
                                    ox.css("fontFamily", oZ.getFont());
                                }
                                ox.change(function (pn) {
                                    fMathEditorsInterface.clickedButton(
                                        $(this).attr("id"),
                                    );
                                });
                                oO.append(ox);
                            }
                            var o7 = $(
                                "<select style='width:" +
                                    ow +
                                    "' id='" +
                                    o3.getEditorId() +
                                    "_" +
                                    pl +
                                    "_" +
                                    oZ.getKeyName() +
                                    oB +
                                    "_type'></select>",
                            );
                            if (oZ.getFont() != null) {
                                o7.css("fontFamily", oZ.getFont());
                                o7.css("font-size", "150%");
                                o7.css("padding", "0px");
                            }
                            o7.change(function (pn) {
                                var po = $(this).attr("id");
                                fMathEditorsInterface.clickedButton(
                                    po.substring(0, po.lastIndexOf("_")),
                                );
                            });
                            var o1 = oZ.getOptions();
                            for (var pd = 0; pd < o1.size(); pd++) {
                                var oL = o1.get(pd);
                                var ov = null;
                                if (oL.getKey() == oN) {
                                    ov = $(
                                        "<option value='" +
                                            oL.getKey() +
                                            "' selected>" +
                                            oL.getValue() +
                                            "</option>",
                                    );
                                } else {
                                    ov = $(
                                        "<option value='" +
                                            oL.getKey() +
                                            "'>" +
                                            oL.getValue() +
                                            "</option>",
                                    );
                                }
                                o7.append(ov);
                            }
                            oO.append(o7);
                            if (ox != null) {
                                ox.height(o7.height() - 3);
                            }
                        } else {
                            if (oZ.getType() == ai) {
                                oT = oH / 2 + "px";
                                oW = oH / 4 - 3 + "px";
                                var o0 = "";
                                if (oZ.isOnlyPositive()) {
                                    o0 = " min='0' ";
                                }
                                var oU = oZ.getValue();
                                var oN = "px";
                                var pm = true;
                                if (oU.indexOf("%") > -1) {
                                    oN = "%";
                                    oU = oU.substring(0, oU.indexOf("%"));
                                } else {
                                    if (lv.stringIsInteger(oU)) {
                                        oN = "px";
                                    } else {
                                        oN = oU;
                                        pm = false;
                                    }
                                }
                                var ou = oT;
                                var ox = null;
                                if (pm) {
                                    var ow = oW;
                                    ou = oW;
                                    ox = $(
                                        "<input style='width:" +
                                            ow +
                                            "' type='number' " +
                                            o0 +
                                            " id='" +
                                            o3.getEditorId() +
                                            "_" +
                                            pl +
                                            "_" +
                                            oZ.getKeyName() +
                                            oB +
                                            "' value='" +
                                            oU +
                                            "'/>",
                                    );
                                    if (oZ.getFont() != null) {
                                        ox.css("fontFamily", oZ.getFont());
                                    }
                                    ox.change(function (pn) {
                                        fMathEditorsInterface.clickedButton(
                                            $(this).attr("id"),
                                        );
                                    });
                                    ox.height(15);
                                    oO.append(ox);
                                }
                                var o7 = $(
                                    "<select style='width:" +
                                        ou +
                                        "' id='" +
                                        o3.getEditorId() +
                                        "_" +
                                        pl +
                                        "_" +
                                        oZ.getKeyName() +
                                        oB +
                                        "_type'></select>",
                                );
                                if (oZ.getFont() != null) {
                                    o7.css("fontFamily", oZ.getFont());
                                    o7.css("font-size", "150%");
                                    o7.css("padding", "0px");
                                }
                                o7.change(function (pn) {
                                    var po = $(this).attr("id");
                                    fMathEditorsInterface.clickedButton(
                                        po.substring(0, po.lastIndexOf("_")),
                                    );
                                });
                                oO.append(o7);
                                var o1 = oZ.getOptions();
                                for (var pd = 0; pd < o1.size(); pd++) {
                                    var oL = o1.get(pd);
                                    var ov = null;
                                    if (oL.getKey() == oN) {
                                        ov = $(
                                            "<option value='" +
                                                oL.getKey() +
                                                "' selected>" +
                                                oL.getValue() +
                                                "</option>",
                                        );
                                    } else {
                                        ov = $(
                                            "<option value='" +
                                                oL.getKey() +
                                                "'>" +
                                                oL.getValue() +
                                                "</option>",
                                        );
                                    }
                                    o7.append(ov);
                                }
                            } else {
                                if (oZ.getType() == j0) {
                                    var oV = $(
                                        "<table style='width:" +
                                            oT +
                                            "' cellspacing='0' cellpadding='0'></table>",
                                    );
                                    oV.css("padding", "0px");
                                    oV.css("margin", "0px");
                                    oV.css("border-spacing", "0px");
                                    var oY = $("<tr></tr>");
                                    oV.append(oY);
                                    var o2 = $(
                                        "<td width='90%' align='left' valign='middle'></td>",
                                    );
                                    o2.css("line-height", "1");
                                    oY.append(o2);
                                    var pb = $(
                                        "<td valign='middle' align='right' ></td>",
                                    );
                                    oY.append(pb);
                                    var oy = oZ.getValue().split(",");
                                    for (var o5 = 0; o5 < oy.length; o5++) {
                                        var oC = oy[o5];
                                        if (oC.length > 0) {
                                            var oJ = $(
                                                "<img height='19px' src='" +
                                                    o3.getImgPath() +
                                                    "/" +
                                                    oC +
                                                    "'/>",
                                            );
                                            o2.append(oJ);
                                        }
                                    }
                                    var oI = null;
                                    ph = o3
                                        .getSelectedElement()
                                        .getImageSelectionActive();
                                    var oG =
                                        pl +
                                        "_" +
                                        oZ.getKeyName() +
                                        "_down" +
                                        oB;
                                    if (ph != null && ph == oG) {
                                        oA = oG;
                                        oI = $(
                                            "<img id='" +
                                                o3.getEditorId() +
                                                "_" +
                                                pl +
                                                "_" +
                                                oZ.getKeyName() +
                                                "_up" +
                                                oB +
                                                "' src='" +
                                                o3.getImgPath() +
                                                "/arrow-up.png'/>",
                                        );
                                    } else {
                                        oI = $(
                                            "<img id='" +
                                                o3.getEditorId() +
                                                "_" +
                                                pl +
                                                "_" +
                                                oZ.getKeyName() +
                                                "_down" +
                                                oB +
                                                "' src='" +
                                                o3.getImgPath() +
                                                "/arrow-down.png'/>",
                                        );
                                    }
                                    oI.css("cursor", "pointer");
                                    pb.append(oI);
                                    oV.css("border", "1px solid #dfdfdf");
                                    oV.addClass("ui-corner-all");
                                    oI.click(function (pn) {
                                        fMathEditorsInterface.clickedButton(
                                            $(this).attr("id"),
                                        );
                                    });
                                    oO.append(oV);
                                } else {
                                    if (oZ.getType() == jI) {
                                        var ox = $(
                                            "<input style='width:" +
                                                oT +
                                                "' id='" +
                                                o3.getEditorId() +
                                                "_" +
                                                pl +
                                                "_" +
                                                oZ.getKeyName() +
                                                oB +
                                                "' value='" +
                                                oZ.getValue() +
                                                "' " +
                                                oz +
                                                "/>",
                                        );
                                        if (oZ.getFont() != null) {
                                            ox.css("fontFamily", oZ.getFont());
                                        }
                                        ox.change(function (pn) {
                                            fMathEditorsInterface.clickedButton(
                                                $(this).attr("id"),
                                            );
                                        });
                                        oO.append(ox);
                                    } else {
                                        if (oZ.getType() == cr) {
                                            var ox = $(
                                                "<input type='button' style='width:" +
                                                    oT +
                                                    "' id='" +
                                                    o3.getEditorId() +
                                                    "_" +
                                                    pl +
                                                    "_" +
                                                    oZ.getKeyName() +
                                                    oB +
                                                    "' value='" +
                                                    oZ.getValue() +
                                                    "' " +
                                                    oz +
                                                    "/>",
                                            );
                                            ox.click(function (pn) {
                                                fMathEditorsInterface.clickedButton(
                                                    $(this).attr("id"),
                                                );
                                            });
                                            oO.append(ox);
                                        } else {
                                            if (oZ.getType() == eR) {
                                                var ox = $(
                                                    "<span style='width:" +
                                                        oT +
                                                        "'>" +
                                                        oZ.getValue() +
                                                        "</span>",
                                                );
                                                if (oZ.getFont() != null) {
                                                    ox.css(
                                                        "fontFamily",
                                                        oZ.getFont(),
                                                    );
                                                }
                                                oO.append(ox);
                                            } else {
                                                if (oZ.getType() == ih) {
                                                    var o0 = "";
                                                    if (oZ.isOnlyPositive()) {
                                                        o0 = " min='0' ";
                                                    }
                                                    var ox = $(
                                                        "<input type='number' " +
                                                            o0 +
                                                            " style='box-sizing: border-box;width:" +
                                                            oT +
                                                            "' id='" +
                                                            o3.getEditorId() +
                                                            "_" +
                                                            pl +
                                                            "_" +
                                                            oZ.getKeyName() +
                                                            oB +
                                                            "' value='" +
                                                            oZ.getValue() +
                                                            "' " +
                                                            oz +
                                                            "/>",
                                                    );
                                                    if (oZ.getFont() != null) {
                                                        ox.css(
                                                            "fontFamily",
                                                            oZ.getFont(),
                                                        );
                                                    }
                                                    ox.change(function (pn) {
                                                        fMathEditorsInterface.clickedButton(
                                                            $(this).attr("id"),
                                                        );
                                                    });
                                                    oO.append(ox);
                                                } else {
                                                    if (oZ.getType() == k9) {
                                                        var oM =
                                                            (oH - 70) / 2 -
                                                            16 +
                                                            "px";
                                                        var o4 = $(
                                                            "<table style='padding:0px;border:0px;border-spacing:0px;margin:0px'></table>",
                                                        );
                                                        var pi = $(
                                                            "<tr style='padding:0px'></tr>",
                                                        );
                                                        o4.append(pi);
                                                        var o9 = $(
                                                            "<td style='padding:0px'></td>",
                                                        );
                                                        var pc = $(
                                                            "<td style='padding:0px'></td>",
                                                        );
                                                        pi.append(o9);
                                                        pi.append(pc);
                                                        var ox = $(
                                                            "<input type='text' style='box-sizing: border-box;width:" +
                                                                oM +
                                                                "' id='" +
                                                                o3.getEditorId() +
                                                                "_" +
                                                                pl +
                                                                "_" +
                                                                oZ.getKeyName() +
                                                                oB +
                                                                "' value='" +
                                                                oZ.getValue() +
                                                                "' " +
                                                                oz +
                                                                "/>",
                                                        );
                                                        ox.change(
                                                            function (pn) {
                                                                fMathEditorsInterface.clickedButton(
                                                                    $(
                                                                        this,
                                                                    ).attr(
                                                                        "id",
                                                                    ),
                                                                );
                                                            },
                                                        );
                                                        o9.append(ox);
                                                        var oR =
                                                            cA.getTranslate(
                                                                o3,
                                                                "calculator",
                                                                "help",
                                                            );
                                                        var oI = $(
                                                            "<img height='16px' title='" +
                                                                oR +
                                                                "' id='" +
                                                                o3.getEditorId() +
                                                                "_" +
                                                                pl +
                                                                "_" +
                                                                oZ.getKeyName() +
                                                                oB +
                                                                "_calculator' src='" +
                                                                o3.getImgPath() +
                                                                "/Calculator.png'/>",
                                                        );
                                                        oI.css(
                                                            "cursor",
                                                            "pointer",
                                                        );
                                                        oI.click(function (pn) {
                                                            fMathEditorsInterface.clickedButton(
                                                                $(this).attr(
                                                                    "id",
                                                                ),
                                                            );
                                                        });
                                                        pc.append(oI);
                                                        oO.append(o4);
                                                    } else {
                                                        if (
                                                            oZ.getType() == nl
                                                        ) {
                                                            var oS = "";
                                                            if (
                                                                oZ.getValue() ==
                                                                "true"
                                                            ) {
                                                                oS =
                                                                    " checked ";
                                                            }
                                                            var ox = $(
                                                                "<input type='checkbox' id='" +
                                                                    o3.getEditorId() +
                                                                    "_" +
                                                                    pl +
                                                                    "_" +
                                                                    oZ.getKeyName() +
                                                                    oB +
                                                                    "' " +
                                                                    oS +
                                                                    "/>",
                                                            );
                                                            ox.change(
                                                                function (pn) {
                                                                    fMathEditorsInterface.clickedButton(
                                                                        $(
                                                                            this,
                                                                        ).attr(
                                                                            "id",
                                                                        ),
                                                                    );
                                                                },
                                                            );
                                                            oO.append(ox);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (ph != null && ph == oA) {
                var pa = $("<tr></tr>");
                oP.append(pa);
                var oD = $("<td colspan='2' align='center'></td>");
                pa.append(oD);
                var o1 = oZ.getOptions();
                for (var pd = 0; pd < o1.size(); pd++) {
                    var oL = o1.get(pd);
                    var pg = $(
                        "<div id='" +
                            o3.getEditorId() +
                            "_" +
                            pl +
                            "_" +
                            oZ.getKeyName() +
                            "_" +
                            oL.getKey() +
                            oB +
                            "'></div>",
                    );
                    pg.text("")
                        .append(
                            "<img src='" +
                                o3.getImgPath() +
                                "/" +
                                oL.getValue() +
                                "' height='22'/>",
                        )
                        .button();
                    pg.click(function (pn) {
                        fMathEditorsInterface.clickedButton($(this).attr("id"));
                    });
                    oD.append(pg);
                }
            }
        }
    };
    cA.isNamedUnit = function (ou) {
        if (ou == null) {
            return false;
        }
        return m.indexOf("," + ou + ",") > -1;
    };
    cA.getValueSelect = function (oy) {
        if (oy == null || oy.length == 0) {
            return null;
        }
        var ox = cp;
        for (var ow = 0; ow < ox.length; ow++) {
            var ov = ox[ow];
            var ou = oy.indexOf(ov);
            if (ou > -1 && ou == oy.length - ov.length) {
                return ov;
            }
        }
        return null;
    };
    cA.getTranslate = function (ou, ox, ow) {
        if (ox.indexOf("_index_") > -1) {
            ox = ox.substring(0, ox.indexOf("_index_"));
        }
        var ov = ox;
        if (ow != null) {
            ov = ov + "_" + ow;
        }
        return gq.translate(ou, ov);
    };

    function fl() {}

    function hm(ov, ou) {
        this.key;
        this.value;
        this.key = ov;
        this.value = ou;
    }
    hm.prototype.getKey = function () {
        return this.key;
    };
    hm.prototype.getValue = function () {
        return this.value;
    };

    function j7() {}

    function ge(ou) {
        this.source;
        this.source = ou;
        this.dLh = j7;
        this.dLh();
    }
    ga(ge, j7);
    ge.prototype.getSource = function () {
        return this.source;
    };
    ge.prototype.setSource = function (ou) {
        this.source = ou;
    };
    ge.prototype.getKeys = function () {
        return this.source.split("_");
    };

    function aW() {
        this.dLh = j7;
        this.dLh();
    }
    ga(aW, j7);

    function jc(ou, ov, ow) {
        this.down = false;
        this.source;
        this.event;
        this.source = ou;
        this.event = ov;
        this.down = ow;
        this.dLh = j7;
        this.dLh();
    }
    ga(jc, j7);
    jc.prototype.getSource = function () {
        return this.source;
    };
    jc.prototype.getEvent = function () {
        return this.event;
    };
    jc.prototype.isDown = function () {
        return this.down;
    };

    function hx() {
        this.changeType;
        this.value;
        this.dLh = j7;
        this.dLh();
    }
    ga(hx, j7);
    hx.prototype.getChangeType = function () {
        return this.changeType;
    };
    hx.prototype.setChangeType = function (ou) {
        this.changeType = ou;
    };
    hx.prototype.getValue = function () {
        return this.value;
    };
    hx.prototype.setValue = function (ou) {
        this.value = ou;
    };

    function cB(ou) {
        this.value;
        this.value = ou;
        this.dLh = j7;
        this.dLh();
    }
    ga(cB, j7);
    cB.prototype.getValue = function () {
        return this.value;
    };

    function jl() {
        this.dLh = j7;
        this.dLh();
    }
    ga(jl, j7);

    function b(ou, ov) {
        this.source;
        this.event;
        this.source = ou;
        this.event = ov;
        this.dLh = j7;
        this.dLh();
    }
    ga(b, j7);
    b.prototype.getSource = function () {
        return this.source;
    };
    b.prototype.getEvent = function () {
        return this.event;
    };

    function ja(ou) {
        this.source;
        this.source = ou;
        this.dLh = j7;
        this.dLh();
    }
    ga(ja, j7);
    ja.prototype.getSource = function () {
        return this.source;
    };

    function t(ou, ov) {
        this.charKey;
        this.key;
        this.originalEvent;
        this.originalEvent = ou;
        this.key = this.originalEvent.keyCode;
        this.charKey = ov;
        this.dLh = j7;
        this.dLh();
    }
    ga(t, j7);
    t.prototype.getKey = function () {
        return this.key;
    };
    t.prototype.isTextKey = function () {
        return this.charKey;
    };
    t.prototype.isLeftKey = function () {
        return this.key == 36;
    };
    t.prototype.isRightKey = function () {
        return this.key == 36;
    };
    t.prototype.isUpKey = function () {
        return this.key == 36;
    };
    t.prototype.isDownKey = function () {
        return this.key == 36;
    };
    t.prototype.isDeleteKey = function () {
        return this.key == 36;
    };
    t.prototype.isBackspaceKey = function () {
        return this.key == 36;
    };
    t.prototype.isTabKey = function () {
        return this.key == 36;
    };

    function cj(ou, ov) {
        this.charKey;
        this.key;
        this.originalEvent;
        this.firstCall = true;
        this.originalEvent = ou;
        this.key = this.originalEvent.which;
        this.charKey = ov;
        this.dLh = j7;
        this.dLh();
    }
    ga(cj, j7);
    cj.prototype.getKey = function () {
        return this.key;
    };
    cj.prototype.getChar = function () {
        return lv.getCharFromInt(this.originalEvent.keyCode);
    };
    cj.prototype.isCharKey = function () {
        return this.charKey;
    };
    cj.prototype.isActionKey = function () {
        return !this.charKey;
    };
    cj.prototype.isLeftKey = function () {
        return this.key == 37;
    };
    cj.prototype.isRightKey = function () {
        return this.key == 39;
    };
    cj.prototype.isUpKey = function () {
        return this.key == 38;
    };
    cj.prototype.isDownKey = function () {
        return this.key == 40;
    };
    cj.prototype.isDeleteKey = function () {
        return this.key == 46 || this.key == 8;
    };
    cj.prototype.isBackspaceKey = function () {
        return this.key == 8;
    };
    cj.prototype.isTabKey = function () {
        return this.key == 9;
    };
    cj.prototype.isEnterKey = function () {
        return this.key == 13;
    };
    cj.prototype.isPrintable = function () {
        var ou = this.getChar();
        if (ou == null) {
            return false;
        }
        ou = ou.trim();
        return ou.length > 0;
    };
    cj.prototype.getOriginalEvent = function () {
        return this.originalEvent;
    };
    cj.prototype.isCtrlC = function () {
        if (!this.originalEvent.ctrlKey) {
            return false;
        }
        if (this.key == 67) {
            return true;
        }
        return false;
    };
    cj.prototype.isCtrlX = function () {
        if (!this.originalEvent.ctrlKey) {
            return false;
        }
        if (this.key == 88) {
            return true;
        }
        return false;
    };
    cj.prototype.isCtrlV = function () {
        if (!this.originalEvent.ctrlKey) {
            return false;
        }
        if (this.key == 86) {
            return true;
        }
        return false;
    };
    cj.prototype.isCtrlZ = function () {
        if (!this.originalEvent.ctrlKey) {
            return false;
        }
        if (this.key == 90) {
            return true;
        }
        return false;
    };
    cj.prototype.isCtrlY = function () {
        if (!this.originalEvent.ctrlKey) {
            return false;
        }
        if (this.key == 89) {
            return true;
        }
        return false;
    };
    cj.prototype.isFirstCall = function () {
        return this.firstCall;
    };
    cj.prototype.setFirstCall = function (ou) {
        this.firstCall = ou;
    };

    function ms(ou) {
        this.source;
        this.source = ou;
        this.dLh = j7;
        this.dLh();
    }
    ga(ms, j7);
    ms.prototype.getSource = function () {
        return this.source;
    };

    function mL(ou, ov) {
        this.source;
        this.event;
        this.source = ou;
        this.event = ov;
        this.dLh = j7;
        this.dLh();
    }
    ga(mL, j7);
    mL.prototype.getSource = function () {
        return this.source;
    };
    mL.prototype.getEvent = function () {
        return this.event;
    };

    function e1() {
        this.dLh = j7;
        this.dLh();
    }
    ga(e1, j7);

    function hz() {
        this.register;
        this.register = new bb();
    }
    hz.prototype.buildEditor = function (ow, ov) {
        var ou = this.register.registerEditor(ov);
        ou.buildEditor(ow);
        return ou;
    };
    hz.prototype.flyingInputText = function (ow) {
        if (ow.target.id.indexOf("flyingInputText") == -1) {
            return;
        }
        bH.console("flyingInputText: ");
        var ou = this.register.getEditor(null);
        var ov = new t(ow, false);
        ou.executeEvent(ov);
    };
    hz.prototype.flyingInputEnter = function (ou, ov) {
        if (ou.target.id.indexOf("flyingInputText") == -1) {
            return;
        }
        bH.console("flyingInputEnter: " + ou.which);
        if (ou.which == 13) {
            this.flyingInputTextOut(ov);
        }
    };
    hz.prototype.flyingInputTextOut = function (ow) {
        bH.console("flyingInputTextOut: " + ow);
        var ou = this.register.getEditor(null);
        var ov = new ja(ow);
        ou.executeEvent(ov);
    };
    hz.prototype.keyboardListener = function (ow) {
        if (ow.target.id.indexOf("mainLayout") == -1) {
            return;
        }
        if (ow.which == 16 || ow.which == 17 || ow.which == 18) {
            return;
        }
        bH.console(
            "keyboardListener: " +
                ow.which +
                " " +
                ow.keyCode +
                " " +
                ow.shiftKey +
                " " +
                ow.ctrlKey,
        );
        var ou = this.register.getEditor(null);
        var ov = new cj(ow, false);
        ou.executeEvent(ov);
    };
    hz.prototype.keyboardTextListener = function (ow) {
        if (ow.target.id.indexOf("mainLayout") == -1) {
            return;
        }
        if (ow.ctrlKey) {
            return;
        }
        bH.console(
            "keyboardTextListener: " +
                ow.which +
                " " +
                ow.keyCode +
                " " +
                ow.shiftKey +
                " " +
                ow.ctrlKey,
        );
        var ou = this.register.getEditor(null);
        var ov = new cj(ow, true);
        ou.executeEvent(ov);
    };
    hz.prototype.changedCodeMirrorHandler = function (ou) {
        bH.console("codemirror: change event");
        fMathEditorsInterface.changedCodeMirror(ou.getValue());
    };
    hz.prototype.changedCodeMirror = function (ow) {
        var ou = this.register.getEditor(null);
        var ov = new cB(ow);
        ou.executeEvent(ov);
    };
    hz.prototype.changedCursorCodeMirrorHandler = function () {
        bH.console("codemirror: activity event");
        fMathEditorsInterface.changedCursorCodeMirror();
    };
    hz.prototype.changedCursorCodeMirror = function () {
        var ou = this.register.getEditor(null);
        var ov = new jl();
        ou.executeEvent(ov);
    };
    hz.prototype.resizedCompletedHandler = function (ou) {
        ou.onComplete = function (ov) {
            fMathEditorsInterface.resizedCompleted(ov);
        };
    };
    hz.prototype.resizedCompleted = function (ow) {
        bH.console("resizedCompleted:" + ow.target);
        var ou = this.register.getEditor(ow.target);
        var ov = new e1();
        ou.executeEvent(ov);
    };
    hz.prototype.resizeCanvas = function (ox, ow) {
        bH.console("resizeCanvas:" + ox);
        var ou = this.register.getEditor(ox);
        var ov = new aW();
        ou.executeEvent(ov);
    };
    hz.prototype.updateInterfaceHandler = function () {
        fMathEditorsInterface.updateInterface();
    };
    hz.prototype.updateInterface = function () {
        var ou = this.register.getEditor(null);
        ou.updateInterface();
    };
    hz.prototype.showEditor = function (ou) {
        bH.console("showEditor:" + ou);
        fMathEditorsInterface.showEditorInterface(ou);
    };
    hz.prototype.showEditorInterface = function (ov) {
        var ou = this.register.getEditor(ov);
        ou.showEditor();
    };
    hz.prototype.clickMouseOnScreen = function (ov) {
        bH.console("clickMouseOnScreen:" + ov);
        var ou = this.register.getEditor(ov);
        ov = ov.substring(ov.indexOf("_") + 1, ov.length);
        var ow = new ja(ov);
        ou.executeEvent(ow);
    };
    hz.prototype.clickedButton = function (ov) {
        bH.console("clickedButton:" + ov);
        var ou = this.register.getEditor(ov);
        ov = ov.substring(ov.indexOf("_") + 1, ov.length);
        var ow = new ge(ov);
        ou.executeEvent(ow);
    };
    hz.prototype.clickedDownOnFormula = function (ov, ox) {
        bH.console("clickedDownOnFormula:");
        var ou = this.register.getEditor(ov);
        ov = ov.substring(ov.indexOf("_") + 1, ov.length);
        var ow = new jc(ov, ox, true);
        ou.executeEvent(ow);
    };
    hz.prototype.clickedUpOnFormula = function (ov, ox) {
        bH.console("clickedUpOnFormula:");
        var ou = this.register.getEditor(ov);
        ov = ov.substring(ov.indexOf("_") + 1, ov.length);
        var ow = new jc(ov, ox, false);
        ou.executeEvent(ow);
    };
    hz.prototype.overOnFormula = function (ov, ox) {
        var ou = this.register.getEditor(ov);
        ov = ov.substring(ov.indexOf("_") + 1, ov.length);
        var ow = new mL(ov, ox);
        ou.executeEvent(ow);
    };
    hz.prototype.dblclickedOnFormula = function (ov, ox) {
        bH.console("dblclickedOnFormula:");
        var ou = this.register.getEditor(ov);
        ov = ov.substring(ov.indexOf("_") + 1, ov.length);
        var ow = new b(ov, ox);
        ou.executeEvent(ow);
    };
    hz.prototype.retryEvent = function (ov) {
        var ou = this.register.getEditor(null);
        ou.executeEvent(ov);
    };

    function J() {}

    function dM() {}
    dM.getKeyboardLanguage = function (ou) {
        return dM.getValue("keyboardLanguage", ou);
    };
    dM.getLanguage = function (ou) {
        return dM.getValue("language", ou);
    };
    dM.getFontMenuList = function (ou) {
        return dM.getValue("fontMenuList", ou);
    };
    dM.getValue = function (ou, ow) {
        var ov = null;
        if (fMathClientSettings != null) {
            ov = fMathClientSettings[ou];
        }
        if (ov == null) {
            return ow;
        }
        return ov;
    };

    function bb() {
        this.nextId = 1;
        this.editorIds = new fM();
        this.editorObjects = new fM();
        this.lastUsedEditor;
    }
    bb.prototype.registerEditor = function (ou) {
        if (ou == null) {
            ou = "Math";
        }
        var ov = null;
        var ow = "F" + ou + "Ed" + this.nextId;
        if (ou == "Math") {
            ov = new jB(ow);
        } else {
            if (ou == "Graph") {
                ov = new JavascriptGraphEditor(ow);
            } else {
                if (ou == "Func") {
                    ov = new JavascriptFuncEditor(ow);
                } else {
                    if (ou == "Calc") {
                        ov = new JavascriptMathCalc(ow);
                    }
                }
            }
        }
        this.editorIds.add(ow);
        this.editorObjects.add(ov);
        this.nextId = this.nextId + 1;
        this.lastUsedEditor = ov;
        return ov;
    };
    bb.prototype.getEditor = function (ow) {
        if (ow == null) {
            return this.lastUsedEditor;
        }
        if (ow.indexOf("_") > -1) {
            ow = ow.substring(0, ow.indexOf("_"));
        }
        for (var ou = 0; ou < this.editorIds.size(); ou++) {
            var ov = this.editorIds.get(ou);
            if (ow == ov) {
                this.lastUsedEditor = this.editorObjects.get(ou);
                return this.lastUsedEditor;
            }
        }
        return this.lastUsedEditor;
    };

    function kG() {}
    kG.addZone = function (oR, oy, oP) {
        var oJ = $("<div id='" + oR.getEditorId() + "_keyboard'></div>");
        oJ.css("position", "absolute");
        oJ.css("top", oy.getMarginPageWindow() + 1);
        oJ.css("left", oy.getMarginPageWindow() + 2);
        oJ.addClass("ui-corner-all");
        oJ.css("border", "1px solid #888");
        oJ.css("padding", "1px");
        oJ.css("height", "23px");
        oJ.css("overflow", "hidden");
        oP.append(oJ);
        var oO = $("<div></div>");
        oO.addClass("ui-corner-all");
        oO.css("border", "1px solid #444");
        oO.css("margin-right", "5px");
        oO.css("height", "20px");
        oO.css("display", "inline");
        oJ.append(oO);
        var ox = r.getButtonKeyboard(oR, "Enter", kU, "1px");
        oO.append(ox);
        var oz = r.getButtonKeyboard(oR, "Del", cD, "1px");
        oO.append(oz);
        var oG = r.getButtonKeyboard(oR, "Char", l3, "0px");
        oO.append(oG);
        var oN = $("<div></div>");
        oN.addClass("ui-corner-all");
        oN.css("border", "1px solid #444");
        oN.css("margin-right", "5px");
        oO.css("height", "20px");
        oN.css("display", "inline");
        oJ.append(oN);
        var oF = r.getButtonKeyboard(oR, "Ctrl-C", kg, "1px");
        oN.append(oF);
        var oD = r.getButtonKeyboard(oR, "Ctrl-X", j1, "1px");
        oN.append(oD);
        var oB = r.getButtonKeyboard(oR, "Ctrl-V", j4, "1px");
        oN.append(oB);
        var oK = r.getButtonKeyboard(oR, "Ctrl-Z", jX, "1px");
        oN.append(oK);
        var oQ = r.getButtonKeyboard(oR, "Ctrl-Y", jZ, "0px");
        oN.append(oQ);
        var oM = $("<div></div>");
        oM.addClass("ui-corner-all");
        oM.css("border", "1px solid #444");
        if (!oR.isMinimum()) {
            oM.css("margin-right", "5px");
        }
        oO.css("height", "20px");
        oM.css("display", "inline");
        oJ.append(oM);
        var ow = r.getButtonKeyboard(oR, "Up", m8, "1px");
        oM.append(ow);
        var ov = r.getButtonKeyboard(oR, "Down", iM, "1px");
        oM.append(ov);
        var ou = r.getButtonKeyboard(oR, "Left", nN, "1px");
        oM.append(ou);
        var oI = r.getButtonKeyboard(oR, "Right", hg, "1px");
        oM.append(oI);
        var oH = r.getButtonKeyboard(oR, "Tab", du, "0px");
        oM.append(oH);
        if (!oR.isMinimum()) {
            var oL = $("<div></div>");
            oL.addClass("ui-corner-all");
            oL.css("border", "1px solid #444");
            oO.css("height", "20px");
            oL.css("display", "inline");
            oJ.append(oL);
            var oE = r.getButtonKeyboard(oR, "Click", d6, "1px");
            oL.append(oE);
            var oC = r.getButtonKeyboard(oR, "Dbl Click", gs, "1px");
            oL.append(oC);
            var oA = r.getButtonKeyboard(oR, "Drag & Drop", hh, "0px");
            oL.append(oA);
        }
    };
    kG.updateZone = function (ox) {
        var oA = $("#" + ox.getEditorId() + "_keyboard");
        if (ox.isKeyPaneHidden()) {
            oA.hide();
        } else {
            oA.show();
        }
        ox.getButton(kU).setDisabled(true);
        ox.getButton(kg).setDisabled(true);
        ox.getButton(j1).setDisabled(true);
        ox.getButton(j4).setDisabled(true);
        ox.getButton(cD).setDisabled(true);
        ox.getButton(m8).setDisabled(true);
        ox.getButton(iM).setDisabled(true);
        ox.getButton(nN).setDisabled(true);
        ox.getButton(hg).setDisabled(true);
        ox.getButton(l3).setDisabled(true);
        if (!ox.isMinimum()) {
            ox.getButton(d6).setDisabled(true);
            ox.getButton(gs).setDisabled(true);
            ox.getButton(hh).setDisabled(true);
        }
        if (!ox.isMinimum()) {
            ox.getButton(d6).setDisabled(false);
        }
        ox.getButton(du).setDisabled(false);
        var oB = ox.getSelectedElement();
        var ou = oB.getSelectedPanel();
        if (ou != null) {
            var ow = ou.getMathMLBean();
            var ov = ow.getParentBean();
            if (ow instanceof aB) {
                if (!ox.isMinimum()) {
                    ox.getButton(gs).setDisabled(false);
                }
            }
            if (!(ow instanceof k)) {
                var oD = kG.isEmptyElement(ow);
                var oE = ow.canBeDeleted();
                if (oE) {
                    ox.getButton(cD).setDisabled(false);
                }
                var oz = ov.getSelectedEmptyBean(ov);
                if (ov.canInsertChildRight(ow, oz)) {
                    ox.getButton(kU).setDisabled(false);
                }
                if (oD) {
                    ox.getButton(l3).setDisabled(false);
                }
                if (!oD) {
                    ox.getButton(kg).setDisabled(false);
                }
                if (oE) {
                    if (!oD) {
                        ox.getButton(j1).setDisabled(false);
                    }
                }
                if (oE) {
                    if (!oD) {
                        if (!ox.isMinimum()) {
                            ox.getButton(hh).setDisabled(false);
                        }
                    }
                }
                ox.getButton(m8).setDisabled(false);
                ox.getButton(nN).setDisabled(false);
                ox.getButton(hg).setDisabled(false);
            }
            if (!(ow instanceof aB)) {
                ox.getButton(iM).setDisabled(false);
            }
            var oC = oB.getCopiedSelectedElement();
            var oy = ox.getMainFormula().getSettings();
            if (oC != null && ov != null) {
                if (ov.canInsertMathMLRight(ow, oC, oy)) {
                    ox.getButton(j4).setDisabled(false);
                }
            }
        }
        ox.getButton(jX).setDisabled(!ox.getHistory().canUndoMathML());
        ox.getButton(jZ).setDisabled(!ox.getHistory().canRedoMathML());
    };
    kG.isEmptyElement = function (ou) {
        return ou instanceof bh;
    };

    function aE() {}
    aE.getListAvailableFonts = function () {
        if (eo == null) {
            eo = new fM();
            var ow = cH.split(",");
            for (var ov = 0; ov < ow.length; ov++) {
                var ou = ow[ov].trim();
                var oy = false;
                try {
                    oy = document.fonts.check("12px " + ou);
                } catch (ox) {}
                if (oy) {
                    eo.add(new hm(ou, ou));
                }
            }
        }
        return eo;
    };

    function gg() {}
    gg.canReplaceBeanWithMathML = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            return ox.canReplaceMathML(ou, oy, ow);
        }
        return false;
    };
    gg.replaceBeanWithMathML = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            ox.replaceMathML(ou, oy, ow);
        }
    };
    gg.replaceBeanWithBean = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            ox.replaceChild(ou, oy);
        }
    };
    gg.canInsertToRightElement = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            return ox.canInsertMathMLRight(ou, oy, ow);
        }
        return false;
    };
    gg.insertToRightMathML = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            ox.insertMathMLRight(ou, oy, ow);
        }
    };
    gg.insertToRightBean = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            ox.insertChildRight(ou, oy);
        }
    };
    gg.canInsertToLeftElement = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            return ox.canInsertMathMLLeft(ou, oy, ow);
        }
        return false;
    };
    gg.insertToLeftMathML = function (ou, oy, ov) {
        var ox = ou.getParentBean();
        if (ox != null) {
            var ow = ov.getMainFormula().getSettings();
            ox.insertMathMLLeft(ou, oy, ow);
        }
    };

    function S() {
        this.tipsList = new fM();
        this.lastIndexBean = -1;
        this.currentBean;
        this.currentIndex = 0;
    }
    S.prototype.getTipsList = function () {
        return this.tipsList;
    };
    S.prototype.addTips = function (ou) {
        this.tipsList.add(ou);
    };
    S.prototype.getCurrentBean = function () {
        return this.currentBean;
    };
    S.prototype.getCurrentIndex = function () {
        if (this.currentIndex == -1) {
            var ou = 0;
            ou = Math.floor(
                Math.random() * this.currentBean.getAdList().size(),
            );
            return ou;
        }
        return this.currentIndex;
    };
    S.prototype.setCurrentIndex = function (ou) {
        this.currentIndex = ou;
    };
    S.prototype.disablePrevIndex = function () {
        if (this.currentIndex == -1) {
            return true;
        }
        if (this.currentIndex == 0) {
            return true;
        }
        return false;
    };
    S.prototype.disableNextIndex = function () {
        if (this.currentIndex == this.currentBean.getContent().size() - 1) {
            return true;
        }
        return false;
    };
    S.prototype.setNextIndex = function () {
        if (this.disableNextIndex()) {
            return;
        }
        this.currentIndex = this.currentIndex + 1;
    };
    S.prototype.setPrevIndex = function () {
        if (this.disablePrevIndex()) {
            return;
        }
        this.currentIndex = this.currentIndex - 1;
    };
    S.prototype.chooseAnotherTip = function () {
        var ox = true;
        for (var ow = 0; ow < this.tipsList.size(); ow++) {
            var ou = this.tipsList.get(ow);
            if (ou.isViewed()) {
                continue;
            }
            ox = false;
            break;
        }
        if (ox) {
            for (var ow = 0; ow < this.tipsList.size(); ow++) {
                var ou = this.tipsList.get(ow);
                ou.setViewed(false);
            }
        }
        while (true) {
            var ov = 0;
            ov = Math.floor(Math.random() * this.tipsList.size());
            if (ov == this.lastIndexBean) {
                continue;
            }
            var ou = this.tipsList.get(ov);
            if (ou.isViewed()) {
                continue;
            }
            this.lastIndexBean = ov;
            this.currentBean = ou;
            this.currentBean.setViewed(true);
            this.currentIndex = -1;
            break;
        }
    };

    function gq() {}
    gq.translate = function (ou, ov) {
        var ow = ou.getLanguage();
        return gq.translateFromLang(ou.getEditorType(), ow, ov);
    };
    gq.translateFromLang = function (ou, oy, ov) {
        var ow = null;
        if (ov.indexOf("add_unicode_") > -1) {
            return "";
        }
        if (ov.indexOf("add_ident_") > -1) {
            return "";
        }
        if (ov.indexOf("add_op_") > -1) {
            return "";
        }
        if (ov.indexOf("add_exp_") > -1) {
            return "";
        }
        if (ov.indexOf("add_root_") > -1) {
            return "";
        }
        if (ov.indexOf("add_int_") > -1) {
            return "";
        }
        if (ov.indexOf("add_deriv_") > -1) {
            return "";
        }
        if (ov.indexOf("add_frac_") > -1) {
            return "";
        }
        if (ov.indexOf("add_limit_") > -1) {
            return "";
        }
        if (ov.indexOf("add_sum_") > -1) {
            return "";
        }
        if (ov.indexOf("add_fence_") > -1) {
            return "";
        }
        if (ov.indexOf("add_table_") > -1) {
            return "";
        }
        if (ov.indexOf("add_enclose_") > -1) {
            return "";
        }
        if (ov.indexOf("add_matrix_") > -1) {
            return "";
        }
        if (ov.indexOf("add_accent_") > -1) {
            return "";
        }
        if (ov.indexOf("add_const_") > -1) {
            return "";
        }
        if ("editor" == ou) {
            try {
                ow = fMath_i18n_values[oy][ov];
            } catch (ox) {}
            if (ow == null) {
                bH.console('fMath_i18n["' + ov + '"]="";');
                return "[" + ov + "]";
            }
            return ow;
        }
        if ("graph" == ou) {
            try {
                ow = fMathG_i18n_values[oy][ov];
            } catch (ox) {}
            if (ow == null) {
                bH.console('fMathG_i18n["' + ov + '"]="";');
                return "[" + ov + "]";
            }
            return ow;
        }
        if ("function" == ou) {
            try {
                ow = fMathF_i18n_values[oy][ov];
            } catch (ox) {}
            if (ow == null) {
                bH.console('fMathF_i18n["' + ov + '"]="";');
                return "[" + ov + "]";
            }
            return ow;
        }
        if ("calc" == ou) {
            try {
                ow = fMathC_i18n_values[oy][ov];
            } catch (ox) {}
            if (ow == null) {
                bH.console('fMathC_i18n["' + ov + '"]="";');
                return "[" + ov + "]";
            }
            return ow;
        }
        bH.console("TranslateManager: What is this type:" + ou);
        return "";
    };
    gq.getLanguages = function (ou) {
        if ("editor" == ou) {
            var ov = "en";
            ov = fMath_i18n_languages;
            return ov.split(",");
        }
        if ("graph" == ou) {
            var ov = "en";
            ov = fMathG_i18n_languages;
            return ov.split(",");
        }
        if ("function" == ou) {
            var ov = "en";
            ov = fMathF_i18n_languages;
            return ov.split(",");
        }
        if ("calc" == ou) {
            var ov = "en";
            ov = fMathC_i18n_languages;
            return ov.split(",");
        }
        bH.console("TranslateManager: What is this type:" + ou);
        return "en".split(",");
    };
    gq.acceptLanguage = function (ou, ox) {
        var ow = gq.getLanguages(ou);
        for (var ov = 0; ov < ow.length; ov++) {
            if (ow[ov] == ox) {
                return ox;
            }
        }
        return "en";
    };

    function bH() {}
    bH.alertPopup = function (ou) {};
    bH.confirmPopup = function (ov) {
        var ou = false;
        ou = confirm(ov);
        return ou;
    };
    bH.console = function (ou) {
        // console.log(ou);
    };
    bH.getHexColor = function (ou) {
        if (ou == null || ou.length == 0) {
            return "";
        }
        var ox = "";
        ou = ou.substring(ou.indexOf("(") + 1, ou.indexOf(")"));
        var ov = ou.split(",");

        function ow(oy) {
            return ("0" + parseInt(oy).toString(16)).slice(-2);
        }
        ox = "#" + ow(ov[0]) + ow(ov[1]) + ow(ov[2]);
        return ox.toUpperCase();
    };
    bH.getSelectedColor = function (ow) {
        var ov = $("<div>Test</div>");
        ov.addClass("fmath-select");
        ow.append(ov);
        var ou = bH.getHexColor(ov.css("background-color"));
        if (ou == "#000000" || ou == "#FFFFFF") {
            ou = "#80bfff";
        }
        ov.remove();
        return ou;
    };
    bH.removeDecimals = function (ou) {
        if (ou.indexOf(".") > -1) {
            return ou.substring(0, ou.indexOf("."));
        }
        return ou;
    };
    bH.getNumberOfLines = function (ov) {
        var ou = 0;
        ou = ov.split("\n").length;
        return ou - 1;
    };
    bH.ceil = function (ov) {
        var ou = 0;
        ou = Math.ceil(ov);
        return ou;
    };
    bH.downloadLikeFile = function (ox, ov, ow) {
        var ou = document.createElement("a");
        ou.setAttribute(
            "href",
            "data:" + ov + ";charset=utf-8," + encodeURIComponent(ow),
        );
        ou.setAttribute("download", ox);
        ou.style.display = "none";
        document.body.appendChild(ou);
        ou.click();
        document.body.removeChild(ou);
    };
    bH.downloadLikeFile2 = function (ow, ov) {
        var ou = document.createElement("a");
        ou.setAttribute("href", ov);
        ou.setAttribute("download", ow);
        ou.style.display = "none";
        document.body.appendChild(ou);
        ou.click();
        document.body.removeChild(ou);
    };
    bH.openNewWindow = function (ou) {
        window.open(ou, "Help");
    };
    bH.createLocalStorageKey = function (ou, ov) {
        if (localStorage == null) {
            return;
        }
        localStorage.setItem(ou, ov);
    };
    bH.readLocalStorageKey = function (ou) {
        var ov = null;
        if (localStorage == null) {
            return null;
        }
        ov = localStorage.getItem(ou);
        return ov;
    };
    bH.encode = function (ov) {
        var ou = null;
        ou = window.btoa(ov);
        return ou;
    };
    bH.decode = function (ov) {
        var ou = null;
        ou = window.atob(ov);
        return ou;
    };

    function aH() {}
    aH.changeNumbersToLanguage = function (oy, ox) {
        if (oy == null) {
            return oy;
        }
        if (ox.toLowerCase() == "ar") {
            var ow = "";
            for (var ou = 0; ou < oy.length; ou++) {
                var ov = oy.codePointAt(ou);
                if (ov > 47 && ov < 58) {
                    ov = ov + 1584;
                }
                ow = ow + lv.getCharFromInt(ov);
            }
            return ow;
        }
        return oy;
    };
    aH.changeUnicodeToLanguage = function (ov, ou) {
        if (ov == null) {
            return ov;
        }
        if (ou.toLowerCase() == "ar") {
            if ("30" == ov) {
                return "660";
            }
            if ("31" == ov) {
                return "661";
            }
            if ("32" == ov) {
                return "662";
            }
            if ("33" == ov) {
                return "663";
            }
            if ("34" == ov) {
                return "664";
            }
            if ("35" == ov) {
                return "665";
            }
            if ("36" == ov) {
                return "666";
            }
            if ("37" == ov) {
                return "667";
            }
            if ("38" == ov) {
                return "668";
            }
            if ("39" == ov) {
                return "669";
            }
        }
        return ov;
    };

    function lP() {
        this.j =
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiJCcm93c2VyIiwic3ViIjoiRk1hdGggRWRpdG9yIExpY2VuY2UiLCJ3YXRlcm1hcmsiOiJXYXRlck1hcmsgRGVtbyIsImlzcyI6Ind3dy5tYXRoLW9uLXdlYi5jb20iLCJrZXkiOiJFMTJSRS0zQ0RJMC1NNDNaMC1POTMwSC1RNFUwUiIsImVtYWlsIjoibGljZW5zZUBtYXRoLW9uLXdlYi5jb20iLCJwcm9kdWN0IjoiRnJlZSBMaWNlbnNlIiwiYnV5RGF0ZSI6MTYxODYwMjg2NiwiZXhwIjo0Nzc0MjgwMDY2fQ.AiVNVs9h7e4oVr-bg-INRjis81hXrPZFNDAB6FTC3kvmq9s1DBADu8z0TuyHAaJU6O-jCy9ZcjwD6ULFK1tjsOWTQEPbPr9ky6g2r1_XAZ7zftCENvPLR1rKAlRVC84O5jCW5vqZKn27CyDKKLKPLcYAjqM2N6eVOHBp73UPtoZCwnC2BCdh2nvEVdtAqgXraFjhtz_J71N307j3gyWuXyHDKyFdnLMM-_nbYTG6n2aRR2SYzZT-XAK_mlZLH-_osgobHNPxuwYJ2w9qsxCwZhI-skJmko5s4HMs1b0G5NBFpstGYckvvItFivIuwqE3iPVrk1gnAxnWRITLsZycwQ";
        this.em;
        this.buyDate;
        this.expireDate;
        this.k;
        this.w;
        this.s;
        this.product;
        this.f = true;
    }
    lP.prototype.isF = function () {
        return this.f;
    };
    lP.prototype.isP = function () {
        return !this.f;
    };
    lP.prototype.getW = function () {
        return this.w;
    };
    lP.prototype.getS = function () {
        return this.s;
    };
    lP.prototype.isE = function () {
        var ou = new Date();
        if (this.expireDate * 1000 > ou.getTime()) {
            return false;
        } else {
            return true;
        }
    };
    lP.prototype.load = function (ov) {
        var oy = this.j;
        if (ov != null && ov.indexOf(".") > -1) {
            oy = ov;
        }
        bH.console(oy);
        var ow = oy.split(".")[1];
        var ou = ow.replace(/-/g, "+").replace(/_/g, "/");
        var ox = JSON.parse(atob(ou));
        this.s = ox.iss;
     //   this.w = ox.watermark;
        this.k = ox.key;
        this.product = ox.product;
        this.expireDate = ox.exp;
        this.buyDate = ox.buyDate;
        this.em = ox.email;
        this.k = this.k.trim();
        if (this.product.indexOf("Free") == 0) {
            this.f = true;
        } else {
            this.f = false;
        }
    };
    lP.prototype.getExpireDate = function () {
        return this.expireDate;
    };
    lP.prototype.getExpireDateS = function () {
        var oy = "";
        var ov = new Date(this.expireDate * 1000);
        var ou = [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
        ];
        var ow = ov.getFullYear();
        var ox = ou[ov.getMonth()];
        var ov = ov.getDate();
        oy = ov + " " + ox + " " + ow;
        return oy;
    };
    lP.prototype.getProduct = function () {
        return this.product;
    };
    lP.prototype.getEm = function () {
        return this.em;
    };
    lP.prototype.getBuyDate = function () {
        return this.buyDate;
    };
    lP.prototype.getBuyDateS = function () {
        var oy = "";
        var ov = new Date(this.buyDate * 1000);
        var ou = [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
        ];
        var ow = ov.getFullYear();
        var ox = ou[ov.getMonth()];
        var ov = ov.getDate();
        oy = ov + " " + ox + " " + ow;
        return oy;
    };

    function c() {
        this.id;
        this.viewed = false;
        this.adList = new fM();
        this.content = new fM();
    }
    c.prototype.getId = function () {
        return this.id;
    };
    c.prototype.setId = function (ou) {
        this.id = ou;
    };
    c.prototype.isViewed = function () {
        return this.viewed;
    };
    c.prototype.setViewed = function (ou) {
        this.viewed = ou;
    };
    c.prototype.getContent = function () {
        return this.content;
    };
    c.prototype.addContent = function (ou) {
        this.content.add(ou);
    };
    c.prototype.getAdList = function () {
        return this.adList;
    };
    c.prototype.addAdList = function (ow, ov) {
        for (var ou = ow; ou <= ov; ou++) {
            this.adList.add(ou);
        }
    };

    function eu(ou) {
        this.config;
        this.config = ou;
    }
    eu.prototype.executeEvent = function (ow) {
        if (!(ow instanceof ge)) {
            return true;
        }
        var oD = ow;
        var oA = oD.getSource();
        if (oA == fW || oA == kP) {
            var oB = this.config.getButton(oA);
            var oC = oB.getElement().val();
            oB.setValue(oC);
        } else {
            if (oA == em || oA == ol) {
                var oB = this.config.getButton(oA);
                var oC = oB.getElement().val();
                oB.setValue(oC);
            } else {
                if (oA == f0 || oA == gy) {
                    var oz = this.config.getButton(oA);
                    var ou = oz.isState();
                    oz.setState(!ou);
                } else {
                    if (oA == kl || oA == a1 || oA == dH) {
                        var oB = this.config.getButton(oA);
                        var oC = oB.getElement().val();
                        oB.setValue(oC);
                        this.config.addAction(g6);
                    } else {
                        if (oA.indexOf("insert_") > -1) {
                            var ov = this.config.getAllButtons();
                            for (var ox = 0; ox < ov.size(); ox++) {
                                var oy = ov.get(ox);
                                if (oy.getId().indexOf("insert_") > -1) {
                                    oy.setState(false);
                                }
                            }
                            var oz = this.config.getButton(oA);
                            oz.setState(true);
                            this.config.addAction(g6);
                        }
                    }
                }
            }
        }
        return true;
    };

    function R(ou) {
        this.config;
        this.config = ou;
    }
    R.prototype.executeEvent = function (ow) {
        if (ow instanceof ge) {
            var ov = ow;
            if (ov.getSource().indexOf(h2) > -1) {
                if (af.isCodeMirrorActiveAndFocus(this.config)) {
                    var oA = ov.getSource();
                    var ou = oA.substring(oA.lastIndexOf("_") + 1);
                    var oy = "&#x" + ou + ";";
                    var oz = ee.convertToChars(oy);
                    var ox = af.insertText(this.config, oz);
                    cd.updateFormula(this.config, ox);
                    this.config.getSelectedElement().setLastLineSelected(-1);
                    this.config.addAction(lh);
                    this.config.addAction(fc);
                }
            }
        }
        return true;
    };

    function h3(ou) {
        this.config;
        this.config = ou;
    }
    h3.prototype.executeEvent = function (ox) {
        if (!(ox instanceof ge)) {
            return true;
        }
        var ow = ox;
        var ov = ow.getSource();
        if (ov == b1) {
            iB.show(this.config);
        } else {
            if (ov == iK) {
                jJ.show(this.config);
            } else {
                if (ov == iP) {
                    gE.show(this.config);
                } else {
                    if (ov == nd) {
                        bH.openNewWindow(
                            "https://www.youtube.com/channel/UC4JsnHBed3Dw9pVsamB9m9w/videos",
                        );
                    } else {
                        if (ov == ks) {
                            bH.openNewWindow("https://www.math-on-web.com/");
                        } else {
                            if (ov == jO) {
                                fR.show(this.config);
                            } else {
                                if (ov == dW) {
                                    var ou = this.config.getButton(dW);
                                    var oy = ou.getElement().val();
                                    this.config.setLanguage(oy);
                                    n6.resetCache();
                                    this.config
                                        .getSaveLocalStorage()
                                        .saveLanguage(
                                            this.config.getEditorId(),
                                            oy,
                                        );
                                    this.config.addAction(s);
                                    this.config.addAction(g6);
                                    this.config.addAction(iT);
                                    this.config.addAction(lh);
                                    this.config.addAction(fc);
                                    this.config.addAction(i5);
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };

    function mc(ou) {
        this.config;
        this.config = ou;
    }
    mc.prototype.executeEvent = function (ox) {
        if (ox instanceof ge) {
            var ou = ox;
            if (ou.getSource() == lg) {
                return mc.deleteCurrentSelection(this.config);
            } else {
                if (ou.getSource() == lH || ou.getSource() == jX) {
                    return this.undoAction();
                } else {
                    if (ou.getSource() == jv || ou.getSource() == jZ) {
                        return this.redoAction();
                    } else {
                        if (ou.getSource() == dk || ou.getSource() == kg) {
                            return this.copyCurrentSelection();
                        } else {
                            if (ou.getSource() == oh || ou.getSource() == j1) {
                                return this.cutCurrentSelection();
                            } else {
                                if (ou.getSource() == dg) {
                                    return this.insertToLeftCurrentSelection();
                                } else {
                                    if (ou.getSource() == ml) {
                                        return this.insertToRightCurrentSelection();
                                    } else {
                                        if (
                                            ou.getSource() == bd ||
                                            ou.getSource() == j4
                                        ) {
                                            return this.replaceCurrentSelection();
                                        } else {
                                            if (ou.getSource() == cD) {
                                                return mc.deleteCurrentSelection(
                                                    this.config,
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (ox instanceof cj) {
                var ow = ox;
                if (ow.isDeleteKey()) {
                    if (this.isSelection()) {
                        return mc.deleteCurrentSelection(this.config);
                    }
                    var ov = gq.translate(
                        this.config,
                        "warning_no_selection_del",
                    );
                    i2.show(this.config, ov);
                } else {
                    if (ow.isCtrlC()) {
                        if (this.isSelection()) {
                            return this.copyCurrentSelection();
                        }
                        var ov = gq.translate(
                            this.config,
                            "warning_no_selection_copy",
                        );
                        i2.show(this.config, ov);
                    } else {
                        if (ow.isCtrlX()) {
                            if (this.isSelection()) {
                                return this.cutCurrentSelection();
                            }
                            var ov = gq.translate(
                                this.config,
                                "warning_no_selection_cut",
                            );
                            i2.show(this.config, ov);
                        } else {
                            if (ow.isCtrlV()) {
                                if (this.isSelection()) {
                                    return this.replaceCurrentSelection();
                                }
                                var ov = gq.translate(
                                    this.config,
                                    "warning_no_selection_paste",
                                );
                                i2.show(this.config, ov);
                            } else {
                                if (ow.isCtrlZ()) {
                                    return this.undoAction();
                                } else {
                                    if (ow.isCtrlY()) {
                                        return this.redoAction();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };
    mc.prototype.replaceCurrentSelection = function () {
        var oy = this.config.getSelectedElement();
        if (oy.getSelectedIndex() == -1) {
            return true;
        }
        var ox = this.config.getSelectedElement().getCopiedSelectedElement();
        if (ox == null) {
            return true;
        }
        var ov = oy.getSelectedPanel();
        var ou = ov.getBean();
        var ow = gg.canReplaceBeanWithMathML(ou, ox, this.config);
        if (ow) {
            gg.replaceBeanWithMathML(ou, ox, this.config);
            this.config.addAction(iT);
            this.config.addAction(hG);
            this.config.addAction(iT);
            this.config.addAction(b7);
            this.config.addAction(lh);
            this.config.addAction(fc);
            ox = this.config.getMainFormula().getMathML(hV, true);
            cd.updateMathMLFormulaOnReturn(this.config, ox);
            return false;
        }
        return true;
    };
    mc.prototype.insertToRightCurrentSelection = function () {
        var oy = this.config.getSelectedElement();
        if (oy.getSelectedIndex() == -1) {
            return true;
        }
        var ox = this.config.getSelectedElement().getCopiedSelectedElement();
        if (ox == null) {
            return true;
        }
        var ov = oy.getSelectedPanel();
        var ou = ov.getBean();
        var ow = gg.canInsertToRightElement(ou, ox, this.config);
        if (ow) {
            gg.insertToRightMathML(ou, ox, this.config);
            this.config.addAction(iT);
            this.config.addAction(hG);
            this.config.addAction(b7);
            this.config.addAction(lh);
            this.config.addAction(fc);
            ox = this.config.getMainFormula().getMathML(hV, true);
            cd.updateMathMLFormulaOnReturn(this.config, ox);
            return false;
        }
        return true;
    };
    mc.prototype.insertToLeftCurrentSelection = function () {
        var oy = this.config.getSelectedElement();
        if (oy.getSelectedIndex() == -1) {
            return true;
        }
        var ox = this.config.getSelectedElement().getCopiedSelectedElement();
        if (ox == null) {
            return true;
        }
        var ov = oy.getSelectedPanel();
        var ou = ov.getBean();
        var ow = gg.canInsertToLeftElement(ou, ox, this.config);
        if (ow) {
            gg.insertToLeftMathML(ou, ox, this.config);
            this.config.addAction(iT);
            this.config.addAction(hG);
            this.config.addAction(iT);
            this.config.addAction(b7);
            this.config.addAction(lh);
            this.config.addAction(fc);
            ox = this.config.getMainFormula().getMathML(hV, true);
            cd.updateMathMLFormulaOnReturn(this.config, ox);
            return false;
        }
        return true;
    };
    mc.prototype.undoAction = function () {
        this.config.addAction(iT);
        this.config.addAction(hG);
        this.config.addAction(iT);
        this.config.addAction(b7);
        this.config.addAction(lh);
        this.config.addAction(fc);
        var ou = this.config.getHistory().undoMathML();
        cd.updateMathMLFormulaOnReturnNoHistory(this.config, ou);
        return false;
    };
    mc.prototype.redoAction = function () {
        this.config.addAction(iT);
        this.config.addAction(hG);
        this.config.addAction(iT);
        this.config.addAction(b7);
        this.config.addAction(lh);
        this.config.addAction(fc);
        var ou = this.config.getHistory().redoMathML();
        cd.updateMathMLFormulaOnReturnNoHistory(this.config, ou);
        return false;
    };
    mc.prototype.isSelection = function () {
        var ou = this.config.getSelectedElement();
        if (ou.getSelectedIndex() == -1) {
            return false;
        }
        return true;
    };
    mc.prototype.cutCurrentSelection = function () {
        var ox = this.config.getSelectedElement();
        if (ox.getSelectedIndex() == -1) {
            return true;
        }
        var ov = ox.getSelectedPanel();
        var ou = ov.getBean();
        if (ou.canBeDeleted()) {
            var ow = this.config
                .getMainFormula()
                .getMathML_getMathML(ov, hV, true);
            this.config.getSelectedElement().setCopiedSelectedElement(ow);
            this.config.addAction(dw);
            ou.deleteMe();
            this.config.addAction(hG);
            this.config.addAction(iT);
            this.config.addAction(b7);
            this.config.addAction(lh);
            this.config.addAction(fc);
            ow = this.config.getMainFormula().getMathML(hV, true);
            cd.updateMathMLFormulaOnReturn(this.config, ow);
            return false;
        } else {
        }
        return true;
    };
    mc.prototype.copyCurrentSelection = function () {
        var ow = this.config.getSelectedElement();
        if (ow.getSelectedIndex() == -1) {
            return true;
        }
        var ou = ow.getSelectedPanel();
        var ov = this.config.getMainFormula().getMathML_getMathML(ou, hV, true);
        this.config.getSelectedElement().setCopiedSelectedElement(ov);
        this.config.addAction(dw);
        return true;
    };
    mc.deleteCurrentSelection = function (ox) {
        var oy = ox.getSelectedElement();
        if (oy.getSelectedIndex() == -1) {
            return true;
        }
        var ov = oy.getSelectedPanel();
        var ou = ov.getBean();
        if (ou.canBeDeleted()) {
            ou.deleteMe();
            ox.addAction(hG);
            ox.addAction(dw);
            ox.addAction(iT);
            ox.addAction(b7);
            ox.addAction(lh);
            ox.addAction(fc);
            var ow = ox.getMainFormula().getMathML(hV, true);
            cd.updateMathMLFormulaOnReturn(ox, ow);
            return false;
        } else {
        }
        return true;
    };
    mc.moveCurrentSelection = function (ox, ov, ou, oz) {
        var oy = ox.getSelectedElement();
        if (oy.getSelectedIndex() == -1) {
            return true;
        }
        gg.insertToRightMathML(ov, ou, ox);
        oz.deleteMe();
        ox.addAction(hG);
        ox.addAction(iT);
        ox.addAction(b7);
        ox.addAction(lh);
        ox.addAction(fc);
        var ow = ox.getMainFormula().getMathML(hV, true);
        cd.updateMathMLFormulaOnReturn(ox, ow);
        return false;
    };

    function dn(ou) {
        this.config;
        this.config = ou;
    }
    dn.prototype.executeEvent = function (ou) {
        if (ou instanceof ge) {
            var oB = ou;
            if (oB.getSource() == lO) {
                return this.newFormulaAction();
            } else {
                if (oB.getSource() == di) {
                    return this.newTextFormulaAction();
                } else {
                    if (oB.getSource() == kR) {
                        return this.newDefFormulaAction();
                    } else {
                        if (oB.getSource() == kQ) {
                            j9.show(this.config);
                        } else {
                            if (oB.getSource() == ab) {
                            } else {
                                if (oB.getSource() == oq) {
                                    var oC = j9.getMathML(this.config);
                                    j9.close(this.config);
                                    return this.replaceFormulaAction(oC);
                                } else {
                                    if (oB.getSource() == fp) {
                                        l4.show(this.config);
                                    } else {
                                        if (oB.getSource() == gi) {
                                            var ov = l4.getMathML(this.config);
                                            l4.close(this.config);
                                            var oC = e3.convertToMathML(
                                                "$" + ov + "$",
                                            );
                                            return this.replaceFormulaAction(
                                                oC,
                                            );
                                        } else {
                                            if (oB.getSource() == gh) {
                                                var oC = this.config
                                                    .getMainFormula()
                                                    .getMathML(hV, true);
                                                this.config
                                                    .getSaveLocalStorage()
                                                    .saveDefFormula(
                                                        this.config.getEditorId(),
                                                        oC,
                                                    );
                                                this.config.setDefFormula(oC);
                                            } else {
                                                if (oB.getSource() == nM) {
                                                    var ow =
                                                        this.config.getSaveCallback();
                                                    if (ow != null) {
                                                        try {
                                                            ow();
                                                        } catch (oz) {}
                                                    }
                                                } else {
                                                    if (oB.getSource() == ji) {
                                                        d7.show(this.config);
                                                    } else {
                                                        if (
                                                            oB.getSource() == fy
                                                        ) {
                                                            d7.changeSelection(
                                                                this.config,
                                                            );
                                                            return false;
                                                        } else {
                                                            if (
                                                                oB.getSource() ==
                                                                oj
                                                            ) {
                                                                var oA =
                                                                    d7.getSaveType(
                                                                        this
                                                                            .config,
                                                                    );
                                                                if (
                                                                    oA ==
                                                                    "image"
                                                                ) {
                                                                    var ox =
                                                                        "image/png";
                                                                    var oD =
                                                                        this.config
                                                                            .getMainFormula()
                                                                            .getImage(
                                                                                ox,
                                                                                1,
                                                                            );
                                                                    bH.downloadLikeFile2(
                                                                        "fMathFormula.png",
                                                                        oD,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        oA ==
                                                                        "latex"
                                                                    ) {
                                                                        var ov =
                                                                            cd.getLatexString(
                                                                                this
                                                                                    .config,
                                                                                true,
                                                                            );
                                                                        bH.downloadLikeFile(
                                                                            "fMathFormula.tex",
                                                                            "text/plain",
                                                                            ov,
                                                                        );
                                                                    } else {
                                                                        var oy =
                                                                            d7.getMathMLType(
                                                                                this
                                                                                    .config,
                                                                            );
                                                                        var oC =
                                                                            cd.getMathMLString(
                                                                                this
                                                                                    .config,
                                                                                oy,
                                                                                true,
                                                                            );
                                                                        bH.downloadLikeFile(
                                                                            "fMathFormula.mathml",
                                                                            "text/plain",
                                                                            oC,
                                                                        );
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };
    dn.prototype.newFormulaAction = function () {
        var ou =
            '<math display="block">' +
            cd.getEmptySelectedMathMLElement() +
            "</math>";
        return this.updateFormulaAction(ou);
    };
    dn.prototype.newTextFormulaAction = function () {
        var ou =
            '<math display="block" mathsize=\'24\'><mspace linebreak="newline"></mspace><mtext mathvariant="italic">To start a new paragraph</mtext><mspace linebreak="newline"></mspace><mtext mathvariant="bold">You need to insert a new line</mtext><mspace linebreak="newline"></mspace><mtext  mathsize="20">Insert / Diverse / New Line</mtext></math>';
        return this.updateFormulaAction(ou);
    };
    dn.prototype.newDefFormulaAction = function () {
        var ou = this.config.getDefFormula();
        return this.updateFormulaAction(ou);
    };
    dn.prototype.replaceFormulaAction = function (ow) {
        var ox = this.config.getSelectedElement();
        if (ox.getSelectedIndex() == -1) {
            return this.updateFormulaAction(ow);
        }
        if (ow.indexOf("<math") == 0) {
            var oy = ow.indexOf(">");
            ow = "<mrow" + ow.substring(oy, ow.length);
            ow = W.replace(ow, "</math>", "</mrow>");
        }
        var ov = ox.getSelectedPanel();
        var ou = ov.getBean();
        gg.replaceBeanWithMathML(ou, ow, this.config);
        ee.updateFormulaAndPanels(this.config);
        return false;
    };
    dn.prototype.updateFormulaAction = function (ov) {
        var ou = gq.translate(this.config, "warning_new_fle");
        this.config.addAction(hG);
        this.config.addAction(iT);
        this.config.addAction(b7);
        this.config.addAction(lh);
        this.config.addAction(fc);
        cd.updateMathMLFormulaOnReturn(this.config, ov);
        return false;
    };

    function ee(ou) {
        this.config;
        this.config = ou;
    }
    ee.prototype.executeEvent = function (o4) {
        if (o4 instanceof cB) {
            var o2 = o4;
            cd.updateFormula(this.config, o2.getValue());
            this.config.getSelectedElement().setLastLineSelected(-1);
            this.config.addAction(lh);
            this.config.addAction(fc);
        } else {
            if (o4 instanceof ge) {
                var oJ = o4;
                if (oJ.getSource().indexOf(mf) > -1) {
                    var oS = oJ.getSource();
                    var oQ = oS.substring(oS.lastIndexOf("_") + 1);
                    this.selectElementFromListForIndex(oQ);
                    this.config.addAction(b7);
                    this.config.addAction(lh);
                    this.config.addAction(fc);
                } else {
                    if (oJ.getSource().indexOf(eS) > -1) {
                        var oS = oJ.getSource();
                        var ox = oS.substring(oS.lastIndexOf(eS) + 10);
                        var oX = n6.getBasicFunctionList();
                        var oO = this.getMathMLValue(oX, ox);
                        var oC = ee.addMathMLToSelectedElement(oO, this.config);
                        if (oC) {
                            return ee.updateFormulaAndPanels(this.config);
                        }
                        return true;
                    } else {
                        if (oJ.getSource().indexOf(h2) > -1) {
                            if (!af.isCodeMirrorActiveAndFocus(this.config)) {
                                var oS = oJ.getSource();
                                var oK = oS.substring(oS.lastIndexOf("_") + 1);
                                return this.addUnicodeToSelectedElement(oK);
                            }
                        } else {
                            if (oJ.getSource().indexOf(dR) > -1) {
                                var oS = oJ.getSource();
                                var oK = oS.substring(oS.lastIndexOf("_") + 1);
                                return this.addMiToSelectedElement(oK);
                            } else {
                                if (oJ.getSource().indexOf(gG) > -1) {
                                    var oS = oJ.getSource();
                                    var oK = oS.substring(
                                        oS.lastIndexOf("_") + 1,
                                    );
                                    return this.addMoToSelectedElement(oK);
                                } else {
                                    if (oJ.getSource().indexOf(nA) > -1) {
                                        var oS = oJ.getSource();
                                        var oK = oS.substring(
                                            oS.lastIndexOf("_") + 1,
                                        );
                                        oK = aH.changeUnicodeToLanguage(
                                            oK,
                                            this.config.getLanguage(),
                                        );
                                        return this.addMnToSelectedElement(oK);
                                    } else {
                                        if (oJ.getSource().indexOf(aJ) > -1) {
                                            return this.getMathMLFromList(
                                                oJ,
                                                n6.getFracList(),
                                            );
                                        } else {
                                            if (
                                                oJ.getSource().indexOf(kI) > -1
                                            ) {
                                                return this.getMathMLFromList(
                                                    oJ,
                                                    n6.getScriptList(),
                                                );
                                            } else {
                                                if (
                                                    oJ.getSource().indexOf(m7) >
                                                    -1
                                                ) {
                                                    return this.getMathMLFromList(
                                                        oJ,
                                                        n6.getScriptAList(),
                                                    );
                                                } else {
                                                    if (
                                                        oJ
                                                            .getSource()
                                                            .indexOf(ll) > -1
                                                    ) {
                                                        return this.getMathMLFromList(
                                                            oJ,
                                                            n6.getRootList(),
                                                        );
                                                    } else {
                                                        if (
                                                            oJ
                                                                .getSource()
                                                                .indexOf(fQ) >
                                                            -1
                                                        ) {
                                                            return this.getMathMLFromList(
                                                                oJ,
                                                                n6.getIntList(),
                                                            );
                                                        } else {
                                                            if (
                                                                oJ
                                                                    .getSource()
                                                                    .indexOf(
                                                                        O,
                                                                    ) > -1
                                                            ) {
                                                                return this.getMathMLFromList(
                                                                    oJ,
                                                                    n6.getSumList(),
                                                                );
                                                            } else {
                                                                if (
                                                                    oJ
                                                                        .getSource()
                                                                        .indexOf(
                                                                            fL,
                                                                        ) > -1
                                                                ) {
                                                                    return this.getMathMLFromList(
                                                                        oJ,
                                                                        n6.getLimList(),
                                                                    );
                                                                } else {
                                                                    if (
                                                                        oJ
                                                                            .getSource()
                                                                            .indexOf(
                                                                                ap,
                                                                            ) >
                                                                        -1
                                                                    ) {
                                                                        return this.getMathMLFromList(
                                                                            oJ,
                                                                            n6.getDerivList(),
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            oJ
                                                                                .getSource()
                                                                                .indexOf(
                                                                                    fw,
                                                                                ) >
                                                                            -1
                                                                        ) {
                                                                            return this.getMathMLFromList(
                                                                                oJ,
                                                                                n6.getFenceList(),
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                oJ
                                                                                    .getSource()
                                                                                    .indexOf(
                                                                                        e6,
                                                                                    ) >
                                                                                -1
                                                                            ) {
                                                                                return this.getMathMLFromList(
                                                                                    oJ,
                                                                                    n6.getTableList(),
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    oJ
                                                                                        .getSource()
                                                                                        .indexOf(
                                                                                            kZ,
                                                                                        ) >
                                                                                    -1
                                                                                ) {
                                                                                    return this.getMathMLFromList(
                                                                                        oJ,
                                                                                        n6.getMatrixList(),
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        oJ
                                                                                            .getSource()
                                                                                            .indexOf(
                                                                                                bT,
                                                                                            ) >
                                                                                        -1
                                                                                    ) {
                                                                                        return this.getMathMLFromList(
                                                                                            oJ,
                                                                                            n6.getFunList(),
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            oJ
                                                                                                .getSource()
                                                                                                .indexOf(
                                                                                                    e9,
                                                                                                ) >
                                                                                            -1
                                                                                        ) {
                                                                                            return this.getMathMLFromList(
                                                                                                oJ,
                                                                                                n6.getAccentList(),
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                oJ
                                                                                                    .getSource()
                                                                                                    .indexOf(
                                                                                                        cx,
                                                                                                    ) >
                                                                                                -1
                                                                                            ) {
                                                                                                return this.getMathMLFromList(
                                                                                                    oJ,
                                                                                                    n6.getEncloseList(),
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    oJ
                                                                                                        .getSource()
                                                                                                        .indexOf(
                                                                                                            h7,
                                                                                                        ) >
                                                                                                    -1
                                                                                                ) {
                                                                                                    return this.getMathMLFromList(
                                                                                                        oJ,
                                                                                                        n6.getNewLineList(),
                                                                                                    );
                                                                                                } else {
                                                                                                    if (
                                                                                                        oJ
                                                                                                            .getSource()
                                                                                                            .indexOf(
                                                                                                                jy,
                                                                                                            ) >
                                                                                                        -1
                                                                                                    ) {
                                                                                                        var oS =
                                                                                                            oJ.getSource();
                                                                                                        var oK =
                                                                                                            oS.substring(
                                                                                                                oS.lastIndexOf(
                                                                                                                    "_",
                                                                                                                ) +
                                                                                                                    1,
                                                                                                            );
                                                                                                        var oC =
                                                                                                            this.addUnicodeToSelectedElement(
                                                                                                                oK,
                                                                                                            );
                                                                                                        if (
                                                                                                            oC
                                                                                                        ) {
                                                                                                            return ee.updateFormulaAndPanels(
                                                                                                                this
                                                                                                                    .config,
                                                                                                            );
                                                                                                        }
                                                                                                    } else {
                                                                                                        if (
                                                                                                            oJ
                                                                                                                .getSource()
                                                                                                                .indexOf(
                                                                                                                    hf,
                                                                                                                ) >
                                                                                                            -1
                                                                                                        ) {
                                                                                                            var oM =
                                                                                                                this.config.getSelectedElement();
                                                                                                            var oG =
                                                                                                                oM.getSelectedPanel();
                                                                                                            if (
                                                                                                                oG ==
                                                                                                                null
                                                                                                            ) {
                                                                                                                var oH =
                                                                                                                    gq.translate(
                                                                                                                        this
                                                                                                                            .config,
                                                                                                                        "warning_not_selected",
                                                                                                                    );
                                                                                                                i2.show(
                                                                                                                    this
                                                                                                                        .config,
                                                                                                                    oH,
                                                                                                                );
                                                                                                                return false;
                                                                                                            }
                                                                                                            var oS =
                                                                                                                oJ.getSource();
                                                                                                            var oK =
                                                                                                                oS.substring(
                                                                                                                    oS.lastIndexOf(
                                                                                                                        "_",
                                                                                                                    ) +
                                                                                                                        1,
                                                                                                                );
                                                                                                            if (
                                                                                                                "0" ==
                                                                                                                oK
                                                                                                            ) {
                                                                                                                gY.show(
                                                                                                                    this
                                                                                                                        .config,
                                                                                                                );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    "1" ==
                                                                                                                    oK
                                                                                                                ) {
                                                                                                                    cv.show(
                                                                                                                        this
                                                                                                                            .config,
                                                                                                                    );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        "2" ==
                                                                                                                        oK
                                                                                                                    ) {
                                                                                                                        d9.show(
                                                                                                                            this
                                                                                                                                .config,
                                                                                                                        );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            "3" ==
                                                                                                                            oK
                                                                                                                        ) {
                                                                                                                            hJ.show(
                                                                                                                                this
                                                                                                                                    .config,
                                                                                                                            );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                "4" ==
                                                                                                                                oK
                                                                                                                            ) {
                                                                                                                                nb.show(
                                                                                                                                    this
                                                                                                                                        .config,
                                                                                                                                );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    "5" ==
                                                                                                                                    oK
                                                                                                                                ) {
                                                                                                                                    mG.show(
                                                                                                                                        this
                                                                                                                                            .config,
                                                                                                                                    );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        "6" ==
                                                                                                                                        oK
                                                                                                                                    ) {
                                                                                                                                        aw.show(
                                                                                                                                            this
                                                                                                                                                .config,
                                                                                                                                        );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            "7" ==
                                                                                                                                            oK
                                                                                                                                        ) {
                                                                                                                                            aC.show(
                                                                                                                                                this
                                                                                                                                                    .config,
                                                                                                                                            );
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            return true;
                                                                                                        } else {
                                                                                                            if (
                                                                                                                oJ.getSource() ==
                                                                                                                kU
                                                                                                            ) {
                                                                                                                var oC =
                                                                                                                    this.addNewSibling();
                                                                                                                if (
                                                                                                                    oC
                                                                                                                ) {
                                                                                                                    return ee.updateFormulaAndPanels(
                                                                                                                        this
                                                                                                                            .config,
                                                                                                                    );
                                                                                                                }
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    oJ.getSource() ==
                                                                                                                    nN
                                                                                                                ) {
                                                                                                                    var ow =
                                                                                                                        this.selectLeftSibling();
                                                                                                                    if (
                                                                                                                        ow
                                                                                                                    ) {
                                                                                                                        this.config.addAction(
                                                                                                                            b7,
                                                                                                                        );
                                                                                                                        this.config.addAction(
                                                                                                                            lh,
                                                                                                                        );
                                                                                                                        this.config.addAction(
                                                                                                                            fc,
                                                                                                                        );
                                                                                                                    }
                                                                                                                    return true;
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        oJ.getSource() ==
                                                                                                                        hg
                                                                                                                    ) {
                                                                                                                        var ow =
                                                                                                                            this.selectRightSibling();
                                                                                                                        if (
                                                                                                                            ow
                                                                                                                        ) {
                                                                                                                            this.config.addAction(
                                                                                                                                b7,
                                                                                                                            );
                                                                                                                            this.config.addAction(
                                                                                                                                lh,
                                                                                                                            );
                                                                                                                            this.config.addAction(
                                                                                                                                fc,
                                                                                                                            );
                                                                                                                        }
                                                                                                                        return true;
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            oJ.getSource() ==
                                                                                                                            m8
                                                                                                                        ) {
                                                                                                                            var ow =
                                                                                                                                this.selectParent();
                                                                                                                            if (
                                                                                                                                ow
                                                                                                                            ) {
                                                                                                                                this.config.addAction(
                                                                                                                                    b7,
                                                                                                                                );
                                                                                                                                this.config.addAction(
                                                                                                                                    lh,
                                                                                                                                );
                                                                                                                                this.config.addAction(
                                                                                                                                    fc,
                                                                                                                                );
                                                                                                                            }
                                                                                                                            return true;
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                oJ.getSource() ==
                                                                                                                                iM
                                                                                                                            ) {
                                                                                                                                var ow =
                                                                                                                                    this.selectFirstChild();
                                                                                                                                if (
                                                                                                                                    ow
                                                                                                                                ) {
                                                                                                                                    this.config.addAction(
                                                                                                                                        b7,
                                                                                                                                    );
                                                                                                                                    this.config.addAction(
                                                                                                                                        lh,
                                                                                                                                    );
                                                                                                                                    this.config.addAction(
                                                                                                                                        fc,
                                                                                                                                    );
                                                                                                                                }
                                                                                                                                return true;
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    oJ.getSource() ==
                                                                                                                                    du
                                                                                                                                ) {
                                                                                                                                    var ow =
                                                                                                                                        this.selectFirstRightText();
                                                                                                                                    if (
                                                                                                                                        ow
                                                                                                                                    ) {
                                                                                                                                        this.config.addAction(
                                                                                                                                            b7,
                                                                                                                                        );
                                                                                                                                        this.config.addAction(
                                                                                                                                            lh,
                                                                                                                                        );
                                                                                                                                        this.config.addAction(
                                                                                                                                            fc,
                                                                                                                                        );
                                                                                                                                    }
                                                                                                                                    return true;
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (o4 instanceof jc) {
            var o2 = o4;
            if (o2.isDown()) {
                var oL = cd.getPanelHierarcyFromXY(this.config, o2.getEvent());
                var ow = this.selectElementFromList(oL);
                if (ow) {
                    this.config.addAction(b7);
                    this.config.addAction(lh);
                    this.config.addAction(fc);
                }
                this.config.setDragAction(true);
                return ow;
            } else {
                if (this.config.isDragAction()) {
                    this.config.setDragAction(false);
                    var oL = cd.getPanelHierarcyFromXY(
                        this.config,
                        o2.getEvent(),
                    );
                    var oZ = this.getSelectElementFromList(oL);
                    var oP = oZ.getSelectedPanel();
                    var oU = oP.getBean();
                    var ov = this.config.getSelectedElement();
                    var oR = ov.getSelectedPanel();
                    if (oR != null && oP != oR) {
                        var oO = this.config
                            .getMainFormula()
                            .getMathML_getMathML(oR, hV, true);
                        if (gg.canInsertToRightElement(oU, oO, this.config)) {
                            mc.moveCurrentSelection(
                                this.config,
                                oU,
                                oO,
                                oR.getMathMLBean(),
                            );
                            return true;
                        }
                    }
                }
                return false;
            }
        } else {
            if (o4 instanceof mL) {
                var o2 = o4;
                if (this.config.isDragAction()) {
                    var oL = cd.getPanelHierarcyFromXY(
                        this.config,
                        o2.getEvent(),
                    );
                    this.selectOverElementFromList(oL);
                }
                return false;
            } else {
                if (o4 instanceof b) {
                    this.config.addAction(bG);
                } else {
                    if (o4 instanceof ja) {
                        var oW = o4;
                        if (oW.getSource().indexOf(nf) > -1) {
                            this.config.addAction(aZ);
                            this.config.setDragAction(false);
                            if (this.config.getFlyingTarget() != null) {
                                var ou = $(
                                    "#" + this.config.getEditorId() + "_" + nf,
                                );
                                var oA = ou.val();
                                oA = aH.changeNumbersToLanguage(
                                    oA,
                                    this.config.getLanguage(),
                                );
                                var o0 = this.config
                                    .getMainFormula()
                                    .getSettings();
                                var oI = fE.convertToMathML(oA, o0);
                                if (oI.getIsMathml()) {
                                    var oT = this.config.getFlyingTarget();
                                    gg.replaceBeanWithBean(
                                        oT,
                                        oI.getValue(),
                                        this.config,
                                    );
                                    this.config.addAction(iT);
                                    this.config.addAction(hG);
                                    this.config.addAction(iT);
                                    this.config.addAction(b7);
                                    this.config.addAction(lh);
                                    this.config.addAction(fc);
                                    var oO = this.config
                                        .getMainFormula()
                                        .getMathML(hV, true);
                                    cd.updateMathMLFormulaOnReturn(
                                        this.config,
                                        oO,
                                    );
                                    return false;
                                }
                            }
                            this.config.setFlyingTarget(null);
                        } else {
                            if (oW.getSource().indexOf(i4) > -1) {
                                ee.removeSelectionOnFormula(this.config);
                            }
                        }
                    } else {
                        if (o4 instanceof t) {
                            var ou = $(
                                "#" + this.config.getEditorId() + "_" + nf,
                            );
                            var oA = ou.val();
                            if (oA.length == 0) {
                                return true;
                            }
                            var oM = this.config.getSelectedElement();
                            var oF = oM.getSelectedPanel();
                            if (oF instanceof i6) {
                                var oY = oF;
                                var oT = oY.getBean();
                                oT.setText(oA);
                                oT.setAttribute("editorSelected", "true");
                                this.config.addAction(bG);
                                return ee.updateFormulaAndPanels(this.config);
                            } else {
                                if (oF instanceof cR) {
                                    var o1 = oF;
                                    var oT = o1.getBean();
                                    if (cd.isEmptyElement(oT)) {
                                        var oD = oT.getParentBean();
                                        var o3 = fe.getIBean(oD, oA);
                                        o3.setAttribute(
                                            "editorSelected",
                                            "true",
                                        );
                                        gg.replaceBeanWithBean(
                                            oT,
                                            o3,
                                            this.config,
                                        );
                                        this.config.addAction(bG);
                                        return ee.updateFormulaAndPanels(
                                            this.config,
                                        );
                                    }
                                }
                            }
                        } else {
                            if (o4 instanceof hx) {
                                var oB = o4;
                                if (oB.getChangeType() == "MATHML") {
                                    this.config.getHistory().resetHistory();
                                    this.config.addAction(iT);
                                    this.config.addAction(b7);
                                    this.config.addAction(lh);
                                    this.config.addAction(fc);
                                    cd.updateMathMLFormulaOnReturn(
                                        this.config,
                                        oB.getValue(),
                                    );
                                    return false;
                                } else {
                                    if (
                                        oB.getChangeType() == "UPDATE_INTERFACE"
                                    ) {
                                        this.config.addAction(ic);
                                    }
                                }
                            } else {
                                if (o4 instanceof jl || o4 instanceof jl) {
                                    var oz = this.config
                                        .getCodeMirror()
                                        .getCursor().line;
                                    if (
                                        oz !=
                                        this.config
                                            .getSelectedElement()
                                            .getLastLineSelected()
                                    ) {
                                        this.config
                                            .getSelectedElement()
                                            .setLastLineSelected(oz);
                                        var oN = 0;
                                        var oE = new fM();
                                        oE.add(
                                            this.config
                                                .getMainFormula()
                                                .getMathPanel(),
                                        );
                                        this.setPanelTo(oN, oz, oE);
                                        this.config.addAction(lh);
                                        this.config.addAction(fc);
                                    }
                                } else {
                                    if (o4 instanceof cj) {
                                        var oy = o4;
                                        if (oy.isActionKey()) {
                                            if (
                                                !af.isCodeMirrorActiveAndFocus(
                                                    this.config,
                                                )
                                            ) {
                                                var ow =
                                                    this.moveSelectedElement(
                                                        oy,
                                                    );
                                                if (ow) {
                                                    this.config.addAction(b7);
                                                    this.config.addAction(lh);
                                                    this.config.addAction(fc);
                                                }
                                            }
                                        }
                                        if (
                                            oy.isCharKey() &&
                                            oy.isPrintable()
                                        ) {
                                            var oV = oy.getChar();
                                            oV = aH.changeNumbersToLanguage(
                                                oV,
                                                this.config.getLanguage(),
                                            );
                                            return this.addCharToFormula(oV);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };
    ee.prototype.getMathMLValue = function (ox, ow) {
        for (var ov = 0; ov < ox.size(); ov++) {
            var ou = ox.get(ov);
            var oy = ou.getName() + "_" + ou.getImg();
            if (ow == oy) {
                return ou.getMathml();
            }
        }
        return null;
    };
    ee.removeSelectionOnFormula = function (ou) {
        ee.removeSelection(ou);
        ou.getSelectedElement().setLastLineSelected(-1);
        ou.addAction(lh);
        ou.addAction(fc);
    };
    ee.prototype.getMathMLFromList = function (ov, oy) {
        var oA = ov.getSource();
        var ou = oA.substring(oA.lastIndexOf("_") + 1);
        var ox = lv.getIntegerValue(ou, 0);
        var oz = oy.get(ox);
        var ow = ee.addMathMLToSelectedElement(oz, this.config);
        if (ow) {
            return ee.updateFormulaAndPanels(this.config);
        }
        return true;
    };
    ee.updateFormulaAndPanels = function (ov) {
        ov.addAction(iT);
        ov.addAction(hG);
        ov.addAction(b7);
        ov.addAction(lh);
        ov.addAction(fc);
        var ou = ov.getMainFormula().getMathML(hV, true);
        cd.updateMathMLFormulaOnReturn(ov, ou);
        return false;
    };
    ee.removeSelection = function (ov) {
        var ox = ov.getSelectedElement();
        if (ox.getSelectedIndex() == -1) {
            return;
        }
        var ow = ox.getSelectedPanel();
        ox.setSelectedIndex(-1);
        ox.setSelectedList(null);
        ox.setSelectedPanel(null);
        var ou = ox.getSelectedBackground();
        ou = ov
            .getMainFormula()
            .setSelectedPanel(null, ov.getSelectedColor(), ow, ou);
        ox.setSelectedBackground(ou);
        ee.notifyInterfaceChange(ov);
    };
    ee.notifyInterfaceChange = function (ou) {
        ou.addAction(hW);
        ou.addAction(dw);
        ou.addAction(fc);
    };
    ee.prototype.findSelectedPanelFromBean = function (ov, ou) {
        if (ov.getBean() == ou) {
            var ox = ee.createParentsList(ov);
            var oz = ox.get(ox.size() - 1);
            var oy = this.config.getSelectedElement();
            oy.setSelectedIndex(ox.size() - 1);
            oy.setSelectedList(ox);
            oy.setSelectedPanel(oz);
            return true;
        } else {
            for (var ow = 0; ow < ov.getContent().getChildren().size(); ow++) {
                var oA = ov.getContent().getChildren().get(ow);
                if (this.findSelectedPanelFromBean(oA, ou)) {
                    return true;
                }
            }
        }
        return false;
    };
    ee.createParentsList = function (ox) {
        var ov = new fM();
        ov.add(ox);
        ox = ox.getParent();
        while (ox != null) {
            if (!(ox instanceof ci || ox instanceof j2)) {
                ov.add(ox);
            }
            ox = ox.getParent();
        }
        var ow = new fM();
        for (var ou = ov.size() - 1; ou >= 0; ou--) {
            ow.add(ov.get(ou));
        }
        return ow;
    };
    ee.prototype.getSelectElementFromList = function (ox) {
        if (ox == null || ox.size() == 0) {
            return null;
        }
        var oy = new fM();
        var oA = null;
        var ou = -1;
        for (var ow = 0; ow < ox.size(); ow++) {
            var oB = ox.get(ow);
            if (oB instanceof ci) {
                continue;
            }
            if (oB instanceof j2) {
                continue;
            }
            var ov = oB.getBean();
            if (ov.isDynamicCreated()) {
                continue;
            }
            ou = ow;
            oA = oB;
            oy.add(oB);
        }
        if (oA != null) {
            var oz = new aG();
            oz.setSelectedIndex(ou);
            oz.setSelectedList(oy);
            oz.setSelectedPanel(oA);
            return oz;
        }
        return null;
    };
    ee.prototype.selectElementFromList = function (ow) {
        var ou = this.getSelectElementFromList(ow);
        if (ou == null) {
            return false;
        }
        var oy = this.config.getSelectedElement();
        var ox = oy.getSelectedPanel();
        var ov = oy.getSelectedBackground();
        if (ou.getSelectedPanel() != ox) {
            ov = this.config
                .getMainFormula()
                .setSelectedPanel(
                    ou.getSelectedPanel(),
                    this.config.getSelectedColor(),
                    ox,
                    ov,
                );
            oy.setSelectedBackground(ov);
            oy.setSelectedIndex(ou.getSelectedIndex());
            oy.setSelectedList(ou.getSelectedList());
            oy.setSelectedPanel(ou.getSelectedPanel());
            ee.notifyInterfaceChange(this.config);
            return true;
        }
        return false;
    };
    ee.prototype.selectOverElementFromList = function (ow) {
        var ou = this.getSelectElementFromList(ow);
        if (ou == null) {
            return false;
        }
        var oy = this.config.getSelectedElement();
        var ox = oy.getSelectedOverPanel();
        var ov = oy.getSelectedOverBackground();
        if (ou.getSelectedPanel() != ox) {
            ov = this.config
                .getMainFormula()
                .setSelectedPanel(
                    ou.getSelectedPanel(),
                    this.config.getSelectedColor(),
                    ox,
                    ov,
                );
            oy.setSelectedOverBackground(ov);
            oy.setSelectedOverPanel(ou.getSelectedPanel());
            return true;
        }
        return false;
    };
    ee.prototype.setPanelTo = function (oH, oG, oD) {
        var ov = oD.get(oD.size() - 1);
        if (ov == null) {
            return;
        }
        if (oH == oG) {
            this.selectElementFromList(oD);
            return;
        }
        var oz = new fM();
        var oE = ov.getContent().getChildren();
        if (ov instanceof dp) {
            var oA = ov;
            oE = oA.getRealChildren();
        } else {
            if (ov instanceof mR) {
                var oC = ov;
                oE = oC.getRealChildren();
            }
        }
        for (var oB = 0; oB < oE.size(); oB++) {
            var ou = oE.get(oB);
            if (ou instanceof fZ) {
                break;
            }
            if (ou instanceof aP) {
                oz.add(ou.getContent().getChildren().get(0));
                continue;
            }
            if (ou instanceof ci) {
                oz.addAll(ou.getContent().getChildren());
            } else {
                oz.add(ou);
            }
        }
        var oy = new fM();
        for (var oB = 0; oB < oz.size(); oB++) {
            var ox = oz.get(oB);
            if (ox instanceof j2) {
                oy.addAll(ox.getContent().getChildren());
            } else {
                oy.add(ox);
            }
        }
        for (var oB = 0; oB < oy.size(); oB++) {
            var ox = oy.get(oB);
            var oF = this.config
                .getMainFormula()
                .getMathML_getMathML(ox, hV, true);
            var ow = bH.getNumberOfLines(oF);
            if (oH + ow < oG) {
                oH = oH + ow;
            } else {
                oD.add(ox);
                oH = oH + 1;
                this.setPanelTo(oH, oG, oD);
                return;
            }
        }
        this.selectElementFromList(oD);
    };
    ee.prototype.selectElementFromListForIndex = function (oC) {
        var oz = lv.getIntegerValue(oC, 0);
        var oy = this.config.getSelectedElement();
        var ov = oy.getSelectedPanel();
        var oB = oy.getSelectedPanel();
        var ow = oy.getSelectedIndex();
        var oA = oy.getSelectedBackground();
        var oD = oy.getSelectedList();
        if (oz > oD.size() - 1) {
            oz = oD.size() - 1;
        }
        ow = oz;
        oB = oD.get(oz);
        oA = this.config
            .getMainFormula()
            .setSelectedPanel(oB, this.config.getSelectedColor(), ov, oA);
        var ou = oD.size();
        for (var ox = oz + 1; ox < ou; ox++) {
            oD.remove(oz + 1);
        }
        oy.setSelectedBackground(oA);
        oy.setSelectedIndex(ow);
        oy.setSelectedList(oD);
        oy.setSelectedPanel(oB);
        ee.notifyInterfaceChange(this.config);
    };
    ee.prototype.addUnicodeToSelectedElement = function (ow) {
        var ov = this.config.getSelectedElement();
        var oy = ov.getSelectedPanel();
        if (oy == null) {
            var oz = gq.translate(this.config, "warning_not_selected");
            i2.show(this.config, oz);
            return false;
        }
        if (oy instanceof i6) {
            var oC = oy;
            var oA = oC.getBean();
            var oB = oA.getText();
            if (oB == "...") {
                oB = "";
            }
            oB = oB + "&#x" + ow + ";";
            oB = ee.convertToChars(oB);
            oA.setText(oB);
            oA.setAttribute("editorSelected", "true");
            return true;
        } else {
            var oB = "&#x" + ow + ";";
            oB = ee.convertToChars(oB);
            var ox = "<mtext>" + oB + "</mtext>";
            var ou = ee.addMathMLToSelectedElement(ox, this.config);
            if (ou) {
                return ee.updateFormulaAndPanels(this.config);
            }
            return true;
        }
    };
    ee.prototype.addCharToFormula = function (ow) {
        var ov = this.config.getSelectedElement();
        var oy = ov.getSelectedPanel();
        if (oy != null) {
            var oC = ee.convertToChars(ow);
            var ox = "<mi>" + oC + "</mi>";
            if (lv.stringIsNumber(oC)) {
                ox = "<mn>" + oC + "</mn>";
            }
            if (oC.length == 1) {
                var oD = oC.codePointAt(0);
                var oB = lv.getHexCodeFromInt(oD);
                if (oB.length > 0) {
                    var oz = eF.getSettingsFor(oB);
                    if (oz != null) {
                        var oA = eF.getStyleForOperator(oC);
                        ox = "<mo>" + oC + "</mo>";
                        if (oA.isFence()) {
                            ox = '<mo maxsize="100%">' + oC + "</mo>";
                        }
                    }
                }
            }
            var ou = ee.addMathMLToSelectedElement(ox, this.config);
            if (ou) {
                return ee.updateFormulaAndPanels(this.config);
            }
        }
        return false;
    };
    ee.addMathMLToSelectedElement = function (oy, ox) {
        var oA = ox.getSelectedElement();
        var oz = oA.getSelectedPanel();
        if (oz == null) {
            var ov = gq.translate(ox, "warning_not_selected");
            i2.show(ox, ov);
            return false;
        }
        var ou = oz.getBean();
        var ow = gg.canInsertToRightElement(ou, oy, ox);
        if (ow) {
            gg.insertToRightMathML(ou, oy, ox);
        }
        return true;
    };
    ee.replaceMathMLToSelectedElement = function (ox, ow) {
        var oz = ow.getSelectedElement();
        var oy = oz.getSelectedPanel();
        if (oy == null) {
            var ov = gq.translate(ow, "warning_not_selected");
            i2.show(ow, ov);
            return true;
        }
        var ou = oy.getBean();
        gg.replaceBeanWithMathML(ou, ox, ow);
        ee.updateFormulaAndPanels(ow);
        return false;
    };
    ee.prototype.addMoToSelectedElement = function (oB) {
        var oA = this.config.getSelectedElement();
        var oz = oA.getSelectedPanel();
        if (oz == null) {
            var ow = gq.translate(this.config, "warning_not_selected");
            i2.show(this.config, ow);
            return false;
        }
        var ou = oz.getBean();
        var ox = ou.getParentBean();
        var oy = "&#x" + oB + ";";
        oy = ee.convertToChars(oy);
        if (cd.isEmptyElement(ou)) {
            var ov = fe.getOBean(ox, oy);
            ov.setAttribute("editorSelected", "true");
            gg.replaceBeanWithBean(ou, ov, this.config);
        } else {
            gg.insertToRightMathML(ou, "<mo>" + oy + "</mo>", this.config);
        }
        return ee.updateFormulaAndPanels(this.config);
    };
    ee.prototype.addMnToSelectedElement = function (oB) {
        var oA = this.config.getSelectedElement();
        var oz = oA.getSelectedPanel();
        if (oz == null) {
            var ow = gq.translate(this.config, "warning_not_selected");
            i2.show(this.config, ow);
            return false;
        }
        var ou = oz.getBean();
        var ox = ou.getParentBean();
        var oy = "&#x" + oB + ";";
        oy = ee.convertToChars(oy);
        if (cd.isEmptyElement(ou)) {
            var ov = fe.getNBean(ox, oy);
            ov.setAttribute("editorSelected", "true");
            gg.replaceBeanWithBean(ou, ov, this.config);
        } else {
            gg.insertToRightMathML(ou, "<mn>" + oy + "</mn>", this.config);
        }
        return ee.updateFormulaAndPanels(this.config);
    };
    ee.prototype.addMiToSelectedElement = function (oB) {
        var oA = this.config.getSelectedElement();
        var oz = oA.getSelectedPanel();
        if (oz == null) {
            var ow = gq.translate(this.config, "warning_not_selected");
            i2.show(this.config, ow);
            return false;
        }
        var ou = oz.getBean();
        var ox = ou.getParentBean();
        var oy = "&#x" + oB + ";";
        oy = ee.convertToChars(oy);
        if (cd.isEmptyElement(ou)) {
            var ov = fe.getIBean(ox, oy);
            ov.setAttribute("editorSelected", "true");
            gg.replaceBeanWithBean(ou, ov, this.config);
        } else {
            gg.insertToRightMathML(ou, "<mi>" + oy + "</mi>", this.config);
        }
        return ee.updateFormulaAndPanels(this.config);
    };
    ee.prototype.moveSelectedElement = function (ov) {
        if (ov.isLeftKey()) {
            return this.selectLeftSibling();
        } else {
            if (ov.isRightKey()) {
                return this.selectRightSibling();
            } else {
                if (ov.isUpKey()) {
                    return this.selectParent();
                } else {
                    if (ov.isDownKey()) {
                        return this.selectFirstChild();
                    } else {
                        if (ov.isTabKey()) {
                            if (ov.getOriginalEvent().shiftKey) {
                                return this.selectFirstLeftText();
                            } else {
                                return this.selectFirstRightText();
                            }
                        } else {
                            if (ov.isEnterKey()) {
                                var ou = this.addNewSibling();
                                if (ou) {
                                    return ee.updateFormulaAndPanels(
                                        this.config,
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    ee.prototype.addNewSibling = function () {
        var ox = this.config.getSelectedElement();
        var ow = ox.getSelectedPanel();
        if (ow != null) {
            var ou = ow.getBean();
            var ov = ou.getParentBean();
            if (ov != null) {
                gg.insertToRightBean(
                    ou,
                    ov.getSelectedEmptyBean(ov),
                    this.config,
                );
            }
            return true;
        }
        return false;
    };
    ee.prototype.selectFirstRightText = function () {
        var ow = new fM();
        this.loadTokenIntoList(this.config.getMainFormula().getMathPanel(), ow);
        if (ow.size() == 0) {
            return false;
        }
        var oy = this.config.getSelectedElement();
        var ox = oy.getSelectedPanel();
        if (ox == null) {
            var oz = ow.get(0);
            var ou = ee.createParentsList(oz);
            return this.selectElementFromList(ou);
        }
        var ov = this.getIndexFromList(ow, ox);
        if (ov == ow.size() - 1) {
            ov = -1;
        }
        if (ov == -1) {
            var oz = ow.get(0);
            var ou = ee.createParentsList(oz);
            return this.selectElementFromList(ou);
        } else {
            var oz = ow.get(ov + 1);
            var ou = ee.createParentsList(oz);
            return this.selectElementFromList(ou);
        }
    };
    ee.prototype.selectFirstLeftText = function () {
        var ow = new fM();
        this.loadTokenIntoList(this.config.getMainFormula().getMathPanel(), ow);
        if (ow.size() == 0) {
            return false;
        }
        var oy = this.config.getSelectedElement();
        var ox = oy.getSelectedPanel();
        if (ox == null) {
            var oz = ow.get(0);
            var ou = ee.createParentsList(oz);
            return this.selectElementFromList(ou);
        }
        var ov = this.getIndexFromList(ow, ox);
        if (ov == 0) {
            ov = ow.size();
        }
        if (ov == -1) {
            var oz = ow.get(ow.size() - 1);
            var ou = ee.createParentsList(oz);
            return this.selectElementFromList(ou);
        } else {
            var oz = ow.get(ov - 1);
            var ou = ee.createParentsList(oz);
            return this.selectElementFromList(ou);
        }
    };
    ee.prototype.getIndexFromList = function (ou, ow) {
        for (var ov = 0; ov < ou.size(); ov++) {
            var ox = ou.get(ov);
            if (ox == ow) {
                return ov;
            }
        }
        return -1;
    };
    ee.prototype.loadTokenIntoList = function (ox, ou) {
        if (ox instanceof i6) {
            ou.add(ox);
            return;
        }
        var ow = ox.getContent().getChildren().size();
        for (var ov = 0; ov < ow; ov++) {
            var oy = ox.getContent().getChildren().get(ov);
            this.loadTokenIntoList(oy, ou);
        }
    };
    ee.prototype.selectLeftSibling = function () {
        var oy = this.config.getSelectedElement();
        var oA = oy.getSelectedPanel();
        if (oA != null) {
            var oB = oA.getParent();
            if (oB != null) {
                var ou = null;
                var ow = lN.getChildren(oB);
                var oC = ow.size();
                for (var ox = 0; ox < oC; ox++) {
                    var ov = ow.get(ox);
                    if (ov == oA) {
                        if (ou == null) {
                            ox = oC - 1;
                            ou = ow.get(ox);
                        }
                        var oz = ee.createParentsList(ou);
                        return this.selectElementFromList(oz);
                    }
                    ou = ov;
                }
            }
        }
        return false;
    };
    ee.prototype.selectRightSibling = function () {
        var oy = this.config.getSelectedElement();
        var oA = oy.getSelectedPanel();
        if (oA != null) {
            var oB = oA.getParent();
            if (oB != null) {
                var ou = null;
                var ow = lN.getChildren(oB);
                var oC = ow.size();
                for (var ox = 0; ox < oC; ox++) {
                    var ov = ow.get(oC - 1 - ox);
                    if (ov == oA) {
                        if (ou == null) {
                            ou = ow.get(0);
                        }
                        var oz = ee.createParentsList(ou);
                        return this.selectElementFromList(oz);
                    }
                    ou = ov;
                }
            }
        }
        return false;
    };
    ee.prototype.selectFirstChild = function () {
        var ox = this.config.getSelectedElement();
        var ow = ox.getSelectedPanel();
        if (ow != null) {
            var ov = this.getFirstChild(ow);
            if (ov != null) {
                var ou = ee.createParentsList(ov);
                return this.selectElementFromList(ou);
            }
        }
        return false;
    };
    ee.prototype.getFirstChild = function (ov) {
        if (ov == null) {
            return null;
        }
        var ou = ov.getContent().getChildren().size();
        if (ou == 0) {
            return null;
        }
        var ow = ov.getContent().getChildren().get(0);
        if (ow instanceof fZ) {
            return null;
        }
        if (ow instanceof ci) {
            return this.getFirstChild(ow);
        }
        if (ow instanceof j2) {
            return this.getFirstChild(ow);
        }
        return ow;
    };
    ee.prototype.selectParent = function () {
        var ow = this.config.getSelectedElement();
        var ov = ow.getSelectedList();
        var ou = ow.getSelectedIndex();
        if (ov != null && ov.size() > 0 && ou > 0) {
            ov.remove(ov.size() - 1);
            return this.selectElementFromList(ov);
        }
        return false;
    };
    ee.prototype.selectPanelWithAttribute = function () {
        var ow = this.config.getMainFormula().getMathPanel();
        var ov = this.getSelectedPanelWithAttribute(ow);
        if (ov != null) {
            this.clearSelectedPanelWithAttribute(ow);
            var ou = ee.createParentsList(ov);
            this.selectElementFromList(ou);
        }
    };
    ee.prototype.clearSelectedPanelWithAttribute = function (ox) {
        var ou = ox.getBean();
        if (ou.getAttribute("editorSelected") != null) {
            ou.clearAttribute("editorSelected");
        }
        var ow = ox.getRealChildren().size();
        for (var ov = 0; ov < ow; ov++) {
            var oy = ox.getRealChildren().get(ov);
            this.clearSelectedPanelWithAttribute(oy);
        }
    };
    ee.prototype.getSelectedPanelWithAttribute = function (oy) {
        var ou = oy.getBean();
        if (ou.getAttribute("editorSelected") != null) {
            ou.clearAttribute("editorSelected");
            return oy;
        }
        var ox = oy.getRealChildren().size();
        for (var ow = 0; ow < ox; ow++) {
            var oz = oy.getRealChildren().get(ow);
            var ov = this.getSelectedPanelWithAttribute(oz);
            if (ov != null) {
                return ov;
            }
        }
        return null;
    };
    ee.convertToChars = function (ov) {
        var ou = h.convertToChars(ov);
        if (ou == "<" || ou == ">") {
            return ov;
        }
        return ou;
    };

    function kK(ou) {
        this.config;
        this.config = ou;
    }
    kK.prototype.executeEvent = function (ow) {
        if (ow instanceof ge) {
            var ou = ow;
            if (
                ou.getSource() == em ||
                ou.getSource() == f0 ||
                ou.getSource() == gy
            ) {
                var ov = jp.setMathvariant(this.config);
                if (ov) {
                    return false;
                }
            } else {
                if (ou.getSource() == fW || ou.getSource() == kP) {
                    var ov = jp.setColor(this.config, ou.getSource());
                    if (ov) {
                        return false;
                    }
                } else {
                    if (
                        ou.getSource() == ol ||
                        ou.getSource() == hy ||
                        ou.getSource() == mg
                    ) {
                        var ov = jp.setFontSize(this.config, ou.getSource());
                        if (ov) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    };

    function kB(ou) {
        this.propertiesActions;
        this.wizardActions;
        this.fileActions;
        this.viewActions;
        this.homeActions;
        this.editActions;
        this.previewActions;
        this.dialogActions;
        this.buttons;
        this.codeMirror;
        this.formula;
        this.propertiesActions = new gJ(ou);
        this.fileActions = new dn(ou);
        this.wizardActions = new aa(ou);
        this.viewActions = new q(ou);
        this.homeActions = new kK(ou);
        this.editActions = new mc(ou);
        this.previewActions = new bm(ou);
        this.dialogActions = new h3(ou);
        this.buttons = new eu(ou);
        this.codeMirror = new R(ou);
        this.formula = new ee(ou);
    }
    kB.prototype.executeEvent = function (ou) {
        var oA = this.buttons.executeEvent(ou);
        var oF = this.wizardActions.executeEvent(ou);
        var oE = this.propertiesActions.executeEvent(ou);
        var ov = this.fileActions.executeEvent(ou);
        var oD = this.viewActions.executeEvent(ou);
        var ox = this.homeActions.executeEvent(ou);
        var ow = this.editActions.executeEvent(ou);
        var oC = this.previewActions.executeEvent(ou);
        var oB = this.dialogActions.executeEvent(ou);
        var oz = this.codeMirror.executeEvent(ou);
        var oy = this.formula.executeEvent(ou);
        return oD && oC && oB && oA && oz && oy && ox && ow && ov && oF && oE;
    };
    kB.prototype.selectedPanel = function () {
        this.formula.selectPanelWithAttribute();
    };

    function jp() {}
    jp.setMathvariant = function (oy) {
        var oC = oy.getSelectedElement();
        if (oC.getSelectedIndex() == -1) {
            return false;
        }
        var oA = oy.getButton(em).getValue();
        if (oA == "addLocal") {
            mQ.show(oy);
            return false;
        }
        if (oA == "addGoogle") {
            lt.show(oy);
            return false;
        }
        var ox = oy.getButton(f0).isState();
        var ow = oy.getButton(gy).isState();
        var oG = kt.getBold(oA, ox);
        oG = kt.getItalic(oG, ow);
        var ou = oC.getSelectedPanel();
        var oF = ou.getBean();
        var oz = false;
        var oE = ou.getParent();
        if (oE != null) {
            var ov = oE.getBean();
            var oB = ov.getStyle().getMathvariant().getMathvariant();
            if (jp.isIBeanOneChar(oF)) {
                oB = kt.getItalic(oB, true);
            }
            if (oG == oB) {
                oz = true;
            }
        } else {
            if (oG == "normal") {
                oz = true;
            }
        }
        if (oz) {
            oF.clearAttribute("mathvariant");
            jp.setIBeanFlag(oF, false);
        } else {
            oF.setAttribute("mathvariant", oG);
            jp.setIBeanFlag(oF, true);
        }
        oF.setAttribute("editorSelected", "true");
        oy.addAction(hG);
        oy.addAction(iT);
        var oD = oy.getMainFormula().getMathML(hV, true);
        cd.updateMathMLFormulaOnReturn(oy, oD);
        return true;
    };
    jp.isIBeanOneChar = function (ov) {
        if (ov instanceof no) {
            var ou = ov;
            return ou.hasOneCharText();
        }
        return false;
    };
    jp.setIBeanFlag = function (ou, ow) {
        if (ou instanceof no) {
            var ov = ou;
            ov.setHasMathvariant(ow);
        }
    };
    jp.setFontSize = function (ow, oz) {
        var oy = ow.getSelectedElement();
        if (oy.getSelectedIndex() == -1) {
            return false;
        }
        var ou = oy.getSelectedPanel();
        var oC = ou.getBean();
        var oE = "";
        if (oz == ol) {
            oE = ow.getButton(ol).getValue();
        } else {
            if (oz == hy) {
                var oF = oC.getStyle().getMathsize() * 1.2;
                oE = bH.removeDecimals(oF + "");
            } else {
                if (oz == mg) {
                    var oF = oC.getStyle().getMathsize() / 1.2;
                    oE = bH.removeDecimals(oF + "");
                }
            }
        }
        var ox = false;
        var oB = ou.getParent();
        if (oB != null) {
            var ov = oB.getBean();
            var oF = ov.getStyle().getMathsize() + "";
            oF = bH.removeDecimals(oF);
            if (oE == oF) {
                ox = true;
            }
        } else {
            var oD = ow.getFontSize() + "";
            if (oE == oD) {
                ox = true;
            }
        }
        if (ox) {
            oC.clearAttribute("mathsize");
        } else {
            oC.setAttribute("mathsize", oE);
        }
        oC.setAttribute("editorSelected", "true");
        ow.addAction(hG);
        ow.addAction(iT);
        var oA = ow.getMainFormula().getMathML(hV, true);
        cd.updateMathMLFormulaOnReturn(ow, oA);
        return true;
    };
    jp.setColor = function (ow, oB) {
        var oA = ow.getSelectedElement();
        if (oA.getSelectedIndex() == -1) {
            return false;
        }
        var ou = oA.getSelectedPanel();
        var oE = ou.getBean();
        if (oB == fW) {
            var oy = ow.getButton(fW).getValue();
            var oz = false;
            var oD = ou.getParent();
            if (oD != null) {
                var ov = oD.getBean();
                var ox = ov.getStyle().getColor();
                ox = c2.getColorCode(ox);
                if (oy == ox) {
                    oz = true;
                }
            } else {
                if (oy == "#000000") {
                    oz = true;
                }
            }
            if (oz) {
                oE.clearAttribute("mathcolor");
            } else {
                oE.setAttribute("mathcolor", oy);
            }
        } else {
            if (oB == kP) {
                var oy = ow.getButton(kP).getValue();
                if (oy == "transparent") {
                    oE.clearAttribute("mathbackground");
                } else {
                    oE.setAttribute("mathbackground", oy);
                    oA.setSelectedBackground(oy);
                }
            }
        }
        oE.setAttribute("editorSelected", "true");
        ow.addAction(hG);
        ow.addAction(iT);
        var oC = ow.getMainFormula().getMathML(hV, true);
        cd.updateMathMLFormulaOnReturn(ow, oC);
        return true;
    };

    function bm(ou) {
        this.config;
        this.config = ou;
    }
    bm.prototype.executeEvent = function (ow) {
        if (ow instanceof e1) {
            if (this.config.isVerticalLayout()) {
                var ov = 82;
                if (this.config.getWindowWidth() >= 485) {
                    ov = 58;
                }
                var ou = this.config.getTopMenuHeight() - ov;
                var oy = $("#" + this.config.getEditorId() + "topContent");
                oy.css("height", ov + "px");
                var ox = $("#" + this.config.getEditorId() + "top2Content");
                ox.css("height", ou + "px");
            }
            this.config.addAction(bS);
            this.config.addAction(hA);
            this.config.addAction(fA);
            return true;
        }
        return true;
    };

    function gJ(ou) {
        this.config;
        this.config = ou;
    }
    gJ.prototype.executeEvent = function (ov) {
        if (!this.isSelectedElement()) {
            return true;
        }
        if (ov instanceof ge) {
            var ou = ov;
            if (ou.getSource().indexOf("accordion_header_") == 0) {
                this.config
                    .getSelectedElement()
                    .setSelectedPropGroup(ou.getSource());
            }
            if (k8.textExecuteEvent(ou, this.config)) {
                return k8.executeEvent(ou, this.config);
            } else {
                if (a0.textExecuteEvent(ou, this.config)) {
                    return a0.executeEvent(ou, this.config);
                } else {
                    if (hB.textExecuteEvent(ou, this.config)) {
                        return hB.executeEvent(ou, this.config);
                    } else {
                        if (k2.textExecuteEvent(ou, this.config)) {
                            return k2.executeEvent(ou, this.config);
                        } else {
                            if (l1.textExecuteEvent(ou, this.config)) {
                                return l1.executeEvent(ou, this.config);
                            } else {
                                if (fO.textExecuteEvent(ou, this.config)) {
                                    return fO.executeEvent(ou, this.config);
                                } else {
                                    if (nT.textExecuteEvent(ou, this.config)) {
                                        return nT.executeEvent(ou, this.config);
                                    } else {
                                        if (
                                            jk.textExecuteEvent(ou, this.config)
                                        ) {
                                            return jk.executeEvent(
                                                ou,
                                                this.config,
                                            );
                                        } else {
                                            if (
                                                F.textExecuteEvent(
                                                    ou,
                                                    this.config,
                                                )
                                            ) {
                                                return F.executeEvent(
                                                    ou,
                                                    this.config,
                                                );
                                            } else {
                                                if (
                                                    a2.textExecuteEvent(
                                                        ou,
                                                        this.config,
                                                    )
                                                ) {
                                                    return a2.executeEvent(
                                                        ou,
                                                        this.config,
                                                    );
                                                } else {
                                                    if (
                                                        gz.textExecuteEvent(
                                                            ou,
                                                            this.config,
                                                        )
                                                    ) {
                                                        return gz.executeEvent(
                                                            ou,
                                                            this.config,
                                                        );
                                                    } else {
                                                        if (
                                                            kW.textExecuteEvent(
                                                                ou,
                                                                this.config,
                                                            )
                                                        ) {
                                                            return kW.executeEvent(
                                                                ou,
                                                                this.config,
                                                            );
                                                        } else {
                                                            if (
                                                                fT.textExecuteEvent(
                                                                    ou,
                                                                    this.config,
                                                                )
                                                            ) {
                                                                return fT.executeEvent(
                                                                    ou,
                                                                    this.config,
                                                                );
                                                            } else {
                                                                if (
                                                                    aA.textExecuteEvent(
                                                                        ou,
                                                                        this
                                                                            .config,
                                                                    )
                                                                ) {
                                                                    return aA.executeEvent(
                                                                        ou,
                                                                        this
                                                                            .config,
                                                                    );
                                                                } else {
                                                                    if (
                                                                        le.textExecuteEvent(
                                                                            ou,
                                                                            this
                                                                                .config,
                                                                        )
                                                                    ) {
                                                                        return le.executeEvent(
                                                                            ou,
                                                                            this
                                                                                .config,
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            cL.textExecuteEvent(
                                                                                ou,
                                                                                this
                                                                                    .config,
                                                                            )
                                                                        ) {
                                                                            return cL.executeEvent(
                                                                                ou,
                                                                                this
                                                                                    .config,
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                co.textExecuteEvent(
                                                                                    ou,
                                                                                    this
                                                                                        .config,
                                                                                )
                                                                            ) {
                                                                                return co.executeEvent(
                                                                                    ou,
                                                                                    this
                                                                                        .config,
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    g5.textExecuteEvent(
                                                                                        ou,
                                                                                        this
                                                                                            .config,
                                                                                    )
                                                                                ) {
                                                                                    return g5.executeEvent(
                                                                                        ou,
                                                                                        this
                                                                                            .config,
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        bi.textExecuteEvent(
                                                                                            ou,
                                                                                            this
                                                                                                .config,
                                                                                        )
                                                                                    ) {
                                                                                        return bi.executeEvent(
                                                                                            ou,
                                                                                            this
                                                                                                .config,
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            a.textExecuteEvent(
                                                                                                ou,
                                                                                                this
                                                                                                    .config,
                                                                                            )
                                                                                        ) {
                                                                                            return a.executeEvent(
                                                                                                ou,
                                                                                                this
                                                                                                    .config,
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                eN.textExecuteEvent(
                                                                                                    ou,
                                                                                                    this
                                                                                                        .config,
                                                                                                )
                                                                                            ) {
                                                                                                return eN.executeEvent(
                                                                                                    ou,
                                                                                                    this
                                                                                                        .config,
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    iV.textExecuteEvent(
                                                                                                        ou,
                                                                                                        this
                                                                                                            .config,
                                                                                                    )
                                                                                                ) {
                                                                                                    return iV.executeEvent(
                                                                                                        ou,
                                                                                                        this
                                                                                                            .config,
                                                                                                    );
                                                                                                } else {
                                                                                                    if (
                                                                                                        cq.textExecuteEvent(
                                                                                                            ou,
                                                                                                            this
                                                                                                                .config,
                                                                                                        )
                                                                                                    ) {
                                                                                                        return cq.executeEvent(
                                                                                                            ou,
                                                                                                            this
                                                                                                                .config,
                                                                                                        );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            dU.textExecuteEvent(
                                                                                                                ou,
                                                                                                                this
                                                                                                                    .config,
                                                                                                            )
                                                                                                        ) {
                                                                                                            return dU.executeEvent(
                                                                                                                ou,
                                                                                                                this
                                                                                                                    .config,
                                                                                                            );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                li.textExecuteEvent(
                                                                                                                    ou,
                                                                                                                    this
                                                                                                                        .config,
                                                                                                                )
                                                                                                            ) {
                                                                                                                return li.executeEvent(
                                                                                                                    ou,
                                                                                                                    this
                                                                                                                        .config,
                                                                                                                );
                                                                                                            } else {
                                                                                                                if (
                                                                                                                    hs.textExecuteEvent(
                                                                                                                        ou,
                                                                                                                        this
                                                                                                                            .config,
                                                                                                                    )
                                                                                                                ) {
                                                                                                                    return hs.executeEvent(
                                                                                                                        ou,
                                                                                                                        this
                                                                                                                            .config,
                                                                                                                    );
                                                                                                                } else {
                                                                                                                    if (
                                                                                                                        dm.textExecuteEvent(
                                                                                                                            ou,
                                                                                                                            this
                                                                                                                                .config,
                                                                                                                        )
                                                                                                                    ) {
                                                                                                                        return dm.executeEvent(
                                                                                                                            ou,
                                                                                                                            this
                                                                                                                                .config,
                                                                                                                        );
                                                                                                                    } else {
                                                                                                                        if (
                                                                                                                            kO.textExecuteEvent(
                                                                                                                                ou,
                                                                                                                                this
                                                                                                                                    .config,
                                                                                                                            )
                                                                                                                        ) {
                                                                                                                            return kO.executeEvent(
                                                                                                                                ou,
                                                                                                                                this
                                                                                                                                    .config,
                                                                                                                            );
                                                                                                                        } else {
                                                                                                                            if (
                                                                                                                                gr.textExecuteEvent(
                                                                                                                                    ou,
                                                                                                                                    this
                                                                                                                                        .config,
                                                                                                                                )
                                                                                                                            ) {
                                                                                                                                return gr.executeEvent(
                                                                                                                                    ou,
                                                                                                                                    this
                                                                                                                                        .config,
                                                                                                                                );
                                                                                                                            } else {
                                                                                                                                if (
                                                                                                                                    ii.textExecuteEvent(
                                                                                                                                        ou,
                                                                                                                                        this
                                                                                                                                            .config,
                                                                                                                                    )
                                                                                                                                ) {
                                                                                                                                    return ii.executeEvent(
                                                                                                                                        ou,
                                                                                                                                        this
                                                                                                                                            .config,
                                                                                                                                    );
                                                                                                                                } else {
                                                                                                                                    if (
                                                                                                                                        aO.textExecuteEvent(
                                                                                                                                            ou,
                                                                                                                                            this
                                                                                                                                                .config,
                                                                                                                                        )
                                                                                                                                    ) {
                                                                                                                                        return aO.executeEvent(
                                                                                                                                            ou,
                                                                                                                                            this
                                                                                                                                                .config,
                                                                                                                                        );
                                                                                                                                    } else {
                                                                                                                                        if (
                                                                                                                                            eD.textExecuteEvent(
                                                                                                                                                ou,
                                                                                                                                                this
                                                                                                                                                    .config,
                                                                                                                                            )
                                                                                                                                        ) {
                                                                                                                                            return eD.executeEvent(
                                                                                                                                                ou,
                                                                                                                                                this
                                                                                                                                                    .config,
                                                                                                                                            );
                                                                                                                                        } else {
                                                                                                                                            if (
                                                                                                                                                es.textExecuteEvent(
                                                                                                                                                    ou,
                                                                                                                                                    this
                                                                                                                                                        .config,
                                                                                                                                                )
                                                                                                                                            ) {
                                                                                                                                                return es.executeEvent(
                                                                                                                                                    ou,
                                                                                                                                                    this
                                                                                                                                                        .config,
                                                                                                                                                );
                                                                                                                                            } else {
                                                                                                                                                if (
                                                                                                                                                    nu.textExecuteEvent(
                                                                                                                                                        ou,
                                                                                                                                                        this
                                                                                                                                                            .config,
                                                                                                                                                    )
                                                                                                                                                ) {
                                                                                                                                                    return nu.executeEvent(
                                                                                                                                                        ou,
                                                                                                                                                        this
                                                                                                                                                            .config,
                                                                                                                                                    );
                                                                                                                                                } else {
                                                                                                                                                    if (
                                                                                                                                                        y.textExecuteEvent(
                                                                                                                                                            ou,
                                                                                                                                                            this
                                                                                                                                                                .config,
                                                                                                                                                        )
                                                                                                                                                    ) {
                                                                                                                                                        return y.executeEvent(
                                                                                                                                                            ou,
                                                                                                                                                            this
                                                                                                                                                                .config,
                                                                                                                                                        );
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };
    gJ.prototype.isSelectedElement = function () {
        var ov = this.config.getSelectedElement();
        var ou = ov.getSelectedPanel();
        if (ou == null) {
            return false;
        }
        return true;
    };
    gJ.updateFormulaAndPanels = function (ou) {
        return ee.updateFormulaAndPanels(ou);
    };
    gJ.getSelectedValue = function (ov) {
        var ou = $("#" + ov);
        return ou.val();
    };
    gJ.getSelectedLengthValue = function (oy) {
        if (oy.indexOf("_type") == oy.length - 5) {
            oy = oy.substring(0, oy.indexOf("_type"));
        }
        var ou = $("#" + oy + "_type");
        var ow = ou.val();
        if (cA.isNamedUnit(ow)) {
            return ow;
        }
        var ov = $("#" + oy);
        var ox = ov.val();
        if (ox == null) {
            ox = "0";
        }
        ox = ox + ow;
        return ox;
    };
    gJ.getSelectedPositionValue = function (oy) {
        if (oy.indexOf("_type") == oy.length - 5) {
            oy = oy.substring(0, oy.indexOf("_type"));
        }
        var ou = $("#" + oy + "_type");
        var ow = ou.val();
        var ov = $("#" + oy);
        var ox = ov.val();
        if (ow == "%") {
            return ox + "%";
        } else {
            if (ow == "px") {
                return ox;
            }
        }
        return ow;
    };
    gJ.getBooleanValue = function (ow) {
        var ou = $("#" + ow);
        var ov = ou.val();
        if (ou.is(":checked")) {
            ov = "true";
        } else {
            ov = "false";
        }
        return ov;
    };

    function q(ou) {
        this.config;
        this.config = ou;
    }
    q.prototype.executeEvent = function (ov) {
        if (ov instanceof e1) {
            this.config.addAction(fi);
            return true;
        }
        if (!(ov instanceof ge)) {
            return true;
        }
        var oC = ov;
        var oz = oC.getSource();
        if (oz == n3) {
            var oy = this.config.getButton(n3);
            oy.setState(true);
            var ox = this.config.getButton(mz);
            ox.setState(false);
            var ow = this.config.getButton(nS);
            ow.setState(false);
        } else {
            if (oz == mz) {
                var oy = this.config.getButton(n3);
                oy.setState(false);
                var ox = this.config.getButton(mz);
                ox.setState(true);
                var ow = this.config.getButton(nS);
                ow.setState(false);
            } else {
                if (oz == nS) {
                    var oy = this.config.getButton(n3);
                    oy.setState(false);
                    var ox = this.config.getButton(mz);
                    ox.setState(false);
                    var ow = this.config.getButton(nS);
                    ow.setState(true);
                } else {
                    if (oz == iv || oz == ly) {
                        var oy = this.config.getButton(n3);
                        oy.setState(false);
                        var ox = this.config.getButton(mz);
                        ox.setState(false);
                        var ow = this.config.getButton(nS);
                        ow.setState(false);
                    } else {
                        if (oz == nO) {
                            var oy = this.config.getButton(nO);
                            oy.setState(true);
                            var ox = this.config.getButton(a7);
                            ox.setState(false);
                        } else {
                            if (oz == a7) {
                                var oy = this.config.getButton(nO);
                                oy.setState(false);
                                var ox = this.config.getButton(a7);
                                ox.setState(true);
                            } else {
                                if (oz == gl) {
                                    var oy = this.config.getButton(gl);
                                    var ou = oy.isState();
                                    oy.setState(!ou);
                                    this.config.setLatexPaneShow(!ou);
                                    var ox = this.config.getButton(mv);
                                    ox.setState(false);
                                    this.config.setMathmlPaneShow(false);
                                } else {
                                    if (oz == mv) {
                                        var oy = this.config.getButton(mv);
                                        var ou = oy.isState();
                                        oy.setState(!ou);
                                        this.config.setMathmlPaneShow(!ou);
                                        var ox = this.config.getButton(gl);
                                        ox.setState(false);
                                        this.config.setLatexPaneShow(false);
                                    } else {
                                        if (oz == bw) {
                                            var oy = this.config.getButton(oz);
                                            var ou = oy.isState();
                                            oy.setState(!ou);
                                            this.config.setRightPaneHidden(ou);
                                        } else {
                                            if (oz == hI) {
                                                var oy =
                                                    this.config.getButton(oz);
                                                var ou = oy.isState();
                                                oy.setState(!ou);
                                                this.config.setKeyPaneHidden(
                                                    ou,
                                                );
                                            } else {
                                                if (oz == lx) {
                                                    var oy =
                                                        this.config.getButton(
                                                            oz,
                                                        );
                                                    var ou = oy.isState();
                                                    oy.setState(!ou);
                                                    this.config.setLeftPaneHidden(
                                                        ou,
                                                    );
                                                } else {
                                                    if (oz == kL) {
                                                        var oA =
                                                            this.config.getButton(
                                                                kL,
                                                            );
                                                        var oB = oA
                                                            .getElement()
                                                            .val();
                                                        oA.setValue(oB);
                                                    } else {
                                                        if (oz == jV) {
                                                            var oA =
                                                                this.config.getButton(
                                                                    jV,
                                                                );
                                                            var oB = oA
                                                                .getElement()
                                                                .val();
                                                            oA.setValue(oB);
                                                            q.changeTheme(
                                                                oB,
                                                                this.config,
                                                            );
                                                        } else {
                                                            if (oz == b5) {
                                                                var oA =
                                                                    this.config.getButton(
                                                                        b5,
                                                                    );
                                                                var oB = oA
                                                                    .getElement()
                                                                    .val();
                                                                oA.setValue(oB);
                                                            } else {
                                                                if (oz == fW) {
                                                                    var oA =
                                                                        this.config.getButton(
                                                                            fW,
                                                                        );
                                                                    var oB = oA
                                                                        .getElement()
                                                                        .val();
                                                                    oA.setValue(
                                                                        oB,
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (oz == n3) {
            this.pageView100();
        } else {
            if (oz == mz) {
                this.pageViewWidth();
            } else {
                if (oz == nS) {
                    this.pageViewPage();
                } else {
                    if (oz == iv) {
                        this.pageViewZoomIn();
                    } else {
                        if (oz == ly) {
                            this.pageViewZoomOut();
                        } else {
                            if (oz == nO) {
                                this.pageViewPortrait(true);
                            } else {
                                if (oz == a7) {
                                    this.pageViewPortrait(false);
                                } else {
                                    if (oz == kL) {
                                        var oA = this.config.getButton(kL);
                                        this.pageViewResizeTo(oA.getValue());
                                    } else {
                                        if (oz == gl) {
                                            this.config.addAction(fi);
                                            this.config.addAction(iT);
                                            this.config.addAction(b7);
                                        } else {
                                            if (oz == mv) {
                                                this.config.addAction(fi);
                                                this.config.addAction(iT);
                                                this.config.addAction(b7);
                                            } else {
                                                if (oz == bw) {
                                                    this.config.addAction(fi);
                                                    this.config.addAction(bS);
                                                } else {
                                                    if (oz == lx) {
                                                        this.config.addAction(
                                                            fi,
                                                        );
                                                        this.config.addAction(
                                                            bS,
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };
    q.setTheme = function (ou) {
        var ov = bH.readLocalStorageKey("FMathEditorTheme");
        if (ov == null) {
            ov = "base";
        }
        q.changeTheme(ov, ou);
    };
    q.changeTheme = function (oz, oy) {
        var ow = $("div[name='" + oy.getEditorId() + "']");
        ow.hide();
        var ox = $("link[href$='jquery-ui.css']");
        var ou = ox.attr("href");
        if (ou.indexOf("https") == 0) {
            ou = ou.substring(0, ou.indexOf("jquery-ui"));
        } else {
            ou = "";
        }
        if (ou.indexOf("themes") > 0) {
            ou = ou.substring(0, ou.indexOf("themes"));
        }
        ox.remove();
        var oA = $("link[href$='editor.css']");
        var ov = $(
            "<link href='" +
                ou +
                "themes/" +
                oz +
                "/jquery-ui.css' rel='stylesheet' type='text/css'>",
        );
        document.getElementsByTagName("head")[0].insertBefore(ov[0], oA[0]);
        oy.setSelectedColor(null);
        bH.createLocalStorageKey("FMathEditorTheme", oz);
        setTimeout(function () {
            fMathEditorsInterface.showEditor(oy.getEditorId());
        }, 300);
    };
    q.prototype.pageView100 = function () {
        this.reScalePage(1);
        return 1;
    };
    q.prototype.pageViewWidth = function () {
        var ou = this.config.getScreen().calculateScaleWidth();
        this.reScalePage(ou);
        return ou;
    };
    q.prototype.pageViewPage = function () {
        var ou = this.config.getScreen().calculateScalePage();
        this.reScalePage(ou);
        return ou;
    };
    q.prototype.reScalePage = function (ou) {
        if (this.config.getScreen().getViewScale() != ou) {
            this.config.getScreen().setViewScale(ou);
            this.config
                .getMainFormula()
                .setScale(this.config.getScreen().getViewScale());
            this.config.addAction(fi);
        }
        this.setZoomValue(ou);
    };
    q.prototype.reDrawPage = function () {
        this.config
            .getMainFormula()
            .setScale(this.config.getScreen().getViewScale());
        this.config.addAction(fi);
    };
    q.prototype.pageViewZoomIn = function () {
        var ou = this.config.getScreen().getViewScale();
        this.reScalePage(ou * 1.2);
        return ou * 1.2;
    };
    q.prototype.pageViewZoomOut = function () {
        var ou = this.config.getScreen().getViewScale();
        this.reScalePage(ou / 1.2);
        return ou / 1.2;
    };
    q.prototype.pageViewPortrait = function (ou) {
        this.config.getScreen().setPortrait(ou);
        this.reDrawPage();
    };
    q.prototype.pageViewResizeTo = function (ou) {
        var ov = lv.getIntegerValue(ou, 100);
        var ow = (ov * 1) / 100;
        this.reScalePage(ow);
    };
    q.prototype.setZoomValue = function (ov) {
        ov = ov * 100;
        var ou = this.config.getButton(kL);
        l0.setSelect(ou, ov + "");
    };

    function aa(ou) {
        this.config;
        this.config = ou;
    }
    aa.prototype.executeEvent = function (oO) {
        if (oO instanceof ge) {
            var oR = oO;
            if (oR.getSource() == gP) {
                var oy = gY.getSaveType(this.config);
                var ox = gY.getPolyDegree(this.config);
                gY.close(this.config);
                var oS = this.generatePolynom(oy, ox);
                var oH = ee.addMathMLToSelectedElement(oS, this.config);
                if (oH) {
                    return ee.updateFormulaAndPanels(this.config);
                }
                return true;
            } else {
                if (oR.getSource() == fD) {
                    var oB = cv.getRows(this.config);
                    var ov = cv.getColumns(this.config);
                    cv.close(this.config);
                    var oS = this.generateTable(oB, ov, null);
                    var oH = ee.addMathMLToSelectedElement(oS, this.config);
                    if (oH) {
                        return ee.updateFormulaAndPanels(this.config);
                    }
                    return true;
                } else {
                    if (oR.getSource() == jz) {
                        var oG = mQ.getFontName(this.config);
                        var oN = gq.translate(
                            this.config,
                            "dialog_add_local_font_label",
                        );
                        mQ.close(this.config);
                        this.addFontNameToList(oN, oG, "local:");
                        return jp.setMathvariant(this.config);
                    } else {
                        if (oR.getSource() == bO) {
                            var oG = lt.getFontName(this.config);
                            var oN = gq.translate(
                                this.config,
                                "dialog_add_google_font_label",
                            );
                            lt.close(this.config);
                            this.addFontNameToList(oN, oG, "google:");
                            return jp.setMathvariant(this.config);
                        } else {
                            if (oR.getSource() == cw) {
                                gE.deleteFonts(this.config);
                                gE.close(this.config);
                                return jp.setMathvariant(this.config);
                            } else {
                                if (oR.getSource() == kh) {
                                    var oB = hJ.getRows(this.config);
                                    var ov = hJ.getColumns(this.config);
                                    hJ.close(this.config);
                                    var oS = this.generatePiecewise(oB, ov);
                                    var oH = ee.addMathMLToSelectedElement(
                                        oS,
                                        this.config,
                                    );
                                    if (oH) {
                                        return ee.updateFormulaAndPanels(
                                            this.config,
                                        );
                                    }
                                    return true;
                                } else {
                                    if (oR.getSource() == ep) {
                                        var oy = d9.getSaveType(this.config);
                                        var oB = d9.getRows(this.config);
                                        var ov = d9.getColumns(this.config);
                                        d9.close(this.config);
                                        var oS = this.generateMatrix(
                                            oy,
                                            oB,
                                            ov,
                                        );
                                        var oH = ee.addMathMLToSelectedElement(
                                            oS,
                                            this.config,
                                        );
                                        if (oH) {
                                            return ee.updateFormulaAndPanels(
                                                this.config,
                                            );
                                        }
                                        return true;
                                    } else {
                                        if (oR.getSource() == bx) {
                                            var oT = nb.getNumbers(this.config);
                                            var oD = nb.displayCarrys(
                                                this.config,
                                            );
                                            var oC = nb.displayLeft(
                                                this.config,
                                            );
                                            var oJ = nb.getThoussnds(
                                                this.config,
                                            );
                                            nb.close(this.config);
                                            var oz = ".";
                                            var oM =
                                                this.config.getSelectedElement();
                                            var oE = oM.getSelectedPanel();
                                            if (oE != null) {
                                                var ow = oE.getBean();
                                                var oP =
                                                    ow.getCurrentDefStyle();
                                                oz = oP.getDecimalpoint();
                                            }
                                            var oS = this.generateAddition(
                                                oT,
                                                oz,
                                                oD,
                                                oC,
                                                oJ,
                                            );
                                            var oH =
                                                ee.addMathMLToSelectedElement(
                                                    oS,
                                                    this.config,
                                                );
                                            if (oH) {
                                                return ee.updateFormulaAndPanels(
                                                    this.config,
                                                );
                                            }
                                            return true;
                                        } else {
                                            if (oR.getSource() == gB) {
                                                var oT = mG.getNumbers(
                                                    this.config,
                                                );
                                                var oD = mG.displayCarrys(
                                                    this.config,
                                                );
                                                var oC = mG.displayLeft(
                                                    this.config,
                                                );
                                                var oJ = mG.getThoussnds(
                                                    this.config,
                                                );
                                                mG.close(this.config);
                                                var oz = ".";
                                                var oM =
                                                    this.config.getSelectedElement();
                                                var oE = oM.getSelectedPanel();
                                                if (oE != null) {
                                                    var ow = oE.getBean();
                                                    var oP =
                                                        ow.getCurrentDefStyle();
                                                    oz = oP.getDecimalpoint();
                                                }
                                                var oS =
                                                    this.generateSubtraction(
                                                        oT,
                                                        oz,
                                                        oD,
                                                        oC,
                                                        oJ,
                                                    );
                                                var oH =
                                                    ee.addMathMLToSelectedElement(
                                                        oS,
                                                        this.config,
                                                    );
                                                if (oH) {
                                                    return ee.updateFormulaAndPanels(
                                                        this.config,
                                                    );
                                                }
                                                return true;
                                            } else {
                                                if (oR.getSource() == p) {
                                                    var oT = aw.getNumbers(
                                                        this.config,
                                                    );
                                                    var oD = aw.displayCarrys(
                                                        this.config,
                                                    );
                                                    var ou = aw.displaySubgroup(
                                                        this.config,
                                                    );
                                                    var oC = aw.displayLeft(
                                                        this.config,
                                                    );
                                                    var oJ = aw.getThoussnds(
                                                        this.config,
                                                    );
                                                    aw.close(this.config);
                                                    var oz = ".";
                                                    var oM =
                                                        this.config.getSelectedElement();
                                                    var oE =
                                                        oM.getSelectedPanel();
                                                    if (oE != null) {
                                                        var ow = oE.getBean();
                                                        var oP =
                                                            ow.getCurrentDefStyle();
                                                        oz =
                                                            oP.getDecimalpoint();
                                                    }
                                                    var oS =
                                                        this.generateMultiplication(
                                                            oT,
                                                            oz,
                                                            oD,
                                                            oC,
                                                            oJ,
                                                            ou,
                                                        );
                                                    var oH =
                                                        ee.addMathMLToSelectedElement(
                                                            oS,
                                                            this.config,
                                                        );
                                                    if (oH) {
                                                        return ee.updateFormulaAndPanels(
                                                            this.config,
                                                        );
                                                    }
                                                    return true;
                                                } else {
                                                    if (oR.getSource() == lB) {
                                                        var oT = aC.getNumbers(
                                                            this.config,
                                                        );
                                                        var oJ =
                                                            aC.getThoussnds(
                                                                this.config,
                                                            );
                                                        var oL =
                                                            aC.getDivisionType(
                                                                this.config,
                                                            );
                                                        var oQ =
                                                            aC.getPrecision(
                                                                this.config,
                                                            );
                                                        aC.close(this.config);
                                                        var oz = ".";
                                                        var oM =
                                                            this.config.getSelectedElement();
                                                        var oE =
                                                            oM.getSelectedPanel();
                                                        if (oE != null) {
                                                            var ow =
                                                                oE.getBean();
                                                            var oP =
                                                                ow.getCurrentDefStyle();
                                                            oz =
                                                                oP.getDecimalpoint();
                                                        }
                                                        var oS =
                                                            this.generateDivision(
                                                                oT,
                                                                oz,
                                                                oJ,
                                                                oL,
                                                                oQ,
                                                            );
                                                        var oH =
                                                            ee.addMathMLToSelectedElement(
                                                                oS,
                                                                this.config,
                                                            );
                                                        if (oH) {
                                                            return ee.updateFormulaAndPanels(
                                                                this.config,
                                                            );
                                                        }
                                                        return true;
                                                    } else {
                                                        if (
                                                            oR.getSource() == hM
                                                        ) {
                                                            var oT =
                                                                nb.getNumbers(
                                                                    this.config,
                                                                );
                                                            oT.add("0");
                                                            nb.update(
                                                                this.config,
                                                                oT,
                                                            );
                                                            return false;
                                                        } else {
                                                            if (
                                                                oR
                                                                    .getSource()
                                                                    .indexOf(
                                                                        nG +
                                                                            "_",
                                                                    ) == 0
                                                            ) {
                                                                var oT =
                                                                    nb.getNumbers(
                                                                        this
                                                                            .config,
                                                                    );
                                                                var oI =
                                                                    oR.getSource();
                                                                var oU =
                                                                    nG + "_";
                                                                oI =
                                                                    oI.substring(
                                                                        oU.length,
                                                                    );
                                                                var oF =
                                                                    lv.getIntegerValue(
                                                                        oI,
                                                                        0,
                                                                    );
                                                                oT.remove(oF);
                                                                nb.update(
                                                                    this.config,
                                                                    oT,
                                                                );
                                                                return false;
                                                            } else {
                                                                if (
                                                                    oR.getSource() ==
                                                                    im
                                                                ) {
                                                                    this.config
                                                                        .getNewsTipsManager()
                                                                        .setNextIndex();
                                                                    fR.update(
                                                                        this
                                                                            .config,
                                                                    );
                                                                    return false;
                                                                } else {
                                                                    if (
                                                                        oR.getSource() ==
                                                                        lj
                                                                    ) {
                                                                        this.config
                                                                            .getNewsTipsManager()
                                                                            .setPrevIndex();
                                                                        fR.update(
                                                                            this
                                                                                .config,
                                                                        );
                                                                        return false;
                                                                    } else {
                                                                        if (
                                                                            oR.getSource() ==
                                                                            fK
                                                                        ) {
                                                                            this.config
                                                                                .getNewsTipsManager()
                                                                                .chooseAnotherTip();
                                                                            fR.update(
                                                                                this
                                                                                    .config,
                                                                            );
                                                                            return false;
                                                                        } else {
                                                                            if (
                                                                                oR.getSource() ==
                                                                                kk
                                                                            ) {
                                                                                var oK =
                                                                                    gJ.getBooleanValue(
                                                                                        this.config.getEditorId() +
                                                                                            "_" +
                                                                                            oR.getSource(),
                                                                                    );
                                                                                var oA =
                                                                                    oK ==
                                                                                    "true";
                                                                                this.config
                                                                                    .getSaveLocalStorage()
                                                                                    .saveHideTips(
                                                                                        this.config.getEditorId(),
                                                                                        oA +
                                                                                            "",
                                                                                    );
                                                                                fR.update(
                                                                                    this
                                                                                        .config,
                                                                                );
                                                                                return false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    };
    aa.prototype.generateDivision = function (oX, oB, oM, oJ, oT) {
        var oR = ":right=right";
        if (oJ == "1") {
            oR = "left)(right";
        } else {
            if (oJ == "2") {
                oR = "shortstackedrightright";
            } else {
                if (oJ == "3") {
                    oR = "righttop";
                } else {
                    if (oJ == "4") {
                        oR = "stackedleftlinetop";
                    } else {
                        if (oJ == "5") {
                            oR = "left/\\right";
                        } else {
                            if (oJ == "6") {
                                oR = "stackedrightright";
                            } else {
                                if (oJ == "7") {
                                    oR = "mediumstackedrightright";
                                } else {
                                    if (oJ == "8") {
                                        oR = "lefttop";
                                    } else {
                                        if (oJ == "9") {
                                            oR = "stackedleftleft";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        var oE = oX.get(1);
        var oW = lv.getDoubleValue(this.changeDecimalChar(oE, oB), 0);
        var ow = oX.get(0);
        var oD = lv.getDoubleValue(this.changeDecimalChar(ow, oB), 0);
        var oG = "0";
        var oO = 0;
        if (oW != 0) {
            var oN = this.getNumberOfDecimals(oE, oB);
            if (oN > 0) {
                oE = this.removeDecimalPoint(oE, oB);
                oW = lv.getDoubleValue(this.changeDecimalChar(oE, oB), 0);
                oD = oD * Math.pow(10, oN);
                ow = lF.getDoubleValueWithDecimalsNoRounding(oD, oT);
                oD = lv.getDoubleValue(this.changeDecimalChar(ow, oB), 0);
            }
            oO = oD / oW;
            oG = lF.getDoubleValueWithDecimalsNoRounding(oO, oT);
            oO = lv.getDoubleValue(this.changeDecimalChar(oG, oB), 0);
            var oy = this.getNumberOfUnits(ow, oB);
            var oF = this.getNumberOfDecimals(ow, oB);
            var oV = this.getNumberOfUnits(oG, oB);
            var ox = this.getNumberOfDecimals(oG, oB);
            if (oy > oV) {
                oG = this.addZeroInFront(oG, oy - oV);
            } else {
                if (oy < oV) {
                    ow = this.addZeroInFront(ow, oV - oy);
                }
            }
            if (oF > ox) {
                oG = this.addZeroToEnd(oG, oF - ox, oB);
            } else {
                if (oF < ox) {
                    ow = this.addZeroToEnd(ow, ox - oF, oB);
                }
            }
        }
        var oU = "<mlongdiv longdivstyle='" + oR + "'>";
        oU = oU + "<mn>" + oE + "</mn>";
        if (oW != 0) {
            oU = oU + "<mn>" + oG + "</mn>";
        } else {
            oU = oU + "<mn>?</mn>";
        }
        oU = oU + "<mn>" + ow + "</mn>";
        if (oW != 0) {
            oU = oU + "<msgroup>";
            var oL = this.removeDecimalPoint(ow, oB);
            var oQ = oL.length;
            var oA = 0;
            var oz = "";
            var oZ = 0;
            for (var oS = 0; oS < oQ; oS++) {
                var ov = this.getNextNumber(ow, oA, oB);
                var oI = oz + ov;
                var oK = this.findPower(oI, oB);
                var oY = this.removeDecimalPoint(oI, oB);
                var oH = lv.getDoubleValue(oY, 0);
                var ou = Math.floor(oH / oW);
                oz = (oH % oW) / oK + "";
                var oP = (ou * oW) / oK;
                var oC = oP + "";
                if (ov.indexOf(oB) == -1 && oI.indexOf("0" + oB) == 0) {
                    oI = oI.substring(2);
                    oC = this.cutUntilNotZero(oC.substring(2));
                }
                oU = oU + "<msgroup position='" + oZ + "'>";
                if (oA > 0) {
                    oU = oU + "<mn>" + oI + "</mn>";
                }
                oU =
                    oU +
                    "<msrow>" +
                    this.getNoneStrings2(oI, oC) +
                    "<mn>" +
                    oC +
                    "</mn></msrow>";
                oU = oU + "<msline length='" + oI.length + "'/>";
                oU = oU + "</msgroup>";
                if (oz.indexOf("0" + oB) == 0) {
                    oz = this.cutUntilNotZero(oz.substring(2));
                }
                oZ = oZ + oz.length - oI.length;
                oA = oA + ov.length;
            }
            oU = oU + "<msgroup position='" + oZ + "'>";
            oU = oU + "<mn>" + oz + "</mn>";
            oU = oU + "</msgroup>";
            oU = oU + "</msgroup>";
        }
        oU = oU + "</mlongdiv>";
        return oU;
    };
    aa.prototype.getNextNumber = function (ow, ox, ov) {
        var ou = ow.substring(ox, ox + 1);
        if (ou == ov) {
            ou = ow.substring(ox, ox + 2);
        }
        return ou;
    };
    aa.prototype.addZeroToEnd = function (ow, ox, ou) {
        if (ow.indexOf(ou) == -1) {
            ow = ow + ".";
        }
        for (var ov = 0; ov < ox; ov++) {
            ow = ow + "0";
        }
        return ow;
    };
    aa.prototype.addZeroInFront = function (ov, ow) {
        for (var ou = 0; ou < ow; ou++) {
            ov = "0" + ov;
        }
        return ov;
    };
    aa.prototype.cutUntilNotZero = function (ou) {
        while (ou.indexOf("0") == 0) {
            ou = ou.substring(1);
        }
        return ou;
    };
    aa.prototype.findPower = function (ox, ou) {
        var ov = ox.indexOf(ou);
        if (ov == -1) {
            return 1;
        }
        var ow = ox.length - ov - 1;
        return Math.pow(10, ow);
    };
    aa.prototype.removeDecimalPoint = function (oy, ov) {
        var ou = "";
        for (var ow = 0; ow < oy.length; ow++) {
            var ox = oy.substring(ow, ow + 1);
            if (ox == ov) {
                continue;
            }
            ou = ou + ox;
        }
        return ou;
    };
    aa.prototype.generateMultiplication = function (oQ, ox, oE, oD, oH, oK) {
        var oO = "";
        oO = oO + "<mstack>";
        var oS = 0;
        var oP = 0;
        var oz = 0;
        var oR = 0;
        for (var oN = 0; oN < oQ.size(); oN++) {
            var oB = oQ.get(oN);
            oB = this.filterAnyCharExceptDecimal(oB, ox);
            var oJ = this.getNumberOfDecimals(oB, ox);
            oz = Math.max(oz, oJ);
            oP = oP + oJ;
            var oA = this.getNumberOfUnits(oB, ox);
            oR = Math.max(oR, oA);
            if (oN == 0) {
                oS = lv.getDoubleValue(this.changeDecimalChar(oB, ox), 0);
            } else {
                oS = oS * lv.getDoubleValue(this.changeDecimalChar(oB, ox), 0);
            }
        }
        if (oP > 0) {
            oK = false;
            oE = false;
        }
        if (oE) {
            oO = oO + this.generateMultCarrys(oQ, oD, oS + "");
        }
        for (var oN = 0; oN < oQ.size(); oN++) {
            var oB = oQ.get(oN);
            oB = this.filterAnyCharExceptDecimal(oB, ox);
            var oJ = this.getNumberOfDecimals(oB, ox);
            var oA = this.getNumberOfUnits(oB, ox);
            if (oN == oQ.size() - 1) {
                if (oD) {
                    var oM = this.getNoneStrings(oR, oA);
                    oO =
                        oO +
                        "<msrow><mo>&#xD7;</mo>" +
                        oM +
                        "<mn>" +
                        this.displayThousands(oB, oH, ox) +
                        "</mn></msrow>";
                } else {
                    var oM = this.getNoneStrings(oz, oJ);
                    oO =
                        oO +
                        "<msrow><mn>" +
                        this.displayThousands(oB, oH, ox) +
                        "</mn>" +
                        oM +
                        "<mo>&#xD7;</mo></msrow>";
                }
            } else {
                oO = oO + "<mn>" + this.displayThousands(oB, oH, ox) + "</mn>";
            }
        }
        oO = oO + "<msline/>";
        if (oK) {
            var ov = oQ.get(0);
            var ou = this.getNumberOfDecimals(ov, ox);
            var oL = lv.getDoubleValue(this.changeDecimalChar(ov, ox), 0);
            var oC = oQ.get(1);
            if (oz > 0) {
                oO = oO + "<msgroup shift='1' position='-" + (oz + 1) + "'>";
            } else {
                oO = oO + "<msgroup shift='1'>";
            }
            for (var oN = 0; oN < oC.length; oN++) {
                var oy = oC.length - 1 - oN;
                var oG = oC.substring(oy, oy + 1);
                var ow = lv.getIntegerValue(oG, -1);
                if (ow > -1) {
                    var oI = ow * oL;
                    oI = oI.toFixed(ou);
                    oO =
                        oO +
                        "<msrow>" +
                        this.removeSigns(
                            this.displayThousands(
                                this.changeBackDecimalChar(oI, ox),
                                oH,
                                ox,
                            ),
                        ) +
                        "</msrow>";
                }
            }
            oO = oO + "</msgroup>";
            oO = oO + "<msline/>";
        }
        oS = oS.toFixed(oP);
        var oF = oP - oz;
        if (oK && oF > 0) {
            oO =
                oO +
                "<msrow position='" +
                oF +
                "'><mn>" +
                this.displayThousands(
                    this.changeBackDecimalChar(oS, ox),
                    oH,
                    ox,
                ) +
                "</mn><msrow>";
        } else {
            oO =
                oO +
                "<msrow><mn>" +
                this.displayThousands(
                    this.changeBackDecimalChar(oS, ox),
                    oH,
                    ox,
                ) +
                "</mn><msrow>";
        }
        oO = oO + "</mstack>";
        return oO;
    };
    aa.prototype.generateMultCarrys = function (oK, oC, oM) {
        var oI = "";
        var oL = 0;
        for (var oG = 0; oG < oK.size(); oG++) {
            var oA = oK.get(oG);
            oL = Math.max(oL, oA.length);
        }
        oL = Math.max(oL, oM.length);
        var ov = oK.get(0);
        var ou = oK.get(1);
        for (var oG = 0; oG < ou.length; oG++) {
            var oz = ou.length - 1 - oG;
            var oE = ou.substring(oz, oz + 1);
            var ow = lv.getIntegerValue(oE, -1);
            var oy = "<none/>";
            var oH = 0;
            for (var oF = 0; oF < ov.length; oF++) {
                var ox = ov.length - 1 - oF;
                var oJ = ov.substring(ox, ox + 1);
                var oD = lv.getIntegerValue(oJ, -1);
                if (oH > 0) {
                    oy = "<mn>" + oH + "</mn>" + oy;
                } else {
                    oy = "<none/>" + oy;
                }
                var oB = (ow * oD) / 10;
                oH = this.getInteger(oB + "");
            }
            oy = this.addNone(oy, oL, ov.length);
            oI = "<mscarries mathcolor='#0000ff'>" + oy + "</mscarries>" + oI;
        }
        return oI;
    };
    aa.prototype.getInteger = function (ou) {
        if (ou.indexOf(".") == -1) {
            return lv.getIntegerValue(ou, 0);
        }
        return lv.getIntegerValue(ou.substring(0, ou.indexOf(".")), 0);
    };
    aa.prototype.addNone = function (ox, ov, ou) {
        for (var ow = 0; ow < ov - ou; ow++) {
            ox = "<none/>" + ox;
        }
        return ox;
    };
    aa.prototype.removeSigns = function (ov) {
        var ox = "";
        for (var ow = 0; ow < ov.length; ow++) {
            var ou = ov.length - 1 - ow;
            var oz = ov.substring(ou, ou + 1);
            var oy = lv.getIntegerValue(oz, -1);
            if (oy == -1) {
            } else {
                ox = "<mn>" + oz + "</mn>" + ox;
            }
        }
        return ox;
    };
    aa.prototype.generateSubtraction = function (oJ, ow, oD, oC, oE) {
        var ov = oJ.get(0);
        var ou = oJ.get(1);
        var oB = lv.getDoubleValue(this.changeDecimalChar(ov, ow), 0);
        var oA = lv.getDoubleValue(this.changeDecimalChar(ou, ow), 0);
        if (oA > oB) {
            oJ.clear();
            oJ.add(ou);
            oJ.add(ov);
        }
        var oI = "";
        oI = oI + "<mstack>";
        if (oD) {
            oI = oI + this.generateSubCarrys(oJ, ow, oC, oE);
        }
        var oL = 0;
        var ox = 0;
        var oK = 0;
        for (var oH = 0; oH < oJ.size(); oH++) {
            var oz = oJ.get(oH);
            oz = this.filterAnyCharExceptDecimal(oz, ow);
            var oF = this.getNumberOfDecimals(oz, ow);
            ox = Math.max(ox, oF);
            var oy = this.getNumberOfUnits(oz, ow);
            oK = Math.max(oK, oy);
            if (oH == oJ.size() - 1) {
                if (oC) {
                    var oG = this.getNoneStrings(oK, oy);
                    oI =
                        oI +
                        "<msrow><mo>−</mo>" +
                        oG +
                        "<mn>" +
                        this.displayThousands(oz, oE, ow) +
                        "</mn></msrow>";
                } else {
                    var oG = this.getNoneStrings(ox, oF);
                    oI =
                        oI +
                        "<msrow><mn>" +
                        this.displayThousands(oz, oE, ow) +
                        "</mn>" +
                        oG +
                        "<mo>−</mo></msrow>";
                }
            } else {
                oI = oI + "<mn>" + this.displayThousands(oz, oE, ow) + "</mn>";
            }
            if (oH == 0) {
                oL = lv.getDoubleValue(this.changeDecimalChar(oz, ow), 0);
            } else {
                oL = oL - lv.getDoubleValue(this.changeDecimalChar(oz, ow), 0);
            }
        }
        oL = oL.toFixed(ox);
        oI = oI + "<msline/>";
        oI =
            oI +
            "<mn>" +
            this.displayThousands(this.changeBackDecimalChar(oL, ow), oE, ow) +
            "</mn>";
        oI = oI + "</mstack>";
        return oI;
    };
    aa.prototype.generateAddition = function (oB, ox, oF, oH, oC) {
        var oE = "";
        oE = oE + "<mstack>";
        if (oF) {
            oE = oE + this.generateCarrys(oB, ox, oH, oC);
        }
        var oD = 0;
        var ov = 0;
        var ow = 0;
        for (var oz = 0; oz < oB.size(); oz++) {
            var oA = oB.get(oz);
            oA = this.filterAnyCharExceptDecimal(oA, ox);
            var oy = this.getNumberOfDecimals(oA, ox);
            ov = Math.max(ov, oy);
            var ou = this.getNumberOfUnits(oA, ox);
            ow = Math.max(ow, ou);
            if (oz == oB.size() - 1) {
                if (oH) {
                    var oG = this.getNoneStrings(ow, ou);
                    oE =
                        oE +
                        "<msrow><mo>+</mo>" +
                        oG +
                        "<mn>" +
                        this.displayThousands(oA, oC, ox) +
                        "</mn></msrow>";
                } else {
                    var oG = this.getNoneStrings(ov, oy);
                    oE =
                        oE +
                        "<msrow><mn>" +
                        this.displayThousands(oA, oC, ox) +
                        "</mn>" +
                        oG +
                        "<mo>+</mo></msrow>";
                }
            } else {
                oE = oE + "<mn>" + this.displayThousands(oA, oC, ox) + "</mn>";
            }
            oD = oD + lv.getDoubleValue(this.changeDecimalChar(oA, ox), 0);
        }
        oD = oD.toFixed(ov);
        oE = oE + "<msline/>";
        oE =
            oE +
            "<mn>" +
            this.displayThousands(this.changeBackDecimalChar(oD, ox), oC, ox) +
            "</mn>";
        oE = oE + "</mstack>";
        return oE;
    };
    aa.prototype.displayThousands = function (ox, oz, ov) {
        if (oz == null || oz == "none") {
            return ox;
        }
        var ou = " ";
        if (oz == "comma") {
            ou = ",";
        } else {
            if (oz == "point") {
                ou = ".";
            }
        }
        var oA = "";
        if (ox.indexOf(ov) > -1) {
            oA = ox.substring(ox.indexOf(ov));
            ox = ox.substring(0, ox.indexOf(ov));
        }
        for (var oy = 0; oy < ox.length; oy++) {
            var ow = ox.length - 1 - oy;
            var oB = ox.substring(ow, ow + 1);
            if (oy > 0 && oy % 3 == 0) {
                oA = ou + oA;
            }
            oA = oB + oA;
        }
        return oA;
    };
    aa.prototype.filterAnyCharExceptDecimal = function (ou, ov) {
        var ox = "";
        for (var ow = 0; ow < ou.length; ow++) {
            var oz = ou.substring(ow, ow + 1);
            if (oz == ov) {
                ox = ox + ov;
                continue;
            }
            var oy = lv.getIntegerValue(oz, -1);
            if (oy > -1) {
                ox = ox + oz;
            }
        }
        return ox;
    };
    aa.prototype.changeBackDecimalChar = function (ox, ov) {
        if (ov == null || ov == ".") {
            return ox + "";
        }
        var ou = ox + "";
        var oy = "";
        for (var ow = 0; ow < ou.length; ow++) {
            var oA = ou.substring(ow, ow + 1);
            if (oA == ".") {
                oy = oy + ov;
                continue;
            }
            var oz = lv.getIntegerValue(oA, -1);
            if (oz > -1) {
                oy = oy + oA;
            }
        }
        return oy;
    };
    aa.prototype.changeDecimalChar = function (ow, ou) {
        if (ou == null || ou == ".") {
            return ow;
        }
        var ox = "";
        for (var ov = 0; ov < ow.length; ov++) {
            var oz = ow.substring(ov, ov + 1);
            if (oz == ou) {
                ox = ox + ".";
                continue;
            }
            var oy = lv.getIntegerValue(oz, -1);
            if (oy > -1) {
                ox = ox + oz;
            }
        }
        return ox;
    };
    aa.prototype.generateCarrys = function (oD, oz, oK, oF) {
        var oI = "";
        var ow = 0;
        var ox = 0;
        var ov = 0;
        var oC = true;
        if (oF == null || oF == "none") {
            oC = false;
        }
        for (var oA = 0; oA < oD.size(); oA++) {
            var oB = oD.get(oA);
            ow = Math.max(ow, this.getNumberOfDecimals(oB, oz));
            ox = Math.max(ox, this.getNumberOfUnits(oB, oz));
            if (oB.indexOf(oz) > -1) {
                ov = 1;
            }
        }
        var oH = ox + ov + ow;
        var oJ = 0;
        for (var oA = oH; oA > 0; oA--) {
            if (ov == 1 && oA == ox + 1) {
                oI = "<none/>" + oI;
                continue;
            }
            if (oJ > 0) {
                oI = "<mn>" + oJ + "</mn>" + oI;
            } else {
                oI = "<none/>" + oI;
            }
            if (oC) {
                if (oA < ox) {
                    var ou = ox - oA;
                    if (ou % 3 == 0) {
                        oI = "<none/>" + oI;
                    }
                }
            }
            var oE = oJ;
            for (var oy = 0; oy < oD.size(); oy++) {
                var oB = oD.get(oy);
                var oG = this.getDigit(oB, oA - 1, ox, ov, ow, oz);
                oE = oE + oG;
            }
            oJ = oE / 10;
            oJ = parseInt(oJ, 10);
        }
        if (oK) {
            oI = "<none/>" + oI;
        }
        oI = "<mscarries mathcolor='#0000ff'>" + oI + "</mscarries>";
        return oI;
    };
    aa.prototype.generateSubCarrys = function (oH, ow, oA, oC) {
        var oF = "";
        var oy = 0;
        var oI = 0;
        var oB = 0;
        var ox = true;
        if (oC == null || oC == "none") {
            ox = false;
        }
        for (var oD = 0; oD < oH.size(); oD++) {
            var oz = oH.get(oD);
            oy = Math.max(oy, this.getNumberOfDecimals(oz, ow));
            oI = Math.max(oI, this.getNumberOfUnits(oz, ow));
            if (oz.indexOf(ow) > -1) {
                oB = 1;
            }
        }
        var oM = oI + oB + oy;
        var oE = false;
        for (var oD = oM; oD > 0; oD--) {
            if (oB == 1 && oD == oI + 1) {
                oF = "<none/>" + oF;
                continue;
            }
            if (ox) {
                if (oD < oI) {
                    var oJ = oI - oD;
                    if (oJ % 3 == 0) {
                        oF = "<none/>" + oF;
                    }
                }
            }
            var ov = oH.get(0);
            var oK = this.getDigit(ov, oD - 1, oI, oB, oy, ow);
            if (oE) {
                if (oK > 0) {
                    oK = oK - 1;
                } else {
                    oK = 9;
                }
            }
            var ou = oH.get(1);
            var oG = this.getDigit(ou, oD - 1, oI, oB, oy, ow);
            var oL = oK - oG;
            if (oL < 0) {
                oF = "<mscarry><mn>1" + oK + "</mn></mscarry>" + oF;
                oE = true;
            } else {
                if (oE) {
                    oF = "<mscarry><mn>" + oK + "</mn></mscarry>" + oF;
                } else {
                    oF = "<none/>" + oF;
                }
                oE = false;
            }
        }
        if (oA) {
            oF = "<none/>" + oF;
        }
        oF =
            "<mscarries mathcolor='#0000ff' scriptsizemultiplier='0.4' crossout='updiagonalstrike'>" +
            oF +
            "</mscarries>";
        return oF;
    };
    aa.prototype.getDigit = function (oA, oB, ox, ov, ow, oy) {
        var oz = this.getNumberOfDecimals(oA, oy);
        var ou = this.getNumberOfUnits(oA, oy);
        var oE = ox - ou;
        if (oB < oE) {
            return 0;
        }
        var oC = oB - oE;
        if (oC >= oA.length) {
            return 0;
        }
        var oD = oA.substring(oC, oC + 1);
        if (oD == oy) {
            return 0;
        }
        return lv.getIntegerValue(oD, 0);
    };
    aa.prototype.getNoneStrings = function (ox, ou) {
        if (ox == 0) {
            return "";
        }
        var ow = "";
        for (var ov = 0; ov < ox - ou; ov++) {
            ow = ow + "<none/>";
        }
        if (ou == 0) {
            ow = ow + "<none/>";
        }
        return ow;
    };
    aa.prototype.getNoneStrings2 = function (ox, ow) {
        var oy = ox.length - ow.length;
        var ov = "";
        for (var ou = 0; ou < oy; ou++) {
            ov = ov + "<none/>";
        }
        return ov;
    };
    aa.prototype.getNumberOfDecimals = function (ov, ou) {
        if (ov.indexOf(ou) > -1) {
            return ov.substring(ov.indexOf(ou)).length - 1;
        }
        return 0;
    };
    aa.prototype.getNumberOfUnits = function (ov, ou) {
        if (ov.indexOf(ou) > -1) {
            return ov.substring(0, ov.indexOf(ou)).length;
        }
        return ov.length;
    };
    aa.prototype.addFontNameToList = function (ov, ox, ow) {
        if (ox == null) {
            return;
        }
        ox = W.trim(ox);
        if (ox.length < 2) {
            return;
        }
        this.config.addListCustomFonts(ox, ow + ox);
        this.config.getSaveLocalStorage().saveFonts(this.config.getEditorId());
        var oy = this.config.getButton(em).getElement();
        if (
            this.config
                .getSaveLocalStorage()
                .getSaveClientData()
                .getListCustomFonts()
                .size() == 1
        ) {
            oy.children("option")
                .eq(7)
                .before($("<option disabled>───────────────</option>"));
        }
        oy.children("option")
            .eq(8)
            .before(
                $("<option></option>")
                    .val(ow + ox)
                    .text(ov + ox),
            );
        var ou = this.config.getButton(em);
        ou.setValue(ow + ox);
    };
    aa.prototype.generateMatrix = function (ov, ox, ou) {
        var ow = this.generateTable(ox, ou, null);
        if ("1" == ov) {
            return "<mfenced open='||' close='||'>" + ow + "</mfenced>";
        } else {
            if ("2" == ov) {
                return "<mfenced open='|' close='|'>" + ow + "</mfenced>";
            } else {
                if ("3" == ov) {
                    return "<mfenced open='(' close=')'>" + ow + "</mfenced>";
                } else {
                    if ("4" == ov) {
                        return (
                            "<mfenced open='{' close='}'>" + ow + "</mfenced>"
                        );
                    } else {
                        if ("5" == ov) {
                            return (
                                "<mfenced open='[' close=']'>" +
                                ow +
                                "</mfenced>"
                            );
                        }
                    }
                }
            }
        }
        return ow;
    };
    aa.prototype.generatePiecewise = function (oy, ow) {
        var oz = "";
        if ("n" == ow) {
            oz = "left center right";
        } else {
            var ov = lv.getIntegerValue(ow, 1);
            for (var ou = 0; ou < ov; ou++) {
                if (ou == 0) {
                    oz = oz + "left ";
                } else {
                    if (ou == ov - 1) {
                        oz = oz + "right ";
                    } else {
                        oz = oz + "center ";
                    }
                }
            }
            oz = W.trim(oz);
        }
        var ox = this.generateTable(oy, ow, oz);
        return "<mfenced open='{' close=''>" + ox + "</mfenced>";
    };
    aa.prototype.generateTable = function (oD, ow, oA) {
        var oB = "";
        if (oA != null && oA.length > 0) {
            oB = "<mtable columnalign='" + oA + "'>";
        } else {
            oB = "<mtable>";
        }
        var oy = cd.getEmptyMathMLElement();
        if ("n" == oD && "n" == ow) {
            oB =
                oB +
                "<mtr><mtd>" +
                oy +
                "</mtd><mtd><mo>&hellip;</mo></mtd><mtd>" +
                oy +
                "</mtd></mtr>";
            oB =
                oB +
                "<mtr><mtd><mo>&vellip;</mo></mtd><mtd><mo>&dtdot;</mo></mtd><mtd><mo>&vellip;</mo></mtd></mtr>";
            oB =
                oB +
                "<mtr><mtd>" +
                oy +
                "</mtd><mtd><mo>&hellip;</mo></mtd><mtd>" +
                oy +
                "</mtd></mtr>";
        } else {
            if ("n" == oD) {
                var ou = lv.getIntegerValue(ow, 1);
                var oz = this.getNumberOfTd(ou, "<mtd>" + oy + "</mtd>");
                var ox = this.getNumberOfTd(ou, "<mtd><mo>&vellip;</mo></mtd>");
                oB = oB + "<mtr>" + oz + "</mtr>";
                oB = oB + "<mtr>" + ox + "</mtr>";
                oB = oB + "<mtr>" + oz + "</mtr>";
            } else {
                if ("n" == ow) {
                    var oC = lv.getIntegerValue(oD, 1);
                    var ov =
                        "<mtr><mtd>" +
                        oy +
                        "</mtd><mtd><mo>&hellip;</mo></mtd><mtd>" +
                        oy +
                        "</mtd></mtr>";
                    var oz = this.getNumberOfTd(oC, ov);
                    oB = oB + oz;
                } else {
                    var oC = lv.getIntegerValue(oD, 1);
                    var ou = lv.getIntegerValue(ow, 1);
                    var oz = this.getNumberOfTd(ou, "<mtd>" + oy + "</mtd>");
                    var ox = this.getNumberOfTd(oC, "<mtr>" + oz + "</mtr>");
                    oB = oB + ox;
                }
            }
        }
        oB = oB + "</mtable>";
        return oB;
    };
    aa.prototype.getNumberOfTd = function (ou, ox) {
        var ow = "";
        for (var ov = 0; ov < ou; ov++) {
            ow = ow + ox;
        }
        return ow;
    };
    aa.prototype.generatePolynom = function (ow, oy) {
        var ox = "";
        if ("1" == ow) {
            if ("n" == oy) {
                ox =
                    "<mrow><mrow><msub><mn>a</mn><mn>n</mn></msub><msup><mi>x</mi><mn>n</mn></msup></mrow><mo>+</mo><mrow><msub><mn>a</mn><mrow><mn>n</mn><mo>-</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mrow><mn>n</mn><mo>-</mo><mn>1</mn></mrow></msup></mrow><mo>+</mo><mo>&hellip;</mo><mo>+</mo><mrow><msub><mn>a</mn><mn>1</mn></msub><mi>x</mi></mrow><mo>+</mo><msub><mn>a</mn><mn>0</mn></msub></mrow>";
            } else {
                var ou = lv.getIntegerValue(oy, 1);
                ox = ox + "<mrow>";
                for (var ov = ou; ov > 0; ov--) {
                    if (ov == 1) {
                        ox =
                            ox +
                            "<mrow><msub><mn>a</mn><mn>" +
                            ov +
                            "</mn></msub><mi>x</mi></mrow><mo>+</mo>";
                    } else {
                        ox =
                            ox +
                            "<mrow><msub><mn>a</mn><mn>" +
                            ov +
                            "</mn></msub><msup><mi>x</mi><mn>" +
                            ov +
                            "</mn></msup></mrow><mo>+</mo>";
                    }
                }
                ox = ox + "<msub><mn>a</mn><mn>0</mn></msub></mrow>";
            }
        } else {
            if ("2" == ow) {
                if ("n" == oy) {
                    ox =
                        "<mrow><mrow><mn>a</mn><msup><mi>x</mi><mn>n</mn></msup></mrow><mo>+</mo><mrow><mn>b</mn><msup><mi>x</mi><mrow><mn>n</mn><mo>-</mo><mn>1</mn></mrow></msup></mrow><mo>+</mo><mo>&hellip;</mo><mo>+</mo><mrow><mn>n</mn><mi>x</mi></mrow><mo>+</mo><mn>m</mn></mrow>";
                } else {
                    var ou = lv.getIntegerValue(oy, 1);
                    ox = ox + "<mrow>";
                    for (var ov = ou; ov > 0; ov--) {
                        if (ov == 1) {
                            ox =
                                ox +
                                "<mrow><mn>n</mn><mi>x</mi></mrow><mo>+</mo>";
                        } else {
                            ox =
                                ox +
                                "<mrow><mn>n</mn><msup><mi>x</mi><mn>" +
                                ov +
                                "</mn></msup></mrow><mo>+</mo>";
                        }
                    }
                    ox = ox + "<mn>n</mn></mrow>";
                }
            } else {
                if ("3" == ow) {
                    if ("n" == oy) {
                        ox =
                            "<mrow><msup><mi>x</mi><mn>n</mn></msup><mo>+</mo><msup><mi>x</mi><mrow><mn>n</mn><mo>-</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>&hellip;</mo><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow>";
                    } else {
                        var ou = lv.getIntegerValue(oy, 1);
                        ox = ox + "<mrow>";
                        for (var ov = ou; ov > 0; ov--) {
                            if (ov == 1) {
                                ox = ox + "<mi>x</mi><mo>+</mo>";
                            } else {
                                ox =
                                    ox +
                                    "<msup><mi>x</mi><mn>" +
                                    ov +
                                    "</mn></msup><mo>+</mo>";
                            }
                        }
                        ox = ox + "<mn>n</mn></mrow>";
                    }
                } else {
                    if ("4" == ow) {
                        if ("n" == oy) {
                            ox =
                                "<mrow><mrow><mo>(</mo><mn>a</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mrow><mo>(</mo><mn>b</mn><mi>x</mi><mo>+</mo><mn>2</mn><mo>)</mo></mrow><mo>&hellip;</mo><mrow><mo>(</mo><mn>n</mn><mi>x</mi><mo>+</mo><mn>n</mn><mo>)</mo></mrow></mrow>";
                        } else {
                            var ou = lv.getIntegerValue(oy, 1);
                            ox = ox + "<mrow>";
                            for (var ov = ou; ov > 0; ov--) {
                                ox =
                                    ox +
                                    "<mrow><mo>(</mo><mn>a</mn><mi>x</mi><mo>+</mo><mn>" +
                                    ov +
                                    "</mn><mo>)</mo></mrow>";
                            }
                            ox = ox + "</mrow>";
                        }
                    } else {
                        if ("5" == ow) {
                            if ("n" == oy) {
                                ox =
                                    "<mrow><mrow><mo>(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mrow><mo>(</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo>)</mo></mrow><mo>&hellip;</mo><mrow><mo>(</mo><mi>x</mi><mo>+</mo><mn>n</mn><mo>)</mo></mrow></mrow>";
                            } else {
                                var ou = lv.getIntegerValue(oy, 1);
                                ox = ox + "<mrow>";
                                for (var ov = ou; ov > 0; ov--) {
                                    ox =
                                        ox +
                                        "<mrow><mo>(</mo><mi>x</mi><mo>+</mo><mn>" +
                                        ov +
                                        "</mn><mo>)</mo></mrow>";
                                }
                                ox = ox + "</mrow>";
                            }
                        }
                    }
                }
            }
        }
        return ox;
    };

    function n6() {}
    n6.resetCache = function () {
        ew = null;
        cc = null;
        n4 = null;
        gj = null;
        g4 = null;
        cN = null;
        lw = null;
        gd = null;
        n5 = null;
        dY = null;
        hX = null;
        jw = null;
        hN = null;
        kE = null;
        iR = null;
        cf = null;
        ld = null;
        nW = null;
        ij = null;
        mJ = null;
        lT = null;
        aN = null;
        bB = null;
        dv = null;
        oc = null;
        bX = null;
        k4 = null;
        bL = null;
        kJ = null;
        gF = null;
        iQ = null;
        mM = null;
        jd = null;
        bP = null;
        cl = null;
        h1 = null;
        et = null;
        ez = null;
    };
    n6.getScriptList = function () {
        if (ew == null) {
            ew = new fM();
            var ou = cd.getEmptyMathMLElement();
            ew.add("<msup>" + ou + "" + ou + "</msup>");
            ew.add("<msub>" + ou + "" + ou + "</msub>");
            ew.add("<msubsup>" + ou + "" + ou + "" + ou + "</msubsup>");
            ew.add(
                "<mmultiscripts>" +
                    ou +
                    "" +
                    ou +
                    "" +
                    ou +
                    "<mprescripts/>" +
                    ou +
                    "" +
                    ou +
                    "</mmultiscripts>",
            );
            ew.add("<munder>" + ou + "" + ou + "</munder>");
            ew.add("<mover>" + ou + "" + ou + "</mover>");
            ew.add("<munderover>" + ou + "" + ou + "" + ou + "</munderover>");
            ew.add("<mover>" + ou + "<mo>&#x203E;</mo></mover>");
            ew.add("<munder>" + ou + "<mo>&#x203E;</mo></munder>");
            ew.add(
                "<munderover>" +
                    ou +
                    "<mo>&#x203E;</mo><mo>&#x203E;</mo></munderover>",
            );
            ew.add("<mover>" + ou + "<mo>&#x2190;</mo></mover>");
            ew.add("<munder>" + ou + "<mo>&#x2190;</mo></munder>");
            ew.add(
                "<munderover>" +
                    ou +
                    "<mo>&#x2190;</mo><mo>&#x2190;</mo></munderover>",
            );
            ew.add("<mover>" + ou + "<mo>&#x2192;</mo></mover>");
            ew.add("<munder>" + ou + "<mo>&#x2192;</mo></munder>");
            ew.add(
                "<munderover>" +
                    ou +
                    "<mo>&#x2192;</mo><mo>&#x2192;</mo></munderover>",
            );
            ew.add("<mover>" + ou + "<mo>&#x23B4;</mo></mover>");
            ew.add("<munder>" + ou + "<mo>&#x23B5;</mo></munder>");
            ew.add(
                "<munderover>" +
                    ou +
                    "<mo>&#x23B5;</mo><mo>&#x23B4;</mo></munderover>",
            );
            ew.add("<mover>" + ou + "<mo>&#x23DC;</mo></mover>");
            ew.add("<munder>" + ou + "<mo>&#x23DD;</mo></munder>");
            ew.add(
                "<munderover>" +
                    ou +
                    "<mo>&#x23DD;</mo><mo>&#x23DC;</mo></munderover>",
            );
            ew.add("<mover>" + ou + "<mo>&#x23DE;</mo></mover>");
            ew.add("<munder>" + ou + "<mo>&#x23DF;</mo></munder>");
            ew.add(
                "<munderover>" +
                    ou +
                    "<mo>&#x23DF;</mo><mo>&#x23DE;</mo></munderover>",
            );
            ew.add("<mover>" + ou + "<mo>&#x23E0;</mo></mover>");
            ew.add("<munder>" + ou + "<mo>&#x23E1;</mo></munder>");
            ew.add(
                "<munderover>" +
                    ou +
                    "<mo>&#x23E1;</mo><mo>&#x23E0;</mo></munderover>",
            );
        }
        return ew;
    };
    n6.getScriptAList = function () {
        if (cc == null) {
            cc = new fM();
            var ou = cd.getEmptyMathMLElement();
            cc.add(
                "<mover><mo minsize='130%'>&#x2192;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x2192;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x2192;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x2190;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x2190;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x2190;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x2194;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x2194;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x2194;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x219C;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x219C;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x219C;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x219D;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x219D;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x219D;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x219E;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x219E;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x219E;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21A0;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21A0;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21A0;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21A2;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21A2;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21A2;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21A3;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21A3;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21A3;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21A3;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21A3;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21A3;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21A4;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21A4;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21A4;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21A6;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21A6;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21A6;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21A9;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21A9;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21A9;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21AA;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21AA;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21AA;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21BC;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21BC;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21BC;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21BD;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21BD;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21BD;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21C0;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21C0;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21C0;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21C1;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21C1;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21C1;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21C4;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21C4;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21C4;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21C6;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21C6;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21C6;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21C7;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21C7;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21C7;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21C9;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21C9;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21C9;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21CB;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21CB;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21CB;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21CC;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21CC;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21CC;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21D0;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21D0;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21D0;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21D2;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21D2;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21D2;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21D4;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21D4;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21D4;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21DA;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21DA;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21DA;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21DB;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21DB;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21DB;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21E4;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21E4;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21E4;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21E5;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21E5;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21E5;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21E6;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21E6;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21E6;</mo><empty></empty><empty></empty></munderover>",
            );
            cc.add(
                "<mover><mo minsize='130%'>&#x21E8;</mo><empty></empty></mover>",
            );
            cc.add(
                "<munder><mo minsize='130%'>&#x21E8;</mo><empty></empty></munder>",
            );
            cc.add(
                "<munderover><mo minsize='130%'>&#x21E8;</mo><empty></empty><empty></empty></munderover>",
            );
        }
        return cc;
    };
    n6.getRootList = function () {
        if (n4 == null) {
            n4 = new fM();
            var ou = cd.getEmptyMathMLElement();
            n4.add("<msqrt>" + ou + "</msqrt>");
            n4.add("<mroot>" + ou + "" + ou + "</mroot>");
            n4.add(
                "<msqrt closed='true' closedlength='40%'>" + ou + "</msqrt>",
            );
            n4.add(
                "<mroot closed='true' closedlength='40%'>" +
                    ou +
                    "" +
                    ou +
                    "</mroot>",
            );
            n4.add(
                "<msqrt><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup><mo>+</mo><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup></msqrt>",
            );
            n4.add(
                "<mroot><mrow><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup><mo>+</mo><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup></mrow>" +
                    ou +
                    "</mroot>",
            );
            n4.add(
                "<msqrt closed='true' closedlength='40%'><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup><mo>+</mo><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup></msqrt>",
            );
            n4.add(
                "<mroot closed='true' closedlength='40%'><mrow><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup><mo>+</mo><msup>" +
                    ou +
                    "" +
                    ou +
                    "</msup></mrow>" +
                    ou +
                    "</mroot>",
            );
        }
        return n4;
    };
    n6.getFracList = function () {
        if (g4 == null) {
            g4 = new fM();
            var ou = cd.getEmptyMathMLElement();
            g4.add("<mfrac>" + ou + "" + ou + "</mfrac>");
            g4.add("<mfrac bevelled='true'>" + ou + "" + ou + "</mfrac>");
            g4.add(
                "<mfrac denomalign='right'><mrow>" +
                    ou +
                    "<mo>+</mo>" +
                    ou +
                    "</mrow>" +
                    ou +
                    "</mfrac>",
            );
            g4.add(
                "<mfrac numalign='right'>" +
                    ou +
                    "<mrow>" +
                    ou +
                    "<mo>+</mo>" +
                    ou +
                    "</mrow></mfrac>",
            );
            g4.add("<mfrac linethickness='0'>" + ou + "" + ou + "</mfrac>");
        }
        return g4;
    };
    n6.getIntList = function () {
        if (gj == null) {
            gj = new fM();
            var ou = cd.getEmptyMathMLElement();
            gj.add(
                "<mrow><msubsup><mo>&#x222B;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x222B;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x222C;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x222C;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x222D;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x222D;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x222E;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x222E;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x222F;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x222F;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2230;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2230;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2231;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2231;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2232;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2232;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2233;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2233;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A0B;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A0B;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A0C;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A0C;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A0D;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A0D;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A0E;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A0E;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A0F;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A0F;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A10;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A10;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A11;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A11;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A12;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A12;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A13;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A13;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A14;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A14;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A15;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A15;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A16;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A16;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A17;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A17;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A18;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A18;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A19;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A19;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A1A;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A1A;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A1B;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A1B;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><msubsup><mo>&#x2A1C;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</msubsup><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
            gj.add(
                "<mrow><munderover><mo>&#x2A1C;</mo>" +
                    ou +
                    "" +
                    ou +
                    "</munderover><mrow>" +
                    ou +
                    "</mrow><mspace width='0.5em' height='1em'></mspace><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mrow>",
            );
        }
        return gj;
    };
    n6.getSumList = function () {
        if (cN == null) {
            cN = new fM();
            var ou = cd.getEmptyMathMLElement();
            cN.add("<mo>&sum;</mo>");
            cN.add(
                "<munderover><mo>&sum;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover>",
            );
            cN.add(
                "<mrow><munderover><mo>&sum;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover><mfenced>" +
                    ou +
                    "</mfenced></mrow>",
            );
            cN.add("<mo>&#x220F;</mo>");
            cN.add(
                "<munderover><mo>&#x220F;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover>",
            );
            cN.add(
                "<mrow><munderover><mo>&#x220F;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover><mfenced>" +
                    ou +
                    "</mfenced></mrow>",
            );
            cN.add("<mo>&#x2210;</mo>");
            cN.add(
                "<munderover><mo>&#x2210;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover>",
            );
            cN.add(
                "<mrow><munderover><mo>&#x2210;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover><mfenced>" +
                    ou +
                    "</mfenced></mrow>",
            );
            cN.add(
                "<mrow><munder><mo>&sum;</mo><mfrac linethickness='0'><mrow><mn>0</mn><mo>&lt;</mo><mi>i</mi><mo>&lt;</mo><mn>m</mn></mrow><mrow><mn>0</mn><mo>&lt;</mo><mi>j</mi><mo>&lt;</mo><mn>n</mn></mrow></mfrac></munder><mi>P</mi><mfenced><mi>i</mi><mi>j</mi></mfenced></mrow>",
            );
        }
        return cN;
    };
    n6.getLimList = function () {
        if (lw == null) {
            lw = new fM();
            var ou = cd.getEmptyMathMLElement();
            lw.add(
                "<munder><mi>lim</mi><mrow>" +
                    ou +
                    "<mo>&#x2192;</mo><mn>0</mn></mrow></munder>",
            );
            lw.add(
                "<munder><mi>lim</mi><mrow>" +
                    ou +
                    "<mo>&#x2192;</mo><msup><mn>0</mn><mo>&#x2212;</mo></msup></mrow></munder>",
            );
            lw.add(
                "<munder><mi>lim</mi><mrow>" +
                    ou +
                    "<mo>&#x2192;</mo><msup><mn>0</mn><mo>+</mo></msup></mrow></munder>",
            );
            lw.add(
                "<munder><mi>lim</mi><mrow>" +
                    ou +
                    "<mo>&#x2192;</mo><mn>&infin;</mn></mrow></munder>",
            );
            lw.add(
                "<mrow><munder><mi>lim</mi><mrow>" +
                    ou +
                    "<mo>&#x2192;</mo><mn>&infin;</mn></mrow></munder><mi>f</mi><mfenced>" +
                    ou +
                    "</mfenced><mo>=</mo><mn>0</mn></mrow>",
            );
        }
        return lw;
    };
    n6.getDerivList = function () {
        if (gd == null) {
            gd = new fM();
            var ou = cd.getEmptyMathMLElement();
            gd.add(
                "<mfrac><mi>d</mi><mrow><mi>d</mi>" + ou + "</mrow></mfrac>",
            );
            gd.add(
                "<mfrac><mo>&#x2202;</mo><mrow><mo>&#x2202;</mo>" +
                    ou +
                    "</mrow></mfrac>",
            );
            gd.add(
                "<mfrac><mo>&DifferentialD;</mo><mrow><mo>&DifferentialD;</mo>" +
                    ou +
                    "</mrow></mfrac>",
            );
            gd.add(
                "<mfrac><msup><mi>d</mi><mn>2</mn></msup><mrow><mi>d</mi><msup><mi>t</mi><mn>2</mn></msup></mrow></mfrac>",
            );
            gd.add(
                "<mfrac><msup><mo>&#x2202;</mo><mn>2</mn></msup><mrow><mo>&#x2202;</mo><msup><mi>t</mi><mn>2</mn></msup></mrow></mfrac>",
            );
            gd.add(
                "<mfrac><msup><mo>&DifferentialD;</mo><mn>2</mn></msup><mrow><mo>&DifferentialD;</mo><msup><mi>t</mi><mn>2</mn></msup></mrow></mfrac>",
            );
            gd.add(
                "<mrow><mfrac><mrow><mo>&#x2202;</mo><mi>f</mi></mrow><mrow><mo>&#x2202;</mo><mi>&#x3B8;</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mo>&#x2202;</mo><mi>f</mi></mrow><mrow><mo>&#x2202;</mo><mi>x</mi></mrow></mfrac><mfrac><mrow><mo>&#x2202;</mo><mi>x</mi></mrow><mrow><mo>&#x2202;</mo><mi>&#x3B8;</mi></mrow></mfrac><mo>+</mo><mfrac><mrow><mo>&#x2202;</mo><mi>f</mi></mrow><mrow><mo>&#x2202;</mo><mi>y</mi></mrow></mfrac><mfrac><mrow><mo>&#x2202;</mo><mi>y</mi></mrow><mrow><mo>&#x2202;</mo><mi>&#x3B8;</mi></mrow></mfrac></mrow>",
            );
        }
        return gd;
    };
    n6.getFenceList = function () {
        if (n5 == null) {
            n5 = new fM();
            var ou = cd.getEmptyMathMLElement();
            n5.add("<mfenced>" + ou + "</mfenced>");
            n5.add(
                "<mfenced open='&#x5B;' close='&#x5D;'>" + ou + "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x7B;' close='&#x7D;'>" + ou + "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x7C;' close='&#x7C;'>" + ou + "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2016;' close='&#x2016;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2980;' close='&#x2980;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2308;' close='&#x2309;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x230A;' close='&#x230B;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2772;' close='&#x2773;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x27E6;' close='&#x27E7;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x27E8;' close='&#x27E9;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x27EA;' close='&#x27EB;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x27EC;' close='&#x27ED;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x27EE;' close='&#x27EF;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2983;' close='&#x2984;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2985;' close='&#x2986;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2987;' close='&#x2988;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2989;' close='&#x298A;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x298B;' close='&#x298C;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x298D;' close='&#x2990;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x298F;' close='&#x298E;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2991;' close='&#x2992;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2993;' close='&#x2994;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2995;' close='&#x2996;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x2997;' close='&#x2998;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='&#x29FC;' close='&#x29FD;'>" +
                    ou +
                    "</mfenced>",
            );
            n5.add(
                "<mfenced open='{' close=''><mtable columnalign='left right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            n5.add(
                "<mfenced open='{' close=''><mtable columnalign='left right right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            n5.add(
                "<mfenced open='{' close=''><mtable columnalign='left right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            n5.add(
                "<mfenced open='{' close=''><mtable columnalign='left right right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
        }
        return n5;
    };
    n6.getTableList = function () {
        if (dY == null) {
            dY = new fM();
            var ou = cd.getEmptyMathMLElement();
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mtable editorSelected='true'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable>",
            );
            dY.add(
                "<mfenced open='{' close=''><mtable columnalign='left right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            dY.add(
                "<mfenced open='{' close=''><mtable columnalign='left right right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            dY.add(
                "<mfenced open='{' close=''><mtable columnalign='left right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            dY.add(
                "<mfenced open='{' close=''><mtable columnalign='left right right'><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
        }
        return dY;
    };
    n6.getFunList = function () {
        if (jw == null) {
            jw = new fM();
            var ou = cd.getEmptyMathMLElement();
            jw.add("<mrow><mi>n</mi><mo>!</mo></mrow>");
            jw.add("<mrow><mi>f</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>");
            jw.add("<mrow><mi>sin</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>sin</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>cos</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>cos</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>tan</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>tan</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>tg</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>tg</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>sec</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>sec</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>csc</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>csc</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>cot</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>cot</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>ctg</mi><mi>&#x3B8;</mi></mrow>");
            jw.add(
                "<mrow><mi>ctg</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
            );
            jw.add("<mrow><mi>ln</mi>" + ou + "</mrow>");
            jw.add("<mrow><mi>ln</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>");
            jw.add("<mrow><mi>log</mi>" + ou + "</mrow>");
            jw.add("<mrow><mi>log</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>");
            jw.add("<mrow><mi>min</mi>" + ou + "</mrow>");
            jw.add("<mrow><mi>min</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>");
            jw.add("<mrow><mi>max</mi>" + ou + "</mrow>");
            jw.add("<mrow><mi>max</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>");
            jw.add("<mrow><mi>gcd</mi>" + ou + "</mrow>");
            jw.add("<mrow><mi>gcd</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>");
            jw.add("<mrow><mi>lcm</mi>" + ou + "</mrow>");
            jw.add("<mrow><mi>lcm</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>");
        }
        return jw;
    };
    n6.getMatrixList = function () {
        if (hX == null) {
            hX = new fM();
            var ou = cd.getEmptyMathMLElement();
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='|' close='|'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='||' close='||'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='(' close=')'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='{' close='}'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
            hX.add(
                "<mfenced open='[' close=']'><mtable><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr><mtr><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd><mtd>" +
                    ou +
                    "</mtd></mtr></mtable></mfenced>",
            );
        }
        return hX;
    };
    n6.getAccentList = function () {
        if (hN == null) {
            hN = new fM();
            var ou = cd.getEmptyMathMLElement();
            hN.add("<msup>" + ou + "<mo>&#x2032;</mo></msup>");
            hN.add("<msup>" + ou + "<mo>&#x2033;</mo></msup>");
            hN.add("<msup>" + ou + "<mo>&#x2034;</mo></msup>");
            hN.add("<mover>" + ou + "<mo>&#x2D9;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#xA8;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x20DB;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x20DC;</mo></mover>");
            hN.add("<msup>" + ou + "<mo>&#x27;</mo></msup>");
            hN.add("<msup>" + ou + "<mo>&#x2CA;</mo></msup>");
            hN.add("<msup>" + ou + "<mo>&#x2DD;</mo></msup>");
            hN.add("<msup>" + ou + "<mo>&#x2CB;</mo></msup>");
            hN.add("<mover>" + ou + "<mo>&#x2DA;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x203E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2190;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2192;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2194;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x219A;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x219B;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x219C;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x219D;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x219E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21A0;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21A2;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21A3;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21A4;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21A6;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21A9;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21AA;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21AB;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21AC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21AD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21AE;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21B6;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21B7;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21B9;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21BC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21BD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21C0;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21C1;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21C4;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21C6;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21C7;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21C9;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21CB;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21CC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21CD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21CE;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21CF;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21D0;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21D2;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21D4;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21DA;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21DB;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21DC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21DD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21E0;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21E2;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21E4;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21E5;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21E6;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21E8;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21F0;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21F4;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21F6;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21F7;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21F8;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21F9;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21FA;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21FB;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21FC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21FD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21FE;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x21FF;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23B4;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23B5;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23DC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23DD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23DE;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23DF;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23E0;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x23E1;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27F5;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27F6;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27F7;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27F8;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27F9;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27FA;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27FB;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27FC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27FD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27FE;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x27FF;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2900;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2901;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2902;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2903;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2904;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2905;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2906;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2907;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x290C;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x290D;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x290E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x290F;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2910;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2911;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2914;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2915;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2916;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2917;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2918;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2919;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x291A;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x291B;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x291C;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x291D;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x291E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x291F;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2920;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2933;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x293A;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x293B;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x293C;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x293D;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2942;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2943;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2944;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2945;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2946;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2947;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2948;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x294A;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x294B;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x294E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2950;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2952;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2953;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x295A;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x295B;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x295E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x295F;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2962;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2964;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2966;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2967;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2968;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2969;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x296A;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x296B;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x296C;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x296D;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2970;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2971;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2972;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2973;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2974;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2975;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2976;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2977;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2978;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2979;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x297A;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x297B;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x297C;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x297D;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2C6;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2C7;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2C9;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2CD;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2D8;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2DC;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x2F7;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x302;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x30C;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x311;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x5E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x5F;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#x7E;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#xAF;</mo></mover>");
            hN.add("<mover>" + ou + "<mo>&#xB8;</mo></mover>");
        }
        return hN;
    };
    n6.getEncloseList = function () {
        if (kE == null) {
            kE = new fM();
            var ou = cd.getEmptyMathMLElement();
            kE.add("<menclose notation='longdiv'>" + ou + "</menclose>");
            kE.add("<menclose notation='actuarial'>" + ou + "</menclose>");
            kE.add("<menclose notation='radical'>" + ou + "</menclose>");
            kE.add("<menclose notation='box'>" + ou + "</menclose>");
            kE.add("<menclose notation='roundedbox'>" + ou + "</menclose>");
            kE.add("<menclose notation='circle'>" + ou + "</menclose>");
            kE.add("<menclose notation='left'>" + ou + "</menclose>");
            kE.add("<menclose notation='right'>" + ou + "</menclose>");
            kE.add("<menclose notation='top'>" + ou + "</menclose>");
            kE.add("<menclose notation='bottom'>" + ou + "</menclose>");
            kE.add(
                "<menclose notation='updiagonalstrike'>" + ou + "</menclose>",
            );
            kE.add(
                "<menclose notation='downdiagonalstrike'>" + ou + "</menclose>",
            );
            kE.add("<menclose notation='verticalstrike'>" + ou + "</menclose>");
            kE.add(
                "<menclose notation='horizontalstrike'>" + ou + "</menclose>",
            );
            kE.add("<menclose notation='madruwb'>" + ou + "</menclose>");
        }
        return kE;
    };
    n6.getNewLineList = function () {
        if (cf == null) {
            cf = new fM();
            var ou = cd.getEmptyMathMLElement();
            cf.add(
                "<mspace linebreak='newline'></mspace>" +
                    cd.getEmptyMathMLElement(),
            );
            cf.add("<mspace width='2em' height='1em'></mspace>");
            cf.add("<mglyph src='/InsertPicture.png'></mglyph>");
            cf.add("<merror>" + ou + "</merror>");
            cf.add("<mphantom>" + ou + "</mphantom>");
            cf.add(
                "<mpadded lspace='0.2em' voffset='0.2em'>" + ou + "</mpadded>",
            );
        }
        return cf;
    };
    n6.getUnicodesList = function () {
        if (ld == null) {
            ld = new fM();
            ld.add("0000:21-7F");
            ld.add("0080:A1-FF");
            ld.add("0100:100-17F");
            ld.add("0180:180-24F");
            ld.add("0250:250-2AF");
            ld.add("02B0:2B0-2E9,2EC-2EE,2F3,2F7");
            ld.add("0300:300-34E,351-353,357-35A,35C-362");
            ld.add("0370:370-377,37A-37E,384-38A,38C,38E-3A1,3A3-3FF");
            ld.add("0400:400-4FF");
            ld.add("0500:500-525");
            ld.add("0530:531-556,559-55F,561-587,589-58A");
            ld.add("0590:5B0-5C3,5C6-5C7,5D0-5EA,5F0-5F4");
            ld.add(
                "0600:606-607,609-60A,615,61B,61F,621-63A,640-655,657,65A,660-671,674,679-6C3,6C6,6CC,6CE,6D2-6D5,6E4,6F0-6F9",
            );
            ld.add("07C0:7C0-7E7,7EB-7F5,7F8-7FA");
            ld.add(
                "0E80:E81-E82,E84,E87-E88,E8A,E8D,E94-E97,E99-E9F,EA1-EA3,EA5,EA7,EAA-EAB,EAD-EB9,EBB-EBD,EC0-EC4,EC6,EC8-ECD,ED0-ED9,EDC-EDD",
            );
            ld.add("10A0:10A0-10C5,10D0-10FC");
            ld.add("13A0:13A0-13F4");
            ld.add(
                "1400:1401-1407,1409-141B,141D-1435,1437-144A,144C-1452,1454-14BD,14C0-14EA,14EC-1507,1510-153E,1540-1550,1552-156A,1574-1585,158A-1596,15A0-15AF,15DE,15E1,1646-1647,166E-1676",
            );
            ld.add("1680:1680-169C");
            ld.add(
                "1D00:1D00-1D14,1D16-1D23,1D26-1D2E,1D30-1D5B,1D5D-1D6A,1D77-1D78,1D7B,1D7D",
            );
            ld.add("1D80:1D81,1D84-1D85,1D8A,1D8D-1D8E,1D98,1D9B-1DBF");
            ld.add("1DC0:1DC4-1DC9");
            ld.add("1E00:1E00-1EFB");
            ld.add(
                "1F00:1F00-1F15,1F18-1F1D,1F20-1F45,1F48-1F4D,1F50-1F57,1F59,1F5B,1F5D,1F5F-1F7D,1F80-1FB4,1FB6-1FC4,1FC6-1FD3,1FD6-1FDB,1FDD-1FEF,1FF2-1FF4,1FF6-1FFE",
            );
            ld.add("2000:2010-2027,2030-205E");
            ld.add("2070:2070-2071,2074-208E,2090-209C");
            ld.add("20A0:20A0-20B5,20B8-20B9");
            ld.add("20D0:20D0-20F0");
            ld.add("2100:2100-214B,214D-214E");
            ld.add("2150:2150-2185,2189");
            ld.add("2190:2190-21FF");
            ld.add("2200:2200-22FF");
            ld.add(
                "2300:2300-2313,2315-231A,231C-232E,2332,2336,233D,233F-2340,2353,2370,2373-2375,237A,237C-237D,2387,2393-2394,239B-23AF,23B2-23B7,23CE-23D0,23DC-23E8",
            );
            ld.add("2460:2460-2473,24B6-24EA");
            ld.add("2500:2500-257F");
            ld.add("2580:2580-259F");
            ld.add("25A0:25A0-25FF");
            ld.add("2600:2600-269C,26A0-26B8,26C0-26C3,26E2");
            ld.add(
                "2700:2701-2704,2706-2709,270C-2727,2729-274B,274D,274F-2752,2756,2758-275E,2761-2794,2798-27AF,27B1-27BE",
            );
            ld.add("27C0:27C0-27EF");
            ld.add("27F0:27F0-27FF");
            ld.add("2800:2801-28FF");
            ld.add("2900:2900-297F");
            ld.add("2980:2980-29FF");
            ld.add("2A00:2A00-2AFF");
            ld.add("2B00:2B00-2B4C,2B50-2B54");
            ld.add("2C60:2C60-2C77,2C79-2C7F");
            ld.add("2D30:2D30-2D65,2D6F");
            ld.add("2E00:2E18,2E22-2E25,2E2E");
            ld.add("3000:3001-3003,3005-3015,3018-3019,301C,3030,3033-3035");
            ld.add("3040:3041-3096,309B-309E");
            ld.add("30A0:30A1-30FE");
            ld.add("4DC0:4DC0-4DFF");
            ld.add(
                "4E00:4E00-4E05,4E07-4E0E,4E10-4E12,4E14-4E19,4E1E-4E1F,4E21,4E23-4E24,4E26,4E28,4E2A-4E2B,4E2D-4E32,4E35-4E36,4E38-4E39,4E3B-4E3C,4E3F-4E45,4E47,4E4B,4E4D-4E4F,4E51,4E55-4E5A,4E5C-4E5F,4E62-4E63,4E68-4E69,4E71,4E73-4E75,4E79,4E7E-4E80,4E82,4E85-4E86,4E88-4E8E,4E91-4E92,4E94-4E99,4E9B-4EA2,4EA4-4EA6,4EA8,4EAB-4EB0,4EB3,4EB6,4EB9-4EBA,4EC0-4EC4,4EC6-4EC7,4ECA-4ECB,4ECD-4ED0,4ED4-4EDB,4EDD-4EE5,4EE8,4EED-4EF3,4EF5-4EF7,4EFB-4F03,4F08-4F12,4F15-4F17,4F19-4F1A,4F1C-4F1D,4F2E-4F31,4F33-4F3E,4F40,4F42-4F43,4F46-4F49,4F4B-4F60,4F63,4F69-4F6A,4F6C,4F6E-4F71,4F73,4F75-4F7F,4F81-4F86,4F88-4F94,4F96-4F9B,4F9D-4FA1,4FAB,4FAD-4FAF,4FB2,4FB5-4FB7,4FB9,4FBB-4FC6,4FC8-4FD2,4FD4,4FD7-4FD8,4FDA-4FDD,4FDF-4FE5,4FEE-4FF0,4FF2-4FF3,4FF5-4FF6,4FF8,4FFA,4FFC-5001,5004-5007,5009-5014,5016-501F,5021-502E,5030,5032-5033,5035-5036,5039,503B,5040-5043,5045-504A,504C,504E-5053,5055-5057,5059-505A,505C,505F-5060,5062-5063,5065-5067,506A,506C-506D,5070-5072,5074-5076,5078,507D,5080-5081,5083-5086,508A,508D-5094,5096,5098-509C,509E-50A2,50AA,50AC-50AD,50AF-50B0,50B2-50B5,50B7,50B9-50BA,50BD-50BE,50C0,50C2-50C5,50C7,50C9-50CA,50CC-50D1,50D3-50D6,50D8,50DA,50DC-50DF,50E2-50E9,50ED-50EF,50F1-50F2,50F4-50F6,50F9-50FB,50FE,5100-5104,5106-5109,510B-510E,5110,5112,5114-511F,5121,5123,5127-5128,512A,512C-512D,512F,5131-5135,5137-513C,513F-5150,5152-5155,5157-5158,515A,515C,515F,5162,5164-5166,5168-516E,5171,5175-5178,517C,517E,5180,5182-5186,5189-5193,5195-5199,519D,51A0-51A6,51A8-51AD,51B0-51B8,51BA,51BC-51BF,51C2,51C4-51C6,51C8-51C9,51CB-51CD,51CF,51D1-51D3,51D5-51D6,51D8,51DB-51DE,51E0-51E2,51E5-51E7,51E9-51EA,51EC-51EE,51F0-51FA,51FD-51FE,5200-5208,520A-520B,5211-5218,521D,5222,5224-5225,5227-522A,522E,5230-5233,5235-523C,5243-5245,5247,5249-524D,524F,5254-5258,525A-525C,525E-5261,5263-5266,5269-526A,526E-5275,5277-5279,527D,527F-5280,5282-5283,5285,5287-528A,528C-528D,5291-5298,529A-529C,529F-52A0,52A3-52A7,52A9-52AD,52AF-52B1,52B4-52BE,52C0-52C1,52C3-52C9,52CC-52CD,52CF,52D1-52D2,52D4-52D9,52DB-52EA,52EC,52F0-52FA,52FE-5303,5305-5308,530A-530D,530F-5311,5313,5315-5321,5323-5325,5327-532D,532F-5333,5335,5338-5343,5345-534D,5351-5354,5357-535C,535E,5360-5361,5363,5365-5366,5369,536C-5375,5377-5379,537B,537E-537F,5382-5384,5387-5388,538E,5393-5394,5396,5398-539A,539D,539F-53A1,53A4-53A6,53A8-53AB,53AD-53B0,53B2-53B8,53BA-53BB,53BD,53C0,53C2-53C3,53C5,53C8-53CF,53D2-53D7,53D9-53DB,53DD-53F3,53F5-53F8,53FA,5401-5404,5408-5411,5413,541A-541B,541D,541F-5421,5426-542F,5431,5434-5436,5438-5439,543B-543E,5440,5442-5444,5446-544A,544D-544F,5451,545E-545F,5462,5464,5466-546B,546D-546E,5470-5471,5473-5477,547B-547D,547F-5481,5483-5486,5488-5492,5495-5496,549C,549F,54A1-54A2,54A4-54AF,54B1-54B3,54B7-54C2,54C4,54C6-54CA,54CD-54CE,54D8,54E0-54E2,54E5-54E6,54E8-54EA,54EC-54EF,54F2,54F6,54FA,54FC-5501,5504-5509,550C-5510,5514-5516,552A-552B,552E-552F,5531-5533,5535-5536,5538-5539,553B-553E,5540-5541,5544-5547,5549-554A,554C-554D,554F-5551,5553,5556-5558,555A-555E,5560-5561,5563-5564,5566,557B-557C,557E-5584,5586-558B,558E-558F,5591-5594,5597-559A,559C-559F,55A3-55A4,55A7-55AE,55B0,55B2,55B6,55BF,55C1,55C3-55C7,55C9,55CB-55CC,55CE,55D1-55D4,55D7-55D8,55DA-55DC,55DE-55DF,55E2-55E4,55E9,55F6-55F7,55F9,55FD-55FF,5605-5606,5608-560A,560D-5612,5614,5616-5619,561B,5629,562C,562F-5639,563B-563D,563F-5644,5646,5649,564B-5650,5654,565B,565E,5660-5664,5666,5668-566D,566F,5671-5672,5674-5675,5678,567A,5680,5684-5688,568A-568C,568F,5694-5695,5699-569A,569D-56A0,56A2,56A5-56A9,56AB-56AE,56B1,56B3-56B4,56B6-56B7,56BC,56BE,56C0-56C3,56C5,56C8-56D1,56D3,56D7-56E1,56E3-56E8,56EB,56ED-56EE,56F0-56F3,56F6-56F7,56F9-56FA,56FD,56FF-5704,5707-570D,5711-5713,5715-5716,5718,571A-571D,571F-5720,5722-572A,572C-5730,5733-5734,5737-5738,573B,573D-5740,5742,5745-5747,574A,574C-5752,5759,5761-5762,5764-576B,576D-5771,5773-5775,5777,5779-577C,577E-577F,5781-5783,5788-5789,578B-578C,5793-5795,5797,5799-579A,579C-57A4,57A7-57AA,57AC,57B0,57B3,57B8,57BD,57C0,57C3,57C6-57C8,57CB-57CC,57CE-57CF,57D2-57D6,57DC-57E1,57E3-57E4,57E6-57E7,57E9,57ED,57F0,57F4-57FA,57FC-57FF,5802-5806,5808-580D,5815,5819,581B,581D-5821,5824,5826-5827,582A,582D,582F-5832,5834-5835,5839-583A,583D,583F-5841,5849-584D,584F-5852,5854-5855,5857-585A,585E-585F,5861-5862,5864,5867-5869,586B,5870,5872,5875,5878-5879,587C,587E-5881,5883,5885,5887-588A,588C-588D,588F-5890,5893-5894,5896-5897,589C-58A2,58A6,58A8-58A9,58AB,58AE,58B1-58B3,58B8-58BC,58BE,58C1-58C2,58C4-58C5,58C7-58C8,58CA,58CC-58CE,58D0-58DA,58DC-58DF,58E1-58E2,58E4-58E5,58E9,58EB-58EC,58EE-58F3,58F7,58F9-58FD,5905-5906,5909-590C,590F-5910,5912-5916,5918-591D,5921-5925,5927-5933,5935-5938,593E-593F,5943-5944,5946-5949,594E-5955,5957-595B,595D-5963,5965,5967-596F,5972-5976,5978-5979,597B-597D,5981-5984,598A-598E,5992-5993,5995-5997,5999,599B,599D,599F,59A3-59A5,59A7-59A8,59AC-59B0,59B2-59B3,59B7,59B9-59BC,59BE,59C1,59C3-59C4,59C6,59C8-59CB,59CD,59D0-59D4,59D9-59DA,59DC-59DF,59E3-59E8,59EA-59EB,59EE-59EF,59F1-59F2,59F4,59F6-59F7,59FB,59FF-5A01,5A03-5A04,5A0C-5A0E,5A11-5A13,5A18,5A1A,5A1C,5A1E-5A20,5A23-5A25,5A27-5A2A,5A2D,5A2F-5A30,5A35-5A36,5A3C,5A40-5A41,5A44-5A49,5A4C,5A50,5A55,5A5A,5A5E,5A62-5A63,5A65-5A67,5A6A,5A6C-5A6D,5A77,5A7A-5A7B,5A7E-5A7F,5A8B,5A90,5A92-5A93,5A96,5A99-5A9C,5A9E-5AA0,5AA2,5AA7,5AAC,5AB1-5AB3,5AB5,5AB8,5ABA-5ABF,5AC1-5AC2,5AC4,5AC6,5AC8-5AC9,5ACB-5ACC,5ACF-5AD0,5AD6-5AD7,5ADA,5ADC,5AE0-5AE1,5AE3,5AE5-5AE6,5AE9-5AEA,5AEE,5AF5-5AF6,5AFA-5AFB,5AFD,5B00-5B01,5B08-5B09,5B0B-5B0C,5B16-5B17,5B19,5B1B,5B1D,5B21-5B22,5B25,5B2A,5B2C-5B2D,5B30,5B32,5B34,5B36,5B38,5B3E,5B40-5B41,5B43,5B45,5B4B-5B4C,5B50-5B52,5B54-5B58,5B5A-5B5F,5B63-5B66,5B68-5B69,5B6B,5B6E-5B71,5B73,5B75,5B78,5B7A,5B7C-5B81,5B83-5B91,5B93-5B9D,5B9F,5BA2-5BA6,5BA8-5BA9,5BAC-5BBA,5BBC,5BBF-5BC7,5BC9,5BCC-5BCD,5BCF-5BD0,5BD2-5BD4,5BD6-5BDB,5BDD-5BE2,5BE4-5BE9,5BEB-5BEC,5BEE-5BF1,5BF3-5BF6,5BF8,5BFA,5BFD-5BFF,5C01-5C02,5C04-5C0F,5C11,5C13,5C16-5C17,5C1A,5C1E-5C20,5C22-5C24,5C26,5C28-5C29,5C2B-5C2E,5C30-5C32,5C35-5C36,5C38-5C41,5C45-5C46,5C48,5C4A-5C4B,5C4D-5C51,5C53,5C55,5C59-5C5A,5C5C,5C5E,5C60-5C65,5C67-5C69,5C6C-5C71,5C74-5C76,5C79-5C7D,5C87-5C88,5C8A,5C8C,5C8F-5C92,5C94,5C9D,5C9F-5CA3,5CA6,5CA8-5CAC,5CB1-5CB8,5CBA-5CBC,5CBE,5CC5,5CC7,5CC9,5CCB,5CD2,5CD7,5CD9,5CDD,5CE0-5CE1,5CE8-5CEA,5CED-5CF2,5CF4-5CF6,5CFA-5CFB,5CFD,5D06-5D07,5D0D-5D0E,5D11-5D12,5D14-5D1B,5D1F,5D22-5D24,5D26-5D27,5D29,5D2B,5D31,5D34,5D39,5D3D,5D3F,5D42-5D43,5D46,5D48,5D4A-5D4C,5D4E,5D50-5D52,5D55,5D59,5D5C,5D5F-5D62,5D64,5D69-5D6A,5D6C-5D6D,5D6F-5D70,5D73,5D76,5D79-5D7A,5D7E-5D7F,5D81-5D84,5D87-5D88,5D8A-5D8C,5D90,5D92-5D95,5D99,5D9B,5D9D,5D9F-5DA0,5DA2,5DA7,5DAB-5DAC,5DAE,5DB0,5DB2,5DB4,5DB7-5DBA,5DBC-5DBD,5DC3,5DC7,5DC9,5DCB-5DCE,5DD0,5DD2-5DD3,5DD6,5DD8-5DD9,5DDB,5DDD-5DDE,5DE0-5DE1,5DE3-5DE9,5DEB,5DEE,5DF1-5DF5,5DF7-5DF9,5DFB,5DFD-5DFE,5E02-5E03,5E06-5E07,5E0B-5E0D,5E11-5E12,5E14-5E16,5E18-5E1B,5E1D,5E1F-5E20,5E25,5E28,5E2B,5E2D-5E30,5E32-5E33,5E35-5E38,5E3D-5E3E,5E40,5E43-5E45,5E47,5E49,5E4B-5E4C,5E4E,5E50-5E51,5E54-5E58,5E5B-5E5C,5E5E-5E5F,5E61-5E64,5E68,5E6A-5E6E,5E70,5E72-5E76,5E78-5E81,5E83-5E84,5E87,5E8A-5E8B,5E8E-5E8F,5E95-5E97,5E9A,5E9C,5EA0,5EA2,5EA4-5EA8,5EAA-5EAD,5EB1,5EB3,5EB5-5EB8,5EBD-5EBF,5EC1-5EC3,5EC6,5EC8-5ECC,5ECE-5ED6,5EDA-5EE3,5EE5,5EE8-5EE9,5EEB-5EEC,5EF0-5EF1,5EF3-5EF4,5EF6-5EF8,5EFA-5EFC,5EFE-5EFF,5F01-5F04,5F06-5F11,5F13-5F19,5F1B-5F1D,5F1F,5F21-5F29,5F2B-5F31,5F34-5F38,5F3B-5F41,5F44-5F45,5F47-5F48,5F4A,5F4C-5F4E,5F50-5F51,5F53-5F54,5F56-5F59,5F5B-5F5D,5F60-5F64,5F66-5F67,5F69-5F6D,5F6F-5F75,5F77-5F7A,5F7C-5F85,5F87-5F8D,5F8F-5F93,5F96-5F99,5F9C-5F9E,5FA0-5FA2,5FA4,5FA7-5FB1,5FB3-5FB4,5FB7-5FB9,5FBC-5FBD,5FC3-5FC5,5FC7-5FC9,5FCB-5FCD,5FD0-5FD4,5FD6-5FD9,5FDC-5FDE,5FE0-5FE2,5FE4,5FE8-5FF3,5FF5-5FF6,5FF8,5FFA-5FFD,5FFF,600D-6010,6012-601D,601F-6021,6024-602B,602D,602F,6031,6033,6035,603A,6040-6043,6046-604D,6050-6052,6054-6057,6059-605A,605D,605F-6065,6067-606D,606F-6071,6075,6077,607E-607F,6081-6086,6088-608E,6091-6098,609A-609B,609D-60A0,60A2-60AA,60B0-60B8,60BB-60BE,60C2,60C4-60CB,60CE-60CF,60D1,60D3-60D5,60D8-60E3,60E5,60E7-60E8,60F0-60FD,6100-6103,6106-610A,610C-6117,6119-611C,611E-6122,6127-6128,612A-612C,6130-6131,6134-6137,6139,613C-613F,6141-6142,6144-614E,6153,6155,6158-615A,615D-6160,6162-6163,6165,6167-6168,616B-616C,616E-6178,617B-617C,617E-6184,6187,618A-618B,618D-618E,6190-6194,6196-619A,619C-619D,619F-61A0,61A4-61A5,61A7-61AE,61B2,61B6,61B8-61BA,61BC,61BE,61C0-61C3,61C6-61D0,61D5,61DC-61DF,61E1-61E3,61E5-61E7,61E9,61EC-61ED,61EF,61F2,61F4,61F6-61F8,61FA,61FC-6201,6203-6204,6207-620A,620C-620E,6210-6216,621A-6223,6226-6227,6229-622B,622E-6230,6232-6234,6238-6239,623B,623D,623F-6244,6246-6249,624B-624E,6250-6256,6258,625A-625C,625E,6260,6263-6264,6268,626D-626F,6271,6273,6276,6279-627A,627C-6280,6282-6284,6289-628A,628D-6298,629B-629C,629E,62A6,62A8,62AB-62AC,62B1,62B3,62B5-62B7,62B9-62BF,62C2,62C4-62CA,62CC-62DD,62E0-62E1,62EA,62EC-62EF,62F1-62F7,62FC-62FF,6301-6304,6307-630D,6310-6311,6313,6316,6318-6319,631F,6327-632B,632D,632F,6335-6336,6339-633A,633C-633F,6341-6344,6346,6349-6350,6352-6355,6357-6358,635B-635C,6365-6369,636B-636E,6371-6372,6374-6378,637A-637D,637F-6380,6382-6384,6387-638A,638C,638E-6390,6392,6394-6396,6398-639B,639E-63AF,63B2,63B4-63B5,63BB,63BD-63BE,63C0-63C1,63C3-63C6,63C8-63C9,63CE-63D6,63DA-63DC,63E0-63E1,63E3,63E5,63E9-63EA,63EC,63EE,63F2-63F6,63F8-63FA,6409-640A,640F-6410,6412-6414,6416-6418,641C,641E,6420,6422,6424-6426,6428-642A,642C-642D,642F-6430,6434-6436,643A,643D-643F,6442,644B,644E-644F,6451-6454,6458,645A-645D,645F-6461,6463,6467,6469,646D,646F,6473-6474,6476,6478,647A-647B,647D,6483,6485,6487-6488,648F-6493,6495,6498-649B,649D-649F,64A1,64A3-64A6,64A8-64A9,64AB-64AE,64B0,64B2-64B3,64B9,64BB-64BF,64C1-64C2,64C4-64C5,64C7,64C9-64CE,64D0-64D2,64D4-64D5,64D7-64D8,64DA,64E0-64E7,64E9-64EA,64EC-64ED,64EF-64F2,64F4-64F7,64FA-64FB,64FD-6501,6504-6505,6508-650A,6513-6514,6516,6518-6519,651B-651F,6522-6524,6526,6529-652C,652E-652F,6531,6534-653F,6543,6545,6547-6549,654D-6552,6554-6559,655D-6560,6562-6563,6566-6567,656B-656C,6570,6572,6574-6575,6577-6578,657A,657D,6581-6583,6585,6587-658A,658C,658E,6590-6592,6595,6597-6599,659B-659D,659F-65A1,65A3-65A7,65AB-65B0,65B2-65B4,65B7,65B9,65BC-65BD,65BF,65C1-65C6,65C8-65C9,65CB-65CC,65CE-65D0,65D2,65D4,65D6-65D9,65DB,65DF-65E2,65E5-65E9,65EC-65ED,65F0-65F2,65F4-65F5,65F9-65FB,65FE-65FF,6602-6604,6606-660A,660C-660F,6611-6616,661C-6631,6633-6637,6639,663C,663F-6646,6649-664C,664E-664F,6651-6652,6657-6659,665B-6662,6664-666C,666E-6670,6673-667C,667E-6681,6683-6684,6687-6689,668B-668E,6690-6692,6696-669D,669F-66A0,66A2,66A4,66A6,66AB,66AD-66AE,66B1-66B2,66B4-66B5,66B8-66B9,66BB-66BC,66BE-66C4,66C7-66C9,66CC,66CE-66CF,66D4,66D6,66D9-66DD,66DF-66E0,66E6,66E8-66E9,66EB-66EC,66EE,66F0,66F2-66F5,66F7-66FF,6707-6709,670D-670F,6713-6717,6719,671B-6720,6722,6726-6728,672A-672E,6731,6733-6734,6736-6738,673A,673D-673F,6741,6745-6749,674C,674E-6751,6753-6756,6759,675C-6766,676A,676C-6777,677B-677C,677E-677F,6781,6784-6785,6787,6789,678B-678C,678E-6791,6793,6795-679D,67A0-67A2,67A6,67A9,67AF-67B9,67BB-67BD,67C0-67C6,67C8-67CA,67CE-67D4,67D7-67DA,67DC-67DE,67E1-67E2,67E4,67E6-67E7,67E9,67EC,67EE-67F7,67F9,67FB,67FE-67FF,6801-6804,6813-6814,6816-6817,6819,681D-681F,6821-6822,6827-682D,682F-6834,6838-6839,683B-683D,683F-6846,6848,684A,684C-684E,6850-6855,6857-6859,685B-685D,685F,6863,6867,686B,686E-6872,6874-6877,6879-687C,687E-687F,6881-6886,6888,688D,688F,6893-6894,6896-6898,689A-689D,689F-68A3,68A5-68AA,68AD-68B3,68B5-68B6,68B9-68BC,68C4-68C6,68C8-68CD,68CF-68DA,68DC-68DD,68DF-68E1,68E3,68E5,68E7-68E8,68EA-68F2,68F5-68F6,68F9-68FD,6900-6901,6904-6906,6908-6913,6916-6917,6919-691C,6921-6923,6925-6926,6928,692A,6930-6931,6933-6936,6938-6939,693B,693D,693F,6942,6945,6949-694A,694E,6953-6955,6957,6959-695E,6960-6966,6968-6975,6977-6982,698A,698D-698E,6991-6992,6994-6996,6998,699B-699C,69A0-69A1,69A5-69A8,69AB,69AD-69AF,69B1-69B2,69B4,69B7-69B8,69BA-69BC,69BE-69BF,69C1,69C3,69C5,69C7-69C8,69CA-69CE,69D0-69D1,69D3,69D6-69D9,69DD-69DE,69E2,69E5,69E7-69E8,69EB,69ED-69EF,69F1-69F3,69F5,69F9,69FB,69FD-6A03,6A0A-6A0C,6A11-6A15,6A17,6A19-6A1B,6A1D-6A24,6A28-6A2B,6A2E,6A30,6A32,6A34-6A3B,6A3D-6A3F,6A44-6A4B,6A4E,6A50-6A52,6A55-6A56,6A58-6A59,6A5B,6A5F,6A61-6A62,6A64,6A66-6A67,6A6A-6A6B,6A71-6A73,6A78,6A7E-6A81,6A83-6A84,6A86-6A87,6A89,6A8B,6A8D-6A8E,6A90-6A91,6A97,6A9B-6AA0,6AA2-6AA3,6AA5,6AAA-6AAC,6AAE-6AB1,6AB3-6AB4,6AB8,6ABB,6ABD-6ABF,6AC1-6AC3,6AC6,6AC8-6AC9,6ACC,6AD0-6AD1,6AD3-6AD6,6ADA-6ADF,6AE2,6AE4,6AE7-6AE8,6AEA,6AEC,6AF0-6AF2,6AFA-6AFD,6B02-6B07,6B09-6B0A,6B0F-6B12,6B16-6B17,6B1B,6B1D-6B21,6B23-6B24,6B27-6B28,6B2B-6B2C,6B2F,6B32,6B35-6B3B,6B3D-6B3F,6B43,6B46-6B47,6B49-6B4A,6B4C-6B4E,6B50,6B52-6B54,6B56,6B58-6B59,6B5B,6B5D,6B5F-6B64,6B66-6B67,6B69-6B6B,6B6E-6B70,6B73-6B75,6B78-6B79,6B7B,6B7D-6B80,6B82-6B86,6B89-6B8B,6B8D,6B95-6B98,6B9B,6B9E-6BA0,6BA2-6BA4,6BA8-6BB5,6BB7-6BC0,6BC3-6BC6,6BC9,6BCB-6BCE,6BD2-6BD4,6BD6,6BD8,6BDA-6BDB,6BDF,6BE1,6BE3,6BE6-6BE7,6BEB-6BEC,6BEE-6BEF,6BF1,6BF3,6BF7,6BF9,6BFF,6C04-6C05,6C08-6C09,6C0D-6C14,6C17,6C19,6C1B,6C1F,6C23-6C24,6C26-6C28,6C2C,6C2E,6C33-6C38,6C3A-6C3B,6C3E-6C42,6C4A-6C4B,6C4D-6C50,6C52,6C54-6C55,6C57,6C59-6C60,6C62,6C67-6C68,6C6A-6C6B,6C6D,6C6F-6C70,6C72-6C74,6C76,6C78-6C7B,6C7D-6C7E,6C81-6C83,6C85-6C89,6C8C-6C8D,6C90,6C92-6C9C,6C9F,6CA1-6CA2,6CAB,6CAE,6CB0-6CB4,6CB8-6CBF,6CC1-6CC2,6CC4-6CC6,6CC9-6CCA,6CCC-6CCD,6CCF-6CD7,6CD9-6CDD,6CE0-6CE3,6CE5,6CE7-6CEC,6CEE-6CF4,6D0A-6D0C,6D0E-6D0F,6D11-6D13,6D17,6D19-6D1B,6D1E-6D1F,6D25-6D2B,6D2E-6D2F,6D31-6D33,6D35-6D36,6D38-6D39,6D3B-6D3F,6D41,6D44-6D45,6D57,6D59-6D5A,6D5C,6D5E-6D5F,6D61,6D63-6D67,6D69-6D6A,6D6C,6D6E-6D70,6D74,6D77-6D79,6D7C,6D82,6D85,6D87-6D88,6D8C,6D8E,6D91-6D99,6D9B-6D9C,6DAA,6DAC,6DAF,6DB2,6DB4-6DB5,6DB7-6DB9,6DBC-6DBD,6DBF-6DC0,6DC4-6DC8,6DCA-6DCC,6DCE-6DCF,6DD1-6DD2,6DD5-6DD6,6DD8-6DD9,6DDB,6DDD-6DE2,6DE4-6DE6,6DE8-6DEC,6DEE-6DFC,6E04-6E05,6E07-6E0B,6E13,6E15,6E19-6E1B,6E1D-6E27,6E29,6E2B-6E2F,6E32,6E36,6E38-6E3C,6E3E,6E43-6E45,6E48-6E4B,6E4D-6E4F,6E51-6E54,6E56-6E58,6E5B-6E5F,6E62-6E63,6E67-6E68,6E6B,6E6E-6E6F,6E72-6E73,6E76,6E7B,6E7D-6E80,6E82,6E8C-6E8D,6E8F-6E90,6E93,6E96,6E98-6E99,6E9C-6E9D,6E9F-6EA0,6EA2,6EA5,6EA7,6EAA,6EAD-6EAF,6EB1-6EB3,6EB6-6EB7,6EBA-6EBB,6EBD,6EBF-6EC5,6EC7-6ECF,6ED1,6ED3-6ED5,6EDD-6EDE,6EEB-6EEF,6EF2,6EF4,6EF7-6EF9,6EFB,6EFD-6EFF,6F01-6F02,6F08-6F0A,6F0C-6F0D,6F11,6F13-6F16,6F18,6F1A-6F1B,6F20,6F22-6F23,6F26,6F29-6F2D,6F2F-6F33,6F36,6F38,6F3B-6F3C,6F3E-6F3F,6F41,6F45,6F4F,6F51-6F54,6F57-6F5F,6F61-6F62,6F64,6F66,6F68,6F6C-6F70,6F74,6F78,6F7A,6F7C-6F7E,6F80-6F84,6F86-6F88,6F8B-6F8E,6F90-6F94,6F96-6F97,6F9A,6F9F-6FA1,6FA3-6FA8,6FAA,6FAE-6FB1,6FB3,6FB5-6FB6,6FB9,6FBC,6FC0-6FC3,6FC5-6FC8,6FCA,6FD4-6FD5,6FD8,6FDA-6FDB,6FDE-6FE1,6FE4,6FE8-6FE9,6FEB-6FEC,6FEE-6FF1,6FF3,6FF5-6FF6,6FF9-6FFA,6FFC-6FFE,7000-7001,7005-7007,7011,7015,7017-7018,701A-701B,701D-7020,7023,7026-7028,702C,702F-7030,7032,7034,7037,7039,703C,703E,7043-7044,7048-704C,704E,7051,7054-7055,7058,705D-705E,7063-7065,706B-706C,706E-7070,7075-7076,7078,707C-707E,7081,7085-7086,7089-708A,708E,7092,7094-7099,709B,70A4,70AB-70B1,70B3-70B4,70B7-70BB,70C8,70CA-70CB,70CF,70D1,70D3-70D6,70D8-70D9,70DC-70DD,70DF,70E4,70F1,70F9-70FA,70FD,7103-7107,710B-710C,7114,7119-711A,711C,711E,7120-7121,7126,712B,712D,712F-7131,7136,7138,713C,7141,7145-7147,7149-714C,714E,7150,7152,7155-7157,7159-715A,715C,715E,7160,7162,7164-7169,716C,716E,7179,717D,7180,7184-7185,7187-7188,718A,718C,718F,7192,7194-7195,7199-719B,719F-71A0,71A2,71A8,71AC,71AF-71B3,71B9-71BA,71BE-71C1,71C3-71C4,71C8-71C9,71CB-71CC,71CE,71D0,71D2-71D7,71D9-71DA,71DC,71DF-71E0,71E5-71E7,71EC-71EE,71F5,71F8-71F9,71FB-71FC,71FE-71FF,7206-7209,7210,7213,7217,721A-721B,721D,721F,7224,7228,722A-722D,722F-7230,7232,7234-7236,7238-7243,7245-7248,724B-724C,724E-7250,7252-7253,7255-7256,7258-7263,7267-7269,726B,726E-726F,7271-7272,7274,7277-7279,727B-7282,7284,7287,7289,728D-728E,7292-7293,7296,729B,72A0,72A2,72A7-72A8,72AC-72AF,72B1-72B2,72B4,72B6,72B9,72BE,72C1-72C4,72C6-72C7,72C9,72CC,72CE,72D0,72D2,72D5-72D9,72DB,72DF-72E2,72E5,72E9,72EC-72ED,72F3-72F4,72F7-72FE,7304-7305,730A-730B,7312-7313,7316-7319,731B-731F,7322,7324-7325,7327-732C,732E-732F,7331-7332,7334-7337,733A-733B,733D-733F,7343-7345,734D-7350,7352,7356-7358,735D-7360,7363,7366-736C,736E-7372,7375,7377-737C,7380-7381,7383-7387,7389,738B,738E,7390,7393,7395-7398,739C,739E-73A0,73A2,73A5-73A6,73A9-73AB,73AD,73B2-73B3,73B5,73B7,73B9,73BB-73BD,73BF-73C0,73C2,73C5-73C6,73C8-73CF,73D2-73D3,73D6,73D9,73DD-73DE,73E0-73E1,73E3,73E5-73E7,73E9-73EA,73ED-73EE,73F1,73F4-73F5,73F7-73FB,73FD-7401,7403-7407,7409-740A,7411,741A-741B,7422,7424-7426,7428-7436,7439-743A,743F-7441,7443-7444,7446-7447,744B,744D,7451-7452,7455,7457,7459-7460,7462-7464,7466-746B,746D-7473,7476,747E,7480-7481,7483,7485-7487,7489,748B,748F-7492,7498-749A,749C,749E-74A3,74A6-74AB,74AE-74B2,74B5,74B9,74BB,74BD,74BF,74C8-74CA,74CC,74CF-74D0,74D3-74D4,74D8,74DA-74DC,74DE-74E0,74E2-74E4,74E6-74EB,74EE-74F2,74F4,74F6-74F8,74FA-74FC,74FF,7503-7506,750C-750E,7511-7513,7515-7518,751A,751C,751E-7521,7523-752C,752F-7533,7536-7540,7543-7544,7546-7552,7554,7557,7559-7562,7564-7567,7569-756B,756D,756F-7571,7573-7574,7576-757F,7581-7582,7585-7587,7589-758B,758E-7595,7599-759A,759C-759D,75A2-75A5,75AB,75B1-75B5,75B8-75BA,75BC-75C7,75CA,75CC-75CF,75D2,75D4-75D5,75D7-75D9,75DB-75DC,75DE-75E4,75E7,75E9,75EC,75EE-75F4,75F9-75FA,75FC,75FE-7604,7607-760D,7612-7613,7615-7616,7619,761B-7627,7629,762D,7630,7632-7635,7638-763C,7640-764C,7652,7655-7656,7658-7659,765C,765F,7661-7662,7664-7665,7667-766A,766C-7672,7674,7676,7678,767A-767E,7680-7688,768B-768E,7690,7693,7695-7696,7699-76A0,76A2-76A8,76AA,76AD-76AE,76B0,76B4,76B7-76BA,76BD,76BF,76C1-76C3,76C5-76C6,76C8-76CE,76D2,76D4,76D6-76D7,76D9,76DB-76DC,76DE-76E1,76E3-76E8,76EA,76EC,76EE,76F0-76F2,76F4,76F6,76F8-76F9,76FB-76FC,76FE,7700-7701,7706-770C,7712,7714-7715,7717,7719-771C,771E-7720,7722,7724-7726,7728-7729,772D-772F,7734-773A,773C-773E,7740,7742,7745-7747,774A,774D-774F,7752,7756-7757,775A-775C,775E-7768,776A-776C,7770,7772-7774,7779-777A,777D-7780,7784,778B-778E,7791,7794-7796,779A,779E-77A0,77A2,77A5,77A7,77AA,77AC-77B1,77B3,77B5-77B6,77B9,77BB-77BF,77C3,77C7,77C9,77CD,77D1-77D2,77D5,77D7,77D9-77DC,77DE-77E0,77E2-77E7,77E9-77EA,77EC-77F1,77F3-77F4,77F8,77FB-77FC,7805-7806,780C-780E,7811-7812,7814-7815,781D,7820-7823,7825-7827,782D-782E,7830,7832,7834-7835,7837,783A,783F,7843-7845,7847-7848,784C,784E,7852,785C-785E,7860-7861,7863-7864,7868,786A-786C,786E-786F,7872,7874,787A,787C,787E,7881,7886-7887,788A,788C-788F,7891,7893-7895,7897-7898,789A,789D-789F,78A1,78A3-78A4,78A7-78AA,78AC-78AD,78AF-78B3,78B5,78BA-78BF,78C1,78C5-78CC,78CE,78D0-78D6,78DA-78DB,78DF-78E1,78E4,78E6-78E8,78EA,78EC,78EF,78F2-78F4,78F6-78F7,78FA-78FB,78FD,78FF-7901,7906-7907,7910-7912,7919-791A,791C,791E-7920,7925-7927,7929-792D,7930-7931,7934-7935,793A-7941,7944-794B,794F-7951,7953-7958,795A-7960,7962,7965,7967-7969,796B,796D,7972,7977,7979-797C,797E-7981,7984-7985,798A-798F,7991,7993-7996,7998,799B-799D,79A1,79A6-79AB,79AE-79B1,79B3-79B4,79B8-79BB,79BD-79C2,79C4,79C7-79CB,79CF,79D1-79D2,79D4-79D6,79D8,79DA,79DD-79E7,79E9-79ED,79F0-79F1,79F8,79FB-79FC,7A02-7A03,7A07-7A0E,7A11,7A14-7A15,7A17-7A1C,7A1E-7A21,7A27,7A2B,7A2D-7A32,7A34-7A35,7A37-7A40,7A42-7A49,7A4C-7A50,7A55-7A57,7A59,7A5C-7A5D,7A5F-7A63,7A65,7A67,7A69-7A6B,7A6D,7A70,7A74-7A76,7A78-7A7A,7A7D-7A86,7A88,7A8A-7A8B,7A90-7A98,7A9E-7AA0,7AA3,7AA9-7AAA,7AAC,7AAE-7AB0,7AB3,7AB5-7AB6,7AB9-7ABC,7ABF,7AC3-7ACF,7AD1-7AD3,7AD5,7AD9-7ADD,7ADF-7AE3,7AE5-7AED,7AEF-7AF1,7AF4,7AF6,7AF8-7AFB,7AFD-7AFF,7B06-7B08,7B0A-7B0B,7B11,7B14,7B18-7B19,7B1B,7B1E-7B20,7B23,7B25-7B31,7B33-7B36,7B39,7B3D,7B3F-7B41,7B45-7B49,7B4B-7B52,7B54-7B56,7B5D,7B60,7B64-7B67,7B69-7B6A,7B6C-7B75,7B77,7B7A,7B84,7B86-7B87,7B89,7B8B,7B8D-7B92,7B94-7BA1,7BA5,7BAA,7BAC-7BAD,7BAF-7BB2,7BB4-7BB6,7BB8,7BBA-7BBD,7BC0-7BC2,7BC4-7BCC,7BCF,7BD4,7BD6-7BD7,7BD9-7BDB,7BDD,7BE0,7BE4-7BE6,7BE8-7BEA,7BED,7BF2-7BFA,7BFC,7BFE,7C00-7C04,7C06-7C07,7C0B-7C0F,7C11-7C14,7C17,7C19,7C1B,7C1F-7C21,7C23,7C25-7C28,7C2A-7C2C,7C31,7C33-7C34,7C36-7C3A,7C3D-7C40,7C43,7C46,7C4A,7C4C-7C4D,7C4F-7C56,7C58-7C61,7C63-7C65,7C67,7C69,7C6C-7C6E,7C70,7C72-7C73,7C75,7C79,7C7C-7C7E,7C81-7C83,7C86-7C87,7C89,7C8B,7C8D,7C8F-7C90,7C92,7C94-7C95,7C97-7C98,7C9B,7C9E-7CA2,7CA4-7CA8,7CAB,7CAD-7CAE,7CB0-7CB3,7CB6-7CB7,7CB9-7CC0,7CC2,7CC4-7CC5,7CC7-7CCA,7CCD-7CCF,7CD2-7CDA,7CDC-7CE0,7CE2,7CE6-7CE7,7CE9,7CEB,7CEF,7CF2,7CF4-7CF6,7CF8,7CFA-7CFB,7CFE,7D02-7D0B,7D0F-7D1E,7D20-7D23,7D26,7D2A-7D33,7D35,7D39-7D3A,7D3C-7D48,7D4B-7D51,7D53,7D56-7D57,7D59-7D5E,7D61-7D63,7D65-7D68,7D6A,7D6E,7D70-7D73,7D75-7D76,7D78-7D7B,7D7D,7D7F,7D81-7D83,7D85-7D86,7D88-7D89,7D8B-7D8D,7D8F,7D91,7D93,7D96-7D97,7D99-7DA0,7DA2-7DA3,7DA6-7DA7,7DAA-7DBB,7DBD-7DBF,7DC2-7DC7,7DCA-7DCF,7DD1-7DD2,7DD5-7DDA,7DDC-7DDE,7DE0-7DE2,7DE4-7DE6,7DE8-7DED,7DEF,7DF1-7DF2,7DF4-7DF6,7DF9-7DFB,7E00-7E01,7E04-7E05,7E08-7E0B,7E10-7E12,7E15,7E17,7E1B-7E23,7E26-7E28,7E2B-7E2F,7E31-7E33,7E35-7E37,7E39-7E3B,7E3D-7E3F,7E41,7E43-7E47,7E4A-7E4B,7E4D-7E4E,7E50,7E52,7E54-7E56,7E58-7E5A,7E5D-7E5F,7E61-7E62,7E65-7E67,7E69-7E6B,7E6D-7E70,7E73,7E78-7E79,7E7B-7E7F,7E81-7E83,7E86-7E8A,7E8C-7E96,7E98,7E9A-7E9E,7F36,7F38,7F3A-7F3F,7F43-7F45,7F47,7F4C-7F55,7F58,7F5B-7F5D,7F5F-7F61,7F63-7F6B,7F6D-7F6E,7F70-7F72,7F75,7F77-7F79,7F7D-7F80,7F82-7F83,7F85-7F88,7F8A-7F91,7F94,7F96-7F97,7F9A,7F9C-7F9E,7FA1-7FA4,7FA6,7FA8-7FAA,7FAD-7FAF,7FB2,7FB4,7FB6,7FB8-7FB9,7FBC-7FBD,7FBF-7FC1,7FC3,7FC5-7FC6,7FC8,7FCA,7FCC,7FCE-7FCF,7FD2,7FD4-7FD5,7FDB,7FDF-7FE1,7FE3,7FE5-7FE6,7FE8-7FE9,7FEB-7FEC,7FEE-7FF0,7FF2-7FF3,7FF9-8001,8003-8008,800A-8019,801C-8021,8024,8026,8028,802C,802E,8030,8033-8037,8039-8040,8044,8046,804A,8052,8056,8058,805A,805E-8062,8064,8066,8068,806D,806F-8077,8079,807D-807F,8081,8084-8089,808B-808C,808E,8093,8096,8098,809A-809E,80A1-80A2,80A5-80A7,80A9-80AD,80AF,80B1-80B2,80B4,80B8-80BA,80C3-80C4,80C6,80C8,80CC-80CF,80D2,80D4-80DB,80DD-80DE,80E0-80E1,80E4-80E5,80ED-80F4,80F6,80F8-80FA,80FC-80FE,8102-8103,8105-810B,8116-8118,811A-811C,811E,8120,8123-8124,8127,8129,812C,812F-8131,8133,8135,8139-813A,813C,813E,8145-8147,814A-814C,814E,8150-8155,8157,815F-8161,8165-8169,816B,816D-8171,8174,8177-817A,817F-8186,8188,818A-818B,818E-8190,8193,8195-8196,8198,819A-819E,81A0,81A2-81A4,81A8-81A9,81AE,81B0,81B2-81B5,81B8,81BA-81BB,81BD-81C0,81C2-81C3,81C5-81C6,81C8-81CB,81CD-81CF,81D1,81D3,81D5,81D7-81DB,81DD-81E1,81E3-81E5,81E7-81E8,81EA-81ED,81F0-81F6,81F8-8203,8207-820A,820C-8210,8212-8214,8216-821F,8221-8222,8228-822C,822E,8232-823A,8240,8243-8247,824B,824E-824F,8251,8256,8258-825A,825C-825D,825F-8260,8262-8264,8266-8268,826A-826B,826D-826F,8271-8272,8274,8276-8278,827B,827D-8281,8283-8284,8287,8289-828B,828D-828E,8291-8292,8294,8296,8298-829B,829D,829F-82A1,82A3-82B4,82B7-82BF,82C5-82C6,82D0-82D5,82D7,82D9-82DC,82DE-82E8,82EA-82EB,82ED,82EF,82F1,82F3-82F4,82F6-82F7,82F9-82FB,82FD-82FE,8300-830B,8316-8318,831B-831F,8321-8323,8328,832B-833A,833C-833D,8340,8342-8345,8347,8349-834A,834D-8358,8362,8370,8373,8375,8377-8378,837B-837D,837F-8380,8382,8384-8387,8389-838A,838D-838E,8392-8396,8398-83A0,83A2,83A6-83AD,83B1,83B5,83BD-83C1,83C5,83C7,83C9-83CA,83CC,83CE-83D1,83D3-83D4,83D6,83D8,83DC-83DD,83DF-83E0,83E8-83EB,83EF-83F2,83F4,83F6-83F9,83FB-83FD,8403-8404,8406-8407,840A-840F,8411,8413,8415,8419,8420,8422,8429-842A,842C,842F,8431,8435,8438-8439,843C-843D,8445-844A,844D-844F,8451-8452,8456-845C,8460-8467,8469-8471,8473-847A,847C-847D,8481-8482,8484-8485,848B,8490,8492-8495,8499,849C,849E-849F,84A1,84A6,84A8-84AA,84AD,84AF,84B1-84B2,84B4,84B8-84C2,84C4,84C6-84CD,84CF-84D1,84D3,84D6,84D9-84DA,84DC,84E7,84EA,84EC,84EE-84F2,84F4,84F7,84FA-84FD,84FF,8502-8503,8506-8507,8510-8511,8513-8515,8517-8518,851A,851C,851E-851F,8521-8527,852A-852D,852F,8532-8536,853D,853F-8541,8543,8546,8548-854B,854E-8553,8555-855A,855C-8564,8568-856B,856D,856F,8577,8579-857B,857D-8581,8584-858C,858F-8591,8593-8594,8597-8599,859B-859D,859F-85A0,85A2,85A4-85B0,85B4,85B6-85BA,85BC-85BF,85C1-85C2,85C7,85C9-85CB,85CD-85D0,85D5,85D8,85DA,85DC-85DD,85DF-85E0,85E4-85E6,85E8-85EA,85ED,85F3,85F6-85F7,85F9-85FC,85FE-85FF,8604-8607,860A-860B,860D-860E,8610-8613,8616-861B,861E,8621-8622,8627,8629,862D,862F-8630,8636,8638,863A,863C-863D,863F-8642,8646,864D-864E,8650,8652-865A,865C-8664,8667,8669,866B-866C,866F,8671,8675-8677,8679-867B,8688,868A-868D,8691,8693,8695-8696,8698,869A,869C,86A1,86A3-86A4,86A6-86AB,86AD,86AF-86B1,86B3-86B9,86BF-86C1,86C3-86C7,86C9,86CB,86CD-86CE,86D1-86D2,86D4-86D5,86D7,86D9-86DC,86DE-86E0,86E3-86E5,86E7,86E9,86EC-86EF,86F8-86FE,8702-870B,870D-8714,8718-871A,871C,871E-871F,8721,8723,8725,8728-8729,872E-872F,8731-8732,8734,8737,8739-8740,8743,8745,8749,874B-874E,8753,8755,8757-8759,875D,875F-8761,8763-8766,8768,876A,876E-876F,8771-8772,8774,8776,8778,877B,877F,8782-8789,878B-878D,8790,8793,8795,8797-8799,879E-87A0,87A2-87A3,87A7,87AB-87AF,87B1,87B3,87B5,87BA-87BB,87BD-87C1,87C4,87C6-87CB,87CE,87D0,87D2,87D5-87D6,87D9-87DA,87DC,87DF-87E0,87E2-87E4,87EA-87EB,87ED,87EF,87F1-87F3,87F6-87FB,87FE-87FF,8805-8807,8809-880B,880D-8816,8818-881C,881E-881F,8821-8823,8827-8828,882D-882E,8830-8832,8835-8836,8839-883C,8840-8846,8848-884E,8851-8853,8855-8864,8868-8869,886B,8870-8872,8875,8877,8879,887B,887D-8882,8888,888B,888D,8892,8896-889C,889E-88A0,88A2,88A4,88A8,88AA-88AB,88AE,88B0-88B1,88B4-88B5,88B7,88BA,88BD-88C5,88CA-88CF,88D1-88D5,88D8-88D9,88DB-88DF,88E1,88E7-88E8,88EF-88F5,88F7-88F9,88FC-88FE,8901-8902,8906-8907,890C-8910,8912-8913,8915-8916,8918-891A,891C-891E,8920,8925-8928,892A-892B,8930-8932,8935-8936,8938-893B,893E,8940-8946,8949,894C-894D,894F,8952,8956-8957,895A-895C,895E-8964,8966,896A-896B,896D-8970,8972-8975,8977,897A-897F,8981,8983,8986-898B,898D,898F-8990,8993-8998,899A-899C,899F-89A1,89A5-89A7,89A9-89AA,89AC,89AF-89B0,89B2-89B7,89BA,89BC-89BD,89BF-89C0,89D2,89D4-89D8,89DA,89DC-89DD,89E3,89E5-89E7,89E9,89EB,89ED,89F1,89F3-89F4,89F6,89F8-89F9,89FD,89FF,8A02-8A05,8A07-8A08,8A0E-8A18,8A1B,8A1D-8A20,8A22-8A26,8A2A-8A2D,8A2F,8A31,8A33-8A37,8A3A-8A3E,8A40-8A41,8A43,8A45-8A49,8A4D-8A4E,8A50-8A58,8A5B-8A5E,8A60-8A63,8A65-8A67,8A69,8A6B-8A6E,8A70-8A73,8A75-8A77,8A79-8A7C,8A7E-8A80,8A82-8A87,8A89,8A8B-8A8D,8A8F-8A93,8A95-8A9A,8A9E-8AA1,8AA3-8AA9,8AAC-8AB0,8AB2-8AB3,8AB6-8AB7,8AB9,8ABB-8ABC,8ABE-8ABF,8AC2-8AC4,8AC6-8ACD,8ACF,8AD1-8AD7,8ADA-8AE2,8AE4,8AE6-8AE7,8AEB-8AEE,8AF0-8AF1,8AF3-8AF8,8AFA,8AFC,8AFE-8B02,8B04-8B07,8B0A-8B0C,8B10-8B11,8B14,8B16-8B17,8B19-8B21,8B26,8B28,8B2B-8B2D,8B30,8B33,8B37,8B39,8B3C,8B3E,8B41-8B46,8B48-8B49,8B4C-8B4F,8B52-8B54,8B56,8B58-8B5C,8B5E-8B5F,8B63,8B66,8B6B-8B6D,8B6F-8B72,8B74,8B76-8B79,8B7C-8B81,8B83-8B85,8B8A-8B90,8B92-8B96,8B99-8B9A,8B9C,8B9E-8B9F,8C37-8C3A,8C3D-8C3F,8C41,8C45-8C4C,8C4E-8C51,8C53-8C55,8C57-8C5B,8C5D,8C61-8C64,8C66,8C68-8C6D,8C73,8C75-8C76,8C78-8C7C,8C7E,8C82,8C85-8C87,8C89-8C8E,8C90,8C92-8C94,8C98-8C99,8C9B-8C9E,8CA0-8CA2,8CA4,8CA7-8CB0,8CB2-8CB4,8CB6-8CBD,8CBF-8CCB,8CCD-8CCF,8CD1,8CD3,8CD5-8CD6,8CD9-8CDE,8CE0-8CE4,8CE6,8CE8,8CEA,8CEC-8CED,8CEF-8CF0,8CF2,8CF4-8CF5,8CF7-8CF8,8CFA-8CFF,8D03-8D05,8D07-8D0B,8D0F-8D10,8D12-8D14,8D16-8D17,8D1B,8D64-8D67,8D69,8D6B-8D6E,8D70-8D71,8D73-8D74,8D76-8D77,8D7F,8D81-8D82,8D84-8D85,8D88,8D8A,8D8D,8D90-8D91,8D95,8D99,8D9E-8DA0,8DA3,8DA6,8DA8,8DAB-8DAC,8DAF,8DB2-8DB3,8DB5,8DB7,8DB9-8DBC,8DBE,8DC0,8DC2,8DC5-8DC8,8DCA-8DCC,8DCE-8DCF,8DD1,8DD4-8DD7,8DD9-8DDB,8DDD,8DDF,8DE1,8DE3-8DE5,8DE7-8DE8,8DEA-8DEC,8DEF-8DF5,8DFC-8DFD,8DFF,8E04-8E06,8E08-8E0B,8E0F-8E11,8E14,8E16,8E1D-8E23,8E26-8E27,8E2A,8E30-8E31,8E33-8E39,8E3D,8E40-8E42,8E44,8E47-8E50,8E54-8E55,8E59,8E5B-8E64,8E69,8E6C-8E6D,8E6F-8E72,8E74,8E76,8E79-8E7C,8E81-8E85,8E87,8E89-8E8B,8E8D,8E90-8E95,8E99-8E9B,8E9D-8E9E,8EA1-8EA2,8EA7,8EA9-8EB1,8EB3,8EB5,8EBA-8EBB,8EBE,8EC0-8EC1,8EC3-8EC8,8ECA-8ECD,8ECF,8ED1-8ED2,8ED4,8EDB-8EDC,8EDF,8EE2-8EE3,8EE8,8EEB,8EED-8EEE,8EF0-8EF1,8EF7-8EFE,8F02-8F03,8F07-8F0A,8F0F-8F10,8F12-8F19,8F1B-8F21,8F23,8F25-8F2A,8F2C-8F2F,8F33-8F3B,8F3E-8F47,8F49,8F4C-8F4F,8F51-8F55,8F57-8F58,8F5C-8F5F,8F61-8F65,8F9B-8FA1,8FA3-8FA8,8FAD-8FB2,8FB5-8FB8,8FBA-8FBC,8FBE-8FC2,8FC4-8FC6,8FCA-8FCB,8FCD-8FCE,8FD0-8FD5,8FDA,8FE0,8FE2-8FE6,8FE8-8FEB,8FED-8FF1,8FF4-8FFB,8FFD-8FFE,9000-9006,900B-9011,9013-901B,901D-9023,9027-902A,902C-902F,9031-9039,903C,903E-903F,9041-9045,9047,9049-9056,9058-9059,905B-905E,9060-9063,9065-9069,906C-9070,9072,9074-907A,907C-907D,907F-9085,9087-908C,908E-9091,9095,9097-9099,909B,90A0-90A3,90A5-90A6,90A8,90AA,90AF-90B6,90B8,90BD-90BE,90C1,90C3-90C5,90C7-90C8,90CA,90CC,90CE,90D2,90D5,90D7-90D9,90DB-90DF,90E1-90E2,90E4-90E5,90E8,90EB,90ED,90EF-90F0,90F4-90F7,90FD-90FF,9104-9106,9110,9112,9114-911A,911C,911E,9120,9122-9123,9125,9127,9129,912D-9132,9134,9136-9137,9139-913A,913C-913D,9143,9147-914F,9152-9154,9156-915B,9161-9165,9167,9169-916A,916C-916D,9172-9175,9177-917B,9181-9183,9185-9187,9189-918B,918D-918E,9190-9195,9197-9198,919C,919E,91A1-91A2,91A4,91A6,91A8,91AA-91B6,91B8,91BA-91BD,91BF-91C3,91C5-91C9,91CB-91D1,91D3-91D4,91D6-91DF,91E1,91E3-91E7,91E9-91EA,91EC-91F1,91F5-91F7,91F9,91FB-91FD,91FF-9201,9204-9207,9209-920A,920C-920E,9210-9216,9218,921C-921E,9223-9226,9228-9229,922C,922E-9230,9233-923A,923C,923E-9240,9242-924B,924D-9251,9257-925E,9260-9262,9264-9269,926E-9271,9275-9279,927B-9280,9283,9285,9288-928A,928D-928E,9291-9293,9295-929C,929F-92A0,92A4-92A5,92A7-92A8,92AB,92AD,92AF,92B2,92B6-92BD,92BF-92C3,92C5-92C8,92CB-92D0,92D2-92D3,92D5,92D7-92D9,92DC-92DD,92DF-92E1,92E3-92E5,92E7-92EA,92EC-92EE,92F0,92F2-92F3,92F8-92FC,92FF,930F-9311,9314-9315,9318-931A,931C-932C,932E-932F,9332-9337,933A-933B,9344,9347-9349,934B,934D,9350-9352,9354-9358,935A-935C,935E,9360,9364-9365,9367,9369-936A,936C-9371,9373-9376,937A,937C-9382,9388,938A-938D,938F,9392,9394-9398,939A-939B,939E,93A1,93A3-93A4,93A6-93A9,93AB-93AE,93B0,93B4-93B6,93B9-93BA,93C1,93C3-93CD,93D0-93D1,93D3,93D6-93D9,93DC-93DF,93E1-93E2,93E4-93E8,93F7-93FB,93FD,9401-9404,9407-9409,940D-9410,9413-941A,941F,9421,942B,942E-942F,9431-9436,9438,943A-943B,943D,943F,9441,9443-9445,9448,944A,944C,9451-9453,9455,9459-945C,945E-9463,9468,946A-946B,946D-9472,9475,9477,947C-947F,9481,9483-9484,9577-9579,957E,9580,9582-9584,9587-958F,9591-9594,9596,9598-9599,959D-95A9,95AB-95AD,95B2,95B4,95B6,95B9-95BF,95C3,95C6-95CD,95D0-95D6,95D8-95DA,95DC-95E2,95E4-95E6,961C-961E,9621-9622,9624-9626,9628,962A,962C,962E-962F,9631-9633,9637-963D,963F-9642,9644,964B-964D,964F-9650,9652,9654,9656-9658,965B-965F,9661-9666,966A,966C,966E,9670,9672-9678,967A-967F,9681-9686,9688-968B,968D-968F,9691,9694-969D,969F-96A0,96A3-96AA,96AE-96B4,96B6-96BC,96C0-96C1,96C4-96C7,96C9-96CE,96D1-96D2,96D5-96D6,96D8-96DF,96E2-96E3,96E8-96EB,96EF-96F2,96F6-96F7,96F9-96FB,9702-970A,970D-970F,9711,9713,9716,9719-971E,9721-9724,9727-9728,972A,9730-9733,9738-9739,973B,973D-973E,9741-9744,9746,9748-974A,974D-974F,9751-9752,9755-975C,975E,9760-9764,9766-976B,976D-976E,9771,9773-9774,9776-977D,977F-9781,9784-9786,9789,978B,978D,978F-9790,9795-979A,979C,979E-97A0,97A2-97A3,97A6,97A8,97AB-97AE,97B1-97B6,97B8-97BA,97BC,97BE-97BF,97C1,97C3-97CE,97D0-97D1,97D3-97D4,97D7-97D9,97DB-97DE,97E0-97E1,97E4,97ED-97EF,97F1-97F8,97FA-97FB,97FF,9801-9803,9805-9808,980C-9814,9816-981A,981C,981E,9820-9821,9823-9826,982B-9830,9832-9835,9837-9838,983B-983E,9844,9846-9847,984A-984F,9851-985B,985E,9862-9863,9865-9867,986A-986C,986F-9871,9873-9874,98A8,98AA-98AB,98AD-98B1,98B4,98B6-98B8,98BA-98BB,98BF,98C2-98C6,98C8,98CC,98DB-98DC,98DF,98E1-98E3,98E5-98E7,98E9-98EB,98ED-98EF,98F2-98F4,98F6,98FC-98FE,9902-9903,9907-990A,9910-9918,991A-9922,9924,9926-9928,992B-992C,992E,9931-9935,9939-993E,9940-9942,9945-9949,994B-994E,9950-9952,9954-9955,9957-9959,995B-995C,995E-9960,9996-9999,999B,999D-999F,99A5-99A6,99A8,99AC-99AE,99B0-99B5,99B9-99BA,99BC-99BD,99BF,99C1,99C3-99C6,99C8-99C9,99D0-99D5,99D8-99DF,99E2,99E7,99EA-99EE,99F0-99F2,99F4-99F5,99F8-99F9,99FB,99FD-99FF,9A01-9A05,9A0B-9A0C,9A0E-9A13,9A16,9A19,9A1E,9A20,9A22-9A24,9A27-9A28,9A2B,9A2D-9A2E,9A30,9A33,9A35-9A38,9A3E,9A40-9A45,9A47,9A4A-9A4E,9A51,9A54-9A57,9A5A-9A5B,9A5D,9A5F,9A62,9A64-9A65,9A69-9A6B,9AA8,9AAA,9AAC-9AB0,9AB2,9AB4-9AB6,9AB8-9AB9,9ABB-9ABC,9ABE-9AC1,9AC3-9AC4,9AC6,9AC8,9ACE-9AD9,9ADB-9ADC,9ADE-9AE0,9AE2-9AE7,9AE9-9AEF,9AF1-9AF5,9AF7,9AF9-9AFB,9AFD,9AFF-9B06,9B08-9B09,9B0B-9B0E,9B10,9B12,9B16,9B18-9B1C,9B1F-9B20,9B22-9B23,9B25-9B2B,9B2D-9B2F,9B31-9B35,9B37,9B39-9B3D,9B41-9B45,9B48,9B4B-9B4F,9B51,9B54-9B58,9B5A-9B5B,9B5E,9B61,9B63,9B65-9B66,9B68,9B6A-9B6F,9B72-9B75,9B77-9B79,9B7F-9B80,9B83-9B87,9B89-9B8B,9B8D-9B94,9B96-9B97,9B9A,9B9D-9BA0,9BA6-9BAE,9BB0-9BB2,9BB4,9BB7-9BB9,9BBB-9BBC,9BBE-9BC1,9BC6-9BCA,9BCE-9BD2,9BD4,9BD6-9BD8,9BDB,9BDD,9BDF,9BE1-9BE5,9BE7-9BE8,9BEA-9BEB,9BEF-9BF3,9BF5,9BF7-9BFA,9BFD,9BFF,9C08-9C0D,9C0F-9C16,9C18-9C1C,9C1E,9C21-9C2A,9C2D-9C32,9C35-9C37,9C39-9C3B,9C3D-9C3E,9C41,9C43-9C4A,9C4E-9C50,9C52-9C54,9C56-9C58,9C5A-9C60,9C63,9C67-9C6B,9C6E,9C70,9C72,9C75-9C78,9C7B,9CE5-9CE7,9CE9,9CEB-9CEC,9CF0,9CF2-9CF4,9CF6-9CF7,9CF9,9D02-9D03,9D06-9D09,9D11-9D12,9D15,9D17-9D18,9D1B-9D1F,9D23,9D26,9D28,9D2A-9D2C,9D2F-9D30,9D32-9D34,9D3A-9D3F,9D41-9D48,9D4A,9D50-9D51,9D53-9D54,9D59,9D5C-9D65,9D69-9D6C,9D6F-9D70,9D72,9D76-9D77,9D7A-9D7C,9D7E,9D83-9D84,9D86-9D87,9D89-9D8A,9D8D-9D8F,9D92-9D93,9D95-9D98,9D9A,9DA1,9DA4,9DA9-9DAC,9DAE-9DAF,9DB1-9DB2,9DB4-9DB5,9DB8-9DBC,9DBF,9DC1-9DC4,9DC6-9DC7,9DC9-9DCA,9DCF,9DD3-9DD7,9DD9-9DDA,9DDE-9DE0,9DE5-9DE7,9DE9,9DEB,9DED-9DF0,9DF2-9DF4,9DF8-9DFA,9DFD-9DFE,9E10-9E12,9E15-9E16,9E19-9E1E,9E75,9E78-9E7D,9E7F-9E85,9E87-9E88,9E8B-9E8C,9E8E-9E8F,9E91-9E93,9E95-9E98,9E9B,9E9D-9E9F,9EA4-9EA6,9EA8-9EAA,9EAC-9EB0,9EB3-9EB5,9EB8-9EBC,9EBE-9EBF,9EC4,9EC6,9EC8,9ECB-9ED2,9ED4-9ED5,9ED8-9ED9,9EDB-9EE0,9EE4-9EE5,9EE7-9EE8,9EEC-9EF2,9EF4-9EF9,9EFB-9EFD,9EFF,9F02-9F03,9F07-9F09,9F0E-9F17,9F19-9F1B,9F1F-9F22,9F26,9F2A-9F2C,9F2F,9F31-9F32,9F34,9F37,9F39-9F3F,9F41,9F43-9F47,9F4A-9F4B,9F4E-9F4F,9F52-9F58,9F5A,9F5D-9F63,9F66-9F6A,9F6C-9F73,9F75-9F77,9F7A,9F7D,9F8D,9F8F-9F92,9F94-9F97,9F9C-9F9E,9FA0-9FA3,9FA5",
            );
            ld.add(
                "A640:A644-A647,A64C-A64D,A650-A651,A654-A657,A662-A66E,A68A-A68D,A694-A695",
            );
            ld.add("A700:A708-A716,A71B-A71F");
            ld.add(
                "A720:A722-A72B,A730-A73F,A746-A74B,A74E-A753,A756-A757,A764-A767,A780-A783,A789-A78E,A790-A792,A7FA-A7FF",
            );
            ld.add("AC00:D400-D6A3,D6A8-D7AF");
            ld.add("D7B0:D7B0-D7C9,D7CE-D7FF");
            ld.add(
                "E000:E811-E818,E820-E82D,E832-E836,EF00-EF19,F000-F00A,F6C5",
            );
            ld.add("F900:F929,F9DC,FA0E-FA2D");
            ld.add(
                "FB00:FB00-FB06,FB13-FB17,FB1D-FB36,FB38-FB3C,FB3E,FB40-FB41,FB43-FB44,FB46-FB4F",
            );
            ld.add(
                "FB50:FB50-FBB1,FBD3-FBD6,FBD9-FBDA,FBE8-FBE9,FBFC-FBFF,FC08-FC0A,FC10,FC12,FC31-FC32,FC3F-FC44,FC4E-FC50,FC58-FC59,FC5E-FC63,FC6A,FC6D-FC70,FC73-FC75,FC8E-FC8F,FC91,FC94-FC95,FC9C-FC9F,FCA1-FCA4,FCA6,FCA8,FCAA,FCAC,FCB0,FCC9-FCD5,FCD8,FCDA-FCDD,FCF2-FCF4,FD30,FD3C-FD3F,FD88,FDF2",
            );
            ld.add("FE70:FE70-FE74,FE76-FEFC");
            ld.add("FF00:FF01-FF5E,FF61-FF9F,FFE0-FFE3,FFE5");
        }
        return ld;
    };
    n6.getWizList = function () {
        if (nW == null) {
            nW = new fM();
            nW.add("equations");
            nW.add("tables");
            nW.add("matrix");
            nW.add("systems");
            nW.add("addition");
            nW.add("subtraction");
            nW.add("multiplication");
            nW.add("division");
        }
        return nW;
    };
    n6.getUnicodesFor = function (ox) {
        var ow = n6.getUnicodesList();
        for (var ou = 0; ou < ow.size(); ou++) {
            var ov = ow.get(ou);
            if (ov.indexOf(ox) == 0) {
                return ov.substring(5, ov.length);
            }
        }
        return "";
    };
    n6.getUnicodesForOption = function (ox, ow) {
        var oy = ow.substring(0, 2);
        var ov = ow.substring(5, 7);
        var oB = n6.getUnicodesFor(ox);
        var oA = oB.split(",");
        var oz = "";
        for (var ou = 0; ou < oA.length; ou++) {
            if (oA[ou].indexOf(oy) == 0 || oA[ou].indexOf(ov) == 0) {
                if (oz.length > 0) {
                    oz = oz + ",";
                }
                oz = oz + oA[ou];
            }
        }
        return oz;
    };
    n6.loadCodesList = function (ov) {
        if (ij == null) {
            ij = new fM();
            var oz = new fM();
            var oD = hn;
            var oA = oD.split(";");
            for (var ox = 0; ox < oA.length; ox++) {
                var oF = oA[ox].split("=");
                var oB = "";
                for (var ow = 1; ow < oF.length; ow++) {
                    if (ow > 1) {
                        oB = oB + "_";
                    }
                    oB = oB + oF[ow];
                    if (oB.length > 20) {
                        break;
                    }
                }
                if (oB.length > 0) {
                    oz.add(oB);
                }
            }
            oz.sort(null);
            var oy = cA.getTranslate(ov, "prop", "_or");
            for (var ox = 0; ox < oz.size(); ox++) {
                var oC = oz.get(ox);
                var oE = oC;
                if (oE.indexOf("_") > -1) {
                    oE = oC.substring(0, oE.indexOf("_"));
                }
                oC = W.replace(oC, "_", oy);
                var ou = new hm(oE, oC);
                ij.add(ou);
            }
        }
        return ij;
    };
    n6.getLineThicknessFrac = function (ov) {
        if (mJ == null) {
            mJ = new fM();
            var oy = cA.getTranslate(ov, "prop", "_thin");
            mJ.add(new hm("thin", oy));
            oy = cA.getTranslate(ov, "prop", "_medium");
            mJ.add(new hm("medium", oy));
            oy = cA.getTranslate(ov, "prop", "_thick");
            mJ.add(new hm("thick", oy));
            var ou = n6.getLength();
            for (var ow = 0; ow < ou.size(); ow++) {
                var ox = ou.get(ow);
                mJ.add(ox);
            }
        }
        return mJ;
    };
    n6.getSpacingForStack = function (ov) {
        if (lT == null) {
            lT = new fM();
            var oy = cA.getTranslate(ov, "prop", "_loose");
            lT.add(new hm("loose", oy));
            oy = cA.getTranslate(ov, "prop", "_medium");
            lT.add(new hm("medium", oy));
            oy = cA.getTranslate(ov, "prop", "_tight");
            lT.add(new hm("tight", oy));
            var ou = n6.getLength();
            for (var ow = 0; ow < ou.size(); ow++) {
                var ox = ou.get(ow);
                lT.add(ox);
            }
        }
        return lT;
    };
    n6.getLengthPlusInfinity = function (ov) {
        var oz = new fM();
        var oy = cA.getTranslate(ov, "prop", "_infinity");
        oz.add(new hm("infinity", oy));
        var ou = n6.getLength();
        for (var ow = 0; ow < ou.size(); ow++) {
            var ox = ou.get(ow);
            oz.add(ox);
        }
        return oz;
    };
    n6.getLengthPlusDefault = function (ov) {
        if (oc == null) {
            oc = new fM();
            var oy = cA.getTranslate(ov, "prop", "_default");
            oc.add(new hm("default", oy));
            var ou = n6.getLength();
            for (var ow = 0; ow < ou.size(); ow++) {
                var ox = ou.get(ow);
                oc.add(ox);
            }
        }
        return oc;
    };
    n6.getBooleanPlusDefault = function (ou) {
        if (ez == null) {
            ez = new fM();
            var ov = cA.getTranslate(ou, "prop", "_default");
            ez.add(new hm("default", ov));
            ov = cA.getTranslate(ou, "prop", "_true");
            ez.add(new hm("true", ov));
            ov = cA.getTranslate(ou, "prop", "_false");
            ez.add(new hm("false", ov));
        }
        return ez;
    };
    n6.getPercentLength = function () {
        var ov = new fM();
        var ou = "%";
        ov.add(new hm(ou, ou));
        return ov;
    };
    n6.getLength = function () {
        if (dv == null) {
            dv = new fM();
            var ow = cp;
            for (var ov = 0; ov < ow.length; ov++) {
                var ou = ow[ov];
                dv.add(new hm(ou, ou));
            }
        }
        return dv;
    };
    n6.getValueSelect = function (oy) {
        if (oy == null || oy.length == 0) {
            return null;
        }
        var ox = cp;
        for (var ow = 0; ow < ox.length; ow++) {
            var ov = ox[ow];
            var ou = oy.indexOf(ov);
            if (ou > -1 && ou == oy.length - ov.length) {
                return ov;
            }
        }
        return null;
    };
    n6.getAlignValues = function (ou) {
        if (aN == null) {
            aN = new fM();
            var ov = cA.getTranslate(ou, "prop", "_align_left");
            aN.add(new hm("left", ov));
            ov = cA.getTranslate(ou, "prop", "_align_center");
            aN.add(new hm("center", ov));
            ov = cA.getTranslate(ou, "prop", "_align_right");
            aN.add(new hm("right", ov));
        }
        return aN;
    };
    n6.getDecimalValues = function (ou) {
        if (bB == null) {
            bB = new fM();
            var ov = cA.getTranslate(ou, "prop", "_decimal_point");
            bB.add(new hm("point", ov));
            ov = cA.getTranslate(ou, "prop", "_decimal_comma");
            bB.add(new hm("comma", ov));
        }
        return bB;
    };
    n6.getFenceOptList = function () {
        if (bX == null) {
            bX = new fM();
            var ox =
                "28,29,5B,5D,7B,7D,7C,2016,2980,2308,2309,230A,230B,2772,2773,27E6,27E7,27E8,27E9,27EA,27EB,27EC,27ED,27EE,27EF,2983,2984,2985,2986,2987,2988,2989,298A,298B,298C,298D,2990,298F,298E,2991,2992,2993,2994,2995,2996,2997,2998,29FC,29FD".split(
                    ",",
                );
            var ov = new hm("space", "fenceList/space.png");
            bX.add(ov);
            for (var ou = 0; ou < ox.length; ou++) {
                var ow = ox[ou];
                ov = new hm(ow, "fenceList/" + ow + ".png");
                bX.add(ov);
            }
        }
        return bX;
    };
    n6.getFenceSepList = function () {
        if (k4 == null) {
            k4 = new fM();
            var ox = "2C,3B,7C,2016,2980".split(",");
            var ov = new hm("space", "sepList/space.png");
            k4.add(ov);
            for (var ou = 0; ou < ox.length; ou++) {
                var ow = ox[ou];
                ov = new hm(ow, "sepList/" + ow + ".png");
                k4.add(ov);
            }
        }
        return k4;
    };
    n6.getEncloseChooseList = function () {
        if (iR == null) {
            iR = new fM();
            var ou =
                "longdiv,actuarial,radical,box,roundedbox,circle,left,right,top,bottom,updiagonalstrike,downdiagonalstrike,verticalstrike,horizontalstrike,madruwb".split(
                    ",",
                );
            var ow = new hm("space", "encloseChoose/space.png");
            iR.add(ow);
            for (var ov = 0; ov < ou.length; ov++) {
                var ox = ou[ov];
                ow = new hm(ox, "encloseChoose/" + ox + ".png");
                iR.add(ow);
            }
        }
        return iR;
    };
    n6.getTableAlign = function (ow, oy) {
        var oz = new fM();
        var oB = cA.getTranslate(ow, "prop", "_align_top");
        oz.add(new hm("top", oB));
        var ox = cA.getTranslate(ow, "prop", "_align_center");
        oz.add(new hm("center", ox));
        var ov = cA.getTranslate(ow, "prop", "_align_axis");
        oz.add(new hm("axis", ov));
        var oC = cA.getTranslate(ow, "prop", "_align_baseline");
        oz.add(new hm("baseline", oC));
        var oD = cA.getTranslate(ow, "prop", "_align_bottom");
        oz.add(new hm("bottom", oD));
        var ou = cA.getTranslate(ow, "prop", "_align_row");
        for (var oA = 0; oA < oy; oA++) {
            var oE = oA + 1;
            oz.add(new hm("top," + oE, ou + " " + oE + " " + oB));
            oz.add(new hm("center," + oE, ou + " " + oE + " " + ox));
            oz.add(new hm("axis," + oE, ou + " " + oE + " " + ov));
            oz.add(new hm("baseline," + oE, ou + " " + oE + " " + oC));
            oz.add(new hm("bottom," + oE, ou + " " + oE + " " + oD));
        }
        return oz;
    };
    n6.getStackAlign = function (oy) {
        var ow = new fM();
        var oz = cA.getTranslate(oy, "prop", "_align_left");
        ow.add(new hm("left", oz));
        var ox = cA.getTranslate(oy, "prop", "_align_center");
        ow.add(new hm("center", ox));
        var ov = cA.getTranslate(oy, "prop", "_align_right");
        ow.add(new hm("right", ov));
        var ou = cA.getTranslate(oy, "prop", "_align_decimalpoint");
        ow.add(new hm("decimalpoint", ou));
        return ow;
    };
    n6.getTableRowAlign = function () {
        if (bL == null) {
            bL = new fM();
            var ox = "top,middle,bottom,baseline".split(",");
            for (var ov = 0; ov < ox.length; ov++) {
                var ow = ox[ov];
                var ou = new hm(ow, "align/" + ow + ".png");
                bL.add(ou);
            }
        }
        return bL;
    };
    n6.getTableColAlign = function () {
        if (kJ == null) {
            kJ = new fM();
            var ox = "left,center,right".split(",");
            for (var ov = 0; ov < ox.length; ov++) {
                var ow = ox[ov];
                var ou = new hm(ow, "align/" + ow + ".png");
                kJ.add(ou);
            }
        }
        return kJ;
    };
    n6.getDirList = function (ou) {
        if (gF == null) {
            gF = new fM();
            var ov = cA.getTranslate(ou, "prop", "_dir_ltr");
            gF.add(new hm("ltr", ov));
            var ow = cA.getTranslate(ou, "prop", "_dir_rtl");
            gF.add(new hm("rtl", ow));
        }
        return gF;
    };
    n6.getBorderOptList = function (ou) {
        if (iQ == null) {
            iQ = new fM();
            iQ.add(new hm("no", "style/border-no.png"));
            iQ.add(new hm("all", "style/border-all.png"));
            iQ.add(new hm("top", "style/border-top.png"));
            iQ.add(new hm("bottom", "style/border-bottom.png"));
            iQ.add(new hm("left", "style/border-left.png"));
            iQ.add(new hm("right", "style/border-right.png"));
        }
        var ox = new fM();
        for (var ow = 0; ow < iQ.size(); ow++) {
            var ov = iQ.get(ow);
            if (ou.indexOf(ov.getKey()) > -1) {
                continue;
            }
            ox.add(ov);
        }
        return ox;
    };
    n6.getLineStyleList = function (ox) {
        if (mM == null) {
            mM = new fM();
            var ow = cA.getTranslate(ox, "prop", "_line_solid");
            mM.add(new hm("solid", ow));
            var ov = cA.getTranslate(ox, "prop", "_line_dashed");
            mM.add(new hm("dashed", ov));
            var ou = cA.getTranslate(ox, "prop", "_line_dotted");
            mM.add(new hm("dotted", ou));
        }
        return mM;
    };
    n6.getLongdivStyleList = function (ou) {
        if (jd == null) {
            jd = new fM();
            for (var ov = 0; ov < 10; ov++) {
                var ow = gq.translate(ou, "dialog_wizard_division_type" + ov);
                jd.add(new hm(ov + "", ow));
            }
        }
        return jd;
    };
    n6.getValueForLongdiv = function (ou) {
        if (ou == "lefttop") {
            return "0";
        }
        if (ou == "righttop") {
            return "1";
        }
        if (ou == "left/\\right") {
            return "2";
        }
        if (ou == ":right=right") {
            return "4";
        }
        if (ou == "stackedrightright") {
            return "5";
        }
        if (ou == "mediumstackedrightright") {
            return "6";
        }
        if (ou == "shortstackedrightright") {
            return "7";
        }
        if (ou == "stackedleftleft") {
            return "8";
        }
        if (ou == "stackedleftlinetop") {
            return "9";
        }
        return "3";
    };
    n6.getCodeForLongdiv = function (ou) {
        if (ou == "0") {
            return "lefttop";
        }
        if (ou == "1") {
            return "righttop";
        }
        if (ou == "2") {
            return "left/\\right";
        }
        if (ou == "4") {
            return ":right=right";
        }
        if (ou == "5") {
            return "stackedrightright";
        }
        if (ou == "6") {
            return "mediumstackedrightright";
        }
        if (ou == "7") {
            return "shortstackedrightright";
        }
        if (ou == "8") {
            return "stackedleftleft";
        }
        if (ou == "9") {
            return "stackedleftlinetop";
        }
        return "left)(right";
    };
    n6.getLocations = function (ow) {
        if (bP == null) {
            bP = new fM();
            var ou = "n|ne|e|se|s|sw|w|nw".split("|");
            for (var ox = 0; ox < ou.length; ox++) {
                var oy = ou[ox];
                var ov = cA.getTranslate(ow, "prop", "_location_" + oy);
                bP.add(new hm(oy, ov));
            }
        }
        return bP;
    };
    n6.getCrossout = function (ow) {
        if (cl == null) {
            cl = new fM();
            var ou =
                "none|updiagonalstrike|downdiagonalstrike|verticalstrike|horizontalstrike".split(
                    "|",
                );
            for (var ox = 0; ox < ou.length; ox++) {
                var oy = ou[ox];
                var ov = cA.getTranslate(ow, "prop", "_crossout_" + oy);
                cl.add(new hm(oy, ov));
            }
        }
        return cl;
    };
    n6.getScriptsizemultiplier = function (ow) {
        if (h1 == null) {
            h1 = new fM();
            var ou = "0.1|0.2|0.3|0.4|0.5|0.6|0.7|0.8|0.9|1.0".split("|");
            for (var ox = 0; ox < ou.length; ox++) {
                var oy = ou[ox];
                var ov = cA.getTranslate(ow, "prop", "_multiplier_" + oy);
                h1.add(new hm(oy, ov));
            }
        }
        return h1;
    };
    n6.getTableLineStyleList = function (ox) {
        if (et == null) {
            et = new fM();
            var ow = cA.getTranslate(ox, "prop", "_line_none");
            et.add(new hm("none", ow));
            var ov = cA.getTranslate(ox, "prop", "_line_dashed");
            et.add(new hm("dashed", ov));
            var ou = cA.getTranslate(ox, "prop", "_line_solid");
            et.add(new hm("solid", ou));
        }
        return et;
    };
    n6.getBasicFunctionList = function () {
        if (l2 == null) {
            l2 = new fM();
            var ov = cd.getEmptyMathMLElement();
            var ou = cd.getEmptySelectedMathMLElement();
            l2.add(
                n6.getFunctionBean(
                    "row",
                    "basic",
                    "0",
                    "<mrow><mi>a</mi><mi>+</mi><mi>b</mi></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "row",
                    "basic",
                    "1",
                    "<mfenced><mi>a</mi><mi>+</mi><mi>b</mi></mfenced>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "eq1",
                    "basic",
                    "2",
                    '<mrow><mi>f</mi><mo maxsize="100%">(</mo><mi>x</mi><mo maxsize="100%">)</mo><mo>=</mo><mrow><mrow><mi>a</mi><mi>x</mi></mrow><mi>+</mi><mi>b</mi></mrow></mrow>',
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "eq2",
                    "basic",
                    "3",
                    "<mrow><mrow><mi>a</mi><msup><mi>x</mi><mi>2</mi></msup></mrow><mi>+</mi><mrow><mi>b</mi><mi>x</mi></mrow><mi>+</mi><mi>c</mi></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "frac0",
                    "basic",
                    "f1",
                    "<mfrac>" + ou + "" + ov + "</mfrac>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "frac1",
                    "basic",
                    "f2",
                    "<mfrac bevelled='true'>" + ou + "" + ov + "</mfrac>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "sup",
                    "basic",
                    "e1",
                    "<msup>" + ou + "" + ov + "</msup>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "sub",
                    "basic",
                    "e2",
                    "<msub>" + ou + "" + ov + "</msub>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "subsup",
                    "basic",
                    "e3",
                    "<msubsup>" + ou + "" + ov + "" + ov + "</msubsup>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "accent",
                    "basic",
                    "e4",
                    "<msup>" + ou + "<mo>&#x2032;</mo></msup>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "accent",
                    "basic",
                    "e5",
                    "<msup>" + ou + "<mo>&#x2033;</mo></msup>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "accent",
                    "basic",
                    "e6",
                    "<msup>" + ou + "<mo>&#x2034;</mo></msup>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "sqrt",
                    "basic",
                    "r1",
                    "<msqrt>" + ou + "</msqrt>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "root",
                    "basic",
                    "r2",
                    "<mroot>" + ou + "" + ov + "</mroot>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "sqrt2",
                    "basic",
                    "r3",
                    "<msqrt closed='true' closedlength='40%'>" +
                        ou +
                        "</msqrt>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fenced0",
                    "basic",
                    "p1",
                    "<mfenced>" + ou + "</mfenced>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fenced1",
                    "basic",
                    "p2",
                    "<mfenced open='&#x5B;' close='&#x5D;'>" +
                        ou +
                        "</mfenced>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fenced2",
                    "basic",
                    "p3",
                    "<mfenced open='&#x7B;' close='&#x7D;'>" +
                        ou +
                        "</mfenced>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "close0",
                    "basic",
                    "c1",
                    "<menclose notation='box'>" + ou + "</menclose>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "close1",
                    "basic",
                    "c2",
                    "<menclose notation='circle'>" + ou + "</menclose>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "lim0",
                    "basic",
                    "lim1",
                    "<mrow><munder><mtext>lim</mtext><mrow><mi>x</mi><mo>→</mo><mn>0</mn></mrow></munder><mrow><mi>f</mi><mo maxsize='100%'>(</mo><mi>x</mi><mo maxsize='100%'>)</mo></mrow><mo>=</mo>" +
                        ou +
                        "</mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "sum2",
                    "basic",
                    "s1",
                    "<mrow><munderover><mo>&sum;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover><mfenced>" +
                        ou +
                        "</mfenced></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "sum2",
                    "basic",
                    "s2",
                    "<mrow><munderover><mo>&prod;</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mo>&infin;</mo></munderover><mfenced>" +
                        ou +
                        "</mfenced></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "int2",
                    "int",
                    "0",
                    "<mrow><msubsup><mo>&int;</mo><mn>1</mn><mn>2</mn></msubsup><mrow><mi>x</mi></mrow><mrow><mo>&DifferentialD;</mo><mi>x</mi></mrow></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "int2",
                    "int",
                    "2",
                    "<mrow><msubsup><mo>&Int;</mo><mn>1</mn><mn>2</mn></msubsup><mrow><mi>x</mi></mrow><mrow><mo>&DifferentialD;</mo><mi>x</mi></mrow></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "der2",
                    "basic",
                    "d1",
                    "<mfrac><mrow><mo>&DifferentialD;</mo><mi>x</mi></mrow><mrow><mo>&DifferentialD;</mo><mi>t</mi></mrow></mfrac></math>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "der2",
                    "basic",
                    "d2",
                    "<mfrac><mrow><mo>&part;</mo><mi>x</mi></mrow><mrow><mo>&part;</mo><mi>t</mi></mrow></mfrac></math>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "der2",
                    "basic",
                    "d3",
                    "<mfrac><mrow><msup><mo>&DifferentialD;</mo><mn>2</mn></msup><mi>x</mi></mrow><mrow><mo>&DifferentialD;</mo><msup><mi>t</mi><mn>2</mn></msup></mrow></mfrac></math>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fun",
                    "fun",
                    "0",
                    "<mrow><mi>n</mi><mo>!</mo></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fun",
                    "fun",
                    "1",
                    "<mrow><mi>f</mi><mo>(</mo>" + ou + "<mo>)</mo></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fun",
                    "fun",
                    "2",
                    "<mrow><mi>sin</mi><mi>&#x3B8;</mi></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fun",
                    "fun",
                    "3",
                    "<mrow><mi>sin</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fun",
                    "fun",
                    "4",
                    "<mrow><mi>cos</mi><mi>&#x3B8;</mi></mrow>",
                ),
            );
            l2.add(
                n6.getFunctionBean(
                    "fun",
                    "fun",
                    "5",
                    "<mrow><mi>cos</mi><mo>(</mo><mi>&#x3B8;</mi><mo>)</mo></mrow>",
                ),
            );
        }
        return l2;
    };
    n6.getFunctionBean = function (ox, ow, ou, oy) {
        var ov = new bY();
        ov.setName(ox);
        ov.setFolder(ow);
        ov.setImg(ou);
        ov.setMathml(oy);
        return ov;
    };

    function jB(ou) {
        this.initInterfaceDone = false;
        this.config = new kC();
        this.mainAction;
        this.webInterface;
        this.config.setEditorId(ou);
        this.config.setEditorType("editor");
        var ov = this.config
            .getSaveLocalStorage()
            .getLanguage(this.config.getEditorId());
        this.config.setLanguage(
            gq.acceptLanguage(this.config.getEditorType(), ov),
        );
        this.config.getSaveLocalStorage().loadAll(this.config.getEditorId());
        this.mainAction = new kB(this.config);
        this.webInterface = new cP(this.config);
        this.dLi = b3;
        this.dLi();
    }
    ga(jB, b3);
    jB.prototype.buildEditor = function (ow) {
        var ov = ow.element;
        var oy = $("<div></div>");
        ov.append(oy);
        var oz = ow.options;
        this.config.getL().load(this.config.getSaveLocalStorage().getJwt());
        bH.console(
            "Is professional license:" +
                this.config.getL().isP() +
                " is expired:" +
                this.config.getL().isE(),
        );
        if (this.config.getL().isF() || this.config.getL().isE()) {
            this.config.getMainFormula().setW(this.config.getL().getW());
            this.config.getMainFormula().setS(this.config.getL().getS());
        }
        this.config.setWindowHeight(oz.height);
        this.config.setWindowWidth(oz.width);
        if (oz.layout != null) {
            var ox = oz.layout;
            ox = ox.toLowerCase();
            if (ox == "vertical") {
                this.config.setLayout("V");
            }
        }
        this.config.setMathsize(oz.mathsize);
        this.config.setSaveImageOnServer(oz.saveImageOnServer);
        this.config.setSaveImageOnServerUrl(oz.saveImageOnServerUrl);
        this.config.setSelectedOverColor(oz.selectedOverColor);
        this.config.setImgPath(oz.imgPath);
        this.config.setImgFontPath(oz.imgFontPath);
        this.config.setBasicOperators(oz.basicOperators);
        this.config.setBasicIdent(oz.basicIdent);
        this.config.setGeometryOperators(oz.geometryOperators);
        this.config.setAlgebraOperators(oz.algebraOperators);
        this.config.setLinearAlgebraOp(oz.linearAlgebraOp);
        this.config.setArrowOp(oz.arrowOp);
        this.config.setLargeOperators(oz.largeOperators);
        this.config.setFencedOperators(oz.fencedOperators);
        this.config.setLetterlikeOp(oz.letterlikeOp);
        this.config.setLogicalRelOp(oz.logicalRelOp);
        this.config.setConstantSymboles(oz.constantSymboles);
        if (oz.topMenuHeight > 0) {
            this.config.setTopMenuHeight(oz.topMenuHeight);
        }
        if (oz.viewScale > 0) {
            this.config.getScreen().setViewScale(oz.viewScale);
        }
        this.config.setDefFormula(oz.defFormula);
        var ou = this.config
            .getSaveLocalStorage()
            .getDefFormula(this.config.getEditorId());
        if (ou != null) {
            this.config.setDefFormula(ou);
        }
        this.config.setFontSize(
            this.config.getMainFormula().getMathML_settings().getMathsize(),
        );
        if (oz.folderUrlForFonts != null) {
            ft.setFolderUrlForFonts(oz.folderUrlForFonts);
        } else {
            ft.setFolderUrlForFonts("fmath/fonts");
        }
        if (oz.folderUrlForGlyphs != null) {
            ft.setFolderUrlForGlyphs(oz.folderUrlForGlyphs);
        } else {
            ft.setFolderUrlForGlyphs("fmath/glyphs");
        }
        this.config.setRightPaneHidden(false);
        if (this.config.isVerticalLayout()) {
            this.config.setLeftPaneHidden(true);
            this.config.setRightPaneHidden(true);
            this.config.getScreen().setMarginPageWindow(3);
            this.config.getPaper().setMargins(new aL());
        }
        this.webInterface.drawInterface(oy);
        this.initInterfaceDone = true;
        this.executeEvent(new ge(fP));
        q.setTheme(this.config);
    };
    jB.prototype.executeEvent = function (ov) {
        if (!this.initInterfaceDone) {
            return;
        }
        if (ov instanceof e1) {
            var ou = $("#" + this.config.getEditorId() + "_" + bJ);
            if (ou != null) {
                this.config.setWindowWidth(ou.width());
            }
        }
        var ow = this.mainAction.executeEvent(ov);
        if (ow) {
            gn.resetTime();
            bH.console("immediat updateInterface");
            this.updateInterface();
        }
    };
    jB.prototype.setSaveCallback = function (ov) {
        this.config.setSaveMethod(ov);
        var ou = new hx();
        ou.setChangeType("UPDATE_INTERFACE");
        this.executeEvent(ou);
    };
    jB.prototype.setMathML = function (ou) {
        var ov = new hx();
        ov.setChangeType("MATHML");
        ov.setValue(ou);
        this.executeEvent(ov);
    };
    jB.prototype.getMathML = function (ou) {
        return this.config.getMainFormula().getMathML(ou, true);
    };
    jB.prototype.setLatex = function (ou) {
        var ov = e3.convertToMathML(ou);
        this.setMathML(ov);
    };
    jB.prototype.getLatex = function () {
        var ou = this.getMathML(hV);
        return fF.convertToLatex(ou);
    };
    jB.prototype.getImage = function (ou, ov) {
        ee.removeSelectionOnFormula(this.config);
        this.updateInterface();
        ou = W.trim(ou);
        ou = ou.toLowerCase();
        ou = "image/" + ou;
        return this.config.getMainFormula().getImage(ou, ov);
    };
    jB.prototype.updateInterface = function () {
        if (this.config.hasAction(hG)) {
            this.mainAction.selectedPanel();
        }
        this.webInterface.updateInterface();
        this.config.resetActions();
    };
    jB.prototype.showEditor = function () {
        var ou = $("div[name='" + this.config.getEditorId() + "']");
        ou.show();
        this.updateInterface();
    };

    function cd() {}
    cd.createFormulaOn = function (ov, ox) {
        var oy = ov.getMainFormula();
        var oB = lv.getIntegerValue(ov.getMathsize(), 0);
        if (oB > 6) {
            oy.getMathML_style().setMathsize(oB);
        }
        oy.setScale(ov.getScreen().getViewScale());
        var oC = ov.getDefFormula();
        ov.getHistory().addMathML(oC);
        ov.addAction(ck);
        var oA = ov.getEditorId() + "_" + dJ;
        var ou = $(
            "<canvas id='" +
                oA +
                "' width='0' height='0' style='position:relative;border:0px;cursor:pointer'></canvas>",
        );
        ou.css("cursor", "pointer");
        ox.append(ou);
        var oz = ov.getEditorId() + "_" + dJ + "_TOOLTIP";
        var ow = $(
            "<canvas id='" +
                oz +
                "' width='0' height='0' style='position: absolute;z-index: 1;display:none;'></canvas>",
        );
        ox.append(ow);
        oy.drawImage(ou.get(0), ow.get(0), oC);
        ou.mousedown(function (oD) {
            oD.target.style.cursor = "move";
            fMathEditorsInterface.clickedDownOnFormula($(this).attr("id"), oD);
        });
        ou.mouseup(function (oD) {
            fMathEditorsInterface.clickedUpOnFormula($(this).attr("id"), oD);
            oD.target.style.cursor = "pointer";
        });
        ou.mouseout(function (oD) {
            oD.target.style.cursor = "pointer";
        });
        ou.mousemove(function (oD) {
            fMathEditorsInterface.overOnFormula($(this).attr("id"), oD);
        });
        ou.click(function (oD) {
            return false;
        });
        ou.dblclick(function (oD) {
            fMathEditorsInterface.dblclickedOnFormula($(this).attr("id"), oD);
        });
    };
    cd.updateFormula = function (ou, ov) {
        if (ou.isLatexPaneShow()) {
            cd.updateLatexFormulaOn(ou, ov);
        } else {
            cd.updateMathMLFormulaOn(ou, ov);
        }
    };
    cd.updateMathMLFormulaOnReturn = function (ov, ou) {
        var ox = ov.getMainFormula();
        try {
            ov.getHistory().addMathML(ou);
            ov.addAction(ck);
            ox.setReturnFunction(fMathEditorsInterface.updateInterfaceHandler);
            ox.drawFormulaExc(ou);
        } catch (ow) {
            ov.getHistory().removeLastMathML();
        }
    };
    cd.updateMathMLFormulaOnReturnNoHistory = function (ov, ou) {
        var ox = ov.getMainFormula();
        try {
            ov.addAction(ck);
            ox.setReturnFunction(fMathEditorsInterface.updateInterfaceHandler);
            ox.drawFormulaExc(ou);
        } catch (ow) {
            ov.getHistory().removeLastMathML();
        }
    };
    cd.updateMathMLFormulaOn = function (ov, ou) {
        var ox = ov.getMainFormula();
        try {
            ox.drawFormulaExc(ou);
            ov.getHistory().addMathML(ou);
            ov.addAction(ck);
        } catch (ow) {}
    };
    cd.updateLatexFormulaOn = function (ov, ow) {
        var oy = ov.getMainFormula();
        try {
            var ou = e3.convertToMathML(ow);
            this.formula.drawFormulaExc(ou);
            ov.getHistory().addMathML(ou);
            ov.addAction(ck);
        } catch (ox) {}
    };
    cd.reScaleFormula = function (ou, ov) {
        var ow = ou.getMainFormula();
        ow.setScale(ov);
    };
    cd.getPanelHierarcyFromXY = function (ow, oH) {
        oH.stopPropagation();
        var oB = ow.getMainFormula();
        var oC = ow.getEditorId() + "_" + dJ;
        var ov = $("#" + oC);
        var oG = 0;
        var oD = 0;
        var oA = ov.offset();
        var oz = parseInt(oA.left, 10);
        var oF = parseInt(oA.top, 10);
        oG = oH.pageX - oz;
        oD = oH.pageY - oF;
        var oy = oB.getScale();
        oG = oG / oy;
        oD = oD / oy;
        var ox = oB.getPanelsForXY(oG, oD);
        if (ox.size() > 0) {
            var ou = ox.get(ox.size() - 1);
            var oE = new fM();
            cd.generateHierarchyFromChild(oE, ou);
            ox = cd.reverseOrder(oE);
        }
        return ox;
    };
    cd.reverseOrder = function (ou) {
        var ox = new fM();
        for (var ow = ou.size(); ow > 0; ow--) {
            var ov = ou.get(ow - 1);
            ox.add(ov);
        }
        return ox;
    };
    cd.generateHierarchyFromChild = function (ov, ox) {
        if (ox != null) {
            if (ox instanceof aP) {
            } else {
                if (ox instanceof dp) {
                    var ow = ox.getParent();
                    if (ow instanceof mR) {
                    } else {
                        ov.add(ox);
                    }
                } else {
                    ov.add(ox);
                }
            }
            if (ox instanceof eq) {
                var ou = ox;
                cd.generateHierarchyFromChild(ov, ou.getRealParent());
            } else {
                cd.generateHierarchyFromChild(ov, ox.getParent());
            }
        }
    };
    cd.getMathMLString = function (ou, ov, ow) {
        var ox = ou.getMainFormula();
        return ox.getMathML(ov, true);
    };
    cd.getLatexString = function (ow, ox) {
        var oy = ow.getMainFormula();
        var ou = oy.getMathML(i7, true);
        var ov = fF.convertToLatex(ou);
        if (ov.indexOf("\\[") == 0 || ov.indexOf("$") == 0) {
        } else {
            ov = "\\[" + ov + "\\]";
        }
        return ov;
    };
    cd.getMathMLForPanel = function (ov, ou, ow) {
        var ox = ov.getMainFormula();
        return ox.getMathML_getMathML(ou, null, ow);
    };
    cd.getEmptyMathMLElement = function () {
        return "<empty></empty>";
    };
    cd.getEmptySelectedMathMLElement = function () {
        return "<empty editorSelected='true'></empty>";
    };
    cd.isEmptyElement = function (ou) {
        return ou instanceof bh;
    };

    function B() {}
    B.createLayout = function (oy, ou, ox, oA) {
        var ow = "overflow:hidden; border: 1px solid #dfdfdf; padding: 1px;";
        var ov =
            "overflow:hidden; background-color:#f5f6f7; border: 1px solid #dfdfdf; padding: 1px;";
        var oz = null;
        oz = ou.w2layout({
            name: oy + "_mainLayout",
            resizer: 2,
            panels: [
                {
                    type: "top",
                    size: 54,
                    resizable: false,
                    style: ow,
                    content: '<div id="' + oy + 'topContent"></div>',
                },
                {
                    type: "left",
                    size: 140,
                    resizable: true,
                    hidden: ox,
                    style: ow,
                    content: '<div id="' + oy + 'leftContent"></div>',
                },
                {
                    type: "main",
                    style: ov,
                    content: '<div id="' + oy + 'mainContent"></div>',
                },
                {
                    type: "preview",
                    size: 90,
                    resizable: true,
                    style: ow,
                    hidden: true,
                    content: '<div id="' + oy + 'previewContent"></div>',
                },
                {
                    type: "right",
                    size: 230,
                    resizable: true,
                    hidden: oA,
                    style: ow,
                    content: '<div id="' + oy + 'rightContent"></div>',
                },
                {
                    type: "bottom",
                    size: 22,
                    resizable: false,
                    style: ow,
                    content: '<div id="' + oy + 'bottomContent"></div>',
                },
            ],
        });
        B.addEvents(oy);
        return oz;
    };
    B.getPanel = function (ox, ow) {
        var ou = null;
        if (w2ui[ox + "_mainLayout"] == null) {
            return null;
        }
        ou = w2ui[ox + "_mainLayout"].panels;
        for (var ov = 0; ov < ou.length; ov++) {
            if (ou[ov].type == ow) {
                return ou[ov];
            }
        }
        return null;
    };
    B.getPanelContent = function (ov, ou) {
        var ow = null;
        ow = $("#" + ov + ou + "Content");
        return ow;
    };
    B.hideShowPanel = function (ow, ov, ox) {
        if (w2ui[ow + "_mainLayout"] == null) {
            return null;
        }
        var ou = B.getPanel(ow, ov);
        if (ou.hidden != ox) {
            B.removeEvents(ow);
            w2ui[ow + "_mainLayout"].toggle(ov, true);
            B.addEvents(ow);
        }
    };
    B.togglePanel = function (ow, ov) {
        if (w2ui[ow + "_mainLayout"] == null) {
            return null;
        }
        B.removeEvents(ow);
        w2ui[ow + "_mainLayout"].toggle(ov, true);
        var ou = false;
        ou = w2ui[ow + "_mainLayout"].hidden;
        B.addEvents(ow);
        return ou;
    };
    B.removeEvents = function (ou) {
        w2ui[ou + "_mainLayout"].off(
            "resize",
            fMathEditorsInterface.resizedCompletedHandler,
        );
    };
    B.addEvents = function (ou) {
        w2ui[ou + "_mainLayout"].on(
            "resize",
            fMathEditorsInterface.resizedCompletedHandler,
        );
    };

    function gE() {}
    gE.prototype.createDialog = function (ou, ov) {
        var ow = gq.translate(ov, "dialog_delete_font");
        var ox = $(
            "<div id='" +
                ov.getEditorId() +
                "dialog_delete_font' title='" +
                ow +
                "'></div>",
        );
        gE.update(ov);
        ou.append(ox);
        ox.dialog({
            autoOpen: false,
            width: 280,
        });
    };
    gE.update = function (oJ) {
        var oz = $("#" + oJ.getEditorId() + "dialog_delete_font");
        oz.empty();
        var oG = gq.translate(oJ, "dialog_delete_font_select");
        var oD = $("<p>" + oG + "</p>");
        oz.append(oD);
        var oH = $("<center/>");
        oz.append(oH);
        oz.append("<hr/>");
        var oF = $("<table width='100%'></table>");
        var oE = oJ.getMainFormula().getMathML(hV, true);
        var ox = oJ
            .getSaveLocalStorage()
            .getSaveClientData()
            .getListCustomFonts();
        for (var oC = 0; oC < ox.size(); oC++) {
            var oK = ox.get(oC);
            if (oK.isRemove()) {
                continue;
            }
            var oA = oK.getValue();
            if (oE.indexOf(oA) == -1) {
                var oy = gq.translate(oJ, "dialog_add_google_font_label");
                var oB = gq.translate(oJ, "dialog_add_local_font_label");
                var oL = oK.getName();
                if (oA.indexOf("local:") == 0) {
                    oL = oB + oL;
                } else {
                    oL = oy + oL;
                }
                var oI = $("<tr></tr>");
                oF.append(oI);
                var ow = $("<td><div>" + oL + "</div></td>");
                oI.append(ow);
                var ov = $(
                    "<td align='center'><input type='checkbox' name='" +
                        oJ.getEditorId() +
                        "_" +
                        fN +
                        oC +
                        "' /></td>",
                );
                oI.append(ov);
            }
        }
        oz.append(oF);
        oz.append("<hr/>");
        oH = $("<center/>");
        oz.append(oH);
        var ou = r.getButtonOnlyText(oJ, cw);
        ou.addClass("ui-state-active");
        oH.append(ou);
    };
    gE.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_delete_font");
        gE.update(ou);
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    gE.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_delete_font");
        ov.dialog("close");
    };
    gE.deleteFonts = function (ox) {
        var ov = ox
            .getSaveLocalStorage()
            .getSaveClientData()
            .getListCustomFonts();
        for (var oy = 0; oy < ov.size(); oy++) {
            var ow = ov.get(oy);
            var ou = $("input[name=" + ox.getEditorId() + "_" + fN + oy + "]");
            if (ou.is(":checked")) {
                ow.setRemove(true);
            }
        }
        ox.getSaveLocalStorage().saveFonts(ox.getEditorId());
        l0.updateSelectFont(ox, em);
    };
    gE.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_delete_font");
        ov.dialog("destroy").remove();
    };

    function lt() {}
    lt.prototype.createDialog = function (oF, ow) {
        var oE = gq.translate(ow, "dialog_add_google_font");
        var oA = gq.translate(ow, "dialog_add_google_font_desc");
        var ov = gq.translate(ow, "dialog_add_google_font_name");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "dialog_add_google_font' title='" +
                oE +
                "'></div>",
        );
        var ou = $("<center/>");
        oz.append(ou);
        var oD = $("<p>" + oA + "</p>");
        ou.append(oD);
        oz.append("<hr/>");
        var oG = $("<table width='100%'></table>");
        var oB = $("<tr></tr>");
        oG.append(oB);
        var oy = $("<td><div>" + ov + "</div></td>");
        oB.append(oy);
        var ox = $(
            "<td align='center'><input style='width:150px' name='" +
                ow.getEditorId() +
                "_" +
                e5 +
                "'/></td>",
        );
        oB.append(ox);
        oz.append(oG);
        oz.append("<hr/>");
        ou = $("<center/>");
        oz.append(ou);
        var oC = r.getButtonOnlyText(ow, bO);
        oC.addClass("ui-state-active");
        ou.append(oC);
        oF.append(oz);
        oz.dialog({
            autoOpen: false,
            width: 350,
        });
    };
    lt.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_add_google_font");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    lt.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_add_google_font");
        ov.dialog("close");
    };
    lt.getFontName = function (ov) {
        var ou = $("input[name=" + ov.getEditorId() + "_" + e5 + "]");
        return ou.val();
    };
    lt.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_add_google_font");
        ov.dialog("destroy").remove();
    };

    function l4() {}
    l4.prototype.createDialog = function (ov, ow) {
        var ox = gq.translate(ow, "dialog_import_latex");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "dialog_import' title='" +
                ox +
                "'></div>",
        );
        oz.append(
            "<textarea name='" +
                ow.getEditorId() +
                "dialog_import_input' rows='3' style='width:100%;resize: none;'>",
        );
        oz.append("<hr/><br/>");
        var ou = $("<center/>");
        oz.append(ou);
        var oy = r.getButtonOnlyText(ow, gi);
        oy.addClass("ui-state-active");
        ou.append(oy);
        oz.append("<br/>");
        ov.append(oz);
        oz.dialog({
            autoOpen: false,
            width: 400,
        });
    };
    l4.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_import");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    l4.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_import");
        ov.dialog("close");
    };
    l4.getMathML = function (ov) {
        var ou = $(
            "textarea[name=" + ov.getEditorId() + "dialog_import_input]",
        );
        return ou.val();
    };
    l4.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_import");
        ov.dialog("destroy").remove();
    };

    function jJ() {}
    jJ.prototype.createDialog = function (oF, ov) {
        var oE = gq.translate(ov, "menu_help_license");
        var oy = gq.translate(ov, "menu_help_license_prof");
        var oG = gq.translate(ov, "menu_help_license_exp");
        var oA = gq.translate(ov, "menu_help_license_prod");
        var ox = gq.translate(ov, "menu_help_license_iss");
        var ou = gq.translate(ov, "menu_help_license_email");
        var oz = gq.translate(ov, "menu_help_license_creation");
        var oD = gq.translate(ov, "menu_help_license_expiration");
        var oB = gq.translate(ov, "menu_help_license_link");
        var ow = $(
            "<div id='" +
                ov.getEditorId() +
                "dialog_license' title='" +
                oE +
                "'></div>",
        );
        var oI =
            "<table width='100%'>	<tr><td><b>" +
            oy +
            ":</b></td><td align='right'>" +
            ov.getL().isP() +
            "</td></tr>	<tr><td><b>" +
            oG +
            ":</b></td><td align='right'>" +
            ov.getL().isE() +
            "</td></tr></table>";
        ow.append(oI);
        ow.append("<br/>");
        ow.append("<br/>");
        var oH =
            "<table width='100%'>	<tr><td width='50%''><b>" +
            oA +
            "</b></td><td align='right'>" +
            ov.getL().getProduct() +
            "</td></tr>	<tr><td><b>" +
            ox +
            ":</b></td><td align='right'>" +
            ov.getL().getS() +
            "</td></tr>	<tr><td><b>" +
            ou +
            ":</b></td><td align='right'>" +
            ov.getL().getEm() +
            "</td></tr>	<tr><td><b>" +
            oz +
            ":</b></td><td align='right'>" +
            ov.getL().getBuyDateS() +
            "</td></tr>	<tr><td><b>" +
            oD +
            ":</b></td><td align='right'>" +
            ov.getL().getExpireDateS() +
            "</td></tr></table>";
        ow.append(oH);
        ow.append("<br/>");
        var oC =
            "<center><a style='text-decoration: none;color:blue' href='/buy/publicKey.txt' target='_new'>" +
            oB +
            "</a></center>";
        ow.append(oC);
        oF.append(ow);
        ow.dialog({
            autoOpen: false,
            width: 400,
        });
    };
    jJ.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_license");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    jJ.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_license");
        ov.dialog("close");
    };
    jJ.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_license");
        ov.dialog("destroy").remove();
    };

    function j9() {}
    j9.prototype.createDialog = function (ov, ow) {
        var ox = gq.translate(ow, "dialog_load_mathml");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "dialog_load' title='" +
                ox +
                "'></div>",
        );
        oz.append(
            "<textarea name='" +
                ow.getEditorId() +
                "dialog_load_input' rows='6' style='width:100%;resize: none;'>",
        );
        oz.append("<hr/><br/>");
        var ou = $("<center/>");
        oz.append(ou);
        var oy = r.getButtonOnlyText(ow, oq);
        oy.addClass("ui-state-active");
        ou.append(oy);
        oz.append("<br/>");
        ov.append(oz);
        oz.dialog({
            autoOpen: false,
            width: 400,
        });
    };
    j9.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_load");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    j9.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_load");
        ov.dialog("close");
    };
    j9.getMathML = function (ov) {
        var ou = $("textarea[name=" + ov.getEditorId() + "dialog_load_input]");
        return ou.val();
    };
    j9.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_load");
        ov.dialog("destroy").remove();
    };

    function mQ() {}
    mQ.prototype.createDialog = function (oF, ow) {
        var oE = gq.translate(ow, "dialog_add_local_font");
        var oA = gq.translate(ow, "dialog_add_local_font_desc");
        var ov = gq.translate(ow, "dialog_add_local_font_name");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "dialog_add_local_font' title='" +
                oE +
                "'></div>",
        );
        var ou = $("<center/>");
        oz.append(ou);
        var oD = $("<p>" + oA + "</p>");
        ou.append(oD);
        oz.append("<hr/>");
        var oG = $("<table width='100%'></table>");
        var oB = $("<tr></tr>");
        oG.append(oB);
        var oy = $("<td><div>" + ov + "</div></td>");
        oB.append(oy);
        var ox = $(
            "<td align='center'><input style='width:150px' name='" +
                ow.getEditorId() +
                "_" +
                mT +
                "'/></td>",
        );
        oB.append(ox);
        oz.append(oG);
        oz.append("<hr/>");
        ou = $("<center/>");
        oz.append(ou);
        var oC = r.getButtonOnlyText(ow, jz);
        oC.addClass("ui-state-active");
        ou.append(oC);
        oF.append(oz);
        oz.dialog({
            autoOpen: false,
            width: 350,
        });
    };
    mQ.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_add_local_font");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    mQ.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_add_local_font");
        ov.dialog("close");
    };
    mQ.getFontName = function (ov) {
        var ou = $("input[name=" + ov.getEditorId() + "_" + mT + "]");
        return ou.val();
    };
    mQ.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_add_local_font");
        ov.dialog("destroy").remove();
    };

    function fR() {}
    fR.prototype.createDialog = function (ou, ov) {
        var ow = gq.translate(ov, "dialog_newstips");
        var ox = $(
            "<div id='" +
                ov.getEditorId() +
                "dialog_newstips' title='" +
                ow +
                "'></div>",
        );
        ou.append(ox);
        ox.dialog({
            autoOpen: false,
            width: 400,
        });
        fR.update(ov);
    };
    fR.update = function (oN) {
        var oB = oN.getNewsTipsManager();
        var oM = oB.getCurrentBean();
        if (oM == null) {
            return;
        }
        var oF = $("#" + oN.getEditorId() + "dialog_newstips");
        oF.empty();
        var oK = $("<table width='100%'></table>");
        var ox = $("<tr></tr>");
        var oC = $("<td  width='50'></td>");
        var oD = oB.disablePrevIndex();
        var oI = r.getButtonOriginalSize(oN, lj, "arrow_left.png", oD);
        oC.append(oI);
        var oA = $("<td width='300' height='200'  align='center'></td>");
        var oy = oN.getNewsTipsManager().getCurrentIndex();
        var ou = oM.getContent().get(oy);
        oA.append($(ou));
        var oz = $("<td align='right' width='50'></td>");
        var oE = oB.disableNextIndex();
        var oQ = r.getButtonOriginalSize(oN, im, "arrow_right.png", oE);
        oz.append(oQ);
        ox.append(oC);
        ox.append(oA);
        ox.append(oz);
        oK.append(ox);
        oF.append(oK);
        oF.append("<hr>");
        var oJ = $("<table width='100%'></table>");
        oF.append(oJ);
        var ov = $("<tr></tr>");
        oJ.append(ov);
        var ow = $("<td></td>");
        ov.append(ow);
        var oG = oN.getSaveLocalStorage().getHideTips(oN.getEditorId());
        var oP = oG == "true";
        var oH = r.getCheckbox(oN, kk, oP);
        ow.append(oH);
        var oO = $("<td align='right'></td>");
        ov.append(oO);
        var oL = r.getButtonOnlyText(oN, fK);
        oO.append(oL);
    };
    fR.showRandom = function (ou) {
        var ow = ou.getSaveLocalStorage().getHideTips(ou.getEditorId());
        if (ow == "true") {
            return;
        }
        var ov = 5;
        ov = Math.floor(Math.random() * 5);
        if (ov > 0) {
            return;
        }
        fR.show(ou);
    };
    fR.show = function (ov) {
        var ou = ov.getNewsTipsManager().getCurrentBean();
        if (ou == null) {
            return;
        }
        var ow = $("#" + ov.getEditorId() + "dialog_newstips");
        fR.update(ov);
        ow.dialog("open");
        ow.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ov.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    fR.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_newstips");
        ov.dialog("close");
    };
    fR.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_newstips");
        ov.dialog("destroy").remove();
    };
    fR.loadNewsTips = function (ou) {
        fR.loadMultiplicationNews(ou);
        fR.loadSubtractionNews(ou);
        fR.loadFontNews(ou);
        fR.loadAdditionNews(ou);
        fR.loadDivisionNews(ou);
    };
    fR.loadDivisionNews = function (ov) {
        var ou = new c();
        ou.setId("division");
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/1.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/2.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/3.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/4.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/5.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/6.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/7.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/8.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/9.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/10.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/11.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 1:</b> Click on 'Insert' menu<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/5/s1.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 2:</b> Click on 'Use Templates'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/5/s2.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 3:</b> Click on 'Generate Division'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/5/s3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 4:</b> Use the popup to generate your division<img width='300' src='" +
                ov.getImgPath() +
                "/newsletter/5/s4.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 5:</b> Change the division style<br><img width='200' src='" +
                ov.getImgPath() +
                "/newsletter/5/s5.png'></div>",
        );
        ou.addAdList(0, 10);
        fR.addEnd(ou);
        ov.getNewsTipsManager().addTips(ou);
    };
    fR.loadMultiplicationNews = function (ov) {
        var ou = new c();
        ou.setId("subtraction");
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img src='" +
                ov.getImgPath() +
                "/newsletter/4/1.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img src='" +
                ov.getImgPath() +
                "/newsletter/4/2.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img src='" +
                ov.getImgPath() +
                "/newsletter/4/3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 1:</b> Click on 'Insert' menu<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/4/s1.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 2:</b> Click on 'Use Templates'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/4/s2.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 3:</b> Click on 'Generate Multiplication'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/4/s3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 4:</b> Use the popup to generate your multiplication<img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/4/s4.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 5:</b> Change the properties for each element<br><img width='200' src='" +
                ov.getImgPath() +
                "/newsletter/4/s5.png'></div>",
        );
        ou.addAdList(0, 2);
        fR.addEnd(ou);
        ov.getNewsTipsManager().addTips(ou);
    };
    fR.loadSubtractionNews = function (ov) {
        var ou = new c();
        ou.setId("subtraction");
        ou.addContent(
            "<div><b>Do you know how easy is to create that?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/3/1.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how easy is to create that?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/3/2.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how easy is to create that?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/3/3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 1:</b> Click on 'Insert' menu<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/3/s1.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 2:</b> Click on 'Use Templates'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/3/s2.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 3:</b> Click on 'Generate Subtraction'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/3/s3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 4:</b> Use the popup to generate your subtraction<img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/3/s4.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 5:</b> Change the properties for each element<br><img width='200' src='" +
                ov.getImgPath() +
                "/newsletter/3/s5.png'></div>",
        );
        ou.addAdList(0, 2);
        fR.addEnd(ou);
        ov.getNewsTipsManager().addTips(ou);
    };
    fR.loadFontNews = function (ov) {
        var ou = new c();
        ou.setId("fonts");
        ou.addContent(
            "<div><b>How to add this GOOGLE font?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/1.png'></div>",
        );
        ou.addContent(
            "<div><b>How to add this LOCAL font?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/2.png'></div>",
        );
        ou.addContent(
            "<div><b>How to add this LOCAL Arabic font?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 1:</b> Select a text element and select the font dropdown<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/Solution1.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 2:</b> Click on 'Add Local Font ...' or 'Add Google Font ...'<br><br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/1/Solution2.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 3:</b> Popup for Local Font<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/Solution3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 4:</b> Popup for Google Font<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/Solution4.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 5:</b> The font added will be available in font dropdown<br><img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/1/Solution6.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 6:</b> To delete the added fonts click on 'Remove Fonts' button<br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/Solution7.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 7:</b> The popup to remove added fonts<br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/1/Solution8.png'></div>",
        );
        ou.addAdList(0, 2);
        fR.addEnd(ou);
        ov.getNewsTipsManager().addTips(ou);
    };
    fR.loadAdditionNews = function (ov) {
        var ou = new c();
        ou.setId("addition");
        ou.addContent(
            "<div><b>Do you know how easy is to create that?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/2/stack_carry_point.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to change the decimalpoint?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/2/stack_carry.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to have a border?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/2/stack_carry_border.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to change the color?</b><br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/2/stack_color.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img width='100' src='" +
                ov.getImgPath() +
                "/newsletter/2/stack_multiple.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img width='100' src='" +
                ov.getImgPath() +
                "/newsletter/2/stack_multiple_2.png'></div>",
        );
        ou.addContent(
            "<div><b>Do you know how to create that?</b><br><br><img width='100' src='" +
                ov.getImgPath() +
                "/newsletter/2/stack_multiple_3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 1:</b> Click on 'Insert' menu<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/2/solution1.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 2:</b> Click on 'Use Templates'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/2/solution2.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 3:</b> Click on 'Generate Addition'<br><br><img width='250' src='" +
                ov.getImgPath() +
                "/newsletter/2/solution3.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 4:</b> Use popup to generate your addition<img height='200' src='" +
                ov.getImgPath() +
                "/newsletter/2/solution4.png'></div>",
        );
        ou.addContent(
            "<div><b>Solution step 5:</b> Change the properties for each element<br><img width='200' src='" +
                ov.getImgPath() +
                "/newsletter/2/solution5.png'></div>",
        );
        ou.addAdList(0, 6);
        fR.addEnd(ou);
        ov.getNewsTipsManager().addTips(ou);
    };
    fR.addEnd = function (ou) {
        ou.addContent(
            "<div>If you find bugs or you want other features, send an email to:<br><b>ionel.alexandru@gmail.com</b><br><br><br><i>We will try to keep the clients happy<h2><b>Thank you</b></h2></i></div>",
        );
    };

    function i3() {
        this.divPopups;
        this.config;
        this.navigationDialog = new iB();
        this.alertWarning = new i2();
        this.saveAs = new d7();
        this.load = new j9();
        this.importDialog = new l4();
        this.wizPoly = new gY();
        this.wizTable = new cv();
        this.matTable = new d9();
        this.picTable = new hJ();
        this.localFontDialog = new mQ();
        this.googleFontDialog = new lt();
        this.deleteFontDialog = new gE();
        this.licenseDialog = new jJ();
        this.additionDialog = new nb();
        this.subtractionDialog = new mG();
        this.multiplicationDialog = new aw();
        this.divisionDialog = new aC();
        this.newsTipsDialog = new fR();
    }
    i3.prototype.createPopups = function (ou, ov) {
        this.config = ov;
        this.divPopups = $(
            "<div id='" + ov.getEditorId() + "_divPopups'></div>",
        );
        ou.append(this.divPopups);
        this.updatePopups();
    };
    i3.prototype.updatePopups = function () {
        this.divPopups.empty();
        this.navigationDialog.removeDialog(this.config);
        this.alertWarning.removeDialog(this.config);
        this.saveAs.removeDialog(this.config);
        this.load.removeDialog(this.config);
        this.importDialog.removeDialog(this.config);
        this.wizPoly.removeDialog(this.config);
        this.wizTable.removeDialog(this.config);
        this.matTable.removeDialog(this.config);
        this.picTable.removeDialog(this.config);
        this.localFontDialog.removeDialog(this.config);
        this.googleFontDialog.removeDialog(this.config);
        this.deleteFontDialog.removeDialog(this.config);
        this.licenseDialog.removeDialog(this.config);
        this.additionDialog.removeDialog(this.config);
        this.subtractionDialog.removeDialog(this.config);
        this.multiplicationDialog.removeDialog(this.config);
        this.divisionDialog.removeDialog(this.config);
        this.newsTipsDialog.removeDialog(this.config);
        this.navigationDialog.createDialog(this.divPopups, this.config);
        this.alertWarning.createDialog(this.divPopups, this.config);
        this.saveAs.createDialog(this.divPopups, this.config);
        this.load.createDialog(this.divPopups, this.config);
        this.importDialog.createDialog(this.divPopups, this.config);
        this.wizPoly.createDialog(this.divPopups, this.config);
        this.wizTable.createDialog(this.divPopups, this.config);
        this.matTable.createDialog(this.divPopups, this.config);
        this.picTable.createDialog(this.divPopups, this.config);
        this.localFontDialog.createDialog(this.divPopups, this.config);
        this.googleFontDialog.createDialog(this.divPopups, this.config);
        this.deleteFontDialog.createDialog(this.divPopups, this.config);
        this.licenseDialog.createDialog(this.divPopups, this.config);
        this.additionDialog.createDialog(this.divPopups, this.config);
        this.subtractionDialog.createDialog(this.divPopups, this.config);
        this.multiplicationDialog.createDialog(this.divPopups, this.config);
        this.divisionDialog.createDialog(this.divPopups, this.config);
        this.newsTipsDialog.createDialog(this.divPopups, this.config);
    };

    function d7() {}
    d7.prototype.createDialog = function (oz, oJ) {
        var oL = gq.translate(oJ, "dialog_save_as");
        var oK = gq.translate(oJ, "dialog_save_as_mathml");
        var oE = gq.translate(oJ, "dialog_save_as_mathml_c");
        var oC = gq.translate(oJ, "dialog_save_as_mathml_e");
        var oA = gq.translate(oJ, "dialog_save_as_mathml_u");
        var oI = gq.translate(oJ, "dialog_save_as_image");
        var oG = gq.translate(oJ, "dialog_save_as_latex");
        var oD = $(
            "<div id='" +
                oJ.getEditorId() +
                "dialog_save_as' title='" +
                oL +
                "'></div>",
        );
        oD.append("<br/>");
        var oF = $(
            "<input type='radio' name='" +
                oJ.getEditorId() +
                "_" +
                fy +
                "' value='mathml' checked='true'>" +
                oK +
                "</input>",
        );
        oF.change(function (oM) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oD.append(oF);
        oD.append("<br/><br/>");
        var oy = $(
            "<input type='radio' name='" +
                oJ.getEditorId() +
                "_save_as_MathMLType' value='CHARS'>" +
                oE +
                "</input>",
        );
        oy.css("margin-left", "20px");
        oD.append(oy);
        var ox = $(
            "<input type='radio' name='" +
                oJ.getEditorId() +
                "_save_as_MathMLType' value='ENTITIES' checked='true'>" +
                oC +
                "</input>",
        );
        ox.css("margin-left", "20px");
        oD.append(ox);
        var ow = $(
            "<input type='radio' name='" +
                oJ.getEditorId() +
                "_save_as_MathMLType' value='UNICODE'>" +
                oA +
                "</input>",
        );
        ow.css("margin-left", "20px");
        oD.append(ow);
        oD.append("<br/><br/>");
        var oB = $(
            "<input type='radio' name='" +
                oJ.getEditorId() +
                "_" +
                fy +
                "' value='image'>" +
                oI +
                "</input>",
        );
        oB.change(function (oM) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oD.append(oB);
        oD.append("<br/><br/>");
        var ov = $(
            "<input type='radio' name='" +
                oJ.getEditorId() +
                "_" +
                fy +
                "' value='latex'>" +
                oG +
                "</input>",
        );
        ov.change(function (oM) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oD.append(ov);
        oD.append("<br/><br/>");
        oD.append("<hr/><br/>");
        var oH = $("<center/>");
        oD.append(oH);
        var ou = r.getButtonOnlyText(oJ, oj);
        ou.addClass("ui-state-active");
        oH.append(ou);
        oD.append("<br/>");
        oz.append(oD);
        oD.dialog({
            autoOpen: false,
            width: 400,
        });
    };
    d7.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_save_as");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    d7.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_save_as");
        ov.dialog("close");
    };
    d7.getSaveType = function (ov) {
        var ou = $("input[name=" + ov.getEditorId() + "_" + fy + "]");
        ou = ou.filter(":checked");
        return ou.val();
    };
    d7.getMathMLType = function (ov) {
        var ou = $("input[name=" + ov.getEditorId() + "_save_as_MathMLType]");
        ou = ou.filter(":checked");
        return ou.val();
    };
    d7.changeSelection = function (ou) {
        var ov = d7.getSaveType(ou);
        if (ov == "mathml") {
            var ow = $(
                "input[name=" + ou.getEditorId() + "_save_as_MathMLType]",
            );
            ow.removeAttr("disabled");
        } else {
            if (ov == "image") {
                var ow = $(
                    "input[name=" + ou.getEditorId() + "_save_as_MathMLType]",
                );
                ow.attr("disabled", true);
            } else {
                var ow = $(
                    "input[name=" + ou.getEditorId() + "_save_as_MathMLType]",
                );
                ow.attr("disabled", true);
            }
        }
    };
    d7.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_save_as");
        ov.dialog("destroy").remove();
    };

    function nb() {}
    nb.prototype.createDialog = function (ov, ow) {
        var ox = gq.translate(ow, "dialog_wizard_addition");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "_wizard_addition' title='" +
                ox +
                "'></div>",
        );
        ov.append(oz);
        var oB = $(
            "<div id='" + ow.getEditorId() + "_wizard_addition_content'></div>",
        );
        oz.append(oB);
        var oA = new fM();
        oA.add("123.45");
        oA.add("678.9");
        nb.update(ow, oA);
        oz.append("<hr/>");
        var ou = $("<center/>");
        oz.append(ou);
        var oy = r.getButtonOnlyText(ow, bx);
        oy.addClass("ui-state-active");
        ou.append(oy);
        oz.dialog({
            autoOpen: false,
            width: 300,
        });
    };
    nb.update = function (oZ, oA) {
        var oS = gq.translate(oZ, "dialog_wizard_addition_carry");
        var oF = gq.translate(oZ, "dialog_wizard_addition_sign");
        var oJ = gq.translate(oZ, "prop__align_left");
        var oB = gq.translate(oZ, "prop__align_right");
        var oM = gq.translate(oZ, "prop__decimalpoint_used");
        var oK = gq.translate(oZ, "dialog_wizard_addition_thousands");
        var oX = $("#" + oZ.getEditorId() + "_wizard_addition_content");
        oX.empty();
        var oR = $("<table width='100%'></table>");
        var oY = $(
            "<tr><td align='left'><b><div>" +
                oS +
                "</div></b></td><td align='right'><input type='checkbox' name='" +
                oZ.getEditorId() +
                "_wizard_addition_carry' checked/></td></tr>",
        );
        oR.append(oY);
        var oW = $(
            "<tr><td align='left'><b>" +
                oF +
                "</b></td><td align='right'><input type='radio' name='" +
                oZ.getEditorId() +
                "_wizard_addition_pos' value='left' checked/> " +
                oJ +
                "&nbsp;&nbsp;&nbsp;<input type='radio' name='" +
                oZ.getEditorId() +
                "_wizard_addition_pos'  value='right'/> " +
                oB +
                "</nobr></td></tr>",
        );
        oR.append(oW);
        var oN = oZ.getSelectedElement();
        if (oN != null) {
            var oH = oN.getSelectedPanel();
            if (oH != null) {
                var oy = oH.getBean();
                var o0 = oy.getCurrentDefStyle().getDecimalpoint();
                var oQ = gq.translate(oZ, "prop__decimalpoint_point");
                var ow = gq.translate(oZ, "prop__decimalpoint_comma");
                var oP = gq.translate(oZ, "prop__decimalpoint_space");
                var ou = gq.translate(oZ, "prop__decimalpoint_none");
                var oI = oQ;
                if (o0 != null && o0 == ",") {
                    oI = ow;
                }
                var oV = $(
                    "<tr><td align='left'><b>" +
                        oM +
                        "</b></td><td align='right'>" +
                        oI +
                        "</td></tr>",
                );
                oR.append(oV);
                var oL =
                    "<select name='" +
                    oZ.getEditorId() +
                    "_wizard_addition_thousands'>";
                oL = oL + "<option value='none'>" + ou + "</option>";
                oL = oL + "<option value='space'>" + oP + "</option>";
                if (o0 != null && o0 == ",") {
                    oL = oL + "<option value='point'>" + oQ + "</option>";
                } else {
                    oL = oL + "<option value='comma'>" + ow + "</option>";
                }
                var oU = $(
                    "<tr><td align='left'><b>" +
                        oK +
                        "</b></td><td align='right'>" +
                        oL +
                        "</td></tr>",
                );
                oR.append(oU);
            }
        }
        oX.append(oR);
        oX.append("<hr/>");
        var oT = $("<table width='100%'></table>");
        for (var oO = 0; oO < oA.size(); oO++) {
            var oD = oA.get(oO);
            var ov = $(
                "<tr id='" +
                    oZ.getEditorId() +
                    "_wizard_addition_row_" +
                    oO +
                    "'></tr>",
            );
            oT.append(ov);
            var oz = $(
                "<td align='center' style='vertical-align: middle'><input name='" +
                    oZ.getEditorId() +
                    "_wizard_addition_input_" +
                    oO +
                    "' value='" +
                    oD +
                    "'/></td>",
            );
            ov.append(oz);
            var ox = $("<td align='right'></td>");
            ov.append(ox);
            if (oO > 1) {
                ox.append(
                    r.getButtonMargin(
                        oZ,
                        nG + "_" + oO,
                        "remove.png",
                        false,
                        5,
                    ),
                );
            }
        }
        var oG = $("<tr></tr>");
        oT.append(oG);
        var oE = $("<td></td>");
        oG.append(oE);
        var oC = $("<td align='right'></td>");
        oG.append(oC);
        oC.append(r.getButtonMargin(oZ, hM, "add.png", false, 5));
        oX.append(oT);
    };
    nb.show = function (ou) {
        var ow = nb.getNumbers(ou);
        nb.update(ou, ow);
        var ov = $("#" + ou.getEditorId() + "_wizard_addition");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    nb.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_addition");
        ov.dialog("close");
    };
    nb.getNumbers = function (ow) {
        var ou = new fM();
        var ox = 0;
        while (true) {
            var ov = $(
                "input[name=" +
                    ow.getEditorId() +
                    "_wizard_addition_input_" +
                    ox +
                    "]",
            );
            var oy = false;
            oy = ov.length;
            if (!oy) {
                break;
            }
            ou.add(ov.val());
            ox = ox + 1;
        }
        return ou;
    };
    nb.displayCarrys = function (ov) {
        var ou = $(
            "input[name=" + ov.getEditorId() + "_wizard_addition_carry]",
        );
        var ow = false;
        ow = ou.prop("checked");
        return ow;
    };
    nb.getThoussnds = function (ov) {
        var ou = $(
            "select[name=" + ov.getEditorId() + "_wizard_addition_thousands]",
        );
        return ou.val();
    };
    nb.displayLeft = function (ov) {
        var ou = $(
            "input[name=" + ov.getEditorId() + "_wizard_addition_pos]:checked",
        );
        return ou.val() == "left";
    };
    nb.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_addition");
        ov.dialog("destroy").remove();
    };

    function aC() {}
    aC.prototype.createDialog = function (ov, ow) {
        var ox = gq.translate(ow, "dialog_wizard_division");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "_wizard_division' title='" +
                ox +
                "'></div>",
        );
        ov.append(oz);
        var oB = $(
            "<div id='" + ow.getEditorId() + "_wizard_division_content'></div>",
        );
        oz.append(oB);
        var oA = new fM();
        oA.add("13.06");
        oA.add("3");
        aC.update(ow, oA);
        oz.append("<hr/>");
        var ou = $("<center/>");
        oz.append(ou);
        var oy = r.getButtonOnlyText(ow, lB);
        oy.addClass("ui-state-active");
        ou.append(oy);
        oz.dialog({
            autoOpen: false,
            width: 520,
        });
    };
    aC.update = function (oY, oE) {
        var oM = gq.translate(oY, "dialog_wizard_division_type");
        var oV = gq.translate(oY, "dialog_wizard_division_precision");
        var oX = $("#" + oY.getEditorId() + "_wizard_division_content");
        oX.empty();
        var oT = $("<table width='100%'></table>");
        var oK = "<table width='100%'>";
        oK = oK + "<tr>";
        for (var oR = 0; oR < 5; oR++) {
            oK = oK + "<td>";
            if (oR == 0) {
                oK =
                    oK +
                    "<input type='radio' name='" +
                    oY.getEditorId() +
                    "_wizard_division_type'  value='" +
                    oR +
                    "' checked/>";
            } else {
                oK =
                    oK +
                    "<input type='radio' name='" +
                    oY.getEditorId() +
                    "_wizard_division_type'  value='" +
                    oR +
                    "'/>";
            }
            oK = oK + "</td>";
            oK = oK + "<td>";
            oK =
                oK +
                "<img src='" +
                oY.getImgPath() +
                "/wiz/div/" +
                oR +
                ".png' height='28' border='1'/>";
            oK = oK + "</td>";
        }
        oK = oK + "</tr>";
        oK = oK + "<tr>";
        for (var oR = 5; oR < 10; oR++) {
            oK = oK + "<td>";
            oK =
                oK +
                "<input type='radio' name='" +
                oY.getEditorId() +
                "_wizard_division_type' value='" +
                oR +
                "'/>";
            oK = oK + "</td>";
            oK = oK + "<td>";
            oK =
                oK +
                "<img src='" +
                oY.getImgPath() +
                "/wiz/div/" +
                oR +
                ".png' height='28' border='1'/>";
            oK = oK + "</td>";
        }
        oK = oK + "</tr>";
        oK = oK + "</table>";
        var ou = $("<tr><td align='center'><b>" + oM + "</b></td></tr>");
        oT.append(ou);
        var oU = $("<tr><td align='center'>" + oK + "</td></tr>");
        oT.append(oU);
        oX.append(oT);
        oX.append("<hr/>");
        var oQ = $("<table width='100%'></table>");
        var oG =
            "<select name='" +
            oY.getEditorId() +
            "_wizard_division_precision'>";
        for (var oR = 0; oR < 11; oR++) {
            if (oR == 2) {
                oG =
                    oG +
                    "<option value='" +
                    oR +
                    "' selected>" +
                    oR +
                    "</option>";
            } else {
                oG = oG + "<option value='" + oR + "'>" + oR + "</option>";
            }
        }
        var oS = $(
            "<tr><td align='left'><b>" +
                oV +
                "</b></td><td align='right'>" +
                oG +
                "</td></tr>",
        );
        oQ.append(oS);
        oX.append(oQ);
        var oN = oY.getSelectedElement();
        if (oN != null) {
            var oI = oN.getSelectedPanel();
            if (oI != null) {
                var oB = oI.getBean();
                var oZ = oB.getCurrentDefStyle().getDecimalpoint();
                var oP = gq.translate(oY, "prop__decimalpoint_point");
                var ox = gq.translate(oY, "prop__decimalpoint_comma");
                var oO = gq.translate(oY, "prop__decimalpoint_space");
                var ov = gq.translate(oY, "prop__decimalpoint_none");
                var oJ = oP;
                if (oZ != null && oZ == ",") {
                    oJ = ox;
                }
                var oL =
                    "<select name='" +
                    oY.getEditorId() +
                    "_wizard_division_thousands'>";
                oL = oL + "<option value='none'>" + ov + "</option>";
                oL = oL + "<option value='space'>" + oO + "</option>";
                if (oZ != null && oZ == ",") {
                    oL = oL + "<option value='point'>" + oP + "</option>";
                } else {
                    oL = oL + "<option value='comma'>" + ox + "</option>";
                }
            }
        }
        oX.append("<hr/>");
        var oW = $("<table width='100%'></table>");
        var ow = $("<tr></tr>");
        oW.append(ow);
        var oD = oE.get(0);
        var oA = oE.get(1);
        var oC = $(
            "<td align='right'><input name='" +
                oY.getEditorId() +
                "_wizard_division_input_0' value='" +
                oD +
                "'/></td>",
        );
        ow.append(oC);
        var oz = $("<td align='center' width='2%'>/</td>");
        ow.append(oz);
        var oy = $(
            "<td align='left'><input name='" +
                oY.getEditorId() +
                "_wizard_division_input_1' value='" +
                oA +
                "'/></td>",
        );
        ow.append(oy);
        var oH = $("<tr></tr>");
        oW.append(oH);
        var oF = $("<td></td>");
        oH.append(oF);
        oX.append(oW);
    };
    aC.show = function (ou) {
        var ow = aC.getNumbers(ou);
        aC.update(ou, ow);
        var ov = $("#" + ou.getEditorId() + "_wizard_division");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    aC.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_division");
        ov.dialog("close");
    };
    aC.getNumbers = function (ow) {
        var ou = new fM();
        var ox = 0;
        while (true) {
            var ov = $(
                "input[name=" +
                    ow.getEditorId() +
                    "_wizard_division_input_" +
                    ox +
                    "]",
            );
            var oy = false;
            oy = ov.length;
            if (!oy) {
                break;
            }
            ou.add(ov.val());
            ox = ox + 1;
        }
        return ou;
    };
    aC.getThoussnds = function (ov) {
        var ou = $(
            "select[name=" + ov.getEditorId() + "_wizard_division_thousands]",
        );
        return ou.val();
    };
    aC.getDivisionType = function (ov) {
        var ou = $(
            "input[name=" + ov.getEditorId() + "_wizard_division_type]:checked",
        );
        return ou.val();
    };
    aC.getPrecision = function (ov) {
        var ou = $(
            "select[name=" + ov.getEditorId() + "_wizard_division_precision]",
        );
        var ow = ou.val();
        return lv.getIntegerValue(ow, 0);
    };
    aC.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_division");
        ov.dialog("destroy").remove();
    };

    function d9() {}
    d9.prototype.createDialog = function (oD, oV) {
        var oW = gq.translate(oV, "dialog_wizard_matrix");
        var oE = gq.translate(oV, "dialog_wizard_matrix_rows");
        var ov = gq.translate(oV, "dialog_wizard_matrix_columns");
        var oJ = $(
            "<div id='" +
                oV.getEditorId() +
                "dialog_wiz_matrix' title='" +
                oW +
                "'></div>",
        );
        var oM = $("<table width='100%'></table>");
        var oU = $("<tr></tr>");
        oM.append(oU);
        var oz = $("<td></td>");
        oU.append(oz);
        var oT = $(
            "<input type='radio' name='" +
                oV.getEditorId() +
                "_" +
                db +
                "' value='1' checked='true'></input>",
        );
        oT.change(function (oX) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oz.append(oT);
        var oy = $("<td><img src='" + oV.getImgPath() + "/wiz/2.png'/></td>");
        oU.append(oy);
        var oH = $("<td></td>");
        oU.append(oH);
        var oR = $(
            "<input type='radio' name='" +
                oV.getEditorId() +
                "_" +
                db +
                "' value='2'></input>",
        );
        oR.change(function (oX) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oH.append(oR);
        var oF = $("<td><img src='" + oV.getImgPath() + "/wiz/2_1.png'/></td>");
        oU.append(oF);
        var oS = $("<td></td>");
        oU.append(oS);
        var oO = $(
            "<input type='radio' name='" +
                oV.getEditorId() +
                "_" +
                db +
                "' value='3'></input>",
        );
        oO.change(function (oX) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oS.append(oO);
        var oP = $("<td><img src='" + oV.getImgPath() + "/wiz/2_2.png'/></td>");
        oU.append(oP);
        var oC = $("<td></td>");
        oU.append(oC);
        var oN = $(
            "<input type='radio' name='" +
                oV.getEditorId() +
                "_" +
                db +
                "' value='4'></input>",
        );
        oN.change(function (oX) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oC.append(oN);
        var oB = $("<td><img src='" + oV.getImgPath() + "/wiz/2_3.png'/></td>");
        oU.append(oB);
        var oI = $("<td></td>");
        oU.append(oI);
        var oL = $(
            "<input type='radio' name='" +
                oV.getEditorId() +
                "_" +
                db +
                "' value='5'></input>",
        );
        oL.change(function (oX) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oI.append(oL);
        var oG = $("<td><img src='" + oV.getImgPath() + "/wiz/2_4.png'/></td>");
        oU.append(oG);
        oJ.append(oM);
        oJ.append("<hr/>");
        oM = $("<table width='100%'></table>");
        oU = $("<tr></tr>");
        oM.append(oU);
        oz = $("<td><div>" + oE + "</div></td>");
        oU.append(oz);
        var oA = "";
        for (var oK = 1; oK < 21; oK++) {
            oA = oA + "<option value='" + oK + "'>" + oK + "</option>";
        }
        oy = $(
            "<td align='center'><select style='width:50px' name='" +
                oV.getEditorId() +
                "_" +
                nU +
                "'><option selected  value='n'>n</option>" +
                oA +
                "</select></td>",
        );
        oU.append(oy);
        var ox = $("<td><div>" + ov + "</div></td>");
        oU.append(ox);
        var ow = $(
            "<td align='center'><select style='width:50px' name='" +
                oV.getEditorId() +
                "_" +
                fk +
                "'><option selected  value='n'>n</option>" +
                oA +
                "</select></td>",
        );
        oU.append(ow);
        oJ.append(oM);
        oJ.append("<hr/>");
        var oQ = $("<center/>");
        oJ.append(oQ);
        var ou = r.getButtonOnlyText(oV, ep);
        ou.addClass("ui-state-active");
        oQ.append(ou);
        oD.append(oJ);
        oJ.dialog({
            autoOpen: false,
            width: 280,
        });
    };
    d9.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_matrix");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    d9.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_matrix");
        ov.dialog("close");
    };
    d9.getSaveType = function (ov) {
        var ou = $("input[name=" + ov.getEditorId() + "_" + db + "]");
        ou = ou.filter(":checked");
        return ou.val();
    };
    d9.getRows = function (ov) {
        var ou = $("select[name=" + ov.getEditorId() + "_" + nU + "]");
        return ou.val();
    };
    d9.getColumns = function (ov) {
        var ou = $("select[name=" + ov.getEditorId() + "_" + fk + "]");
        return ou.val();
    };
    d9.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_matrix");
        ov.dialog("destroy").remove();
    };

    function aw() {}
    aw.prototype.createDialog = function (ov, ow) {
        var ox = gq.translate(ow, "dialog_wizard_multiplication");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "_wizard_multiplication' title='" +
                ox +
                "'></div>",
        );
        ov.append(oz);
        var oB = $(
            "<div id='" +
                ow.getEditorId() +
                "_wizard_multiplication_content'></div>",
        );
        oz.append(oB);
        var oA = new fM();
        oA.add("123");
        oA.add("67");
        aw.update(ow, oA);
        oz.append("<hr/>");
        var ou = $("<center/>");
        oz.append(ou);
        var oy = r.getButtonOnlyText(ow, p);
        oy.addClass("ui-state-active");
        ou.append(oy);
        oz.dialog({
            autoOpen: false,
            width: 300,
        });
    };
    aw.update = function (oW, oA) {
        var oK = gq.translate(oW, "dialog_wizard_multiplication_subgroup");
        var oE = gq.translate(oW, "dialog_wizard_multiplication_sign");
        var oI = gq.translate(oW, "prop__align_left");
        var oB = gq.translate(oW, "prop__align_right");
        var oV = $("#" + oW.getEditorId() + "_wizard_multiplication_content");
        oV.empty();
        var oR = $("<table width='100%'></table>");
        var oP = $("<table width='100%'></table>");
        var oU = $(
            "<tr><td align='left'><b>" +
                oE +
                "</b></td><td align='right'><input type='radio' name='" +
                oW.getEditorId() +
                "_wizard_multiplication_pos' value='left'/> " +
                oI +
                "&nbsp;&nbsp;&nbsp;<input type='radio' name='" +
                oW.getEditorId() +
                "_wizard_multiplication_pos'  value='right' checked/> " +
                oB +
                "</nobr></td></tr>",
        );
        oP.append(oU);
        oV.append(oP);
        var oM = $("<table width='100%'></table>");
        var oT = $(
            "<tr><td align='left'><b><div>" +
                oK +
                "</div></b></td><td align='right'><input type='checkbox' name='" +
                oW.getEditorId() +
                "_wizard_multiplication_subgroup' checked/></td></tr>",
        );
        oM.append(oT);
        oV.append(oM);
        var oL = oW.getSelectedElement();
        if (oL != null) {
            var oG = oL.getSelectedPanel();
            if (oG != null) {
                var oy = oG.getBean();
                var oX = oy.getCurrentDefStyle().getDecimalpoint();
                var oQ = gq.translate(oW, "prop__decimalpoint_point");
                var ow = gq.translate(oW, "prop__decimalpoint_comma");
                var oO = gq.translate(oW, "prop__decimalpoint_space");
                var ou = gq.translate(oW, "prop__decimalpoint_none");
                var oH = oQ;
                if (oX != null && oX == ",") {
                    oH = ow;
                }
                var oJ =
                    "<select name='" +
                    oW.getEditorId() +
                    "_wizard_multiplication_thousands'>";
                oJ = oJ + "<option value='none'>" + ou + "</option>";
                oJ = oJ + "<option value='space'>" + oO + "</option>";
                if (oX != null && oX == ",") {
                    oJ = oJ + "<option value='point'>" + oQ + "</option>";
                } else {
                    oJ = oJ + "<option value='comma'>" + ow + "</option>";
                }
            }
        }
        oV.append("<hr/>");
        var oS = $("<table width='100%'></table>");
        for (var oN = 0; oN < oA.size(); oN++) {
            var oC = oA.get(oN);
            var ov = $(
                "<tr id='" +
                    oW.getEditorId() +
                    "_wizard_multiplication_row_" +
                    oN +
                    "'></tr>",
            );
            oS.append(ov);
            var oz = $(
                "<td align='center' style='vertical-align: middle'><input name='" +
                    oW.getEditorId() +
                    "_wizard_multiplication_input_" +
                    oN +
                    "' value='" +
                    oC +
                    "'/></td>",
            );
            ov.append(oz);
            var ox = $("<td align='right'></td>");
            ov.append(ox);
        }
        var oF = $("<tr></tr>");
        oS.append(oF);
        var oD = $("<td></td>");
        oF.append(oD);
        oV.append(oS);
    };
    aw.show = function (ou) {
        var ow = aw.getNumbers(ou);
        aw.update(ou, ow);
        var ov = $("#" + ou.getEditorId() + "_wizard_multiplication");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    aw.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_multiplication");
        ov.dialog("close");
    };
    aw.getNumbers = function (ow) {
        var ou = new fM();
        var ox = 0;
        while (true) {
            var ov = $(
                "input[name=" +
                    ow.getEditorId() +
                    "_wizard_multiplication_input_" +
                    ox +
                    "]",
            );
            var oy = false;
            oy = ov.length;
            if (!oy) {
                break;
            }
            ou.add(ov.val());
            ox = ox + 1;
        }
        return ou;
    };
    aw.displayCarrys = function (ov) {
        var ou = $(
            "input[name=" + ov.getEditorId() + "_wizard_multiplication_carry]",
        );
        var ow = false;
        ow = ou.prop("checked");
        return ow;
    };
    aw.displaySubgroup = function (ov) {
        var ou = $(
            "input[name=" +
                ov.getEditorId() +
                "_wizard_multiplication_subgroup]",
        );
        var ow = false;
        ow = ou.prop("checked");
        return ow;
    };
    aw.getThoussnds = function (ov) {
        var ou = $(
            "select[name=" +
                ov.getEditorId() +
                "_wizard_multiplication_thousands]",
        );
        return ou.val();
    };
    aw.displayLeft = function (ov) {
        var ou = $(
            "input[name=" +
                ov.getEditorId() +
                "_wizard_multiplication_pos]:checked",
        );
        return ou.val() == "left";
    };
    aw.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_multiplication");
        ov.dialog("destroy").remove();
    };

    function hJ() {}
    hJ.prototype.createDialog = function (oH, ox) {
        var oG = gq.translate(ox, "dialog_wizard_piece");
        var oK = gq.translate(ox, "dialog_wizard_piece_rows");
        var oB = gq.translate(ox, "dialog_wizard_piece_columns");
        var oA = $(
            "<div id='" +
                ox.getEditorId() +
                "dialog_wiz_piece' title='" +
                oG +
                "'></div>",
        );
        var ou = $("<center/>");
        oA.append(ou);
        var oE = $("<img src='" + ox.getImgPath() + "/wiz/3.png'/>");
        ou.append(oE);
        var oI = $("<table width='100%'></table>");
        var oD = $("<tr></tr>");
        oI.append(oD);
        var oz = $("<td><div>" + oK + "</div></td>");
        oD.append(oz);
        var oJ = "";
        for (var oC = 1; oC < 21; oC++) {
            oJ = oJ + "<option value='" + oC + "'>" + oC + "</option>";
        }
        var oy = $(
            "<td align='center'><select style='width:50px' name='" +
                ox.getEditorId() +
                "_" +
                eb +
                "'><option selected  value='n'>n</option>" +
                oJ +
                "</select></td>",
        );
        oD.append(oy);
        var ow = $("<td><div>" + oB + "</div></td>");
        oD.append(ow);
        var ov = $(
            "<td align='center'><select style='width:50px' name='" +
                ox.getEditorId() +
                "_" +
                eJ +
                "'><option selected  value='n'>n</option>" +
                oJ +
                "</select></td>",
        );
        oD.append(ov);
        oA.append(oI);
        oA.append("<hr/>");
        ou = $("<center/>");
        oA.append(ou);
        var oF = r.getButtonOnlyText(ox, kh);
        oF.addClass("ui-state-active");
        ou.append(oF);
        oH.append(oA);
        oA.dialog({
            autoOpen: false,
            width: 280,
        });
    };
    hJ.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_piece");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    hJ.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_piece");
        ov.dialog("close");
    };
    hJ.getRows = function (ov) {
        var ou = $("select[name=" + ov.getEditorId() + "_" + eb + "]");
        return ou.val();
    };
    hJ.getColumns = function (ov) {
        var ou = $("select[name=" + ov.getEditorId() + "_" + eJ + "]");
        return ou.val();
    };
    hJ.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_piece");
        ov.dialog("destroy").remove();
    };

    function gY() {}
    gY.prototype.createDialog = function (oz, oU) {
        var oV = gq.translate(oU, "dialog_wizard_polynom");
        var oF = gq.translate(oU, "dialog_wizard_polynom_degree");
        var oE = $(
            "<div id='" +
                oU.getEditorId() +
                "dialog_wiz_poly' title='" +
                oV +
                "'></div>",
        );
        var oI = $("<table width='100%'></table>");
        var oT = $("<tr></tr>");
        oI.append(oT);
        var ow = $("<td></td>");
        oT.append(ow);
        var oS = $(
            "<input type='radio' name='" +
                oU.getEditorId() +
                "_" +
                mP +
                "' value='1' checked='true'></input>",
        );
        oS.change(function (oW) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        ow.append(oS);
        var ov = $("<td><img src='" + oU.getImgPath() + "/wiz/0_1.png'/></td>");
        oT.append(ov);
        var oR = $("<tr></tr>");
        oI.append(oR);
        var oC = $("<td></td>");
        oR.append(oC);
        var oP = $(
            "<input type='radio' name='" +
                oU.getEditorId() +
                "_" +
                mP +
                "' value='2'></input>",
        );
        oP.change(function (oW) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oC.append(oP);
        var oA = $("<td><img src='" + oU.getImgPath() + "/wiz/0_2.png'/></td>");
        oR.append(oA);
        var oN = $("<tr></tr>");
        oI.append(oN);
        var oQ = $("<td></td>");
        oN.append(oQ);
        var oM = $(
            "<input type='radio' name='" +
                oU.getEditorId() +
                "_" +
                mP +
                "' value='3'></input>",
        );
        oM.change(function (oW) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oQ.append(oM);
        var oL = $("<td><img src='" + oU.getImgPath() + "/wiz/0_3.png'/></td>");
        oN.append(oL);
        var oK = $("<tr></tr>");
        oI.append(oK);
        var oy = $("<td></td>");
        oK.append(oy);
        var oJ = $(
            "<input type='radio' name='" +
                oU.getEditorId() +
                "_" +
                mP +
                "' value='4'></input>",
        );
        oJ.change(function (oW) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oy.append(oJ);
        var ox = $("<td><img src='" + oU.getImgPath() + "/wiz/0_4.png'/></td>");
        oK.append(ox);
        var oH = $("<tr></tr>");
        oI.append(oH);
        var oD = $("<td></td>");
        oH.append(oD);
        var oG = $(
            "<input type='radio' name='" +
                oU.getEditorId() +
                "_" +
                mP +
                "' value='5'></input>",
        );
        oG.change(function (oW) {
            fMathEditorsInterface.clickedButton($(this).attr("name"));
        });
        oD.append(oG);
        var oB = $("<td><img src='" + oU.getImgPath() + "/wiz/0_5.png'/></td>");
        oH.append(oB);
        oE.append(oI);
        oE.append("<hr/>");
        oI = $("<table width='100%'></table>");
        oT = $("<tr></tr>");
        oI.append(oT);
        ow = $("<td><div>" + oF + "</div></td>");
        oT.append(ow);
        ov = $(
            "<td align='center'><select style='width:50px' name='" +
                oU.getEditorId() +
                "_" +
                b5 +
                "'><option value='1'>1</option><option  value='2'>2</option><option  value='3'>3</option><option  value='4'>4</option><option  value='5'>5</option><option  value='6'>6</option><option selected  value='n'>n</option></select></td>",
        );
        oT.append(ov);
        oE.append(oI);
        oE.append("<hr/>");
        var oO = $("<center/>");
        oE.append(oO);
        var ou = r.getButtonOnlyText(oU, gP);
        ou.addClass("ui-state-active");
        oO.append(ou);
        oz.append(oE);
        oE.dialog({
            autoOpen: false,
            width: 280,
        });
    };
    gY.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_poly");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    gY.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_poly");
        ov.dialog("close");
    };
    gY.getSaveType = function (ov) {
        var ou = $("input[name=" + ov.getEditorId() + "_" + mP + "]");
        ou = ou.filter(":checked");
        return ou.val();
    };
    gY.getPolyDegree = function (ov) {
        var ou = $("select[name=" + ov.getEditorId() + "_" + b5 + "]");
        return ou.val();
    };
    gY.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_poly");
        ov.dialog("destroy").remove();
    };

    function mG() {}
    mG.prototype.createDialog = function (ov, ow) {
        var ox = gq.translate(ow, "dialog_wizard_subtraction");
        var oz = $(
            "<div id='" +
                ow.getEditorId() +
                "_wizard_subtraction' title='" +
                ox +
                "'></div>",
        );
        ov.append(oz);
        var oB = $(
            "<div id='" +
                ow.getEditorId() +
                "_wizard_subtraction_content'></div>",
        );
        oz.append(oB);
        var oA = new fM();
        oA.add("12333.9");
        oA.add("1299.45");
        mG.update(ow, oA);
        oz.append("<hr/>");
        var ou = $("<center/>");
        oz.append(ou);
        var oy = r.getButtonOnlyText(ow, gB);
        oy.addClass("ui-state-active");
        ou.append(oy);
        oz.dialog({
            autoOpen: false,
            width: 300,
        });
    };
    mG.update = function (oY, oA) {
        var oR = gq.translate(oY, "dialog_wizard_subtraction_carry");
        var oE = gq.translate(oY, "dialog_wizard_subtraction_sign");
        var oI = gq.translate(oY, "prop__align_left");
        var oB = gq.translate(oY, "prop__align_right");
        var oL = gq.translate(oY, "prop__decimalpoint_used");
        var oJ = gq.translate(oY, "dialog_wizard_subtraction_thousands");
        var oW = $("#" + oY.getEditorId() + "_wizard_subtraction_content");
        oW.empty();
        var oQ = $("<table width='100%'></table>");
        var oX = $(
            "<tr><td align='left'><b><div>" +
                oR +
                "</div></b></td><td align='right'><input type='checkbox' name='" +
                oY.getEditorId() +
                "_wizard_subtraction_carry' checked/></td></tr>",
        );
        oQ.append(oX);
        var oV = $(
            "<tr><td align='left'><b>" +
                oE +
                "</b></td><td align='right'><input type='radio' name='" +
                oY.getEditorId() +
                "_wizard_subtraction_pos' value='left' checked/> " +
                oI +
                "&nbsp;&nbsp;&nbsp;<input type='radio' name='" +
                oY.getEditorId() +
                "_wizard_subtraction_pos'  value='right'/> " +
                oB +
                "</nobr></td></tr>",
        );
        oQ.append(oV);
        var oM = oY.getSelectedElement();
        if (oM != null) {
            var oG = oM.getSelectedPanel();
            if (oG != null) {
                var oy = oG.getBean();
                var oZ = oy.getCurrentDefStyle().getDecimalpoint();
                var oP = gq.translate(oY, "prop__decimalpoint_point");
                var ow = gq.translate(oY, "prop__decimalpoint_comma");
                var oO = gq.translate(oY, "prop__decimalpoint_space");
                var ou = gq.translate(oY, "prop__decimalpoint_none");
                var oH = oP;
                if (oZ != null && oZ == ",") {
                    oH = ow;
                }
                var oU = $(
                    "<tr><td align='left'><b>" +
                        oL +
                        "</b></td><td align='right'>" +
                        oH +
                        "</td></tr>",
                );
                oQ.append(oU);
                var oK =
                    "<select name='" +
                    oY.getEditorId() +
                    "_wizard_subtraction_thousands'>";
                oK = oK + "<option value='none'>" + ou + "</option>";
                oK = oK + "<option value='space'>" + oO + "</option>";
                if (oZ != null && oZ == ",") {
                    oK = oK + "<option value='point'>" + oP + "</option>";
                } else {
                    oK = oK + "<option value='comma'>" + ow + "</option>";
                }
                var oT = $(
                    "<tr><td align='left'><b>" +
                        oJ +
                        "</b></td><td align='right'>" +
                        oK +
                        "</td></tr>",
                );
                oQ.append(oT);
            }
        }
        oW.append(oQ);
        oW.append("<hr/>");
        var oS = $("<table width='100%'></table>");
        for (var oN = 0; oN < oA.size(); oN++) {
            var oC = oA.get(oN);
            var ov = $(
                "<tr id='" +
                    oY.getEditorId() +
                    "_wizard_subtraction_row_" +
                    oN +
                    "'></tr>",
            );
            oS.append(ov);
            var oz = $(
                "<td align='center' style='vertical-align: middle'><input name='" +
                    oY.getEditorId() +
                    "_wizard_subtraction_input_" +
                    oN +
                    "' value='" +
                    oC +
                    "'/></td>",
            );
            ov.append(oz);
            var ox = $("<td align='right'></td>");
            ov.append(ox);
        }
        var oF = $("<tr></tr>");
        oS.append(oF);
        var oD = $("<td></td>");
        oF.append(oD);
        oW.append(oS);
    };
    mG.show = function (ou) {
        var ow = mG.getNumbers(ou);
        mG.update(ou, ow);
        var ov = $("#" + ou.getEditorId() + "_wizard_subtraction");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    mG.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_subtraction");
        ov.dialog("close");
    };
    mG.getNumbers = function (ow) {
        var ou = new fM();
        var ox = 0;
        while (true) {
            var ov = $(
                "input[name=" +
                    ow.getEditorId() +
                    "_wizard_subtraction_input_" +
                    ox +
                    "]",
            );
            var oy = false;
            oy = ov.length;
            if (!oy) {
                break;
            }
            ou.add(ov.val());
            ox = ox + 1;
        }
        return ou;
    };
    mG.displayCarrys = function (ov) {
        var ou = $(
            "input[name=" + ov.getEditorId() + "_wizard_subtraction_carry]",
        );
        var ow = false;
        ow = ou.prop("checked");
        return ow;
    };
    mG.getThoussnds = function (ov) {
        var ou = $(
            "select[name=" +
                ov.getEditorId() +
                "_wizard_subtraction_thousands]",
        );
        return ou.val();
    };
    mG.displayLeft = function (ov) {
        var ou = $(
            "input[name=" +
                ov.getEditorId() +
                "_wizard_subtraction_pos]:checked",
        );
        return ou.val() == "left";
    };
    mG.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "_wizard_subtraction");
        ov.dialog("destroy").remove();
    };

    function cv() {}
    cv.prototype.createDialog = function (oH, ox) {
        var oG = gq.translate(ox, "dialog_wizard_table");
        var oK = gq.translate(ox, "dialog_wizard_table_rows");
        var oB = gq.translate(ox, "dialog_wizard_table_columns");
        var oA = $(
            "<div id='" +
                ox.getEditorId() +
                "dialog_wiz_table' title='" +
                oG +
                "'></div>",
        );
        var ou = $("<center/>");
        oA.append(ou);
        var oE = $("<img src='" + ox.getImgPath() + "/wiz/1.png'/>");
        ou.append(oE);
        oA.append("<hr/>");
        var oI = $("<table width='100%'></table>");
        var oD = $("<tr></tr>");
        oI.append(oD);
        var oz = $("<td><div>" + oK + "</div></td>");
        oD.append(oz);
        var oJ = "";
        for (var oC = 1; oC < 21; oC++) {
            oJ = oJ + "<option value='" + oC + "'>" + oC + "</option>";
        }
        var oy = $(
            "<td align='center'><select style='width:50px' name='" +
                ox.getEditorId() +
                "_" +
                T +
                "'><option selected  value='n'>n</option>" +
                oJ +
                "</select></td>",
        );
        oD.append(oy);
        var ow = $("<td><div>" + oB + "</div></td>");
        oD.append(ow);
        var ov = $(
            "<td align='center'><select style='width:50px' name='" +
                ox.getEditorId() +
                "_" +
                lG +
                "'><option selected  value='n'>n</option>" +
                oJ +
                "</select></td>",
        );
        oD.append(ov);
        oA.append(oI);
        oA.append("<hr/>");
        ou = $("<center/>");
        oA.append(ou);
        var oF = r.getButtonOnlyText(ox, fD);
        oF.addClass("ui-state-active");
        ou.append(oF);
        oH.append(oA);
        oA.dialog({
            autoOpen: false,
            width: 280,
        });
    };
    cv.show = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_table");
        ov.dialog("open");
        ov.dialog("option", "position", {
            my: "center",
            at: "center",
            of: $("div[name='" + ou.getEditorId() + "']"),
        });
        $(".ui-dialog :button").blur();
    };
    cv.close = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_table");
        ov.dialog("close");
    };
    cv.getRows = function (ov) {
        var ou = $("select[name=" + ov.getEditorId() + "_" + T + "]");
        return ou.val();
    };
    cv.getColumns = function (ov) {
        var ou = $("select[name=" + ov.getEditorId() + "_" + lG + "]");
        return ou.val();
    };
    cv.prototype.removeDialog = function (ou) {
        var ov = $("#" + ou.getEditorId() + "dialog_wiz_table");
        ov.dialog("destroy").remove();
    };

    function cP(ou) {
        this.parentElement;
        this.mainPanel = new jP();
        this.menuPanel = new fu();
        this.leftPanel = new gm();
        this.propPanel = new gR();
        this.previewPanel = new jK();
        this.statusPanel = new hl();
        this.popupManager = new i3();
        this.config;
        this.config = ou;
    }
    cP.prototype.drawInterface = function (ou) {
        this.parentElement = ou;
        var ow = this.config.getEditorId();
        this.parentElement.width(this.config.getWindowWidth() + 2);
        this.parentElement.height(this.config.getWindowHeight() + 2);
        this.parentElement.attr("name", this.config.getEditorId());
        dr.makeRisizable(this.parentElement);
        var ov = $(
            "<div id='" +
                this.config.getEditorId() +
                "_" +
                bJ +
                "' tabindex='1'></div>",
        );
        ov.width(this.config.getWindowWidth());
        ov.height(this.config.getWindowHeight());
        ov.css("position", "absolute");
        ov.css("left", 1);
        ov.css("top", 1);
        this.parentElement.append(ov);
        ov.keydown(function (ox) {
            fMathEditorsInterface.keyboardListener(ox);
            if (ox.keyCode == 9) {
                ox.preventDefault();
                return false;
            }
        });
        ov.keypress(function (ox) {
            fMathEditorsInterface.keyboardTextListener(ox);
        });
        B.createLayout(
            ow,
            ov,
            this.config.isLeftPaneHidden(),
            this.config.isRightPaneHidden(),
        );
        this.mainPanel.drawPanelOn(fv, fv, this.config);
        this.menuPanel.drawPanelOn(gZ, gZ, this.config);
        if (this.config.isVerticalLayout()) {
            this.leftPanel.drawPanelOn(gZ, jH, this.config);
            this.propPanel.drawPanelOn(i, a6, this.config);
        } else {
            this.leftPanel.drawPanelOn(eY, eY, this.config);
            this.propPanel.drawPanelOn(io, io, this.config);
        }
        this.previewPanel.drawPanelOn(i, i, this.config);
        this.statusPanel.drawPanelOn(gv, gv, this.config);
        this.hidePanels();
        fR.loadNewsTips(this.config);
        this.config.getNewsTipsManager().chooseAnotherTip();
        this.popupManager.createPopups(this.parentElement, this.config);
        fR.showRandom(this.config);
    };
    cP.prototype.hidePanels = function () {
        B.hideShowPanel(
            this.config.getEditorId(),
            eY,
            this.config.isLeftPaneHidden(),
        );
        B.hideShowPanel(
            this.config.getEditorId(),
            io,
            this.config.isRightPaneHidden(),
        );
        B.hideShowPanel(
            this.config.getEditorId(),
            i,
            this.config.isPreviewPaneHidden(),
        );
    };
    cP.prototype.updateInterface = function () {
        this.hidePanels();
        this.mainPanel.updateInterface();
        this.menuPanel.updateInterface();
        this.leftPanel.updateInterface();
        this.propPanel.updateInterface();
        this.previewPanel.updateInterface();
        this.statusPanel.updateInterface();
        if (this.config.hasAction(i5)) {
            this.popupManager.updatePopups();
        }
    };

    function ff() {
        this.panelKey = "";
        this.panelContentKey = "";
        this.config;
    }
    ff.prototype.drawPanel = function (ou, ow, ov) {
        this.setPanelKey(ou);
        this.setPanelContentKey(ow);
        this.setConfig(ov);
    };
    ff.prototype.updateInterface = function () {};
    ff.prototype.getPanelKey = function () {
        return this.panelKey;
    };
    ff.prototype.setPanelKey = function (ou) {
        this.panelKey = ou;
    };
    ff.prototype.getPanelContentKey = function () {
        return this.panelContentKey;
    };
    ff.prototype.setPanelContentKey = function (ou) {
        this.panelContentKey = ou;
    };
    ff.prototype.getConfig = function () {
        return this.config;
    };
    ff.prototype.setConfig = function (ou) {
        this.config = ou;
    };
    ff.prototype.getPanel = function () {
        return B.getPanel(this.config.getEditorId(), this.panelKey);
    };
    ff.prototype.getPanelContent = function () {
        return B.getPanelContent(
            this.config.getEditorId(),
            this.panelContentKey,
        );
    };

    function gm() {
        this.dLj = ff;
        this.dLj();
    }
    ga(gm, ff);
    gm.prototype.drawPanelOn = function (ou, ov, ow) {
        ff.prototype.drawPanel.call(this, ou, ov, ow);
        this.init();
    };
    gm.prototype.updateInterface = function () {
        if (this.getConfig().hasAction(hA)) {
            var ow = this.getPanelContent();
            if (ow == null) {
                return;
            }
            ow.css("overflow-y", "scroll");
            ow.css("overflow-x", "hidden");
            if (!this.getConfig().isVerticalLayout()) {
                ow.css("height", this.getPanel().height);
            } else {
                var ou = this.getPanel().height;
                var ov = B.getPanelContent(this.getConfig().getEditorId(), gZ);
                ou = ou - ov.height();
                ow.css("height", ou);
            }
        }
        if (this.getConfig().hasAction(g6)) {
            this.updateLeftPanel();
        }
    };
    gm.prototype.init = function () {
        var ou = this.getPanelContent();
        if (ou == null) {
            return;
        }
        ou.css("overflow-y", "scroll");
        ou.css("overflow-x", "hidden");
        if (!this.getConfig().isVerticalLayout()) {
            ou.css("height", this.getPanel().height);
        }
        this.updateLeftPanel();
    };
    gm.prototype.updateLeftPanel = function () {
        var ou = this.getPanelContent();
        if (ou == null) {
            return;
        }
        var ox = this.getConfig().getAllButtons();
        for (var ow = 0; ow < ox.size(); ow++) {
            var ov = ox.get(ow);
            if (ov.getId().indexOf("insert_") > -1) {
                if (ov.isState()) {
                    this.displayPanel(ov.getId());
                    break;
                }
            }
        }
    };
    gm.prototype.displayPanel = function (oD) {
        var ou = this.getPanelContent();
        this.getPanelContent().empty();
        this.addTitle(oD);
        if (oD == fP) {
            var ow = n6.getBasicFunctionList();
            for (var oy = 0; oy < ow.size(); oy++) {
                var ox = ow.get(oy);
                if (oy < 2) {
                    ou.append(
                        r.getButtonImageSize(
                            this.getConfig(),
                            ox.getFolder(),
                            eS + "_" + ox.getName(),
                            ox.getImg(),
                            50,
                            21,
                        ),
                    );
                } else {
                    if (oy < 4) {
                        ou.append(
                            r.getButtonImageSize(
                                this.getConfig(),
                                ox.getFolder(),
                                eS + "_" + ox.getName(),
                                ox.getImg(),
                                104,
                                21,
                            ),
                        );
                    } else {
                        if (oy < 20) {
                            ou.append(
                                r.getButtonImageSize(
                                    this.getConfig(),
                                    ox.getFolder(),
                                    eS + "_" + ox.getName(),
                                    ox.getImg(),
                                    23,
                                    21,
                                ),
                            );
                        } else {
                            if (oy < 21) {
                                ou.append(
                                    r.getButtonImageSize(
                                        this.getConfig(),
                                        ox.getFolder(),
                                        eS + "_" + ox.getName(),
                                        ox.getImg(),
                                        104,
                                        21,
                                    ),
                                );
                            } else {
                                if (oy < 25) {
                                    ou.append(
                                        r.getButtonImageSize(
                                            this.getConfig(),
                                            ox.getFolder(),
                                            eS + "_" + ox.getName(),
                                            ox.getImg(),
                                            50,
                                            35,
                                        ),
                                    );
                                } else {
                                    if (oy < 28) {
                                        ou.append(
                                            r.getButtonImageSize(
                                                this.getConfig(),
                                                ox.getFolder(),
                                                eS + "_" + ox.getName(),
                                                ox.getImg(),
                                                33,
                                                35,
                                            ),
                                        );
                                    } else {
                                        if (oy < 34) {
                                            ou.append(
                                                r.getButtonImageSizeW(
                                                    this.getConfig(),
                                                    ox.getFolder(),
                                                    eS + "_" + ox.getName(),
                                                    ox.getImg(),
                                                    55,
                                                ),
                                            );
                                        } else {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if (oD == nk) {
                var oE = gm.getHexList(this.getConfig().getBasicIdent());
                for (var oy = 0; oy < oE.size(); oy++) {
                    var ov = oE.get(oy);
                    ou.append(
                        r.getButtonImage(this.getConfig(), "ident", dR, ov),
                    );
                }
            } else {
                if (oD == hi) {
                    this.addSelect(ou, kl);
                    var oz = this.getConfig().getButton(kl).getValue();
                    if ("basic" == oz) {
                        var oE = gm.getHexList(
                            this.getConfig().getBasicOperators(),
                        );
                        for (var oy = 0; oy < oE.size(); oy++) {
                            var ov = oE.get(oy);
                            ou.append(
                                r.getButtonImage(
                                    this.getConfig(),
                                    "op/basic",
                                    gG,
                                    ov,
                                ),
                            );
                        }
                        this.addSubTitle(oD + "_geo");
                        oE = gm.getHexList(
                            this.getConfig().getGeometryOperators(),
                        );
                        for (var oy = 0; oy < oE.size(); oy++) {
                            var ov = oE.get(oy);
                            ou.append(
                                r.getButtonImage(
                                    this.getConfig(),
                                    "op/geo",
                                    gG,
                                    ov,
                                ),
                            );
                        }
                        this.addSubTitle(oD + "_alg");
                        oE = gm.getHexList(
                            this.getConfig().getAlgebraOperators(),
                        );
                        for (var oy = 0; oy < oE.size(); oy++) {
                            var ov = oE.get(oy);
                            ou.append(
                                r.getButtonImage(
                                    this.getConfig(),
                                    "op/algebra",
                                    gG,
                                    ov,
                                ),
                            );
                        }
                        this.addSubTitle(oD + "_linalg");
                        oE = gm.getHexList(
                            this.getConfig().getLinearAlgebraOp(),
                        );
                        for (var oy = 0; oy < oE.size(); oy++) {
                            var ov = oE.get(oy);
                            ou.append(
                                r.getButtonImage(
                                    this.getConfig(),
                                    "op/linear",
                                    gG,
                                    ov,
                                ),
                            );
                        }
                    } else {
                        if ("large" == oz) {
                            var oE = gm.getHexList(
                                this.getConfig().getLargeOperators(),
                            );
                            for (var oy = 0; oy < oE.size(); oy++) {
                                var ov = oE.get(oy);
                                ou.append(
                                    r.getButtonImageSize(
                                        this.getConfig(),
                                        "op/large",
                                        gG,
                                        ov,
                                        25,
                                        25,
                                    ),
                                );
                            }
                        } else {
                            if ("fence" == oz) {
                                var oE = gm.getHexList(
                                    this.getConfig().getFencedOperators(),
                                );
                                for (var oy = 0; oy < oE.size(); oy++) {
                                    var ov = oE.get(oy);
                                    ou.append(
                                        r.getButtonImage(
                                            this.getConfig(),
                                            "op/fence",
                                            gG,
                                            ov,
                                        ),
                                    );
                                }
                            } else {
                                if ("letter" == oz) {
                                    var oE = gm.getHexList(
                                        this.getConfig().getLetterlikeOp(),
                                    );
                                    for (var oy = 0; oy < oE.size(); oy++) {
                                        var ov = oE.get(oy);
                                        ou.append(
                                            r.getButtonImage(
                                                this.getConfig(),
                                                "op/letter",
                                                gG,
                                                ov,
                                            ),
                                        );
                                    }
                                } else {
                                    if ("logic" == oz) {
                                        var oE = gm.getHexList(
                                            this.getConfig().getLogicalRelOp(),
                                        );
                                        for (var oy = 0; oy < oE.size(); oy++) {
                                            var ov = oE.get(oy);
                                            ou.append(
                                                r.getButtonImage(
                                                    this.getConfig(),
                                                    "op/logic",
                                                    gG,
                                                    ov,
                                                ),
                                            );
                                        }
                                    } else {
                                        if ("arrow" == oz) {
                                            var oE = gm.getHexList(
                                                this.getConfig().getArrowOp(),
                                            );
                                            for (
                                                var oy = 0;
                                                oy < oE.size();
                                                oy++
                                            ) {
                                                var ov = oE.get(oy);
                                                ou.append(
                                                    r.getButtonImage(
                                                        this.getConfig(),
                                                        "op/arrow",
                                                        gG,
                                                        ov,
                                                    ),
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (oD == bV) {
                        var oE = gm.getHexList(
                            this.getConfig().getConstantSymboles(),
                        );
                        for (var oy = 0; oy < oE.size(); oy++) {
                            var ov = oE.get(oy);
                            ou.append(
                                r.getButtonImage(
                                    this.getConfig(),
                                    "const",
                                    nA,
                                    ov,
                                ),
                            );
                        }
                    } else {
                        if (oD == go) {
                            var oB = n6.getScriptList().size();
                            for (var oy = 0; oy < oB; oy++) {
                                ou.append(
                                    r.getButtonImageSize(
                                        this.getConfig(),
                                        "exp",
                                        kI,
                                        oy + "",
                                        32,
                                        32,
                                    ),
                                );
                            }
                        } else {
                            if (oD == hc) {
                                var oB = n6.getScriptAList().size();
                                for (var oy = 0; oy < oB; oy++) {
                                    ou.append(
                                        r.getButtonImageSize(
                                            this.getConfig(),
                                            "arrow",
                                            m7,
                                            oy + "",
                                            32,
                                            32,
                                        ),
                                    );
                                }
                            } else {
                                if (oD == fz) {
                                    var oB = n6.getRootList().size();
                                    for (var oy = 0; oy < oB; oy++) {
                                        ou.append(
                                            r.getButtonImageNoSize(
                                                this.getConfig(),
                                                "root",
                                                ll,
                                                oy + "",
                                            ),
                                        );
                                    }
                                } else {
                                    if (oD == lf) {
                                        var oB = n6.getIntList().size();
                                        for (var oy = 0; oy < oB; oy++) {
                                            ou.append(
                                                r.getButtonImageSize(
                                                    this.getConfig(),
                                                    "int",
                                                    fQ,
                                                    oy + "",
                                                    52,
                                                    36,
                                                ),
                                            );
                                        }
                                    } else {
                                        if (oD == a4) {
                                            var oB = n6.getFracList().size();
                                            for (var oy = 0; oy < oB; oy++) {
                                                ou.append(
                                                    r.getButtonImageSize(
                                                        this.getConfig(),
                                                        "frac",
                                                        aJ,
                                                        oy + "",
                                                        50,
                                                        25,
                                                    ),
                                                );
                                            }
                                        } else {
                                            if (oD == cE) {
                                                var oB = n6.getSumList().size();
                                                for (
                                                    var oy = 0;
                                                    oy < oB;
                                                    oy++
                                                ) {
                                                    if (oy < 9) {
                                                        ou.append(
                                                            r.getButtonImageSize(
                                                                this.getConfig(),
                                                                "sum",
                                                                O,
                                                                oy + "",
                                                                35,
                                                                35,
                                                            ),
                                                        );
                                                    } else {
                                                        ou.append(
                                                            r.getButtonImageSize(
                                                                this.getConfig(),
                                                                "sum",
                                                                O,
                                                                oy + "",
                                                                100,
                                                                70,
                                                            ),
                                                        );
                                                    }
                                                }
                                            } else {
                                                if (oD == gM) {
                                                    var oB = n6
                                                        .getLimList()
                                                        .size();
                                                    for (
                                                        var oy = 0;
                                                        oy < oB;
                                                        oy++
                                                    ) {
                                                        if (oy < 4) {
                                                            ou.append(
                                                                r.getButtonImageSize(
                                                                    this.getConfig(),
                                                                    "lim",
                                                                    fL,
                                                                    oy + "",
                                                                    50,
                                                                    33,
                                                                ),
                                                            );
                                                        } else {
                                                            ou.append(
                                                                r.getButtonImageSize(
                                                                    this.getConfig(),
                                                                    "lim",
                                                                    fL,
                                                                    oy + "",
                                                                    100,
                                                                    33,
                                                                ),
                                                            );
                                                        }
                                                    }
                                                } else {
                                                    if (oD == bq) {
                                                        var oB = n6
                                                            .getDerivList()
                                                            .size();
                                                        for (
                                                            var oy = 0;
                                                            oy < oB;
                                                            oy++
                                                        ) {
                                                            if (oy < 6) {
                                                                ou.append(
                                                                    r.getButtonImageSize(
                                                                        this.getConfig(),
                                                                        "deriv",
                                                                        ap,
                                                                        oy + "",
                                                                        33,
                                                                        40,
                                                                    ),
                                                                );
                                                            } else {
                                                                ou.append(
                                                                    r.getButtonImageSize(
                                                                        this.getConfig(),
                                                                        "deriv",
                                                                        ap,
                                                                        oy + "",
                                                                        115,
                                                                        40,
                                                                    ),
                                                                );
                                                            }
                                                        }
                                                    } else {
                                                        if (oD == mh) {
                                                            var oB = n6
                                                                .getFenceList()
                                                                .size();
                                                            for (
                                                                var oy = 0;
                                                                oy < oB;
                                                                oy++
                                                            ) {
                                                                if (oy < 26) {
                                                                    ou.append(
                                                                        r.getButtonImageSize(
                                                                            this.getConfig(),
                                                                            "fence",
                                                                            fw,
                                                                            oy +
                                                                                "",
                                                                            35,
                                                                            25,
                                                                        ),
                                                                    );
                                                                } else {
                                                                    ou.append(
                                                                        r.getButtonImageSize(
                                                                            this.getConfig(),
                                                                            "fence",
                                                                            fw,
                                                                            oy +
                                                                                "",
                                                                            55,
                                                                            30,
                                                                        ),
                                                                    );
                                                                }
                                                            }
                                                        } else {
                                                            if (oD == f4) {
                                                                var oB = n6
                                                                    .getTableList()
                                                                    .size();
                                                                for (
                                                                    var oy = 0;
                                                                    oy < oB;
                                                                    oy++
                                                                ) {
                                                                    if (
                                                                        oy < 8
                                                                    ) {
                                                                        ou.append(
                                                                            r.getButtonImageSize(
                                                                                this.getConfig(),
                                                                                "table",
                                                                                e6,
                                                                                oy +
                                                                                    "",
                                                                                55,
                                                                                40,
                                                                            ),
                                                                        );
                                                                    } else {
                                                                        ou.append(
                                                                            r.getButtonImageSize(
                                                                                this.getConfig(),
                                                                                "table",
                                                                                e6,
                                                                                oy +
                                                                                    "",
                                                                                55,
                                                                                40,
                                                                            ),
                                                                        );
                                                                    }
                                                                }
                                                            } else {
                                                                if (oD == nj) {
                                                                    var oB = n6
                                                                        .getMatrixList()
                                                                        .size();
                                                                    for (
                                                                        var oy = 0;
                                                                        oy < oB;
                                                                        oy++
                                                                    ) {
                                                                        ou.append(
                                                                            r.getButtonImageSizeW(
                                                                                this.getConfig(),
                                                                                "matrice",
                                                                                kZ,
                                                                                oy +
                                                                                    "",
                                                                                55,
                                                                            ),
                                                                        );
                                                                    }
                                                                } else {
                                                                    if (
                                                                        oD == g7
                                                                    ) {
                                                                        var oB =
                                                                            n6
                                                                                .getFunList()
                                                                                .size();
                                                                        for (
                                                                            var oy = 0;
                                                                            oy <
                                                                            oB;
                                                                            oy++
                                                                        ) {
                                                                            ou.append(
                                                                                r.getButtonImageSizeW(
                                                                                    this.getConfig(),
                                                                                    "fun",
                                                                                    bT,
                                                                                    oy +
                                                                                        "",
                                                                                    55,
                                                                                ),
                                                                            );
                                                                        }
                                                                    } else {
                                                                        if (
                                                                            oD ==
                                                                            hY
                                                                        ) {
                                                                            var oB =
                                                                                n6
                                                                                    .getAccentList()
                                                                                    .size();
                                                                            for (
                                                                                var oy = 0;
                                                                                oy <
                                                                                oB;
                                                                                oy++
                                                                            ) {
                                                                                ou.append(
                                                                                    r.getButtonImageSizeW(
                                                                                        this.getConfig(),
                                                                                        "accent",
                                                                                        e9,
                                                                                        oy +
                                                                                            "",
                                                                                        35,
                                                                                    ),
                                                                                );
                                                                            }
                                                                        } else {
                                                                            if (
                                                                                oD ==
                                                                                I
                                                                            ) {
                                                                                var oB =
                                                                                    n6
                                                                                        .getEncloseList()
                                                                                        .size();
                                                                                for (
                                                                                    var oy = 0;
                                                                                    oy <
                                                                                    oB;
                                                                                    oy++
                                                                                ) {
                                                                                    ou.append(
                                                                                        r.getButtonImageSizeW(
                                                                                            this.getConfig(),
                                                                                            "enclose",
                                                                                            cx,
                                                                                            oy +
                                                                                                "",
                                                                                            55,
                                                                                        ),
                                                                                    );
                                                                                }
                                                                            } else {
                                                                                if (
                                                                                    oD ==
                                                                                    jT
                                                                                ) {
                                                                                    var oB =
                                                                                        n6
                                                                                            .getNewLineList()
                                                                                            .size();
                                                                                    for (
                                                                                        var oy = 0;
                                                                                        oy <
                                                                                        oB;
                                                                                        oy++
                                                                                    ) {
                                                                                        if (
                                                                                            oy ==
                                                                                            5
                                                                                        ) {
                                                                                            ou.append(
                                                                                                r.getButtonImageSizeH(
                                                                                                    this.getConfig(),
                                                                                                    "newline",
                                                                                                    h7,
                                                                                                    oy +
                                                                                                        "",
                                                                                                    32,
                                                                                                ),
                                                                                            );
                                                                                        } else {
                                                                                            ou.append(
                                                                                                r.getButtonImageSize(
                                                                                                    this.getConfig(),
                                                                                                    "newline",
                                                                                                    h7,
                                                                                                    oy +
                                                                                                        "",
                                                                                                    32,
                                                                                                    32,
                                                                                                ),
                                                                                            );
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if (
                                                                                        oD ==
                                                                                        gN
                                                                                    ) {
                                                                                        this.addSelect(
                                                                                            ou,
                                                                                            a1,
                                                                                        );
                                                                                        var oz =
                                                                                            this.getConfig()
                                                                                                .getButton(
                                                                                                    a1,
                                                                                                )
                                                                                                .getValue();
                                                                                        var oC =
                                                                                            null;
                                                                                        if (
                                                                                            "4E00" ==
                                                                                            oz
                                                                                        ) {
                                                                                            this.addSelect(
                                                                                                ou,
                                                                                                dH,
                                                                                            );
                                                                                            var oA =
                                                                                                this.getConfig()
                                                                                                    .getButton(
                                                                                                        dH,
                                                                                                    )
                                                                                                    .getValue();
                                                                                            oC =
                                                                                                n6.getUnicodesForOption(
                                                                                                    oz,
                                                                                                    oA,
                                                                                                );
                                                                                        } else {
                                                                                            oC =
                                                                                                n6.getUnicodesFor(
                                                                                                    oz,
                                                                                                );
                                                                                        }
                                                                                        var oE =
                                                                                            gm.getHexList(
                                                                                                oC,
                                                                                            );
                                                                                        for (
                                                                                            var oy = 0;
                                                                                            oy <
                                                                                            oE.size();
                                                                                            oy++
                                                                                        ) {
                                                                                            var ov =
                                                                                                oE.get(
                                                                                                    oy,
                                                                                                );
                                                                                            ou.append(
                                                                                                r.getButtonImage(
                                                                                                    this.getConfig(),
                                                                                                    "unicode",
                                                                                                    jy,
                                                                                                    ov,
                                                                                                ),
                                                                                            );
                                                                                        }
                                                                                    } else {
                                                                                        if (
                                                                                            oD ==
                                                                                                bp ||
                                                                                            oD ==
                                                                                                ab
                                                                                        ) {
                                                                                            var oB =
                                                                                                n6
                                                                                                    .getWizList()
                                                                                                    .size();
                                                                                            for (
                                                                                                var oy = 0;
                                                                                                oy <
                                                                                                oB;
                                                                                                oy++
                                                                                            ) {
                                                                                                ou.append(
                                                                                                    r.getButtonImageNoSize(
                                                                                                        this.getConfig(),
                                                                                                        "wiz",
                                                                                                        hf,
                                                                                                        oy +
                                                                                                            "",
                                                                                                    ),
                                                                                                );
                                                                                                if (
                                                                                                    oy ==
                                                                                                    3
                                                                                                ) {
                                                                                                    ou.append(
                                                                                                        "<br>",
                                                                                                    );
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    gm.prototype.addSelect = function (ov, ow) {
        var ou = this.getConfig().getButton(ow);
        if (ou == null) {
            if (ow == kl) {
                l0.getSelectOperators(this.getConfig(), ow);
                ou = this.getConfig().getButton(ow);
            } else {
                if (ow == a1) {
                    l0.getUnicodeSelect(this.getConfig(), ow);
                    ou = this.getConfig().getButton(ow);
                } else {
                    if (ow == dH) {
                        l0.getChineseSelect(this.getConfig(), ow);
                        ou = this.getConfig().getButton(ow);
                    }
                }
            }
            if (!this.getConfig().isVerticalLayout()) {
                ou.getElement().addClass("ui-title");
            } else {
                ou.getElement().css("width", "150px");
            }
            if (ow == kl) {
                ou.getElement().css("font-size", "80%");
            } else {
                if (ow == a1) {
                    ou.getElement().css("font-size", "80%");
                } else {
                    if (ow == dH) {
                        if (!this.getConfig().isVerticalLayout()) {
                            ou.getElement().css("font-size", "60%");
                        } else {
                            ou.getElement().css("width", "90px");
                        }
                    }
                }
            }
        } else {
            l0.selectAddListener(ou.getElement());
        }
        ov.append(ou.getElement());
    };
    gm.getHexList = function (oE) {
        var oA = new fM();
        var oD = oE.split(",");
        for (var oz = 0; oz < oD.length; oz++) {
            var ov = oD[oz];
            if (ov.indexOf("-") > -1) {
                var oC = ov.substring(0, ov.indexOf("-"));
                var oB = ov.substring(ov.indexOf("-") + 1, ov.length);
                var oy = lv.getIntFromHexCode(oC);
                var ow = lv.getIntFromHexCode(oB);
                for (var ox = oy; ox <= ow; ox++) {
                    var ou = lv.getHexCodeFromInt(ox);
                    oA.add(ou.toUpperCase());
                }
            } else {
                oA.add(ov.toUpperCase());
            }
        }
        return oA;
    };
    gm.prototype.addTitle = function (ov) {
        var ou = gq.translate(this.getConfig(), "menu_" + ov);
        var ow = $("<div>" + ou + "</div>");
        ow.addClass("ui-state-active");
        ow.addClass("ui-title");
        ow.addClass("ui-corner-all");
        this.getPanelContent().append(ow);
        this.getPanelContent().append("<br/>");
    };
    gm.prototype.addSubTitle = function (ov) {
        if (this.getConfig().isVerticalLayout()) {
            return;
        }
        var ou = gq.translate(this.getConfig(), "menu_" + ov);
        var ow = $("<div>" + ou + "</div>");
        ow.addClass("ui-title");
        ow.css("border", "1px solid #cccccc");
        ow.addClass("ui-corner-all");
        this.getPanelContent().append(ow);
        this.getPanelContent().append("<br/>");
    };

    function jP() {
        this.textAlign = "left";
        this.screenDiv;
        this.page;
        this.pageContent;
        this.formulaContainer;
        this.dLj = ff;
        this.dLj();
    }
    ga(jP, ff);
    jP.prototype.drawPanelOn = function (ou, oy, oB) {
        ff.prototype.drawPanel.call(this, ou, oy, oB);
        var oz = this.getPanelContent();
        var ow = this.getConfig();
        var oC = ow.getScreen();
        var ov = ow.getPaper();
        var ox = this.getConfig().getEditorId();
        oC.setViewScale(oB.getScreen().getViewScale());
        oC.setScreenWidth(this.getPanel().width, this.getPanel().height, ov);
        oC.calculate();
        oz.width(oC.getRealViewportWidth() - 1);
        oz.height(oC.getRealViewportHeight() - 1);
        if (oC.isScrollbarH()) {
            oz.css("overflow-x", "scroll");
        } else {
            oz.css("overflow-x", "hidden");
        }
        if (oC.isScrollbarV()) {
            oz.css("overflow-y", "scroll");
        } else {
            oz.css("overflow-y", "hidden");
        }
        this.screenDiv = $("<div id='" + ox + "_" + i4 + "'></div>");
        this.screenDiv.width(oC.getTotalWidthPixels() + oC.addPixelsOnX());
        this.screenDiv.height(oC.getTotalHeightPixels() + oC.addPixelsOnY());
        oz.append(this.screenDiv);
        this.screenDiv.click(function (oD) {
            fMathEditorsInterface.clickMouseOnScreen($(this).attr("id"));
        });
        this.page = $("<div id='" + ox + "_mainPage'></div>");
        this.page.width(oC.getPageWidth());
        this.page.height(oC.getPageHeight());
        this.page.css("position", "relative");
        this.page.css("top", oC.getMarginPageWindow());
        this.page.css("left", oC.getMarginPageWindow());
        this.page.addClass("ui-widget-content ui-widget-shadow");
        this.page.css("float", "left");
        this.screenDiv.append(this.page);
        this.pageContent = $("<div id='" + ox + "_mainContent'></div>");
        this.pageContent.width(oC.getPageContentWidth());
        this.pageContent.height(oC.getPageContentHeight());
        this.pageContent.css("position", "relative");
        this.pageContent.css("top", oC.getMarginPageTop());
        this.pageContent.css("left", oC.getMarginPageLeft());
        this.pageContent.addClass("ui-widget-content");
        this.pageContent.css("text-align", this.textAlign);
        this.pageContent.css("float", "left");
        this.page.append(this.pageContent);
        this.formulaContainer = $("<div id='" + ox + "_mainFormula'></div>");
        this.pageContent.append(this.formulaContainer);
        cd.createFormulaOn(ow, this.formulaContainer);
        var oA = $(
            "<input id='" +
                ox +
                "_" +
                nf +
                "' class='flyingInputText' style='display:none'/>",
        );
        this.formulaContainer.append(oA);
        oA.on("input", function (oD) {
            fMathEditorsInterface.flyingInputText(oD);
        });
        oA.keypress(function (oD) {
            fMathEditorsInterface.flyingInputEnter(oD, $(this).attr("id"));
        });
        oA.on("blur", function (oD) {
            fMathEditorsInterface.flyingInputTextOut($(this).attr("id"));
        });
        oA.on("click", function (oD) {
            return false;
        });
        kG.addZone(ow, oC, this.screenDiv);
    };
    jP.prototype.updateInterface = function () {
        if (this.getConfig().hasAction(fi)) {
            this.resizeInterface();
        }
        if (this.getConfig().hasAction(bG)) {
            this.drawFlyingInput();
        } else {
            if (this.getConfig().hasAction(aZ)) {
                var ou = $("#" + this.getConfig().getEditorId() + "_" + nf);
                ou.css("display", "none");
            }
        }
        kG.updateZone(this.getConfig());
    };
    jP.prototype.drawFlyingInput = function () {
        var oy = this.getConfig().getSelectedElement();
        var ou = oy.getSelectedPanel();
        if (ou instanceof i6) {
            var oC = ou;
            var oA = oC.getBean();
            this.getConfig().setFlyingTarget(oA);
            var ov = $("#" + this.getConfig().getEditorId() + "_" + nf);
            ov.css("top", this.getPanelY(ou) - 1);
            ov.css("left", this.getPanelX(ou));
            var ow =
                ou.getDim().getWidth() *
                this.getConfig().getScreen().getViewScale();
            ov.css("width", ow);
            var oB =
                ou.getDim().getHeight() *
                    this.getConfig().getScreen().getViewScale() +
                2;
            ov.css("height", oB);
            ov.css(
                "fontSize",
                this.getRealFontSize(ou.getBean().getStyle().getMathsize()) +
                    "px",
            );
            var ox = lN.getFontFromText(ou);
            ov.css("fontFamily", ox);
            ov.val(oA.getText());
            ov.css("display", "");
            ov.focus();
        } else {
            if (ou instanceof cR) {
                var oz = ou;
                var oA = oz.getBean();
                if (cd.isEmptyElement(oA)) {
                    var ov = $("#" + this.getConfig().getEditorId() + "_" + nf);
                    ov.css("top", this.getPanelY(ou) - 1);
                    ov.css("left", this.getPanelX(ou));
                    var ow =
                        ou.getDim().getWidth() *
                        this.getConfig().getScreen().getViewScale();
                    ov.css("width", ow);
                    var oB =
                        ou.getDim().getHeight() *
                            this.getConfig().getScreen().getViewScale() +
                        2;
                    ov.css("height", oB);
                    ov.css(
                        "fontSize",
                        this.getRealFontSize(
                            ou.getBean().getStyle().getMathsize(),
                        ) + "px",
                    );
                    ov.val("");
                    ov.css("fontFamily", "normal");
                    ov.css("display", "");
                    ov.focus();
                }
            }
        }
    };
    jP.prototype.getRealFontSize = function (ou) {
        ou = ou * this.getConfig().getScreen().getViewScale();
        return bH.ceil(ou * 0.9);
    };
    jP.prototype.getPanelY = function (ov) {
        var ou = 0;
        ou = ou + ov.getDim().getY() + ov.getDim().getHeightTop();
        var ow = ov.getParent();
        while (ow != null) {
            ou = ou + ow.getDim().getY() + ow.getDim().getHeightTop();
            ow = ow.getParent();
        }
        ou = ou * this.getConfig().getScreen().getViewScale();
        return ou;
    };
    jP.prototype.getPanelX = function (ov) {
        var ou = 0;
        ou = ou + ov.getDim().getX() + ov.getDim().getWidthLeft();
        var ow = ov.getParent();
        while (ow != null) {
            ou = ou + ow.getDim().getX() + ow.getDim().getWidthLeft();
            ow = ow.getParent();
        }
        ou = ou * this.getConfig().getScreen().getViewScale();
        return ou;
    };
    jP.prototype.resizeInterface = function () {
        var ov = this.getPanelContent();
        if (ov == null) {
            return;
        }
        var ou = this.getConfig().getScreen();
        var ox = this.getConfig().getPaper();
        var ow = this.getPanel();
        ou.setScreenWidth(ow.width, ow.height, ox);
        ou.calculate();
        ov.width(ou.getRealViewportWidth() - 1);
        ov.height(ou.getRealViewportHeight() - 1);
        ov.scrollTop(0);
        ov.scrollLeft(0);
        if (ou.isScrollbarH()) {
            ov.css("overflow-x", "scroll");
        } else {
            ov.css("overflow-x", "hidden");
        }
        if (ou.isScrollbarV()) {
            ov.css("overflow-y", "scroll");
        } else {
            ov.css("overflow-y", "hidden");
        }
        this.screenDiv.width(ou.getTotalWidthPixels() + ou.addPixelsOnX());
        this.screenDiv.height(ou.getTotalHeightPixels() + ou.addPixelsOnY());
        this.page.width(ou.getPageWidth());
        this.page.height(ou.getPageHeight());
        this.pageContent.width(ou.getPageContentWidth());
        this.pageContent.height(ou.getPageContentHeight());
        this.pageContent.css("top", ou.getMarginPageTop());
        this.pageContent.css("left", ou.getMarginPageLeft());
    };

    function fu() {
        this.dLj = ff;
        this.dLj();
    }
    ga(fu, ff);
    fu.prototype.drawPanelOn = function (ou, oz, oD) {
        ff.prototype.drawPanel.call(this, ou, oz, oD);
        e = eF.getListOperators();
        var ox = gq.translate(oD, "menu_file");
        var oC = gq.translate(oD, "menu_home");
        var oG = gq.translate(oD, "menu_edit");
        var oF = gq.translate(oD, "menu_view");
        var oA = gq.translate(oD, "menu_conf");
        var oy = gq.translate(oD, "menu_help");
        var oH = gq.translate(oD, "menu_insert");
        var ov = this.getConfig();
        var ow = ov.getEditorId();
        var oE =
            "<div id='" +
            ow +
            "_tabs'>  <ul>    <li><a id='" +
            ow +
            "_tabs-file-link' href='#" +
            ow +
            "_tabs-file'>" +
            ox +
            "</a></li>    <li><a id='" +
            ow +
            "_tabs-edit-link' href='#" +
            ow +
            "_tabs-edit'>" +
            oG +
            "</a></li>    <li><a id='" +
            ow +
            "_tabs-insert-link' href='#" +
            ow +
            "_tabs-insert'>" +
            oH +
            "</a></li>    <li><a id='" +
            ow +
            "_tabs-home-link' href='#" +
            ow +
            "_tabs-home'>" +
            oC +
            "</a></li>    <li><a id='" +
            ow +
            "_tabs-view-link' href='#" +
            ow +
            "_tabs-view'>" +
            oF +
            "</a></li>    <li><a id='" +
            ow +
            "_tabs-help-link' href='#" +
            ow +
            "_tabs-help'>" +
            oy +
            "</a></li>  </ul>  <div id='" +
            ow +
            "_tabs-file'></div>  <div id='" +
            ow +
            "_tabs-edit'></div>  <div id='" +
            ow +
            "_tabs-insert'></div>  <div id='" +
            ow +
            "_tabs-home'></div>  <div id='" +
            ow +
            "_tabs-view'></div>  <div id='" +
            ow +
            "_tabs-help'></div></div>";
        var oB = $(oE);
        oB.css("border", "0px");
        oB.css("padding", "0px");
        oB.css("overflow", "hidden");
        oB.tabs();
        this.getPanelContent().append(oB);
        oB.tabs("option", "active", 2);
        this.updatePanel();
    };
    fu.prototype.updatePanel = function () {
        var oZ = this.getConfig();
        var oR = oZ.getEditorId();
        var oX = gq.translate(oZ, "menu_file");
        var oM = gq.translate(oZ, "menu_edit");
        var ov = gq.translate(oZ, "menu_insert");
        var oU = gq.translate(oZ, "menu_home");
        var oz = gq.translate(oZ, "menu_conf");
        var oQ = gq.translate(oZ, "menu_help");
        var oG = gq.translate(oZ, "menu_view");
        var oP = $("#" + oR + "_tabs-file-link");
        oP.text(oX);
        var oD = $("#" + oR + "_tabs-home-link");
        oD.text(oU);
        var oJ = $("#" + oR + "_tabs-edit-link");
        oJ.text(oM);
        var oC = $("#" + oR + "_tabs-insert-link");
        oC.text(ov);
        var oN = $("#" + oR + "_tabs-view-link");
        oN.text(oG);
        var oI = $("#" + oR + "_tabs-help-link");
        oI.text(oQ);
        var oY = 15;
        var oA = 3;
        if (oZ.isVerticalLayout()) {
            oY = 1;
            oA = 1;
        }
        var oS = $("#" + oR + "_tabs-file");
        oS.empty();
        oS.css("float", "left");
        oS.append(r.getButtonMargin(oZ, lO, "FileNew.png", false, 5));
        oS.append(r.getButtonMargin(oZ, kR, "FileNewDef.png", false, 5));
        oS.append(r.getButtonTextMargin(oZ, kQ, "xml.png", false, 5));
        oS.append(r.getButtonTextMargin(oZ, fp, "latex.png", false, 5));
        oS.append(r.getButtonTextMargin(oZ, ab, "QueryBuilder.png", false, 5));
        oS.append(r.getButtonTextMargin(oZ, ji, "FileSaveAs.png", false, 5));
        oS.append(r.getButtonTextMargin(oZ, gh, "FileSave.png", false, 5));
        var oH = $("#" + oR + "_tabs-home");
        oH.empty();
        oH.css("float", "left");
        oH.append(l0.getSelectFont(oZ, em, "ChangeStylesMenu.png"));
        var ox = l0.getSelectFontSize(oZ, ol);
        oH.append(ox);
        l0.setSelect(oZ.getButton(ol), oZ.getFontSize() + "");
        var oW = r.getButton(oZ, hy, "FontSizeIncreaseWord.png", false);
        oW.css("margin-left", "15px");
        oH.append(oW);
        oH.append(r.getButton(oZ, mg, "FontSizeDecreaseWord.png", false));
        var oB = r.getStateButton(oZ, f0, "Bold.png", false, false);
        oB.css("margin-left", "15px");
        oH.append(oB);
        oH.append(r.getStateButton(oZ, gy, "Italic.png", false, false));
        var o1 = l0.getSelectColor(oZ, fW, oH, "#000000", "GroupStyles.png");
        o1.css("margin-left", "15px");
        var oO = l0.getSelectTransparentColor(
            oZ,
            kP,
            oH,
            "transparent",
            "_3DEffectColorPickerClassic.png",
        );
        oO.css("margin-left", "15px");
        oH.append(
            r.getButtonTextMargin(oZ, iP, "ChangeStylesMenu.png", false, 5),
        );
        var oF = $("#" + oR + "_tabs-edit");
        oF.empty();
        oF.css("float", "left");
        oF.append(r.getButtonMargin(oZ, lg, "MailDelete.png", false, oA));
        oF.append(r.getButtonMargin(oZ, dk, "Copy.png", false, 15));
        oF.append(r.getButtonMargin(oZ, oh, "Cut.png", false, oA));
        oF.append(
            r.getButtonMargin(oZ, dg, "CellsInsertDialog2.png", false, oA),
        );
        oF.append(r.getButtonMargin(oZ, bd, "Paste.png", false, oA));
        oF.append(
            r.getButtonMargin(oZ, ml, "CellsInsertDialog3.png", false, oA),
        );
        oF.append(r.getButtonMargin(oZ, lH, "UndoButton.png", true, 15));
        oF.append(r.getButtonMargin(oZ, jv, "RedoButton.png", true, oA));
        var oE = $("#" + oR + "_tabs-view");
        oE.empty();
        oE.css("float", "left");
        oE.append(
            r.getStateButton(oZ, mv, "xml.png", false, oZ.isMathmlPaneShow()),
        );
        oE.append(
            r.getStateButton(oZ, gl, "latex.png", false, oZ.isLatexPaneShow()),
        );
        var oV = r.getStateButton(oZ, n3, "ZoomCurrent100.png", false, true);
        oV.css("margin-left", "15px");
        oE.append(oV);
        oE.append(
            r.getStateButton(oZ, mz, "TableColumnWidth.png", false, false),
        );
        oE.append(
            r.getStateButton(oZ, nS, "GroupPageBackground.png", false, false),
        );
        var oL = r.getButton(oZ, iv, "zoomin.png", false);
        oL.css("margin-left", "15px");
        oE.append(oL);
        oE.append(l0.getSelectZoom(oZ, kL));
        oE.append(r.getButton(oZ, ly, "zoomout.png", false));
        var oK = r.getStateButton(oZ, nO, "PagePortrait.png", false, true);
        oK.css("margin-left", "15px");
        oE.append(oK);
        oE.append(r.getStateButton(oZ, a7, "PageLandscape.png", false, false));
        var o0 = r.getStateButton(oZ, lx, "PlusMinus.png", false, true);
        o0.css("margin-left", "15px");
        oE.append(o0);
        oE.append(r.getStateButton(oZ, bw, "PropertySheet.png", false, true));
        oE.append(r.getStateButton(oZ, hI, "Keyboard.png", false, true));
        var ou = l0.getSelectTheme(oZ, jV);
        ou.css("margin-left", "15px");
        oE.append(ou);
        var ow = l0.getSelectLanguages(oZ, dW);
        ow.css("margin-left", "15px");
        oE.append(ow);
        var oy = $("#" + oR + "_tabs-insert");
        oy.empty();
        oy.css("float", "left");
        oy.append(
            r.getButtonTextMargin(oZ, fP, "TableFormulaDialog.png", false, oA),
        );
        oy.append(r.getButtonMargin(oZ, nk, "ident.png", false, oY));
        oy.append(r.getButtonMargin(oZ, hi, "PlusMinus.png", false, oA));
        oy.append(r.getButtonMargin(oZ, bV, "const.png", false, oA));
        oy.append(
            r.getButtonMargin(oZ, a4, "EquationFractionGallery.png", false, oY),
        );
        oy.append(
            r.getButtonMargin(oZ, go, "EquationScriptGallery.png", false, oA),
        );
        oy.append(
            r.getButtonMargin(oZ, hc, "EquationScriptGalleryA.png", false, oA),
        );
        oy.append(
            r.getButtonMargin(oZ, fz, "EquationRadicalGallery.png", false, oA),
        );
        oy.append(
            r.getButtonMargin(oZ, gM, "EquationLimitGallery.png", false, oA),
        );
        oy.append(
            r.getButtonMargin(
                oZ,
                cE,
                "EquationLargeOperatorGallery.png",
                false,
                oA,
            ),
        );
        oy.append(r.getButtonMargin(oZ, bq, "deriv.png", false, oA));
        oy.append(
            r.getButtonMargin(oZ, lf, "EquationIntegralGallery.png", false, oA),
        );
        oy.append(
            r.getButtonMargin(
                oZ,
                mh,
                "EquationDelimiterGallery.png",
                false,
                oY,
            ),
        );
        oy.append(r.getButtonMargin(oZ, I, "enclose.png", false, oA));
        oy.append(
            r.getButtonMargin(oZ, f4, "TableInsertDialogWord.png", false, oA),
        );
        oy.append(
            r.getButtonMargin(oZ, nj, "EquationMatrixGallery.png", false, oA),
        );
        oy.append(
            r.getButtonMargin(oZ, g7, "EquationFunctionGallery.png", false, oY),
        );
        oy.append(
            r.getButtonMargin(oZ, hY, "EquationAccentGallery.png", false, oA),
        );
        oy.append(r.getButtonMargin(oZ, jT, "BreaksGallery.png", false, oA));
        oy.append(r.getButtonMargin(oZ, gN, "unicode.gif", false, oA));
        oy.append(r.getButtonTextMargin(oZ, bp, "QueryBuilder.png", false, oY));
        var oT = $("#" + oR + "_tabs-help");
        oT.empty();
        oT.css("float", "left");
        oT.append(r.getButtonTextMargin(oZ, b1, "ReverseSort.png", false, 5));
        oT.append(r.getButtonTextMargin(oZ, nd, "Video.png", false, 5));
        oT.append(r.getButtonTextMargin(oZ, iK, "license-32.png", false, 5));
        oT.append(r.getButtonTextMargin(oZ, jO, "tips.png", false, 5));
        oT.append(
            r.getButtonTextMargin(oZ, ks, "GroupBlogInsertLinks.png", false, 5),
        );
        this.updateHomeMenu();
        this.updateEditMenu();
    };
    fu.prototype.updateInterface = function () {
        if (this.getConfig().hasAction(hW)) {
            this.updateHomeMenu();
        }
        if (this.getConfig().hasAction(ck)) {
            this.updateUndoRedo();
        }
        if (this.getConfig().hasAction(dw)) {
            this.updateEditMenu();
        }
        if (this.getConfig().hasAction(s)) {
            this.updatePanel();
        }
    };
    fu.prototype.updateHomeMenu = function () {
        var ox = this.getConfig();
        var oF = ox.getSelectedElement().getSelectedPanel();
        if (oF == null) {
            ox.getButton(em).setDisabled(true);
            ox.getButton(gy).setDisabled(true);
            ox.getButton(f0).setDisabled(true);
            ox.getButton(ol).setDisabled(true);
            ox.getButton(hy).setDisabled(true);
            ox.getButton(mg).setDisabled(true);
            ox.getButton(fW).setDisabled(true);
            ox.getButton(kP).setDisabled(true);
        } else {
            var oG = oF.getBean();
            var oJ = oG.getStyle().getMathvariant();
            var oB = oJ.getFamily();
            ox.getButton(em).setDisabled(false);
            var oC = ox.getButton(em);
            l0.setSelect(oC, oB);
            var ou = oJ.isItalic();
            var ow = oJ.isBold();
            ox.getButton(gy).setState(ou);
            ox.getButton(f0).setState(ow);
            var oD = kt.hasItalic(oJ.getMathvariant());
            var ov = kt.hasBold(oJ.getMathvariant());
            ox.getButton(gy).setDisabled(!oD);
            ox.getButton(f0).setDisabled(!ov);
            var oI = oG.getStyle().getMathsize() + "";
            oI = bH.removeDecimals(oI);
            ox.getButton(hy).setDisabled(false);
            ox.getButton(mg).setDisabled(false);
            ox.getButton(ol).setDisabled(false);
            var oH = ox.getButton(ol);
            l0.setSelect(oH, oI);
            var oA = oG.getStyle().getColor();
            oA = c2.getColorCode(oA);
            ox.getButton(fW).setDisabled(false);
            var oy = ox.getButton(fW);
            l0.setSelectColor(oy, oA);
            var oE = ox.getSelectedElement().getSelectedBackground();
            if (oE == null) {
                oE = "transparent";
            } else {
                oE = c2.getColorCode(oE);
            }
            ox.getButton(kP).setDisabled(false);
            var oz = ox.getButton(kP);
            l0.setSelectColor(oz, oE);
        }
        this.enableDisableDeleteFonts();
    };
    fu.prototype.enableDisableDeleteFonts = function () {
        var ox = this.getConfig();
        var oA = ox.getMainFormula().getMathML(hV, true);
        var ow = true;
        var ou = ox
            .getSaveLocalStorage()
            .getSaveClientData()
            .getListCustomFonts();
        for (var oy = 0; oy < ou.size(); oy++) {
            var ov = ou.get(oy);
            if (ov.isRemove()) {
                continue;
            }
            var oz = ov.getValue();
            if (oA.indexOf(oz) == -1) {
                ow = false;
                break;
            }
        }
        ox.getButton(iP).setDisabled(ow);
    };
    fu.prototype.updateEditMenu = function () {
        var ov = this.getConfig();
        var oA = ov.getSelectedElement().getSelectedPanel();
        ov.getButton(lg).setDisabled(true);
        ov.getButton(dk).setDisabled(true);
        ov.getButton(oh).setDisabled(true);
        ov.getButton(dg).setDisabled(true);
        ov.getButton(ml).setDisabled(true);
        ov.getButton(bd).setDisabled(true);
        if (oA != null) {
            var ou = oA.getBean();
            var oy = ou.getParentBean();
            var oz = cd.isEmptyElement(ou);
            if (ou.canBeDeleted()) {
                ov.getButton(lg).setDisabled(false);
                if (!oz) {
                    ov.getButton(oh).setDisabled(false);
                }
            }
            if (!oz) {
                ov.getButton(dk).setDisabled(false);
            }
            var ox = ov.getSelectedElement().getCopiedSelectedElement();
            var ow = ov.getMainFormula().getSettings();
            if (ov.getSelectedElement().getCopiedSelectedElement() == null) {
                ov.getButton(dg).setDisabled(true);
                ov.getButton(ml).setDisabled(true);
                ov.getButton(bd).setDisabled(true);
            } else {
                if (oy != null) {
                    if (oy.canInsertMathMLLeft(ou, ox, ow)) {
                        ov.getButton(dg).setDisabled(false);
                    }
                    if (oy.canInsertMathMLRight(ou, ox, ow)) {
                        ov.getButton(ml).setDisabled(false);
                    }
                    if (oy.canReplaceMathML(ou, ox, ow)) {
                        ov.getButton(bd).setDisabled(false);
                    }
                }
            }
        }
    };
    fu.prototype.updateUndoRedo = function () {
        var ou = this.getConfig();
        ou.getButton(lH).setDisabled(!ou.getHistory().canUndoMathML());
        ou.getButton(jv).setDisabled(!ou.getHistory().canRedoMathML());
    };

    function jK() {
        this.lastMode = "";
        this.lastValue = "";
        this.dLj = ff;
        this.dLj();
    }
    ga(jK, ff);
    jK.prototype.drawPanelOn = function (ou, ov, ow) {
        ff.prototype.drawPanel.call(this, ou, ov, ow);
        CodeMirror.defineExtension("centerOnLine", function (ox) {
            var oy = this.getScrollInfo().clientHeight;
            var oz = this.charCoords(
                {
                    line: ox,
                    ch: 0,
                },
                "local",
            );
            this.scrollTo(null, (oz.top + oz.bottom - oy) / 2);
        });
        this.resizeInterface();
        this.updatePreviewPanel();
    };
    jK.prototype.updateInterface = function () {
        if (this.getConfig() == null) {
            return;
        }
        if (this.getConfig().hasAction(bS)) {
            this.resizeInterface();
        }
        if (this.getConfig().hasAction(iT)) {
            this.updatePreviewPanel();
        }
        if (this.getConfig().hasAction(b7)) {
            this.moveLineCodeMirror();
        }
    };
    jK.prototype.moveLineCodeMirror = function () {
        var oy = this.getPanelContent();
        if (oy == null) {
            return;
        }
        if (!this.getConfig().isMathmlPaneShow()) {
            return;
        }
        var oz = 0;
        var ow = this.getConfig();
        var ou = ow.getSelectedElement().getHierarchy();
        if (ou == null) {
            return;
        }
        var ov = ou.get(0);
        oz = this.navigateTo(oz, ou, 0, ov);
        af.setCursorLine(ow, ow.getCodeMirror(), oz);
        ow.getSelectedElement().setLastLineSelected(oz);
        var ox = $(".CodeMirror-activeline-background");
        ox.css("background-color", this.getConfig().getSelectedColor());
    };
    jK.prototype.navigateTo = function (oB, oy, oz, oD) {
        if (oz == oy.size() - 1) {
            return oB;
        }
        var oE = oy.get(oz + 1);
        var ov = new fM();
        if (oD instanceof dp) {
            var ow = oD;
            ov.addAll(ow.getRealChildren());
        } else {
            if (oD instanceof mR) {
                var oA = oD;
                ov.addAll(oA.getRealChildren());
            } else {
                ov.addAll(lN.getChildren(oD));
            }
        }
        for (var ox = 0; ox < ov.size(); ox++) {
            var ou = ov.get(ox);
            if (ou == oE) {
                return this.navigateTo(oB + 1, oy, oz + 1, ou);
            } else {
                if (ou.getMathMLBean().isDynamicCreated()) {
                    continue;
                }
                var oC = this.getConfig()
                    .getMainFormula()
                    .getMathML_getMathML(ou, hV, true);
                oB = oB + bH.getNumberOfLines(oC);
            }
        }
        return oB;
    };
    jK.prototype.resizeInterface = function () {
        var ow = this.getPanelContent();
        if (ow == null) {
            return;
        }
        if (this.getConfig().isPreviewPaneHidden()) {
            return;
        }
        ow.css("width", this.getPanel().width);
        if (this.getConfig().isVerticalLayout()) {
            var ou = this.getPanel().height * 0.4;
            ow.css("height", ou);
        } else {
            ow.css("height", this.getPanel().height);
        }
        ow.css("overflow", "hidden");
        ow.css("float", "left");
        ow.css("text-align", "left");
        if (this.getConfig().getCodeMirror() != null) {
            var ou = ow.height();
            if (this.getConfig().isVerticalLayout()) {
                ou = ou - 22;
            }
            var ov = this.getConfig().getCodeMirror();
            ov.setSize(this.getPanel().width, ou);
        }
    };
    jK.prototype.updatePreviewPanel = function () {
        var oz = this.getPanelContent();
        if (oz == null) {
            return;
        }
        if (this.getConfig().isPreviewPaneHidden()) {
            this.lastMode = "";
            this.lastValue = "";
            return;
        }
        var ox = "";
        var oy = "";
        if (this.getConfig().isLatexPaneShow()) {
            ox = cd.getLatexString(this.getConfig(), true);
            oy = "stex";
        } else {
            ox = cd.getMathMLString(this.getConfig(), i7, true);
            oy = "xml";
        }
        if (this.lastMode == oy) {
            if (this.lastValue == ox) {
            } else {
                af.updateTextCodeMirror(
                    this.getConfig(),
                    this.getConfig().getCodeMirror(),
                    ox,
                );
            }
        } else {
            var ow = null;
            if (this.getConfig().isVerticalLayout()) {
                ow = af.addCodeMirrorV(
                    oz,
                    this.getConfig().getEditorId(),
                    ox,
                    oy,
                );
            } else {
                ow = af.addCodeMirror(
                    oz,
                    this.getConfig().getEditorId(),
                    ox,
                    oy,
                );
            }
            this.getConfig().setCodeMirror(ow);
        }
        var ov = $(".CodeMirror-activeline-background");
        ov.css("background-color", this.getConfig().getSelectedColor());
        var ou = oz.height();
        if (this.getConfig().isVerticalLayout()) {
            ou = ou - 22;
        }
        this.getConfig().getCodeMirror().setSize(this.getPanel().width, ou);
        this.lastMode = oy;
        this.lastValue = ox;
    };

    function gR() {
        this.dLj = ff;
        this.dLj();
    }
    ga(gR, ff);
    gR.prototype.drawPanelOn = function (ou, ov, ow) {
        ff.prototype.drawPanel.call(this, ou, ov, ow);
        this.init();
    };
    gR.prototype.init = function () {
        var ou = this.getPanelContent();
        if (ou == null) {
            return;
        }
        ou.css("overflow-y", "scroll");
        ou.css("overflow-x", "hidden");
        if (this.getConfig().isVerticalLayout()) {
            ou.css("height", this.getPanel().height / 2);
        } else {
            ou.css("height", this.getPanel().height);
        }
        this.updateProperties();
    };
    gR.prototype.updateInterface = function () {
        if (this.getConfig().hasAction(fA)) {
            var ov = this.getPanelContent();
            if (ov == null) {
                return;
            }
            ov.css("overflow-y", "scroll");
            ov.css("overflow-x", "hidden");
            if (this.getConfig().isVerticalLayout()) {
                var ou = this.getPanel().height * 0.6;
                ov.css("height", ou);
            } else {
                ov.css("height", this.getPanel().height);
            }
        }
        if (this.getConfig().hasAction(fc)) {
            this.updateProperties();
        }
    };
    gR.prototype.updateProperties = function () {
        var oz = this.getPanelContent();
        oz.empty();
        var ov = this.getConfig();
        var ou = $("<div id='" + ov.getEditorId() + "_accordion'></div>");
        ou.css("font-size", "80%");
        var oB = e8.buildProperties(this.getConfig());
        var oA = 0;
        var ow = ov.getSelectedElement().getSelectedPropGroup();
        if (ow != null) {
            for (var ox = 0; ox < oB.size(); ox++) {
                var oC = oB.get(ox);
                if (ow.indexOf(oC.getKeyName()) > -1) {
                    oA = ox;
                    break;
                }
            }
        }
        oz.append(ou);
        cA.drawProperties(this.getConfig(), ou, oB, this.getPanel().width);
        var oy = ou.accordion({
            heightStyle: "content",
            animate: false,
            collapsible: true,
            active: oA,
            activate: function (oD, oE) {
                fMathEditorsInterface.clickedButton(
                    $(this).attr("id") + "_header_" + oE.newHeader.attr("id"),
                );
            },
        });
    };

    function hl() {
        this.dLj = ff;
        this.dLj();
    }
    ga(hl, ff);
    hl.prototype.drawPanelOn = function (ou, ov, ow) {
        ff.prototype.drawPanel.call(this, ou, ov, ow);
        this.init();
    };
    hl.prototype.updateInterface = function () {
        this.updateStatusPanel();
    };
    hl.prototype.init = function () {
        if (this.getPanelContent() != null) {
            this.getPanelContent().css("width", this.getPanel().width);
            this.getPanelContent().css("height", this.getPanel().height);
            this.getPanelContent().css("overflow", "hidden");
            this.getPanelContent().css("float", "left");
            this.getPanelContent().css("text-align", "left");
        }
    };
    hl.prototype.updateStatusPanel = function () {
        if (this.getPanelContent() == null) {
            return;
        }
        this.getPanelContent().empty();
        this.addNavigationPath();
    };
    hl.prototype.addNavigationPath = function () {
        var ow = this.getConfig().getSelectedElement().getSelectedList();
        var oK = $("<table width='100%'></table>");
        var ov = $("<tr></tr>");
        oK.append(ov);
        this.getPanelContent().append(oK);
        var oA = $("<td width='70%'></td>");
        var oz = $("<td width='15%'></td>");
        var oB = gq.translate(this.getConfig(), "status_version");
        var ou = $(
            "<span style='font-size:80%'><i>" + oB + " <b>3.4.1</b></i></span>",
        );
        oz.append(ou);
        var ox = $("<td width='15%' align='right'></td>");
        ov.append(oA);
        ov.append(oz);
        ov.append(ox);
        if (ow != null) {
            var oD = gq.translate(this.getConfig(), "status_selected");
            var oL = $("<span>" + oD + "</span>");
            oL.css("margin-right", "5px");
            oL.addClass("ui-state-active");
            oA.append(oL);
            for (var oI = 0; oI < ow.size(); oI++) {
                var oE = ow.get(oI);
                var oJ = cd.getMathMLForPanel(this.getConfig(), oE, false);
                if (oI > 0) {
                    var oH = $("<span>\\</span>");
                    oH.css("margin-left", "5px");
                    oH.css("margin-right", "5px");
                    oA.append(oH);
                }
                var oM = b8.getNameFromTag(oJ);
                var oG = mf + "_" + oI;
                var oy = $(
                    "<div id='" +
                        this.getConfig().getEditorId() +
                        "_" +
                        oG +
                        "'>" +
                        oM +
                        "</div>",
                );
                oy.button();
                oy.removeClass("ui-corner-all");
                if (oI == ow.size() - 1) {
                    oy.addClass("ui-state-active");
                } else {
                    oy.click(function (oN) {
                        fMathEditorsInterface.clickedButton($(this).attr("id"));
                    });
                }
                oA.append(oy);
            }
        }
        var oF = gq.translate(this.getConfig(), "status_last_update");
        if (this.getConfig().getLanguage().toLowerCase() == "ar") {
            var oC = $(
                "<span style='font-size:80%'><i><b>12-Mar-2022</b> " +
                    oF +
                    "</i></span>",
            );
            ox.append(oC);
        } else {
            var oC = $(
                "<span style='font-size:80%'><i>" +
                    oF +
                    " <b>12-Mar-2022</b></i></span>",
            );
            ox.append(oC);
        }
    };

    function e8() {}
    e8.buildProperties = function (oM) {
        var oL = new fM();
        var oG = oM.getSelectedElement();
        if (oG.getSelectedIndex() == -1) {
            return oL;
        }
        var oE = oG.getSelectedPanel();
        var ow = oE.getBean();
        k8.buildProp(oM, oL);
        if (!(ow instanceof bh)) {
            l1.buildProp(oM, oL);
            hB.buildProp(oM, oL);
            k2.buildProp(oM, oL);
        }
        if (ow instanceof aB && !(ow instanceof cT)) {
            var oz = ow;
            fO.buildProp(oM, oz, oL, oE);
            if (ow instanceof av) {
                var oC = ow;
                nT.buildProp(oM, oC, oL);
            }
        } else {
            if (ow instanceof os) {
                var ox = ow;
                jk.buildProp(oM, ox, oL);
            } else {
                if (ow instanceof mY) {
                    var oA = ow;
                    F.buildProp(oA, oL);
                } else {
                    if (ow instanceof m6) {
                        var ov = ow;
                        a2.buildProp(ov, oL);
                    } else {
                        if (ow instanceof cg) {
                            var oN = ow;
                            gz.buildProp(oN, oL);
                        } else {
                            if (ow instanceof lr) {
                                var oy = ow;
                                y.buildProp(oy, oL);
                            } else {
                                if (ow instanceof aj) {
                                    var oK = ow;
                                    kW.buildProp(oM, oK, oL);
                                } else {
                                    if (ow instanceof nI) {
                                        var oH = ow;
                                        fT.buildProp(oM, oH, oL);
                                    } else {
                                        if (ow instanceof hF) {
                                            var oK = ow;
                                            aA.buildProp(oM, oK, oL);
                                        } else {
                                            if (ow instanceof hk) {
                                                var oB = ow;
                                                le.buildProp(oB, oL);
                                            } else {
                                                if (ow instanceof el) {
                                                    var oF = ow;
                                                    cL.buildProp(oM, oF, oL);
                                                } else {
                                                    if (ow instanceof iF) {
                                                        var oJ = ow;
                                                        co.buildProp(
                                                            oM,
                                                            oE,
                                                            oJ,
                                                            oL,
                                                        );
                                                        g5.buildProp(oM, oL);
                                                        bi.buildProp(oM, oL);
                                                    } else {
                                                        if (ow instanceof cT) {
                                                            var oI = ow;
                                                            a.buildProp(oI, oL);
                                                        } else {
                                                            if (
                                                                ow instanceof lM
                                                            ) {
                                                                var ou = ow;
                                                                eN.buildProp(
                                                                    oM,
                                                                    oE,
                                                                    ou,
                                                                    oL,
                                                                );
                                                            } else {
                                                                if (
                                                                    ow instanceof
                                                                    bh
                                                                ) {
                                                                } else {
                                                                    if (
                                                                        ow instanceof
                                                                        ae
                                                                    ) {
                                                                        var oD =
                                                                            ow;
                                                                        iV.buildProp(
                                                                            oM,
                                                                            oE,
                                                                            oD,
                                                                            oL,
                                                                        );
                                                                    } else {
                                                                        if (
                                                                            ow instanceof
                                                                            a3
                                                                        ) {
                                                                            cq.buildProp(
                                                                                oM,
                                                                                ow,
                                                                                oL,
                                                                            );
                                                                        } else {
                                                                            if (
                                                                                ow instanceof
                                                                                    iJ ||
                                                                                ow instanceof
                                                                                    k
                                                                            ) {
                                                                                dU.buildProp(
                                                                                    oM,
                                                                                    ow,
                                                                                    oL,
                                                                                );
                                                                                hs.buildProp(
                                                                                    ow,
                                                                                    oL,
                                                                                );
                                                                                li.buildProp(
                                                                                    oM,
                                                                                    ow,
                                                                                    oL,
                                                                                );
                                                                                dm.buildProp(
                                                                                    oM,
                                                                                    ow,
                                                                                    oL,
                                                                                );
                                                                            } else {
                                                                                if (
                                                                                    ow instanceof
                                                                                    gb
                                                                                ) {
                                                                                    cq.buildProp(
                                                                                        oM,
                                                                                        ow,
                                                                                        oL,
                                                                                    );
                                                                                } else {
                                                                                    if (
                                                                                        ow instanceof
                                                                                        aK
                                                                                    ) {
                                                                                        gr.buildProp(
                                                                                            oM,
                                                                                            oE,
                                                                                            ow,
                                                                                            oL,
                                                                                        );
                                                                                    } else {
                                                                                        if (
                                                                                            ow instanceof
                                                                                            lD
                                                                                        ) {
                                                                                            ii.buildProp(
                                                                                                oM,
                                                                                                oE,
                                                                                                ow,
                                                                                                oL,
                                                                                            );
                                                                                        } else {
                                                                                            if (
                                                                                                ow instanceof
                                                                                                b0
                                                                                            ) {
                                                                                                aO.buildProp(
                                                                                                    oM,
                                                                                                    oE,
                                                                                                    ow,
                                                                                                    oL,
                                                                                                );
                                                                                            } else {
                                                                                                if (
                                                                                                    ow instanceof
                                                                                                    kn
                                                                                                ) {
                                                                                                    eD.buildProp(
                                                                                                        oM,
                                                                                                        oE,
                                                                                                        ow,
                                                                                                        oL,
                                                                                                    );
                                                                                                } else {
                                                                                                    if (
                                                                                                        ow instanceof
                                                                                                        hq
                                                                                                    ) {
                                                                                                        kO.buildProp(
                                                                                                            oM,
                                                                                                            ow,
                                                                                                            oL,
                                                                                                        );
                                                                                                    } else {
                                                                                                        if (
                                                                                                            ow instanceof
                                                                                                            n2
                                                                                                        ) {
                                                                                                            es.buildProp(
                                                                                                                oM,
                                                                                                                oE,
                                                                                                                ow,
                                                                                                                oL,
                                                                                                            );
                                                                                                        } else {
                                                                                                            if (
                                                                                                                ow instanceof
                                                                                                                dF
                                                                                                            ) {
                                                                                                                nu.buildProp(
                                                                                                                    oM,
                                                                                                                    oE,
                                                                                                                    ow,
                                                                                                                    oL,
                                                                                                                );
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return oL;
    };

    function hB() {}
    hB.buildProp = function (ov, oB) {
        var oC = new kY(d4);
        oB.add(oC);
        var oz = ov.getSelectedElement();
        if (oz.getSelectedIndex() == -1) {
            return;
        }
        var ou = oz.getSelectedPanel();
        var oD = ou.getBean();
        var ow = "";
        var oy = oD.getCssstyle().borderWidthSet();
        if (oy) {
            if (oD.getCssstyle().borderAllWidthSet()) {
                ow = "all";
            } else {
                if (oD.getCssstyle().borderTopWidthSet()) {
                    ow = "top ";
                }
                if (oD.getCssstyle().borderBottomWidthSet()) {
                    ow = ow + "bottom ";
                }
                if (oD.getCssstyle().borderLeftWidthSet()) {
                    ow = ow + "left ";
                }
                if (oD.getCssstyle().borderRightWidthSet()) {
                    ow = ow + "right ";
                }
            }
        } else {
            ow = "no";
        }
        ow = W.trim(ow);
        var oA = new fn("type", "prop_type.png");
        oA.setValue(hB.getImagesForText(ow));
        oA.setType(j0);
        oA.setOptions(n6.getBorderOptList(ow));
        oC.addAttList(oA);
        if (ow == "all") {
            var ox = new fn("same", "prop_same.png");
            ox.setValue(ov.isAllSettingsBorder() + "");
            ox.setType(nl);
            oC.addAttList(ox);
            if (ov.isAllSettingsBorder()) {
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "all",
                    oD.getCssstyle().getBorder_width_top_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "all",
                    oD.getCssstyle().getBorder_style_top(),
                );
                hB.buildAttributeColor(
                    oC,
                    "all",
                    oD.getCssstyle().getBorder_color_top().getHex(),
                );
            } else {
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "top",
                    oD.getCssstyle().getBorder_width_top_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "top",
                    oD.getCssstyle().getBorder_style_top(),
                );
                hB.buildAttributeColor(
                    oC,
                    "top",
                    oD.getCssstyle().getBorder_color_top().getHex(),
                );
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "left",
                    oD.getCssstyle().getBorder_width_left_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "left",
                    oD.getCssstyle().getBorder_style_left(),
                );
                hB.buildAttributeColor(
                    oC,
                    "left",
                    oD.getCssstyle().getBorder_color_left().getHex(),
                );
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "bottom",
                    oD.getCssstyle().getBorder_width_bottom_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "bottom",
                    oD.getCssstyle().getBorder_style_bottom(),
                );
                hB.buildAttributeColor(
                    oC,
                    "bottom",
                    oD.getCssstyle().getBorder_color_bottom().getHex(),
                );
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "right",
                    oD.getCssstyle().getBorder_width_right_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "right",
                    oD.getCssstyle().getBorder_style_right(),
                );
                hB.buildAttributeColor(
                    oC,
                    "right",
                    oD.getCssstyle().getBorder_color_right().getHex(),
                );
            }
        } else {
            if (oD.getCssstyle().borderTopWidthSet()) {
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "top",
                    oD.getCssstyle().getBorder_width_top_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "top",
                    oD.getCssstyle().getBorder_style_top(),
                );
                hB.buildAttributeColor(
                    oC,
                    "top",
                    oD.getCssstyle().getBorder_color_top().getHex(),
                );
            }
            if (oD.getCssstyle().borderLeftWidthSet()) {
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "left",
                    oD.getCssstyle().getBorder_width_left_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "left",
                    oD.getCssstyle().getBorder_style_left(),
                );
                hB.buildAttributeColor(
                    oC,
                    "left",
                    oD.getCssstyle().getBorder_color_left().getHex(),
                );
            }
            if (oD.getCssstyle().borderBottomWidthSet()) {
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "bottom",
                    oD.getCssstyle().getBorder_width_bottom_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "bottom",
                    oD.getCssstyle().getBorder_style_bottom(),
                );
                hB.buildAttributeColor(
                    oC,
                    "bottom",
                    oD.getCssstyle().getBorder_color_bottom().getHex(),
                );
            }
            if (oD.getCssstyle().borderRightWidthSet()) {
                oC.addSpacer();
                hB.buildAttributeWidth(
                    oC,
                    "right",
                    oD.getCssstyle().getBorder_width_right_S(),
                );
                hB.buildAttributeStyle(
                    ov,
                    oC,
                    "right",
                    oD.getCssstyle().getBorder_style_right(),
                );
                hB.buildAttributeColor(
                    oC,
                    "right",
                    oD.getCssstyle().getBorder_color_right().getHex(),
                );
            }
        }
    };
    hB.buildAttributeWidth = function (ox, ov, ow) {
        var ou = new fn("width_" + ov, "prop_width.png");
        ou.setValue(ow);
        ou.setType(g1);
        ou.setOnlyPositive(true);
        ou.setOptions(n6.getLength());
        ox.addAttList(ou);
    };
    hB.buildAttributeStyle = function (ov, oy, ow, ox) {
        var ou = new fn("style_" + ow, "prop_line_style.png");
        ou.setValue(ox);
        ou.setType(mt);
        ou.setOptions(n6.getLineStyleList(ov));
        oy.addAttList(ou);
    };
    hB.buildAttributeColor = function (ox, ov, ow) {
        var ou = new fn("color_" + ov, "prop_color.png");
        ou.setValue(ow);
        ou.setType(jG);
        ou.setHeight(19);
        ox.addAttList(ou);
    };
    hB.getImagesForText = function (oy) {
        var ow = "";
        var ox = oy.split(" ");
        for (var ov = 0; ov < ox.length; ov++) {
            var ou = ox[ov];
            if (ou.length > 0) {
                if (ow.length > 0) {
                    ow = ow + ",";
                }
                ow = ow + "style/border-" + ou + ".png";
            }
        }
        return ow;
    };
    hB.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(d4) == 0) {
            return true;
        }
        return false;
    };
    hB.executeEvent = function (ou, ox) {
        if (ou.getSource() == d4 + "_type_down") {
            ox.getSelectedElement().setImageSelectionActive(d4 + "_type_down");
            ox.addAction(fc);
            return true;
        } else {
            if (ou.getSource() == d4 + "_type_up") {
                ox.getSelectedElement().setImageSelectionActive(null);
                ox.addAction(fc);
                return true;
            } else {
                if (ou.getSource().indexOf(d4 + "_width_") == 0) {
                    var oz = gJ.getSelectedLengthValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oz == "") {
                        oz = null;
                    }
                    var oy = ou.getSource();
                    oy = oy.substring(oy.lastIndexOf("_") + 1, oy.length);
                    var oA = ox.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    if (oy == "all") {
                        ov.getCssstyle().setBorderWidth(oz);
                    } else {
                        if (oy == "top") {
                            ov.getCssstyle().setBorderTopWidth(oz);
                        } else {
                            if (oy == "bottom") {
                                ov.getCssstyle().setBorderBottomWidth(oz);
                            } else {
                                if (oy == "left") {
                                    ov.getCssstyle().setBorderLeftWidth(oz);
                                } else {
                                    if (oy == "right") {
                                        ov.getCssstyle().setBorderRightWidth(
                                            oz,
                                        );
                                    }
                                }
                            }
                        }
                    }
                    ov.setAttribute("editorSelected", "true");
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource().indexOf(d4 + "_style_") == 0) {
                        var oz = gJ.getSelectedValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oz == "solid") {
                            oz = "";
                        }
                        var oy = ou.getSource();
                        oy = oy.substring(oy.lastIndexOf("_") + 1, oy.length);
                        var oA = ox.getSelectedElement();
                        var ow = oA.getSelectedPanel();
                        var ov = ow.getBean();
                        if (oy == "all") {
                            ov.getCssstyle().setBorderStyle(oz);
                        } else {
                            if (oy == "top") {
                                ov.getCssstyle().setBorderTopStyle(oz);
                            } else {
                                if (oy == "bottom") {
                                    ov.getCssstyle().setBorderBottomStyle(oz);
                                } else {
                                    if (oy == "left") {
                                        ov.getCssstyle().setBorderLeftStyle(oz);
                                    } else {
                                        if (oy == "right") {
                                            ov.getCssstyle().setBorderRightStyle(
                                                oz,
                                            );
                                        }
                                    }
                                }
                            }
                        }
                        ov.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    } else {
                        if (ou.getSource().indexOf(d4 + "_color_") == 0) {
                            var oz = gJ.getSelectedValue(
                                ox.getEditorId() + "_" + ou.getSource(),
                            );
                            if (oz == "#000000") {
                                oz = "";
                            }
                            var oy = ou.getSource();
                            oy = oy.substring(
                                oy.lastIndexOf("_") + 1,
                                oy.length,
                            );
                            var oA = ox.getSelectedElement();
                            var ow = oA.getSelectedPanel();
                            var ov = ow.getBean();
                            if (oy == "all") {
                                ov.getCssstyle().setBorderColor(oz);
                            } else {
                                if (oy == "top") {
                                    ov.getCssstyle().setBorderTopColor(oz);
                                } else {
                                    if (oy == "bottom") {
                                        ov.getCssstyle().setBorderBottomColor(
                                            oz,
                                        );
                                    } else {
                                        if (oy == "left") {
                                            ov.getCssstyle().setBorderLeftColor(
                                                oz,
                                            );
                                        } else {
                                            if (oy == "right") {
                                                ov.getCssstyle().setBorderRightColor(
                                                    oz,
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                            ov.setAttribute("editorSelected", "true");
                            ox.addAction(fc);
                            return gJ.updateFormulaAndPanels(ox);
                        } else {
                            if (ou.getSource() == d4 + "_same") {
                                var oz = gJ.getBooleanValue(
                                    ox.getEditorId() + "_" + ou.getSource(),
                                );
                                var oB = oz == "true";
                                ox.setAllSettingsBorder(oB);
                                var oA = ox.getSelectedElement();
                                var ow = oA.getSelectedPanel();
                                var ov = ow.getBean();
                                if (oB) {
                                    ov.getCssstyle().setBorder(
                                        ov
                                            .getCssstyle()
                                            .getBorder_width_top_S(),
                                    );
                                    ov.getCssstyle().setBorderStyle(
                                        ov.getCssstyle().getBorder_style_top(),
                                    );
                                    ov.getCssstyle().setBorderColor(
                                        ov
                                            .getCssstyle()
                                            .getBorder_color_top()
                                            .getHex(),
                                    );
                                }
                                ov.setAttribute("editorSelected", "true");
                                ox.addAction(fc);
                                return gJ.updateFormulaAndPanels(ox);
                            } else {
                                if (ou.getSource().indexOf(d4 + "_type") == 0) {
                                    var oz = ou.getSource();
                                    oz = oz.substring(
                                        oz.lastIndexOf("_") + 1,
                                        oz.length,
                                    );
                                    var oA = ox.getSelectedElement();
                                    var ow = oA.getSelectedPanel();
                                    var ov = ow.getBean();
                                    if (oz == "all") {
                                        ov.getCssstyle().setBorder("1px");
                                        ov.getCssstyle().setBorderStyle(
                                            "solid",
                                        );
                                        ov.getCssstyle().setBorderColor(
                                            "#000000",
                                        );
                                    } else {
                                        if (oz == "no") {
                                            ov.getCssstyle().setBorder("");
                                        } else {
                                            if (oz == "top") {
                                                ov.getCssstyle().setBorderTop(
                                                    "1px",
                                                );
                                            } else {
                                                if (oz == "bottom") {
                                                    ov.getCssstyle().setBorderBottom(
                                                        "1px",
                                                    );
                                                } else {
                                                    if (oz == "left") {
                                                        ov.getCssstyle().setBorderLeft(
                                                            "1px",
                                                        );
                                                    } else {
                                                        if (oz == "right") {
                                                            ov.getCssstyle().setBorderRight(
                                                                "1px",
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ov.setAttribute("editorSelected", "true");
                                    ox.getSelectedElement().setImageSelectionActive(
                                        null,
                                    );
                                    ox.addAction(fc);
                                    return gJ.updateFormulaAndPanels(ox);
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };

    function l1() {}
    l1.buildProp = function (ow, oB) {
        var oC = new kY(dq);
        oB.add(oC);
        var oz = ow.getSelectedElement();
        if (oz.getSelectedIndex() == -1) {
            return;
        }
        var ou = oz.getSelectedPanel();
        var oD = ou.getBean();
        var ox = "";
        var ov = oD.getCssstyle().marginSet();
        if (ov) {
            if (oD.getCssstyle().marginAllSet()) {
                ox = "all";
            } else {
                if (oD.getCssstyle().marginTopSet()) {
                    ox = "top ";
                }
                if (oD.getCssstyle().marginBottomSet()) {
                    ox = ox + "bottom ";
                }
                if (oD.getCssstyle().marginLeftSet()) {
                    ox = ox + "left ";
                }
                if (oD.getCssstyle().marginRightSet()) {
                    ox = ox + "right ";
                }
            }
        } else {
            ox = "no";
        }
        ox = W.trim(ox);
        var oA = new fn("type", "prop_type.png");
        oA.setValue(l1.getImagesForText(ox));
        oA.setType(j0);
        oA.setOptions(n6.getBorderOptList(ox));
        oC.addAttList(oA);
        if (ox == "all") {
            var oy = new fn("same", "prop_same.png");
            oy.setValue(ow.isAllSettingsMargin() + "");
            oy.setType(nl);
            oC.addAttList(oy);
            if (ow.isAllSettingsMargin()) {
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "all",
                    oD.getCssstyle().getMargin_topS(),
                );
            } else {
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "top",
                    oD.getCssstyle().getMargin_topS(),
                );
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "left",
                    oD.getCssstyle().getMargin_leftS(),
                );
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "bottom",
                    oD.getCssstyle().getMargin_bottomS(),
                );
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "right",
                    oD.getCssstyle().getMargin_rightS(),
                );
            }
        } else {
            if (oD.getCssstyle().marginTopSet()) {
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "top",
                    oD.getCssstyle().getMargin_topS(),
                );
            }
            if (oD.getCssstyle().marginLeftSet()) {
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "left",
                    oD.getCssstyle().getMargin_leftS(),
                );
            }
            if (oD.getCssstyle().marginBottomSet()) {
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "bottom",
                    oD.getCssstyle().getMargin_bottomS(),
                );
            }
            if (oD.getCssstyle().marginRightSet()) {
                oC.addSpacer();
                l1.buildAttributeWidth(
                    oC,
                    "right",
                    oD.getCssstyle().getMargin_rightS(),
                );
            }
        }
    };
    l1.buildAttributeWidth = function (ox, ov, ow) {
        var ou = new fn("width_" + ov, "prop_width.png");
        ou.setValue(ow);
        ou.setType(g1);
        ou.setOnlyPositive(true);
        ou.setOptions(n6.getLength());
        ox.addAttList(ou);
    };
    l1.getImagesForText = function (oy) {
        var ow = "";
        var ox = oy.split(" ");
        for (var ov = 0; ov < ox.length; ov++) {
            var ou = ox[ov];
            if (ou.length > 0) {
                if (ow.length > 0) {
                    ow = ow + ",";
                }
                ow = ow + "style/border-" + ou + ".png";
            }
        }
        return ow;
    };
    l1.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(dq) == 0) {
            return true;
        }
        return false;
    };
    l1.executeEvent = function (ou, ox) {
        if (ou.getSource() == dq + "_type_down") {
            ox.getSelectedElement().setImageSelectionActive(dq + "_type_down");
            ox.addAction(fc);
            return true;
        } else {
            if (ou.getSource() == dq + "_type_up") {
                ox.getSelectedElement().setImageSelectionActive(null);
                ox.addAction(fc);
                return true;
            } else {
                if (ou.getSource().indexOf(dq + "_width_") == 0) {
                    var oz = gJ.getSelectedLengthValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oz == "") {
                        oz = null;
                    }
                    var oy = ou.getSource();
                    oy = oy.substring(oy.lastIndexOf("_") + 1, oy.length);
                    var oA = ox.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    if (oy == "all") {
                        ov.getCssstyle().setMargin(oz);
                    } else {
                        if (oy == "top") {
                            ov.getCssstyle().setMarginTop(oz);
                        } else {
                            if (oy == "bottom") {
                                ov.getCssstyle().setMarginBottom(oz);
                            } else {
                                if (oy == "left") {
                                    ov.getCssstyle().setMarginLeft(oz);
                                } else {
                                    if (oy == "right") {
                                        ov.getCssstyle().setMarginRight(oz);
                                    }
                                }
                            }
                        }
                    }
                    ov.setAttribute("editorSelected", "true");
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource() == dq + "_same") {
                        var oz = gJ.getBooleanValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        var oB = oz == "true";
                        ox.setAllSettingsMargin(oB);
                        var oA = ox.getSelectedElement();
                        var ow = oA.getSelectedPanel();
                        var ov = ow.getBean();
                        if (oB) {
                            ov.getCssstyle().setMargin(
                                ov.getCssstyle().getMargin_topS(),
                            );
                        }
                        ov.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    } else {
                        if (ou.getSource().indexOf(dq + "_type") == 0) {
                            var oz = ou.getSource();
                            oz = oz.substring(
                                oz.lastIndexOf("_") + 1,
                                oz.length,
                            );
                            var oA = ox.getSelectedElement();
                            var ow = oA.getSelectedPanel();
                            var ov = ow.getBean();
                            if (oz == "all") {
                                ov.getCssstyle().setMargin("1px");
                            } else {
                                if (oz == "no") {
                                    ov.getCssstyle().setMargin("");
                                } else {
                                    if (oz == "top") {
                                        ov.getCssstyle().setMarginTop("1px");
                                    } else {
                                        if (oz == "bottom") {
                                            ov.getCssstyle().setMarginBottom(
                                                "1px",
                                            );
                                        } else {
                                            if (oz == "left") {
                                                ov.getCssstyle().setMarginLeft(
                                                    "1px",
                                                );
                                            } else {
                                                if (oz == "right") {
                                                    ov.getCssstyle().setMarginRight(
                                                        "1px",
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            ov.setAttribute("editorSelected", "true");
                            ox.getSelectedElement().setImageSelectionActive(
                                null,
                            );
                            ox.addAction(fc);
                            return gJ.updateFormulaAndPanels(ox);
                        }
                    }
                }
            }
        }
        return false;
    };

    function k2() {}
    k2.buildProp = function (ow, oB) {
        var oC = new kY(m5);
        oB.add(oC);
        var oz = ow.getSelectedElement();
        if (oz.getSelectedIndex() == -1) {
            return;
        }
        var ov = oz.getSelectedPanel();
        var oD = ov.getBean();
        var ox = "";
        var ou = oD.getCssstyle().paddingSet();
        if (ou) {
            if (oD.getCssstyle().paddingAllSet()) {
                ox = "all";
            } else {
                if (oD.getCssstyle().paddingTopSet()) {
                    ox = "top ";
                }
                if (oD.getCssstyle().paddingBottomSet()) {
                    ox = ox + "bottom ";
                }
                if (oD.getCssstyle().paddingLeftSet()) {
                    ox = ox + "left ";
                }
                if (oD.getCssstyle().paddingRightSet()) {
                    ox = ox + "right ";
                }
            }
        } else {
            ox = "no";
        }
        ox = W.trim(ox);
        var oA = new fn("type", "prop_type.png");
        oA.setValue(k2.getImagesForText(ox));
        oA.setType(j0);
        oA.setOptions(n6.getBorderOptList(ox));
        oC.addAttList(oA);
        if (ox == "all") {
            var oy = new fn("same", "prop_same.png");
            oy.setValue(ow.isAllSettingsPadding() + "");
            oy.setType(nl);
            oC.addAttList(oy);
            if (ow.isAllSettingsPadding()) {
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "all",
                    oD.getCssstyle().getPadding_topS(),
                );
            } else {
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "top",
                    oD.getCssstyle().getPadding_topS(),
                );
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "left",
                    oD.getCssstyle().getPadding_leftS(),
                );
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "bottom",
                    oD.getCssstyle().getPadding_bottomS(),
                );
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "right",
                    oD.getCssstyle().getPadding_rightS(),
                );
            }
        } else {
            if (oD.getCssstyle().paddingTopSet()) {
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "top",
                    oD.getCssstyle().getPadding_topS(),
                );
            }
            if (oD.getCssstyle().paddingLeftSet()) {
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "left",
                    oD.getCssstyle().getPadding_leftS(),
                );
            }
            if (oD.getCssstyle().paddingBottomSet()) {
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "bottom",
                    oD.getCssstyle().getPadding_bottomS(),
                );
            }
            if (oD.getCssstyle().paddingRightSet()) {
                oC.addSpacer();
                k2.buildAttributeWidth(
                    oC,
                    "right",
                    oD.getCssstyle().getPadding_rightS(),
                );
            }
        }
    };
    k2.buildAttributeWidth = function (ox, ov, ow) {
        var ou = new fn("width_" + ov, "prop_width.png");
        ou.setValue(ow);
        ou.setType(g1);
        ou.setOnlyPositive(true);
        ou.setOptions(n6.getLength());
        ox.addAttList(ou);
    };
    k2.getImagesForText = function (oy) {
        var ow = "";
        var ox = oy.split(" ");
        for (var ov = 0; ov < ox.length; ov++) {
            var ou = ox[ov];
            if (ou.length > 0) {
                if (ow.length > 0) {
                    ow = ow + ",";
                }
                ow = ow + "style/border-" + ou + ".png";
            }
        }
        return ow;
    };
    k2.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(m5) == 0) {
            return true;
        }
        return false;
    };
    k2.executeEvent = function (ou, ox) {
        if (ou.getSource() == m5 + "_type_down") {
            ox.getSelectedElement().setImageSelectionActive(m5 + "_type_down");
            ox.addAction(fc);
            return true;
        } else {
            if (ou.getSource() == m5 + "_type_up") {
                ox.getSelectedElement().setImageSelectionActive(null);
                ox.addAction(fc);
                return true;
            } else {
                if (ou.getSource().indexOf(m5 + "_width_") == 0) {
                    var oz = gJ.getSelectedLengthValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oz == "") {
                        oz = null;
                    }
                    var oy = ou.getSource();
                    oy = oy.substring(oy.lastIndexOf("_") + 1, oy.length);
                    var oA = ox.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    if (oy == "all") {
                        ov.getCssstyle().setPadding(oz);
                    } else {
                        if (oy == "top") {
                            ov.getCssstyle().setPaddingTop(oz);
                        } else {
                            if (oy == "bottom") {
                                ov.getCssstyle().setPaddingBottom(oz);
                            } else {
                                if (oy == "left") {
                                    ov.getCssstyle().setPaddingLeft(oz);
                                } else {
                                    if (oy == "right") {
                                        ov.getCssstyle().setPaddingRight(oz);
                                    }
                                }
                            }
                        }
                    }
                    ov.setAttribute("editorSelected", "true");
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource() == m5 + "_same") {
                        var oz = gJ.getBooleanValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        var oB = oz == "true";
                        ox.setAllSettingsPadding(oB);
                        var oA = ox.getSelectedElement();
                        var ow = oA.getSelectedPanel();
                        var ov = ow.getBean();
                        if (oB) {
                            ov.getCssstyle().setPadding(
                                ov.getCssstyle().getPadding_topS(),
                            );
                        }
                        ov.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    } else {
                        if (ou.getSource().indexOf(m5 + "_type") == 0) {
                            var oz = ou.getSource();
                            oz = oz.substring(
                                oz.lastIndexOf("_") + 1,
                                oz.length,
                            );
                            var oA = ox.getSelectedElement();
                            var ow = oA.getSelectedPanel();
                            var ov = ow.getBean();
                            if (oz == "all") {
                                ov.getCssstyle().setPadding("1px");
                            } else {
                                if (oz == "no") {
                                    ov.getCssstyle().setPadding("");
                                } else {
                                    if (oz == "top") {
                                        ov.getCssstyle().setPaddingTop("1px");
                                    } else {
                                        if (oz == "bottom") {
                                            ov.getCssstyle().setPaddingBottom(
                                                "1px",
                                            );
                                        } else {
                                            if (oz == "left") {
                                                ov.getCssstyle().setPaddingLeft(
                                                    "1px",
                                                );
                                            } else {
                                                if (oz == "right") {
                                                    ov.getCssstyle().setPaddingRight(
                                                        "1px",
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            ov.setAttribute("editorSelected", "true");
                            ox.getSelectedElement().setImageSelectionActive(
                                null,
                            );
                            ox.addAction(fc);
                            return gJ.updateFormulaAndPanels(ox);
                        }
                    }
                }
            }
        }
        return false;
    };

    function a0() {}
    a0.buildProp = function (oy, oz) {
        var oA = new kY(kA);
        oz.add(oA);
        var oB = oy.getSelectedElement();
        if (oB.getSelectedIndex() == -1) {
            return;
        }
        var ow = oB.getSelectedPanel();
        var ov = ow.getBean();
        var ox = new fn("baseline", "align_bottom.png");
        ox.setValue(ov.getStyle().isDrawBaseline() + "");
        ox.setType(nl);
        oA.addAttList(ox);
        var ou = new fn("axis", "align_middle.png");
        ou.setValue(ov.getStyle().isDrawAxisline() + "");
        ou.setType(nl);
        oA.addAttList(ou);
    };
    a0.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == kA + "_baseline") {
            return true;
        } else {
            if (ou.getSource() == kA + "_axis") {
                return true;
            }
        }
        return false;
    };
    a0.executeEvent = function (ou, oy) {
        if (ou.getSource() == kA + "_baseline") {
            var oA = gJ.getBooleanValue(
                oy.getEditorId() + "_" + ou.getSource(),
            );
            var ox = oA == "true";
            var oB = oy.getSelectedElement();
            var ow = oB.getSelectedPanel();
            var ov = ow.getBean();
            ov.getStyle().setDrawBaseline(ox);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(oy);
        } else {
            if (ou.getSource() == kA + "_axis") {
                var oA = gJ.getBooleanValue(
                    oy.getEditorId() + "_" + ou.getSource(),
                );
                var oz = oA == "true";
                var oB = oy.getSelectedElement();
                var ow = oB.getSelectedPanel();
                var ov = ow.getBean();
                ov.getStyle().setDrawAxisline(oz);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(oy);
            }
        }
        return false;
    };

    function cL() {}
    cL.buildProp = function (ow, oz, oA) {
        var ou = oz.getCurrentDefStyle();
        var oE = new kY(iU);
        oA.add(oE);
        var ov = oz.getNotation();
        if (ov == null || ov.length == 0) {
            ov = ou.getNotation();
            if (ov == null || ov.length == 0) {
                ov = "longdiv";
            }
        }
        var ox = new fn("not", "prop_enclose.png");
        ox.setValue(cL.getImagesForText(ov));
        ox.setType(j0);
        ox.setOptions(n6.getEncloseChooseList());
        oE.addAttList(ox);
        var oy = new fn("thick", "prop_thick.png");
        var oD = oz.getLinethickness();
        if (oD == null) {
            oD = ou.getEnclosethickness();
            if (oD == null) {
                oD = "medium";
            }
        }
        oy.setValue(oD.toLowerCase());
        oy.setType(g1);
        oy.setOptions(n6.getLineThicknessFrac(ow));
        oE.addAttList(oy);
        if (
            oz.getNotation() != null &&
            oz.getNotation().indexOf("roundedbox") > -1
        ) {
            var oB = new fn("rounded", "prop_round.png");
            oD = oz.getRadius();
            var oC = ou.getEncloseradius();
            if (oC == null) {
                oC = "0.3em";
            }
            if (oD == oC) {
                oD = "default";
            }
            oB.setValue(oD.toLowerCase());
            oB.setType(g1);
            oB.setOptions(n6.getLengthPlusDefault(ow));
            oE.addAttList(oB);
        }
    };
    cL.getImagesForText = function (oy) {
        var ow = "";
        var ox = oy.split(" ");
        for (var ov = 0; ov < ox.length; ov++) {
            var ou = ox[ov];
            if (ou.length > 0) {
                if (ow.length > 0) {
                    ow = ow + ",";
                }
                ow = ow + "encloseChoose/" + ou + ".png";
            }
        }
        return ow;
    };
    cL.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(iU) == 0) {
            return true;
        }
        return false;
    };
    cL.executeEvent = function (oz, ox) {
        if (oz.getSource() == iU + "_not_down") {
            ox.getSelectedElement().setImageSelectionActive(iU + "_not_down");
            ox.addAction(fc);
            return true;
        } else {
            if (oz.getSource() == iU + "_not_up") {
                ox.getSelectedElement().setImageSelectionActive(null);
                ox.addAction(fc);
                return true;
            } else {
                if (oz.getSource().indexOf(iU + "_not_") == 0) {
                    var oB = oz.getSource();
                    oB = oB.substring(oB.lastIndexOf("_") + 1, oB.length);
                    var oy = ox.getSelectedElement();
                    var ou = oy.getSelectedPanel();
                    var oC = ou.getBean();
                    var oD = oC.getNotation();
                    var ow = oC.getCurrentDefStyle().getNotation();
                    if (oB == "space") {
                        oD = cL.deleteLastEnclose(oD);
                    } else {
                        if (oD == null || oD.length == 0) {
                            oD = oB;
                        } else {
                            if (oD == ow) {
                                oD = oB;
                            } else {
                                if (oD.indexOf(oB) > -1) {
                                } else {
                                    oD = oD + " " + oB;
                                }
                            }
                        }
                    }
                    oC.setNotation(oD);
                    oC.setAttribute("editorSelected", "true");
                    ox.getSelectedElement().setImageSelectionActive(null);
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (oz.getSource().indexOf(iU + "_thick") == 0) {
                        var oB = gJ.getSelectedLengthValue(
                            ox.getEditorId() + "_" + oz.getSource(),
                        );
                        var oy = ox.getSelectedElement();
                        var ou = oy.getSelectedPanel();
                        var oC = ou.getBean();
                        var ov = oC.getCurrentDefStyle();
                        var oA = ov.getEnclosethickness();
                        if (oA == null) {
                            oA = "medium";
                        }
                        if (oB == oA) {
                            oB = null;
                        }
                        oC.setLinethickness(oB);
                        oC.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    } else {
                        if (oz.getSource().indexOf(iU + "_rounded") == 0) {
                            var oB = gJ.getSelectedLengthValue(
                                ox.getEditorId() + "_" + oz.getSource(),
                            );
                            var oy = ox.getSelectedElement();
                            var ou = oy.getSelectedPanel();
                            var oC = ou.getBean();
                            var ov = oC.getCurrentDefStyle();
                            var oA = ov.getEncloseradius();
                            if (oA == null) {
                                oA = "0.3em";
                            }
                            if (oB == oA || oB == "default") {
                                oB = null;
                            }
                            oC.setRadius(oB);
                            oC.setAttribute("editorSelected", "true");
                            ox.addAction(fc);
                            return gJ.updateFormulaAndPanels(ox);
                        }
                    }
                }
            }
        }
        return false;
    };
    cL.deleteLastEnclose = function (ou) {
        if (ou == null) {
            return null;
        }
        ou = W.trim(ou);
        if (ou.length == 0) {
            return null;
        }
        if (ou.indexOf(" ") == -1) {
            return null;
        }
        return ou.substring(0, ou.lastIndexOf(" "));
    };

    function le() {}
    le.buildProp = function (oz, ov) {
        var ou = oz.getCurrentDefStyle();
        var ox = new kY(br);
        ov.add(ox);
        var ow = le.getCodeForFence(oz.getOpen(), ou.getOpen(), ")");
        var oA = new fn("open", "prop_open.png");
        oA.setValue("fenceList/" + ow + ".png");
        oA.setType(j0);
        oA.setOptions(n6.getFenceOptList());
        ox.addAttList(oA);
        ow = le.getCodeForFence(oz.getClose(), ou.getClose(), "(");
        var oy = new fn("close", "prop_close.png");
        oy.setValue("fenceList/" + ow + ".png");
        oy.setType(j0);
        oy.setOptions(n6.getFenceOptList());
        ox.addAttList(oy);
    };
    le.getImagesForText = function (oy) {
        var ox = "";
        for (var ov = 0; ov < oy.length; ov++) {
            var ou = oy.charCodeAt(ov);
            var ow = lv.getHexCodeFromInt(ou);
            if (ox.length > 0) {
                ox = ox + ",";
            }
            ox = ox + "sepList/" + ow + ".png";
        }
        return ox;
    };
    le.getCodeForFence = function (ow, ov, ou) {
        if (ow == null) {
            if (ov == null) {
                ow = ou;
            } else {
                ow = ov;
            }
        }
        var ox = "space";
        if (ow.length > 0) {
            var oy = ow.charCodeAt(0);
            ox = lv.getHexCodeFromInt(oy);
        }
        return ox;
    };
    le.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(br) == 0) {
            return true;
        }
        return false;
    };
    le.executeEvent = function (ou, ox) {
        if (ou.getSource() == br + "_open_down") {
            ox.getSelectedElement().setImageSelectionActive(br + "_open_down");
            ox.addAction(fc);
            return true;
        } else {
            if (ou.getSource() == br + "_open_up") {
                ox.getSelectedElement().setImageSelectionActive(null);
                ox.addAction(fc);
                return true;
            } else {
                if (ou.getSource().indexOf(br + "_open") == 0) {
                    var oz = ou.getSource();
                    oz = oz.substring(oz.lastIndexOf("_") + 1, oz.length);
                    var oA = ox.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    var oy = ov.getCurrentDefStyle();
                    if (oz == "space") {
                        oz = "";
                    } else {
                        oz = "&#x" + oz + ";";
                    }
                    oz = h.convertToChars(oz);
                    if (oz == oy.getOpen()) {
                        oz = null;
                    }
                    ov.setOpen(oz);
                    ov.setAttribute("editorSelected", "true");
                    ox.getSelectedElement().setImageSelectionActive(null);
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource() == br + "_close_down") {
                        ox.getSelectedElement().setImageSelectionActive(
                            br + "_close_down",
                        );
                        ox.addAction(fc);
                        return true;
                    } else {
                        if (ou.getSource() == br + "_close_up") {
                            ox.getSelectedElement().setImageSelectionActive(
                                null,
                            );
                            ox.addAction(fc);
                            return true;
                        } else {
                            if (ou.getSource().indexOf(br + "_close") == 0) {
                                var oz = ou.getSource();
                                oz = oz.substring(
                                    oz.lastIndexOf("_") + 1,
                                    oz.length,
                                );
                                var oA = ox.getSelectedElement();
                                var ow = oA.getSelectedPanel();
                                var ov = ow.getBean();
                                var oy = ov.getCurrentDefStyle();
                                if (oz == "space") {
                                    oz = "";
                                } else {
                                    oz = "&#x" + oz + ";";
                                }
                                oz = h.convertToChars(oz);
                                if (oz == oy.getClose()) {
                                    oz = null;
                                }
                                ov.setClose(oz);
                                ov.setAttribute("editorSelected", "true");
                                ox.getSelectedElement().setImageSelectionActive(
                                    null,
                                );
                                ox.addAction(fc);
                                return gJ.updateFormulaAndPanels(ox);
                            } else {
                                if (ou.getSource() == br + "_sep_down") {
                                    ox.getSelectedElement().setImageSelectionActive(
                                        br + "_sep_down",
                                    );
                                    ox.addAction(fc);
                                    return true;
                                } else {
                                    if (ou.getSource() == br + "_sep_up") {
                                        ox.getSelectedElement().setImageSelectionActive(
                                            null,
                                        );
                                        ox.addAction(fc);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    le.deleteLastSeparator = function (ou) {
        if (ou == null) {
            return null;
        }
        ou = W.trim(ou);
        if (ou.length < 2) {
            return null;
        }
        return ou.substring(0, ou.length - 1);
    };

    function jk() {}
    jk.buildProp = function (ow, ov, oC) {
        var ou = ov.getCurrentDefStyle();
        var oE = new kY(ki);
        oC.add(oE);
        var oA = new fn("bevelled", "prop_bevelled.png");
        oA.setValue(ov.isBevelled() + "");
        oA.setType(nl);
        oE.addAttList(oA);
        var oz = new fn("thick", "prop_thick.png");
        var oD = ov.getLinethickness();
        if (oD == null) {
            if (ou.getLinethickness() == null) {
                oD = "medium";
            } else {
                oD = ou.getLinethickness();
            }
        }
        oz.setValue(oD.toLowerCase());
        oz.setType(g1);
        oz.setOptions(n6.getLineThicknessFrac(ow));
        oE.addAttList(oz);
        var oy = new fn("numalign", "prop_align.png");
        var oB = ov.getNumalign();
        if (oB == null || oB.length == 0) {
            if (ou.getNumalign() == null) {
                oB = "center";
            } else {
                oB = ou.getNumalign();
            }
        }
        oy.setValue(oB);
        oy.setType(mt);
        oy.setOptions(n6.getAlignValues(ow));
        oE.addAttList(oy);
        var ox = new fn("denomalign", "prop_align.png");
        oB = ov.getDenomalign();
        if (oB == null || oB.length == 0) {
            if (ou.getDenomalign() == null) {
                oB = "center";
            } else {
                oB = ou.getDenomalign();
            }
        }
        ox.setValue(oB);
        ox.setType(mt);
        ox.setOptions(n6.getAlignValues(ow));
        oE.addAttList(ox);
    };
    jk.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == ki + "_bevelled") {
            return true;
        } else {
            if (ou.getSource().indexOf(ki + "_thick") == 0) {
                return true;
            } else {
                if (ou.getSource() == ki + "_numalign") {
                    return true;
                } else {
                    if (ou.getSource() == ki + "_denomalign") {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    jk.executeEvent = function (ou, ox) {
        if (ou.getSource() == ki + "_bevelled") {
            var oA = gJ.getBooleanValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            var oz = oA == "true";
            var oB = ox.getSelectedElement();
            var ow = oB.getSelectedPanel();
            var ov = ow.getBean();
            ov.setBevelled(oz);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource().indexOf(ki + "_thick") == 0) {
                var oA = gJ.getSelectedLengthValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                var oB = ox.getSelectedElement();
                var ow = oB.getSelectedPanel();
                var ov = ow.getBean();
                var oy = ov.getCurrentDefStyle();
                if (oA == oy.getLinethickness()) {
                    oA = null;
                }
                ov.setLinethickness(oA);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource() == ki + "_numalign") {
                    var oA = gJ.getSelectedValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    var oB = ox.getSelectedElement();
                    var ow = oB.getSelectedPanel();
                    var ov = ow.getBean();
                    var oy = ov.getCurrentDefStyle();
                    if (oA == oy.getNumalign()) {
                        oA = null;
                    }
                    ov.setNumalign(oA);
                    ov.setAttribute("editorSelected", "true");
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource() == ki + "_denomalign") {
                        var oA = gJ.getSelectedValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        var oB = ox.getSelectedElement();
                        var ow = oB.getSelectedPanel();
                        var ov = ow.getBean();
                        var oy = ov.getCurrentDefStyle();
                        if (oA == oy.getDenomalign()) {
                            oA = null;
                        }
                        ov.setDenomalign(oA);
                        ov.setAttribute("editorSelected", "true");
                        return gJ.updateFormulaAndPanels(ox);
                    }
                }
            }
        }
        return false;
    };

    function iV() {}
    iV.buildProp = function (ov, ou, oC, oB) {
        var oE = new kY(lb);
        oB.add(oE);
        var oA = cd.isEmptyElement(oC);
        var oz = new fn("src", "prop_url.png");
        var oD = oC.getSrc();
        if (oD == null || oA) {
            oD = ln;
        }
        oz.setValue(oD);
        oz.setType(jI);
        oE.addAttList(oz);
        var oy = new fn("width", "prop_width.png");
        oD = oC.getWidth();
        if (oD == null || oA) {
            oD = "default";
        }
        oy.setValue(oD.toLowerCase());
        oy.setType(g1);
        oy.setOnlyPositive(true);
        oy.setOptions(n6.getLengthPlusDefault(ov));
        oE.addAttList(oy);
        var ox = new fn("height", "prop_height.png");
        oD = oC.getHeight();
        if (oD == null || oA) {
            oD = "default";
        }
        ox.setValue(oD.toLowerCase());
        ox.setType(g1);
        ox.setOnlyPositive(true);
        ox.setOptions(n6.getLengthPlusDefault(ov));
        oE.addAttList(ox);
        var ow = new fn("valign", "prop_height.png");
        oD = oC.getValign();
        if (oD == null || oA) {
            oD = "0px";
        }
        ow.setValue(oD.toLowerCase());
        ow.setType(g1);
        ow.setOptions(n6.getLength());
        oE.addAttList(ow);
    };
    iV.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(lb + "_src") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(lb + "_width") == 0) {
                return true;
            } else {
                if (ou.getSource().indexOf(lb + "_height") == 0) {
                    return true;
                } else {
                    if (ou.getSource().indexOf(lb + "_valign") == 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    iV.executeEvent = function (ou, ox) {
        if (ou.getSource().indexOf(lb + "_src") == 0) {
            var oy = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            oy = W.trim(oy);
            if (oy == ln || oy == "") {
                oy = null;
            }
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setSrc(oy);
            if (
                "0.66em" == ov.getWidth() &&
                "1em" == ov.getHeight() &&
                "border:1px;" == ov.getAttribute("style")
            ) {
                ov.setWidth(null);
                ov.setHeight(null);
                ov.setValign(null);
                ov.clearAttribute("style");
            }
            ov.setAttribute("editorSelected", "true");
            ox.addAction(fc);
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource().indexOf(lb + "_width") == 0) {
                var oy = gJ.getSelectedLengthValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oy == "default") {
                    oy = null;
                }
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setWidth(oy);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource().indexOf(lb + "_height") == 0) {
                    var oy = gJ.getSelectedLengthValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oy == "default") {
                        oy = null;
                    }
                    var oz = ox.getSelectedElement();
                    var ow = oz.getSelectedPanel();
                    var ov = ow.getBean();
                    ov.setHeight(oy);
                    ov.setAttribute("editorSelected", "true");
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource().indexOf(lb + "_valign") == 0) {
                        var oy = gJ.getSelectedLengthValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oy == "default") {
                            oy = null;
                        }
                        var oz = ox.getSelectedElement();
                        var ow = oz.getSelectedPanel();
                        var ov = ow.getBean();
                        ov.setValign(oy);
                        ov.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    }
                }
            }
        }
        return false;
    };

    function k8() {}
    k8.buildProp = function (ow, oz) {
        var oC = new kY(m9);
        oz.add(oC);
        var oy = ow.getSelectedElement();
        if (oy.getSelectedIndex() == -1) {
            return;
        }
        var ou = oy.getSelectedPanel();
        var oB = cd.getMathMLForPanel(ow, ou, false);
        var oD = ou.getBean();
        var ov = new fn("type", "prop_type.png");
        var oF = b8.getNameFromTag(oB);
        ov.setValue(oF);
        ov.setType(mt);
        var oE = b8.getNumberOfChildren(oD);
        nR.getTagsToTranslate(
            ow,
            oF,
            ov.getOptions(),
            oE,
            oC.getKeyName(),
            ov.getKeyName(),
            oD,
        );
        oC.addAttList(ov);
        if (
            !(
                ou instanceof i6 ||
                ou instanceof dp ||
                ou instanceof eq ||
                ou instanceof eE ||
                ou instanceof aY ||
                ou instanceof G ||
                ou instanceof h8 ||
                ou instanceof cR
            )
        ) {
            var oA = new fn("dir", "prop_hdir.png");
            var ox = oD.getStyle().getDir();
            if (ox == null) {
                ox = "ltr";
            }
            oA.setValue(ox);
            oA.setType(mt);
            oA.setOptions(n6.getDirList(ow));
            oC.addAttList(oA);
        }
    };
    k8.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == m9 + "_type") {
            return true;
        } else {
            if (ou.getSource() == m9 + "_dir") {
                return true;
            }
        }
        return false;
    };
    k8.executeEvent = function (ou, ox) {
        if (ou.getSource() == m9 + "_type") {
            var oy = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oy == "delete") {
                return mc.deleteCurrentSelection(ox);
            }
            var oA = k8.getMathmlFromSelectedTagTo(ox);
            if (oy.indexOf("p") == 0) {
                oy = oy.substring(1, oy.length);
                oA = "<" + oy + ">" + oA + "</" + oy + ">";
            } else {
                oA = k8.changeSelectedTagTo(ox, oy);
            }
            return ee.replaceMathMLToSelectedElement(oA, ox);
        } else {
            if (ou.getSource().indexOf(m9 + "_dir") == 0) {
                var oz = gJ.getSelectedValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oz == "ltr") {
                    oz = null;
                }
                var oB = ox.getSelectedElement();
                var ow = oB.getSelectedPanel();
                var ov = ow.getBean();
                ov.getStyle().setDir(oz);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            }
        }
        return false;
    };
    k8.getMathmlFromSelectedTagTo = function (ov) {
        var oy = ov.getSelectedElement();
        var ox = oy.getSelectedPanel();
        var ou = ox.getBean();
        var ow = lc.getMathml(ou, hV, true, ov.getMainFormula().getSettings());
        return ow;
    };
    k8.changeSelectedTagTo = function (ou, oE) {
        if (oE == "none") {
            return "<none></none>";
        }
        if (oE == "empty") {
            return "<empty></empty>";
        }
        if (oE == "msline") {
            return "<msline></msline>";
        }
        if (oE == "msrow") {
            return "<msrow><mn>0</mn><mn>0</mn><mn>0</mn></msrow>";
        }
        if (oE == "mscarries") {
            return "<mscarries><mn>1</mn><mn>1</mn><mn>1</mn></mscarries>";
        }
        var ov = ou.getSelectedElement();
        var oC = ov.getSelectedPanel();
        var oD = oC.getBean();
        var oy = lc.getMathml(oD, hV, true, ou.getMainFormula().getSettings());
        oy = oy.trim();
        if (oy == "<none></none>" || oy == "<empty></empty>") {
            if (oE == "mo") {
                return "<mo>+</mo>";
            } else {
                if (oE == "mn") {
                    return "<mn>0</mn>";
                } else {
                    if (oE == "mi") {
                        return "<mi>X</mi>";
                    } else {
                        if (oE == "ms") {
                            return "<ms>S</ms>";
                        } else {
                            if (oE == "mtext") {
                                return "<mtext>text</mtext>";
                            }
                        }
                    }
                }
            }
        }
        var oz = oy.indexOf(">");
        var ox = oy.lastIndexOf("</");
        var ow = oy.indexOf(" ");
        var oA = "";
        if (ow > -1 && ow < oz) {
            oA = oy.substring(ow, oz);
        }
        var oB =
            "<" + oE + oA + ">" + oy.substring(oz + 1, ox) + "</" + oE + ">";
        return oB;
    };

    function nu() {}
    nu.buildProp = function (ox, ow, ov, oy) {
        var oz = new kY(gI);
        oy.add(oz);
        var oA = ov;
        var ou = new fn("type", "prop_type.png");
        ou.setValue(n6.getValueForLongdiv(oA.getLongdivstyle()));
        ou.setType(mt);
        ou.setOptions(n6.getLongdivStyleList(ox));
        oz.addAttList(ou);
    };
    nu.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(gI + "_type") == 0) {
            return true;
        }
        return false;
    };
    nu.executeEvent = function (ou, ox) {
        if (ou.getSource() == gI + "_type") {
            var oy = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setLongdivstyle(n6.getCodeForLongdiv(oy));
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        }
        return false;
    };

    function y() {}
    y.buildProp = function (ox, ov) {
        var ow = new kY(nc);
        ov.add(ow);
        var ou = ox.getSupscriptshift();
        if (ou == null) {
            ou = "0";
        }
        var oy = new fn("shift2", "prop_vdir.png");
        oy.setValue(ou);
        oy.setType(g1);
        oy.setOptions(n6.getLength());
        ow.addAttList(oy);
        ou = ox.getSubscriptshift();
        if (ou == null) {
            ou = "0";
        }
        var oz = new fn("shift1", "prop_vdir.png");
        oz.setValue(ou);
        oz.setType(g1);
        oz.setOptions(n6.getLength());
        ow.addAttList(oz);
    };
    y.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(nc + "_shift1") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(nc + "_shift2") == 0) {
                return true;
            }
        }
        return false;
    };
    y.executeEvent = function (ou, ox) {
        if (ou.getSource().indexOf(nc + "_shift1") == 0) {
            var oy = gJ.getSelectedLengthValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setSubscriptshift(oy);
            ov.setAttribute("editorSelected", "true");
            ox.addAction(fc);
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource().indexOf(nc + "_shift2") == 0) {
                var oy = gJ.getSelectedLengthValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setSupscriptshift(oy);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            }
        }
        return false;
    };

    function nT() {}
    nT.buildProp = function (ov, oy, ox) {
        var oA = new kY(mr);
        ox.add(oA);
        var ou = new fn("lspace", "prop_width.png");
        var ow = oy.getLspaceS();
        if (ow == null) {
            ow = "default";
        }
        ou.setValue(ow.toLowerCase());
        ou.setType(g1);
        ou.setOnlyPositive(true);
        ou.setOptions(n6.getLengthPlusDefault(ov));
        oA.addAttList(ou);
        ou = new fn("rspace", "prop_width.png");
        ow = oy.getRspaceS();
        if (ow == null) {
            ow = "default";
        }
        ou.setValue(ow.toLowerCase());
        ou.setType(g1);
        ou.setOnlyPositive(true);
        ou.setOptions(n6.getLengthPlusDefault(ov));
        oA.addAttList(ou);
        ou = new fn("largeop", "prop_height.png");
        ow = oy.getLargeopS();
        if (ow == null) {
            ow = "default";
        }
        ou.setValue(ow);
        ou.setType(mt);
        ou.setOnlyPositive(true);
        ou.setOptions(n6.getBooleanPlusDefault(ov));
        oA.addAttList(ou);
        if (eF.isStretchy(oy.getText())) {
            ou = new fn("stretchy", "prop_width.png");
            ow = oy.getStretchyS();
            if (ow == null) {
                ow = "default";
            }
            ou.setValue(ow);
            ou.setType(mt);
            ou.setOnlyPositive(true);
            ou.setOptions(n6.getBooleanPlusDefault(ov));
            oA.addAttList(ou);
        }
        if (oy.getStretchy()) {
            var oB = new fn("minsize", "prop_width.png");
            ow = oy.getMinsize();
            if (ow == null) {
                ow = "100%";
            }
            oB.setValue(ow.toLowerCase());
            oB.setType(g1);
            oB.setOnlyPositive(true);
            oB.setOptions(n6.getLengthPlusDefault(ov));
            oA.addAttList(oB);
            var oz = new fn("maxsize", "prop_width.png");
            ow = oy.getMaxsize();
            if (ow == null) {
                ow = "infinity";
            }
            oz.setValue(ow.toLowerCase());
            oz.setType(g1);
            oz.setOnlyPositive(true);
            oz.setOptions(n6.getLengthPlusInfinity(ov));
            oA.addAttList(oz);
        }
    };
    nT.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(mr) == 0) {
            return true;
        }
        return false;
    };
    nT.executeEvent = function (ou, ox) {
        if (ou.getSource().indexOf(mr + "_minsize") == 0) {
            var oy = gJ.getSelectedLengthValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oy == "default") {
                oy = null;
            }
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setMinsize(oy);
            ov.setAttribute("editorSelected", "true");
            ox.addAction(fc);
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource().indexOf(mr + "_maxsize") == 0) {
                var oy = gJ.getSelectedLengthValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oy == "infinity") {
                    oy = null;
                }
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setMaxsize(oy);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource().indexOf(mr + "_lspace") == 0) {
                    var oy = gJ.getSelectedLengthValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oy == "default") {
                        oy = null;
                    }
                    var oz = ox.getSelectedElement();
                    var ow = oz.getSelectedPanel();
                    var ov = ow.getBean();
                    ov.setLspace(oy);
                    ov.setAttribute("editorSelected", "true");
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource().indexOf(mr + "_rspace") == 0) {
                        var oy = gJ.getSelectedLengthValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oy == "default") {
                            oy = null;
                        }
                        var oz = ox.getSelectedElement();
                        var ow = oz.getSelectedPanel();
                        var ov = ow.getBean();
                        ov.setRspace(oy);
                        ov.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    } else {
                        if (ou.getSource() == mr + "_stretchy") {
                            var oy = gJ.getSelectedValue(
                                ox.getEditorId() + "_" + ou.getSource(),
                            );
                            if (oy == "default") {
                                oy = null;
                            }
                            var oz = ox.getSelectedElement();
                            var ow = oz.getSelectedPanel();
                            var ov = ow.getBean();
                            ov.setStretchy(oy);
                            ov.setAttribute("editorSelected", "true");
                            ox.addAction(fc);
                            return gJ.updateFormulaAndPanels(ox);
                        } else {
                            if (ou.getSource() == mr + "_largeop") {
                                var oy = gJ.getSelectedValue(
                                    ox.getEditorId() + "_" + ou.getSource(),
                                );
                                if (oy == "default") {
                                    oy = null;
                                }
                                var oz = ox.getSelectedElement();
                                var ow = oz.getSelectedPanel();
                                var ov = ow.getBean();
                                ov.setLargeop(oy);
                                ov.setAttribute("editorSelected", "true");
                                ox.addAction(fc);
                                return gJ.updateFormulaAndPanels(ox);
                            }
                        }
                    }
                }
            }
        }
        return false;
    };

    function fT() {}
    fT.buildProp = function (ou, oy, ov) {
        var ox = new kY(hS);
        ov.add(ox);
        var ow = new fn("align", "prop_align.png");
        var oA = oy.getAlign();
        if (oA == null || oA.length == 0) {
            oA = "center";
        }
        ow.setValue(oA);
        ow.setType(mt);
        ow.setOptions(n6.getAlignValues(ou));
        ox.addAttList(ow);
        var oz = new fn("accent", "prop_accent.png");
        oz.setValue(oy.isAccent() + "");
        oz.setType(nl);
        ox.addAttList(oz);
    };
    fT.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == hS + "_align") {
            return true;
        } else {
            if (ou.getSource() == hS + "_accent") {
                return true;
            }
        }
        return false;
    };
    fT.executeEvent = function (ou, ox) {
        if (ou.getSource() == hS + "_align") {
            var oy = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oy == "") {
                oy = null;
            }
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setAlign(oy);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource() == hS + "_accent") {
                var oy = gJ.getBooleanValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setAccent(oy);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(ox);
            }
        }
        return false;
    };

    function eN() {}
    eN.buildProp = function (ow, ou, ov, oC) {
        var oE = new kY(iE);
        oC.add(oE);
        var oA = new fn("lspace", "prop_hdir.png");
        var oD = ov.getLspace();
        if (oD == null) {
            oD = "0em";
        }
        oA.setValue(oD.toLowerCase());
        oA.setType(g1);
        oA.setOptions(n6.getLength());
        oE.addAttList(oA);
        var oB = new fn("voffset", "prop_vdir.png");
        oD = ov.getVoffset();
        if (oD == null) {
            oD = "0em";
        }
        oB.setValue(oD.toLowerCase());
        oB.setType(g1);
        oB.setOptions(n6.getLength());
        oE.addAttList(oB);
        var oz = new fn("width", "prop_width.png");
        oD = ov.getWidth();
        if (oD == null) {
            oD = "default";
        }
        oz.setValue(oD.toLowerCase());
        oz.setType(g1);
        oz.setOnlyPositive(true);
        oz.setOptions(n6.getLengthPlusDefault(ow));
        oE.addAttList(oz);
        var oy = new fn("height", "prop_height.png");
        oD = ov.getHeight();
        if (oD == null) {
            oD = "default";
        }
        oy.setValue(oD.toLowerCase());
        oy.setType(g1);
        oy.setOnlyPositive(true);
        oy.setOptions(n6.getLengthPlusDefault(ow));
        oE.addAttList(oy);
        var ox = new fn("depth", "prop_height.png");
        oD = ov.getDepth();
        if (oD == null) {
            oD = "default";
        }
        ox.setValue(oD.toLowerCase());
        ox.setType(g1);
        ox.setOnlyPositive(true);
        ox.setOptions(n6.getLengthPlusDefault(ow));
        oE.addAttList(ox);
    };
    eN.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(iE + "_lspace") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(iE + "_voffset") == 0) {
                return true;
            } else {
                if (ou.getSource().indexOf(iE + "_width") == 0) {
                    return true;
                } else {
                    if (ou.getSource().indexOf(iE + "_height") == 0) {
                        return true;
                    } else {
                        if (ou.getSource().indexOf(iE + "_depth") == 0) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    };
    eN.executeEvent = function (ou, ox) {
        if (ou.getSource().indexOf(iE + "_lspace") == 0) {
            var oy = gJ.getSelectedLengthValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oy.indexOf("0") == 0) {
                oy = null;
            }
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setLspace(oy);
            ov.setAttribute("editorSelected", "true");
            ox.addAction(fc);
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource().indexOf(iE + "_voffset") == 0) {
                var oy = gJ.getSelectedLengthValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oy.indexOf("0") == 0) {
                    oy = null;
                }
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setVoffset(oy);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource().indexOf(iE + "_width") == 0) {
                    var oy = gJ.getSelectedLengthValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oy == "default") {
                        oy = null;
                    }
                    var oz = ox.getSelectedElement();
                    var ow = oz.getSelectedPanel();
                    var ov = ow.getBean();
                    ov.setWidth(oy);
                    ov.setAttribute("editorSelected", "true");
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource().indexOf(iE + "_height") == 0) {
                        var oy = gJ.getSelectedLengthValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oy == "default") {
                            oy = null;
                        }
                        var oz = ox.getSelectedElement();
                        var ow = oz.getSelectedPanel();
                        var ov = ow.getBean();
                        ov.setHeight(oy);
                        ov.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    } else {
                        if (ou.getSource().indexOf(iE + "_depth") == 0) {
                            var oy = gJ.getSelectedLengthValue(
                                ox.getEditorId() + "_" + ou.getSource(),
                            );
                            if (oy == "default") {
                                oy = null;
                            }
                            var oz = ox.getSelectedElement();
                            var ow = oz.getSelectedPanel();
                            var ov = ow.getBean();
                            ov.setDepth(oy);
                            ov.setAttribute("editorSelected", "true");
                            ox.addAction(fc);
                            return gJ.updateFormulaAndPanels(ox);
                        }
                    }
                }
            }
        }
        return false;
    };

    function ii() {}
    ii.buildProp = function (ow, ou, oE, oB) {
        var oD = new kY(aF);
        oB.add(oD);
        var oC = oE;
        var oA = new fn("position", "FormattingIncreaseDecimals.png");
        oA.setValue(oC.getPosition() + "");
        oA.setType(ih);
        oA.setFont(lN.getFontFromText(ou));
        oD.addAttList(oA);
        var oz = new fn("location", "location.png");
        var ov = oC.getLocation();
        if (ov == null) {
            ov = "n";
        }
        oz.setValue(ov);
        oz.setType(mt);
        oz.setOptions(n6.getLocations(ow));
        oD.addAttList(oz);
        var oy = new fn("crossout", "BorderDiagonalDown.png");
        ov = oC.getCrossout();
        if (ov == null) {
            ov = "none";
        }
        oy.setValue(ov);
        oy.setType(mt);
        oy.setOptions(n6.getCrossout(ow));
        oD.addAttList(oy);
        var ox = new fn("scriptsizemultiplier", "ChangeStylesMenu.png");
        ox.setValue(oC.getScriptsizemultiplier() + "");
        ox.setType(mt);
        ox.setOptions(n6.getScriptsizemultiplier(ow));
        oD.addAttList(ox);
    };
    ii.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(aF + "_position") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(aF + "_location") == 0) {
                return true;
            } else {
                if (ou.getSource().indexOf(aF + "_crossout") == 0) {
                    return true;
                } else {
                    if (
                        ou.getSource().indexOf(aF + "_scriptsizemultiplier") ==
                        0
                    ) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    ii.executeEvent = function (ou, oy) {
        if (ou.getSource() == aF + "_position") {
            var oA = gJ.getSelectedValue(
                oy.getEditorId() + "_" + ou.getSource(),
            );
            if (oA == "0") {
                oA = null;
            }
            var oz = lv.getIntegerValue(oA, 0);
            var oB = oy.getSelectedElement();
            var ow = oB.getSelectedPanel();
            var ov = ow.getBean();
            ov.setPosition(oz);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(oy);
        } else {
            if (ou.getSource() == aF + "_location") {
                var oA = gJ.getSelectedValue(
                    oy.getEditorId() + "_" + ou.getSource(),
                );
                var oB = oy.getSelectedElement();
                var ow = oB.getSelectedPanel();
                var ov = ow.getBean();
                ov.setLocation(oA);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(oy);
            } else {
                if (ou.getSource() == aF + "_crossout") {
                    var oA = gJ.getSelectedValue(
                        oy.getEditorId() + "_" + ou.getSource(),
                    );
                    var oB = oy.getSelectedElement();
                    var ow = oB.getSelectedPanel();
                    var ov = ow.getBean();
                    var ox = ov.getCrossout();
                    if (ox == null || ox == "none") {
                        ox = oA;
                    } else {
                        ox = ox + " " + oA;
                    }
                    if (oA == "none") {
                        ox = oA;
                    }
                    ov.setCrossout(ox);
                    ov.setAttribute("editorSelected", "true");
                    return gJ.updateFormulaAndPanels(oy);
                } else {
                    if (ou.getSource() == aF + "_scriptsizemultiplier") {
                        var oA = gJ.getSelectedValue(
                            oy.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oA == "0.6") {
                            oA = null;
                        }
                        var oB = oy.getSelectedElement();
                        var ow = oB.getSelectedPanel();
                        var ov = ow.getBean();
                        ov.setScriptsizemultiplierS(oA);
                        ov.setAttribute("editorSelected", "true");
                        return gJ.updateFormulaAndPanels(oy);
                    }
                }
            }
        }
        return false;
    };

    function aO() {}
    aO.buildProp = function (ow, ou, oC, oz) {
        var oB = new kY(Q);
        oz.add(oB);
        var oA = oC;
        var oy = new fn("location", "location.png");
        var ov = oA.getLocation();
        if (ov == null) {
            ov = "n";
        }
        oy.setValue(ov);
        oy.setType(mt);
        oy.setOptions(n6.getLocations(ow));
        oB.addAttList(oy);
        var ox = new fn("crossout", "BorderDiagonalDown.png");
        ov = oA.getCrossout();
        if (ov == null) {
            ov = "none";
        }
        ox.setValue(ov);
        ox.setType(mt);
        ox.setOptions(n6.getCrossout(ow));
        oB.addAttList(ox);
    };
    aO.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(Q + "_location") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(Q + "_crossout") == 0) {
                return true;
            }
        }
        return false;
    };
    aO.executeEvent = function (ou, oy) {
        if (ou.getSource() == Q + "_location") {
            var oz = gJ.getSelectedValue(
                oy.getEditorId() + "_" + ou.getSource(),
            );
            var oA = oy.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            ov.setLocation(oz);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(oy);
        } else {
            if (ou.getSource() == Q + "_crossout") {
                var oz = gJ.getSelectedValue(
                    oy.getEditorId() + "_" + ou.getSource(),
                );
                var oA = oy.getSelectedElement();
                var ow = oA.getSelectedPanel();
                var ov = ow.getBean();
                var ox = ov.getCrossout();
                if (ox == null || ox == "none") {
                    ox = oz;
                } else {
                    ox = ox + " " + oz;
                }
                if (oz == "none") {
                    ox = oz;
                }
                ov.setCrossout(ox);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(oy);
            }
        }
        return false;
    };

    function es() {}
    es.buildProp = function (ox, ow, ov, oy) {
        var oz = new kY(j8);
        oy.add(oz);
        var ou = ov;
        var oB = new fn("position", "FormattingIncreaseDecimals.png");
        oB.setValue(ou.getPosition() + "");
        oB.setType(ih);
        oB.setFont(lN.getFontFromText(ow));
        oz.addAttList(oB);
        var oA = new fn("shift", "FormattingIncreaseDecimals.png");
        oA.setValue(ou.getShift() + "");
        oA.setType(ih);
        oA.setFont(lN.getFontFromText(ow));
        oz.addAttList(oA);
    };
    es.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(j8 + "_position") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(j8 + "_shift") == 0) {
                return true;
            }
        }
        return false;
    };
    es.executeEvent = function (ou, ox) {
        if (ou.getSource() == j8 + "_position") {
            var oz = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oz == "0") {
                oz = null;
            }
            var oy = lv.getIntegerValue(oz, 0);
            var oA = ox.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            ov.setPosition(oy);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource() == j8 + "_shift") {
                var oz = gJ.getSelectedValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oz == "0") {
                    oz = null;
                }
                var oy = lv.getIntegerValue(oz, 0);
                var oA = ox.getSelectedElement();
                var ow = oA.getSelectedPanel();
                var ov = ow.getBean();
                ov.setShift(oy);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(ox);
            }
        }
        return false;
    };

    function eD() {}
    eD.buildProp = function (ow, ou, oD, oA) {
        var oC = new kY(ba);
        oA.add(oC);
        var ov = oD;
        var oz = new fn("length", "prop_width.png");
        oz.setValue(ov.getLength() + "");
        oz.setType(ih);
        oz.setOnlyPositive(true);
        oC.addAttList(oz);
        if (ov.getLength() > 0) {
            var oy = new fn("position", "FormattingIncreaseDecimals.png");
            oy.setValue(ov.getPosition() + "");
            oy.setType(ih);
            oy.setFont(lN.getFontFromText(ou));
            oC.addAttList(oy);
        }
        var ox = new fn("thick", "prop_thick.png");
        var oB = ov.getMslinethickness();
        if (oB == null) {
            oB = "medium";
        }
        ox.setValue(oB.toLowerCase());
        ox.setType(g1);
        ox.setOptions(n6.getLineThicknessFrac(ow));
        oC.addAttList(ox);
    };
    eD.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(ba + "_length") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(ba + "_position") == 0) {
                return true;
            } else {
                if (ou.getSource().indexOf(ba + "_thick") == 0) {
                    return true;
                }
            }
        }
        return false;
    };
    eD.executeEvent = function (ou, ox) {
        if (ou.getSource() == ba + "_length") {
            var oz = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oz == "0") {
                oz = null;
            }
            var oy = lv.getIntegerValue(oz, 0);
            var oA = ox.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            ov.setLength(oy);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource() == ba + "_position") {
                var oz = gJ.getSelectedValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oz == "0") {
                    oz = null;
                }
                var oy = lv.getIntegerValue(oz, 0);
                var oA = ox.getSelectedElement();
                var ow = oA.getSelectedPanel();
                var ov = ow.getBean();
                ov.setPosition(oy);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource().indexOf(ba + "_thick") == 0) {
                    var oz = gJ.getSelectedLengthValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    var oA = ox.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    if (oz == "medium") {
                        oz = null;
                    }
                    ov.setMslinethickness(oz);
                    ov.setAttribute("editorSelected", "true");
                    return gJ.updateFormulaAndPanels(ox);
                }
            }
        }
        return false;
    };

    function a() {}
    a.buildProp = function (ox, ow) {
        var oz = new kY(hR);
        ow.add(oz);
        var oB = new fn("newline", "prop_newline.png");
        oB.setValue(ox.isLineBreak() + "");
        oB.setType(nl);
        oz.addAttList(oB);
        var oA = new fn("width", "prop_width.png");
        var ov = ox.getCssstyle().getWidthS();
        if (ov == null) {
            ov = "0";
        }
        oA.setValue(ov.toLowerCase());
        oA.setType(g1);
        oA.setOnlyPositive(true);
        oA.setOptions(n6.getLength());
        oz.addAttList(oA);
        var oy = new fn("height", "prop_height.png");
        ov = ox.getCssstyle().getHeightS();
        if (ov == null) {
            ov = "0";
        }
        oy.setValue(ov.toLowerCase());
        oy.setType(g1);
        oy.setOnlyPositive(true);
        oy.setOptions(n6.getLength());
        oz.addAttList(oy);
        var ou = new fn("depth", "prop_height.png");
        ov = ox.getDepth();
        if (ov == null) {
            ov = "0";
        }
        ou.setValue(ov.toLowerCase());
        ou.setType(g1);
        ou.setOnlyPositive(true);
        ou.setOptions(n6.getLength());
        oz.addAttList(ou);
    };
    a.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == hR + "_newline") {
            return true;
        } else {
            if (ou.getSource().indexOf(hR + "_width") == 0) {
                return true;
            } else {
                if (ou.getSource().indexOf(hR + "_height") == 0) {
                    return true;
                } else {
                    if (ou.getSource().indexOf(hR + "_depth") == 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    a.executeEvent = function (ou, oy) {
        if (ou.getSource() == hR + "_newline") {
            var oz = gJ.getBooleanValue(
                oy.getEditorId() + "_" + ou.getSource(),
            );
            var ox = oz == "true";
            var oA = oy.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            if (ox) {
                ov.setLinebreak("newline");
            } else {
                ov.setLinebreak(null);
            }
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(oy);
        } else {
            if (ou.getSource().indexOf(hR + "_width") == 0) {
                var oz = gJ.getSelectedLengthValue(
                    oy.getEditorId() + "_" + ou.getSource(),
                );
                if (oz == "") {
                    oz = null;
                }
                var oA = oy.getSelectedElement();
                var ow = oA.getSelectedPanel();
                var ov = ow.getBean();
                ov.getCssstyle().setWidth(oz);
                ov.setAttribute("editorSelected", "true");
                oy.addAction(fc);
                return gJ.updateFormulaAndPanels(oy);
            } else {
                if (ou.getSource().indexOf(hR + "_height") == 0) {
                    var oz = gJ.getSelectedLengthValue(
                        oy.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oz == "") {
                        oz = null;
                    }
                    var oA = oy.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    ov.getCssstyle().setHeight(oz);
                    ov.setAttribute("editorSelected", "true");
                    oy.addAction(fc);
                    return gJ.updateFormulaAndPanels(oy);
                } else {
                    if (ou.getSource().indexOf(hR + "_depth") == 0) {
                        var oz = gJ.getSelectedLengthValue(
                            oy.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oz == "") {
                            oz = null;
                        }
                        var oA = oy.getSelectedElement();
                        var ow = oA.getSelectedPanel();
                        var ov = ow.getBean();
                        ov.setDepth(oz);
                        ov.setAttribute("editorSelected", "true");
                        oy.addAction(fc);
                        return gJ.updateFormulaAndPanels(oy);
                    }
                }
            }
        }
        return false;
    };

    function cq() {}
    cq.buildProp = function (ov, ou, ox) {
        var oz = new kY(ha);
        ox.add(oz);
        var oB = new fn("closed", "prop_closed.png");
        oB.setValue(cq.getClosedValue(ou));
        oB.setType(nl);
        oz.addAttList(oB);
        if ("true" == oB.getValue()) {
            var oA = new fn("length", "prop_vdir.png");
            var ow = cq.getClosedLengthValue(ou);
            if (ow == null) {
                ow = "default";
            }
            oA.setValue(ow.toLowerCase());
            oA.setType(g1);
            oA.setOptions(n6.getLengthPlusDefault(ov));
            oz.addAttList(oA);
        }
        var oy = new fn("thick", "prop_width.png");
        var ow = cq.getThickValue(ou);
        if (ow == null) {
            ow = "default";
        }
        oy.setValue(ow.toLowerCase());
        oy.setType(g1);
        oy.setOnlyPositive(true);
        oy.setOptions(n6.getPercentLength());
        oz.addAttList(oy);
    };
    cq.getThickValue = function (ou) {
        if (ou instanceof a3) {
            var ov = ou;
            return ov.getThickness();
        } else {
            if (ou instanceof gb) {
                var ov = ou;
                return ov.getThickness();
            }
        }
        return null;
    };
    cq.getClosedLengthValue = function (ou) {
        if (ou instanceof a3) {
            var ov = ou;
            return ov.getClosedLength();
        } else {
            if (ou instanceof gb) {
                var ov = ou;
                return ov.getClosedLength();
            }
        }
        return null;
    };
    cq.getClosedValue = function (ou) {
        if (ou instanceof a3) {
            var ov = ou;
            return ov.isClosed() + "";
        } else {
            if (ou instanceof gb) {
                var ov = ou;
                return ov.isClosed() + "";
            }
        }
        return "false";
    };
    cq.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == ha + "_closed") {
            return true;
        } else {
            if (ou.getSource().indexOf(ha + "_length") == 0) {
                return true;
            } else {
                if (ou.getSource() == ha + "_thick") {
                    return true;
                }
            }
        }
        return false;
    };
    cq.executeEvent = function (ou, oy) {
        if (ou.getSource() == ha + "_closed") {
            var oz = gJ.getBooleanValue(
                oy.getEditorId() + "_" + ou.getSource(),
            );
            var ox = oz == "true";
            var oA = oy.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            cq.setClosed(ov, ox);
            ov.setAttribute("editorSelected", "true");
            oy.addAction(fc);
            return gJ.updateFormulaAndPanels(oy);
        } else {
            if (ou.getSource().indexOf(ha + "_length") == 0) {
                var oz = gJ.getSelectedLengthValue(
                    oy.getEditorId() + "_" + ou.getSource(),
                );
                if (oz == "default") {
                    oz = null;
                }
                var oA = oy.getSelectedElement();
                var ow = oA.getSelectedPanel();
                var ov = ow.getBean();
                cq.setClosedLength(ov, oz);
                ov.setAttribute("editorSelected", "true");
                oy.addAction(fc);
                return gJ.updateFormulaAndPanels(oy);
            } else {
                if (ou.getSource() == ha + "_thick") {
                    var oz = gJ.getSelectedLengthValue(
                        oy.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oz == "default") {
                        oz = null;
                    }
                    var oA = oy.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    cq.setThickness(ov, oz);
                    ov.setAttribute("editorSelected", "true");
                    oy.addAction(fc);
                    return gJ.updateFormulaAndPanels(oy);
                }
            }
        }
        return false;
    };
    cq.setThickness = function (ou, ow) {
        if (ou instanceof a3) {
            var ov = ou;
            ov.setThickness(ow);
        } else {
            if (ou instanceof gb) {
                var ov = ou;
                ov.setThickness(ow);
            }
        }
    };
    cq.setClosedLength = function (ou, ow) {
        if (ou instanceof a3) {
            var ov = ou;
            ov.setClosedLength(ow);
        } else {
            if (ou instanceof gb) {
                var ov = ou;
                ov.setClosedLength(ow);
            }
        }
    };
    cq.setClosed = function (ou, ov) {
        if (ou instanceof a3) {
            var ow = ou;
            ow.setClosed(ov);
        } else {
            if (ou instanceof gb) {
                var ow = ou;
                ow.setClosed(ov);
            }
        }
    };

    function gr() {}
    gr.buildProp = function (ox, ow, ov, oy) {
        var oz = new kY(cS);
        oy.add(oz);
        var ou = ov;
        var oA = new fn("position", "FormattingIncreaseDecimals.png");
        oA.setValue(ou.getPosition() + "");
        oA.setType(ih);
        oA.setFont(lN.getFontFromText(ow));
        oz.addAttList(oA);
    };
    gr.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(cS + "_position") == 0) {
            return true;
        }
        return false;
    };
    gr.executeEvent = function (ou, ox) {
        if (ou.getSource() == cS + "_position") {
            var oz = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oz == "0") {
                oz = null;
            }
            var oy = lv.getIntegerValue(oz, 0);
            var oA = ox.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            ov.setPosition(oy);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        }
        return false;
    };

    function kO() {}
    kO.buildProp = function (ou, oD, oA) {
        var oC = new kY(la);
        oA.add(oC);
        var oB = oD;
        var ox = oB.getChildrenNoCarries().size();
        var oz = new fn("align", "align_middle.png");
        oz.setValue(oB.getAlign());
        oz.setType(mt);
        oz.setOptions(n6.getTableAlign(ou, ox));
        oC.addAttList(oz);
        var oy = new fn("stackalign", "align_left.png");
        oy.setValue(oB.getStackalign());
        oy.setType(mt);
        oy.setOptions(n6.getStackAlign(ou));
        oC.addAttList(oy);
        var ow = new fn("charalign", "align_center.png");
        ow.setValue(oB.getCharalign());
        ow.setType(mt);
        ow.setOptions(n6.getAlignValues(ou));
        oC.addAttList(ow);
        var ov = new fn("charspacing", "TableColumnWidth.png");
        ov.setValue(oB.getCharspacing());
        ov.setType(g1);
        ov.setOptions(n6.getSpacingForStack(ou));
        oC.addAttList(ov);
    };
    kO.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == la + "_align") {
            return true;
        } else {
            if (ou.getSource().indexOf(la + "_stackalign") == 0) {
                return true;
            } else {
                if (ou.getSource() == la + "_charalign") {
                    return true;
                } else {
                    if (ou.getSource() == la + "_charspacing") {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    kO.executeEvent = function (ou, ox) {
        if (ou.getSource() == la + "_align") {
            var oy = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oy == "baseline") {
                oy = null;
            }
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setAlign(oy);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource() == la + "_stackalign") {
                var oy = gJ.getSelectedValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oy == "decimalpoint") {
                    oy = null;
                }
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setStackalign(oy);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource() == la + "_charalign") {
                    var oy = gJ.getSelectedValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oy == "right") {
                        oy = null;
                    }
                    var oz = ox.getSelectedElement();
                    var ow = oz.getSelectedPanel();
                    var ov = ow.getBean();
                    ov.setCharalign(oy);
                    ov.setAttribute("editorSelected", "true");
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource() == la + "_charspacing") {
                        var oy = gJ.getSelectedLengthValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oy == "medium") {
                            oy = null;
                        }
                        var oz = ox.getSelectedElement();
                        var ow = oz.getSelectedPanel();
                        var ov = ow.getBean();
                        ov.setCharspacing(oy);
                        ov.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    }
                }
            }
        }
        return false;
    };

    function li() {}
    li.buildProp = function (ow, oD, oz) {
        var ou = oD.getCurrentDefStyle();
        var oC = new kY(ag);
        oz.add(oC);
        var ov = ou.getNotation();
        if (ov == null || ov.length == 0) {
            ov = "longdiv";
        }
        var ox = new fn("not", "prop_enclose.png");
        ox.setValue(li.getImagesForText(ov));
        ox.setType(j0);
        ox.setOptions(n6.getEncloseChooseList());
        oC.addAttList(ox);
        var oy = new fn("thick", "prop_thick.png");
        var oB = ou.getEnclosethickness();
        if (oB == null) {
            oB = "medium";
        }
        oy.setValue(oB.toLowerCase());
        oy.setType(g1);
        oy.setOptions(n6.getLineThicknessFrac(ow));
        oC.addAttList(oy);
        var oA = new fn("rounded", "prop_round.png");
        oB = ou.getEncloseradius();
        if (oB == null) {
            oB = "default";
        }
        oA.setValue(oB.toLowerCase());
        oA.setType(g1);
        oA.setOptions(n6.getLengthPlusDefault(ow));
        oC.addAttList(oA);
    };
    li.getImagesForText = function (oy) {
        var ow = "";
        var ox = oy.split(" ");
        for (var ov = 0; ov < ox.length; ov++) {
            var ou = ox[ov];
            if (ou.length > 0) {
                if (ow.length > 0) {
                    ow = ow + ",";
                }
                ow = ow + "encloseChoose/" + ou + ".png";
            }
        }
        return ow;
    };
    li.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(ag) == 0) {
            return true;
        }
        return false;
    };
    li.executeEvent = function (oz, ox) {
        if (oz.getSource() == ag + "_not_down") {
            ox.getSelectedElement().setImageSelectionActive(ag + "_not_down");
            ox.addAction(fc);
            return true;
        } else {
            if (oz.getSource() == ag + "_not_up") {
                ox.getSelectedElement().setImageSelectionActive(null);
                ox.addAction(fc);
                return true;
            } else {
                if (oz.getSource().indexOf(ag + "_not_") == 0) {
                    var oA = oz.getSource();
                    oA = oA.substring(oA.lastIndexOf("_") + 1, oA.length);
                    var oy = ox.getSelectedElement();
                    var ou = oy.getSelectedPanel();
                    var oB = ou.getBean();
                    var ov = oB.getCurrentDefStyle();
                    var oC = ov.getNotation();
                    var ow = oB.getCurrentDefStyle().getNotation();
                    if (oA == "space") {
                        oC = li.deleteLastEnclose(oC);
                    } else {
                        if (oC == null || oC.length == 0) {
                            oC = oA;
                        } else {
                            if (oC == ow) {
                                oC = oA;
                            } else {
                                if (oC.indexOf(oA) > -1) {
                                } else {
                                    oC = oC + " " + oA;
                                }
                            }
                        }
                    }
                    ov.setNotation(oC);
                    oB.setAttribute("editorSelected", "true");
                    ox.getSelectedElement().setImageSelectionActive(null);
                    ox.addAction(fc);
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (oz.getSource().indexOf(ag + "_thick") == 0) {
                        var oA = gJ.getSelectedLengthValue(
                            ox.getEditorId() + "_" + oz.getSource(),
                        );
                        if (oA == "medium") {
                            oA = null;
                        }
                        var oy = ox.getSelectedElement();
                        var ou = oy.getSelectedPanel();
                        var oB = ou.getBean();
                        var ov = oB.getCurrentDefStyle();
                        ov.setEnclosethickness(oA);
                        oB.setAttribute("editorSelected", "true");
                        ox.addAction(fc);
                        return gJ.updateFormulaAndPanels(ox);
                    } else {
                        if (oz.getSource().indexOf(ag + "_rounded") == 0) {
                            var oA = gJ.getSelectedLengthValue(
                                ox.getEditorId() + "_" + oz.getSource(),
                            );
                            if (oA == "0.3em" || oA == "default") {
                                oA = null;
                            }
                            var oy = ox.getSelectedElement();
                            var ou = oy.getSelectedPanel();
                            var oB = ou.getBean();
                            var ov = oB.getCurrentDefStyle();
                            ov.setEncloseradius(oA);
                            oB.setAttribute("editorSelected", "true");
                            ox.addAction(fc);
                            return gJ.updateFormulaAndPanels(ox);
                        }
                    }
                }
            }
        }
        return false;
    };
    li.deleteLastEnclose = function (ou) {
        if (ou == null) {
            return null;
        }
        ou = W.trim(ou);
        if (ou.length == 0) {
            return null;
        }
        if (ou.indexOf(" ") == -1) {
            return null;
        }
        return ou.substring(0, ou.lastIndexOf(" "));
    };

    function hs() {}
    hs.buildProp = function (ou, ow) {
        var ov = ou.getCurrentDefStyle();
        var oz = new kY(k7);
        ow.add(oz);
        var oy = hs.getCodeForFence(ov.getOpen(), "(");
        var oB = new fn("open", "prop_open.png");
        oB.setValue("fenceList/" + oy + ".png");
        oB.setType(j0);
        oB.setOptions(n6.getFenceOptList());
        oz.addAttList(oB);
        oy = hs.getCodeForFence(ov.getClose(), ")");
        var oA = new fn("close", "prop_close.png");
        oA.setValue("fenceList/" + oy + ".png");
        oA.setType(j0);
        oA.setOptions(n6.getFenceOptList());
        oz.addAttList(oA);
        oy = ov.getSeparators();
        if (oy == null) {
            oy = ",";
        }
        var ox = new fn("sep", "prop_sep.png");
        ox.setValue(hs.getImagesForText(oy));
        ox.setType(j0);
        ox.setOptions(n6.getFenceSepList());
        oz.addAttList(ox);
    };
    hs.getImagesForText = function (oy) {
        var ox = "";
        for (var ov = 0; ov < oy.length; ov++) {
            var ou = oy.charCodeAt(ov);
            var ow = lv.getHexCodeFromInt(ou);
            if (ox.length > 0) {
                ox = ox + ",";
            }
            ox = ox + "sepList/" + ow + ".png";
        }
        return ox;
    };
    hs.getCodeForFence = function (ov, ou) {
        if (ov == null) {
            ov = ou;
        }
        var ow = "space";
        if (ov.length > 0) {
            var ox = ov.charCodeAt(0);
            ow = lv.getHexCodeFromInt(ox);
        }
        return ow;
    };
    hs.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(k7) == 0) {
            return true;
        }
        return false;
    };
    hs.executeEvent = function (ou, oy) {
        if (ou.getSource() == k7 + "_open_down") {
            oy.getSelectedElement().setImageSelectionActive(k7 + "_open_down");
            oy.addAction(fc);
            return true;
        } else {
            if (ou.getSource() == k7 + "_open_up") {
                oy.getSelectedElement().setImageSelectionActive(null);
                oy.addAction(fc);
                return true;
            } else {
                if (ou.getSource().indexOf(k7 + "_open") == 0) {
                    var oA = ou.getSource();
                    oA = oA.substring(oA.lastIndexOf("_") + 1, oA.length);
                    if (oA == "space") {
                        oA = "";
                    } else {
                        if (oA == "28") {
                            oA = null;
                        } else {
                            oA = "&#x" + oA + ";";
                        }
                    }
                    var oB = oy.getSelectedElement();
                    var ow = oB.getSelectedPanel();
                    var ov = ow.getBean();
                    var oz = ov.getCurrentDefStyle();
                    oz.setOpen(oA);
                    ov.setAttribute("editorSelected", "true");
                    oy.getSelectedElement().setImageSelectionActive(null);
                    oy.addAction(fc);
                    return gJ.updateFormulaAndPanels(oy);
                } else {
                    if (ou.getSource() == k7 + "_close_down") {
                        oy.getSelectedElement().setImageSelectionActive(
                            k7 + "_close_down",
                        );
                        oy.addAction(fc);
                        return true;
                    } else {
                        if (ou.getSource() == k7 + "_close_up") {
                            oy.getSelectedElement().setImageSelectionActive(
                                null,
                            );
                            oy.addAction(fc);
                            return true;
                        } else {
                            if (ou.getSource().indexOf(k7 + "_close") == 0) {
                                var oA = ou.getSource();
                                oA = oA.substring(
                                    oA.lastIndexOf("_") + 1,
                                    oA.length,
                                );
                                if (oA == "space") {
                                    oA = "";
                                } else {
                                    if (oA == "29") {
                                        oA = null;
                                    } else {
                                        oA = "&#x" + oA + ";";
                                    }
                                }
                                var oB = oy.getSelectedElement();
                                var ow = oB.getSelectedPanel();
                                var ov = ow.getBean();
                                var oz = ov.getCurrentDefStyle();
                                oz.setClose(oA);
                                ov.setAttribute("editorSelected", "true");
                                oy.getSelectedElement().setImageSelectionActive(
                                    null,
                                );
                                oy.addAction(fc);
                                return gJ.updateFormulaAndPanels(oy);
                            } else {
                                if (ou.getSource() == k7 + "_sep_down") {
                                    oy.getSelectedElement().setImageSelectionActive(
                                        k7 + "_sep_down",
                                    );
                                    oy.addAction(fc);
                                    return true;
                                } else {
                                    if (ou.getSource() == k7 + "_sep_up") {
                                        oy.getSelectedElement().setImageSelectionActive(
                                            null,
                                        );
                                        oy.addAction(fc);
                                        return true;
                                    } else {
                                        if (
                                            ou
                                                .getSource()
                                                .indexOf(k7 + "_sep") == 0
                                        ) {
                                            var oA = ou.getSource();
                                            oA = oA.substring(
                                                oA.lastIndexOf("_") + 1,
                                                oA.length,
                                            );
                                            var oB = oy.getSelectedElement();
                                            var ow = oB.getSelectedPanel();
                                            var ov = ow.getBean();
                                            var oz = ov.getCurrentDefStyle();
                                            var ox = oz.getSeparators();
                                            if (oA == "space") {
                                                ox = hs.deleteLastSeparator(ox);
                                            } else {
                                                if (
                                                    ox == null ||
                                                    ox.length == 0
                                                ) {
                                                    ox = "&#x" + oA + ";";
                                                } else {
                                                    ox = ox + " &#x" + oA + ";";
                                                }
                                            }
                                            oz.setSeparators(ox);
                                            ov.setAttribute(
                                                "editorSelected",
                                                "true",
                                            );
                                            oy.getSelectedElement().setImageSelectionActive(
                                                null,
                                            );
                                            oy.addAction(fc);
                                            return gJ.updateFormulaAndPanels(
                                                oy,
                                            );
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    hs.deleteLastSeparator = function (ou) {
        if (ou == null) {
            return null;
        }
        ou = W.trim(ou);
        if (ou.length < 2) {
            return null;
        }
        return ou.substring(0, ou.length - 1);
    };

    function dU() {}
    dU.buildProp = function (ov, oE, oB) {
        var ou = oE.getCurrentDefStyle();
        var oD = new kY(mp);
        oB.add(oD);
        var oz = new fn("bevelled", "prop_bevelled.png");
        oz.setValue(ou.getBevelled());
        oz.setType(nl);
        oD.addAttList(oz);
        var oy = new fn("thick", "prop_thick.png");
        var oC = ou.getLinethickness();
        if (oC == null) {
            oC = "medium";
        }
        oy.setValue(oC.toLowerCase());
        oy.setType(g1);
        oy.setOptions(n6.getLineThicknessFrac(ov));
        oD.addAttList(oy);
        var ox = new fn("numalign", "prop_align.png");
        var oA = ou.getNumalign();
        if (oA == null || oA.length == 0) {
            oA = "center";
        }
        ox.setValue(oA);
        ox.setType(mt);
        ox.setOptions(n6.getAlignValues(ov));
        oD.addAttList(ox);
        var ow = new fn("denomalign", "prop_align.png");
        oA = ou.getDenomalign();
        if (oA == null || oA.length == 0) {
            oA = "center";
        }
        ow.setValue(oA);
        ow.setType(mt);
        ow.setOptions(n6.getAlignValues(ov));
        oD.addAttList(ow);
    };
    dU.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(mp) == 0) {
            return true;
        }
        return false;
    };
    dU.executeEvent = function (ou, ox) {
        if (ou.getSource() == mp + "_bevelled") {
            var oz = gJ.getBooleanValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oz == "false") {
                oz = null;
            }
            var oA = ox.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            var oy = ov.getCurrentDefStyle();
            oy.setBevelled(oz);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource().indexOf(mp + "_thick") == 0) {
                var oz = gJ.getSelectedLengthValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                if (oz == "medium") {
                    oz = null;
                }
                var oA = ox.getSelectedElement();
                var ow = oA.getSelectedPanel();
                var ov = ow.getBean();
                var oy = ov.getCurrentDefStyle();
                oy.setLinethickness(oz);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource() == mp + "_numalign") {
                    var oz = gJ.getSelectedValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    if (oz == "center") {
                        oz = null;
                    }
                    var oA = ox.getSelectedElement();
                    var ow = oA.getSelectedPanel();
                    var ov = ow.getBean();
                    var oy = ov.getCurrentDefStyle();
                    oy.setNumalign(oz);
                    ov.setAttribute("editorSelected", "true");
                    return gJ.updateFormulaAndPanels(ox);
                } else {
                    if (ou.getSource() == mp + "_denomalign") {
                        var oz = gJ.getSelectedValue(
                            ox.getEditorId() + "_" + ou.getSource(),
                        );
                        if (oz == "center") {
                            oz = null;
                        }
                        var oA = ox.getSelectedElement();
                        var ow = oA.getSelectedPanel();
                        var ov = ow.getBean();
                        var oy = ov.getCurrentDefStyle();
                        oy.setDenomalign(oz);
                        ov.setAttribute("editorSelected", "true");
                        return gJ.updateFormulaAndPanels(ox);
                    }
                }
            }
        }
        return false;
    };

    function dm() {}
    dm.buildProp = function (ox, ow, oz) {
        var oy = ow.getCurrentDefStyle();
        var oB = new kY(P);
        oz.add(oB);
        var oA = new fn("decimalpoint", "DecimalPoint.png");
        var ov = oy.getDecimalpoint();
        var ou = "point";
        if (ov != null && ov == ",") {
            ou = "comma";
        }
        oA.setValue(ou);
        oA.setType(mt);
        oA.setOptions(n6.getDecimalValues(ox));
        oB.addAttList(oA);
    };
    dm.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(P) == 0) {
            return true;
        }
        return false;
    };
    dm.executeEvent = function (ou, ox) {
        if (ou.getSource() == P + "_decimalpoint") {
            var oz = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oz == "comma") {
                oz = ",";
            } else {
                oz = ".";
            }
            var oA = ox.getSelectedElement();
            var ow = oA.getSelectedPanel();
            var ov = ow.getBean();
            var oy = ov.getCurrentDefStyle();
            oy.setDecimalpoint(oz);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        }
        return false;
    };

    function F() {}
    F.buildProp = function (ou, ow) {
        var ox = new kY(h5);
        ow.add(ox);
        var ov = ou.getSubscriptshift();
        if (ov == null) {
            ov = "0";
        }
        var oy = new fn("shift", "prop_vdir.png");
        oy.setValue(ov);
        oy.setType(g1);
        oy.setOptions(n6.getLength());
        ox.addAttList(oy);
    };
    F.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(h5 + "_shift") == 0) {
            return true;
        }
        return false;
    };
    F.executeEvent = function (ou, ox) {
        if (ou.getSource().indexOf(h5 + "_shift") == 0) {
            var oy = gJ.getSelectedLengthValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setSubscriptshift(oy);
            ov.setAttribute("editorSelected", "true");
            ox.addAction(fc);
            return gJ.updateFormulaAndPanels(ox);
        }
        return false;
    };

    function gz() {}
    gz.buildProp = function (ou, ow) {
        var ox = new kY(iI);
        ow.add(ox);
        var ov = ou.getSuperscriptshift();
        if (ov == null) {
            ov = "0";
        }
        var oy = new fn("shift2", "prop_vdir.png");
        oy.setValue(ov);
        oy.setType(g1);
        oy.setOptions(n6.getLength());
        ox.addAttList(oy);
        ov = ou.getSubscriptshift();
        if (ov == null) {
            ov = "0";
        }
        var oz = new fn("shift1", "prop_vdir.png");
        oz.setValue(ov);
        oz.setType(g1);
        oz.setOptions(n6.getLength());
        ox.addAttList(oz);
    };
    gz.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(iI + "_shift1") == 0) {
            return true;
        } else {
            if (ou.getSource().indexOf(iI + "_shift2") == 0) {
                return true;
            }
        }
        return false;
    };
    gz.executeEvent = function (ou, ox) {
        if (ou.getSource().indexOf(iI + "_shift1") == 0) {
            var oy = gJ.getSelectedLengthValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setSubscriptshift(oy);
            ov.setAttribute("editorSelected", "true");
            ox.addAction(fc);
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource().indexOf(iI + "_shift2") == 0) {
                var oy = gJ.getSelectedLengthValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setSuperscriptshift(oy);
                ov.setAttribute("editorSelected", "true");
                ox.addAction(fc);
                return gJ.updateFormulaAndPanels(ox);
            }
        }
        return false;
    };

    function a2() {}
    a2.buildProp = function (ou, ow) {
        var ox = new kY(N);
        ow.add(ox);
        var ov = ou.getSuperscriptshift();
        if (ov == null) {
            ov = "0";
        }
        var oy = new fn("shift", "prop_vdir.png");
        oy.setValue(ov);
        oy.setType(g1);
        oy.setOptions(n6.getLength());
        ox.addAttList(oy);
    };
    a2.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(N + "_shift") == 0) {
            return true;
        }
        return false;
    };
    a2.executeEvent = function (ou, ox) {
        if (ou.getSource().indexOf(N + "_shift") == 0) {
            var oy = gJ.getSelectedLengthValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setSuperscriptshift(oy);
            ov.setAttribute("editorSelected", "true");
            ox.addAction(fc);
            return gJ.updateFormulaAndPanels(ox);
        }
        return false;
    };

    function bi() {}
    bi.buildProp = function (ox, oD) {
        var oG = new kY(lm);
        oD.add(oG);
        var oB = ox.getSelectedElement();
        if (oB.getSelectedIndex() == -1) {
            return;
        }
        var ou = oB.getSelectedPanel();
        var oH = ou.getBean();
        var oJ = oH.getNumberOfColumns();
        var ov = ox.getAllSettingsColumns();
        var oI = co.getMultipleStringValues(oH.getColumnalign(), oJ, "center");
        var ow = oI[0];
        var oE = co.getMultipleLengthValues(
            oH.getColumnspacing(),
            oJ - 1,
            "0.8em",
        );
        var oC = oE[0];
        var oy = co.getMultipleStringValues(
            oH.getColumnlines(),
            oJ - 1,
            "none",
        );
        var oF = oy[0];
        var oA = new fn("same", "prop_same.png");
        oA.setValue(ov + "");
        oA.setType(nl);
        oG.addAttList(oA);
        if (ov) {
            oG.addSpacer();
            bi.buildAttributeAlign(oG, "all", ow, false);
            bi.buildAttributeSpacing(ox, oG, "all", oC, false);
        } else {
            for (var oz = 0; oz < oJ; oz++) {
                oG.addSpacer();
                bi.buildAttributeAlign(oG, oz + 1 + "", oI[oz], true);
                if (oz < oJ - 1) {
                    bi.buildAttributeSpacing(ox, oG, oz + 1 + "", oE[oz], true);
                }
            }
        }
    };
    bi.buildAttributeAlign = function (ox, ou, ov, ow) {
        var oy = new fn("colalign", "prop_align.png");
        oy.setValue(bi.getImageColumnFor(ov));
        oy.setType(j0);
        oy.setOptions(n6.getTableColAlign());
        oy.setParam(ou);
        oy.setAddParamToText(ow);
        ox.addAttList(oy);
    };
    bi.buildAttributeSpacing = function (ou, oy, ov, ow, ox) {
        var oz = new fn("colspacing", "prop_height.png");
        oz.setValue(ow);
        oz.setType(g1);
        oz.setOptions(n6.getLengthPlusDefault(ou));
        oz.setParam(ov);
        oz.setAddParamToText(ox);
        oy.addAttList(oz);
    };
    bi.buildAttributeLines = function (ov, oz, ow, ox, oy) {
        var ou = new fn("collines", "prop_line_style.png");
        ou.setValue(ox);
        ou.setType(mt);
        ou.setOptions(n6.getTableLineStyleList(ov));
        ou.setParam(ow);
        ou.setAddParamToText(oy);
        oz.addAttList(ou);
    };
    bi.getImageColumnFor = function (ox) {
        if (ox == null) {
            ox = "baseline";
        }
        ox = W.trim(ox);
        if (ox.length == 0) {
            ox = "baseline";
        }
        var ou = "";
        var oy = ox.split(" ");
        for (var ow = 0; ow < oy.length; ow++) {
            var ov = oy[ow];
            if (ov.length == 0) {
                continue;
            }
            if (ou.length > 0) {
                ou = ou + ",";
            }
            ou = ou + "align/" + ov + ".png";
        }
        return ou;
    };
    bi.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(lm) == 0) {
            return true;
        }
        return false;
    };
    bi.executeEvent = function (oD, oy) {
        if (oD.getSource().indexOf(lm + "_colalign_down") == 0) {
            oy.getSelectedElement().setImageSelectionActive(oD.getSource());
            oy.addAction(fc);
            return true;
        } else {
            if (oD.getSource().indexOf(lm + "_colalign_up") == 0) {
                oy.getSelectedElement().setImageSelectionActive(null);
                oy.addAction(fc);
                return true;
            } else {
                if (oD.getSource() == lm + "_same") {
                    var oF = gJ.getBooleanValue(
                        oy.getEditorId() + "_" + oD.getSource(),
                    );
                    oy.setAllSettingsColumns(oF == "true");
                    var oA = oy.getSelectedElement();
                    var ov = oA.getSelectedPanel();
                    var oG = ov.getBean();
                    var oJ = oG.getNumberOfColumns();
                    if (oF == "true") {
                        var oH = co.getMultipleStringValues(
                            oG.getColumnalign(),
                            oJ,
                            "center",
                        );
                        var ox = co.removeDefault(oH[0], "center");
                        oG.setColumnalign(ox);
                        var oC = co.getMultipleLengthValues(
                            oG.getColumnspacing(),
                            oJ - 1,
                            "0.8em",
                        );
                        var oB = co.removeDefault(oC[0], "0.8em");
                        oG.setColumnspacing(oB);
                        var oz = co.getMultipleStringValues(
                            oG.getColumnlines(),
                            oJ - 1,
                            "none",
                        );
                        var oE = co.removeDefault(oz[0], "none");
                        oG.setColumnlines(oE);
                    }
                    oG.setAttribute("editorSelected", "true");
                    oy.addAction(fc);
                    return gJ.updateFormulaAndPanels(oy);
                } else {
                    if (oD.getSource().indexOf(lm + "_colalign_") == 0) {
                        var oA = oy.getSelectedElement();
                        var ov = oA.getSelectedPanel();
                        var oG = ov.getBean();
                        var oJ = oG.getNumberOfColumns();
                        var oI = oD.getKeys();
                        var ou = oI[oI.length - 1];
                        var oF = oI[oI.length - 2];
                        if (oF == "middle") {
                            oF = "center";
                        }
                        if (ou == "all") {
                            if (oF == "center") {
                                oF = null;
                            }
                            oG.setColumnalign(oF);
                        } else {
                            var oH = co.getMultipleStringValues(
                                oG.getColumnalign(),
                                oJ,
                                "center",
                            );
                            var ow = lv.getIntegerValue(ou, 1) - 1;
                            oH[ow] = oF;
                            oF = co.compressMultipleValues(oH, "center");
                            oG.setColumnalign(oF);
                        }
                        oG.setAttribute("editorSelected", "true");
                        oy.getSelectedElement().setImageSelectionActive(null);
                        oy.addAction(fc);
                        return gJ.updateFormulaAndPanels(oy);
                    } else {
                        if (oD.getSource().indexOf(lm + "_colspacing_") == 0) {
                            var oA = oy.getSelectedElement();
                            var ov = oA.getSelectedPanel();
                            var oG = ov.getBean();
                            var oJ = oG.getNumberOfColumns();
                            var oI = oD.getKeys();
                            var ou = oI[oI.length - 1];
                            var oF = gJ.getSelectedLengthValue(
                                oy.getEditorId() + "_" + oD.getSource(),
                            );
                            if (oF == "default") {
                                oF = "0.8em";
                            }
                            if (ou == "all") {
                                oG.setColumnspacing(
                                    co.removeDefault(oF, "0.8em"),
                                );
                            } else {
                                var oC = co.getMultipleLengthValues(
                                    oG.getColumnspacing(),
                                    oJ - 1,
                                    "0.8em",
                                );
                                var ow = lv.getIntegerValue(ou, 1) - 1;
                                oC[ow] = oF;
                                oF = co.compressMultipleValues(oC, "0.8em");
                                oG.setColumnspacing(oF);
                            }
                            oG.setAttribute("editorSelected", "true");
                            oy.getSelectedElement().setImageSelectionActive(
                                null,
                            );
                            oy.addAction(fc);
                            return gJ.updateFormulaAndPanels(oy);
                        } else {
                            if (
                                oD.getSource().indexOf(lm + "_collines_") == 0
                            ) {
                                var oA = oy.getSelectedElement();
                                var ov = oA.getSelectedPanel();
                                var oG = ov.getBean();
                                var oJ = oG.getNumberOfColumns();
                                var oI = oD.getKeys();
                                var ou = oI[oI.length - 1];
                                var oF = gJ.getSelectedValue(
                                    oy.getEditorId() + "_" + oD.getSource(),
                                );
                                if (ou == "all") {
                                    if (oF == "none") {
                                        oF = null;
                                    }
                                    oG.setColumnlines(oF);
                                } else {
                                    var oH = co.getMultipleStringValues(
                                        oG.getColumnlines(),
                                        oJ - 1,
                                        "none",
                                    );
                                    var ow = lv.getIntegerValue(ou, 1) - 1;
                                    oH[ow] = oF;
                                    oF = co.compressMultipleValues(oH, "none");
                                    oG.setColumnlines(oF);
                                }
                                oG.setAttribute("editorSelected", "true");
                                oy.getSelectedElement().setImageSelectionActive(
                                    null,
                                );
                                oy.addAction(fc);
                                return gJ.updateFormulaAndPanels(oy);
                            }
                        }
                    }
                }
            }
        }
        return false;
    };

    function co() {}
    co.buildProp = function (oJ, oB, oD, oE) {
        var oz = new kY(mE);
        oE.add(oz);
        var oA = oD.getNumberOfRows();
        var oy = new fn("rows", "prop_rows.png");
        oy.setValue(oA + "");
        oy.setType(ih);
        oy.setOnlyPositive(true);
        oy.setFont(lN.getFontFromText(oB));
        oz.addAttList(oy);
        var ov = oD.getNumberOfColumns();
        var ox = new fn("columns", "prop_columns.png");
        ox.setValue(ov + "");
        ox.setType(ih);
        ox.setOnlyPositive(true);
        ox.setFont(lN.getFontFromText(oB));
        oz.addAttList(ox);
        var oF = oD.getFramespacing();
        var oK = oF;
        var oH = oF;
        if (oF != null && oF.indexOf(" ") > -1) {
            oK = oF.substring(0, oF.indexOf(" "));
            oH = oF.substring(oF.indexOf(" ") + 1, oF.length);
        }
        var oI = new fn("equalrows", "prop_height.png");
        oI.setValue(oD.getEqualrows());
        oI.setType(nl);
        oz.addAttList(oI);
        var oG = new fn("equalcolumns", "prop_width.png");
        oG.setValue(oD.getEqualcolumns());
        oG.setType(nl);
        oz.addAttList(oG);
        var oM = new fn("framespx", "prop_margin.png");
        oM.setValue(oK);
        oM.setType(g1);
        oM.setOptions(n6.getLength());
        oz.addAttList(oM);
        var oL = new fn("framespy", "prop_margin.png");
        oL.setValue(oH);
        oL.setType(g1);
        oL.setOptions(n6.getLength());
        oz.addAttList(oL);
        var oC = oD.getAlign();
        if (oC == null || oC == "axis") {
            oC = "center";
        }
        var ow = oD.getNumberOfRows();
        var ou = new fn("align", "prop_align.png");
        ou.setValue(oC);
        ou.setType(mt);
        ou.setOptions(n6.getTableAlign(oJ, ow));
        oz.addAttList(ou);
    };
    co.getImageColFor = function (ox) {
        if (ox == null) {
            ox = "center";
        }
        ox = W.trim(ox);
        if (ox.length == 0) {
            ox = "center";
        }
        var ou = "";
        var oy = ox.split(" ");
        for (var ow = 0; ow < oy.length; ow++) {
            var ov = oy[ow];
            if (ov.length == 0) {
                continue;
            }
            if (ou.length > 0) {
                ou = ou + ",";
            }
            ou = ou + "align/" + ov + ".png";
        }
        return ou;
    };
    co.getImageRowFor = function (ox) {
        if (ox == null) {
            ox = "baseline";
        }
        ox = W.trim(ox);
        if (ox.length == 0) {
            ox = "baseline";
        }
        var ou = "";
        var oy = ox.split(" ");
        for (var ow = 0; ow < oy.length; ow++) {
            var ov = oy[ow];
            if (ov.length == 0) {
                continue;
            }
            if (ov == "axis" || ov == "center") {
                ov = "middle";
            }
            if (ou.length > 0) {
                ou = ou + ",";
            }
            ou = ou + "align/" + ov + ".png";
        }
        return ou;
    };
    co.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(mE) == 0) {
            return true;
        }
        return false;
    };
    co.deleteLastValue = function (ou) {
        if (ou == null) {
            return null;
        }
        ou = W.trim(ou);
        if (ou.length == 0) {
            return null;
        }
        if (ou.indexOf(" ") == -1) {
            return null;
        }
        return ou.substring(0, ou.lastIndexOf(" "));
    };
    co.executeEvent = function (oK, oM) {
        if (oK.getSource() == mE + "_align") {
            var oD = gJ.getSelectedValue(
                oM.getEditorId() + "_" + oK.getSource(),
            );
            if (oD == "center") {
                oD = null;
            }
            var oG = oM.getSelectedElement();
            var oA = oG.getSelectedPanel();
            var ow = oA.getBean();
            ow.setAlign(oD);
            ow.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(oM);
        } else {
            if (oK.getSource() == mE + "_rowalign_down") {
                oM.getSelectedElement().setImageSelectionActive(
                    mE + "_rowalign_down",
                );
                oM.addAction(fc);
                return true;
            } else {
                if (oK.getSource() == mE + "_rowalign_up") {
                    oM.getSelectedElement().setImageSelectionActive(null);
                    oM.addAction(fc);
                    return true;
                } else {
                    if (oK.getSource().indexOf(mE + "_rowalign_") == 0) {
                        var oD = oK.getSource();
                        oD = oD.substring(oD.lastIndexOf("_") + 1, oD.length);
                        if (oD == "middle") {
                            oD = "center";
                        }
                        var oz = oM
                            .getSelectedElement()
                            .getImageSelectionLast(mE + "_rowalign_");
                        oM.getSelectedElement().setImageSelectionLast(
                            oK.getSource(),
                        );
                        var oG = oM.getSelectedElement();
                        var oA = oG.getSelectedPanel();
                        var ow = oA.getBean();
                        var oI = ow.getRowalign();
                        if (oD == "space") {
                            oI = co.deleteLastValue(oI);
                        } else {
                            if (oI == "baseline" && !(oz == "baseline")) {
                                oI = oD;
                            } else {
                                oI = oI + " " + oD;
                            }
                        }
                        ow.setRowalign(oI);
                        ow.setAttribute("editorSelected", "true");
                        oM.getSelectedElement().setImageSelectionActive(null);
                        oM.addAction(fc);
                        return gJ.updateFormulaAndPanels(oM);
                    } else {
                        if (oK.getSource() == mE + "_colalign_down") {
                            oM.getSelectedElement().setImageSelectionActive(
                                mE + "_colalign_down",
                            );
                            oM.addAction(fc);
                            return true;
                        } else {
                            if (oK.getSource() == mE + "_colalign_up") {
                                oM.getSelectedElement().setImageSelectionActive(
                                    null,
                                );
                                oM.addAction(fc);
                                return true;
                            } else {
                                if (
                                    oK.getSource().indexOf(mE + "_colalign_") ==
                                    0
                                ) {
                                    var oD = oK.getSource();
                                    oD = oD.substring(
                                        oD.lastIndexOf("_") + 1,
                                        oD.length,
                                    );
                                    var oz = oM
                                        .getSelectedElement()
                                        .getImageSelectionLast(
                                            mE + "_colalign_",
                                        );
                                    oM.getSelectedElement().setImageSelectionLast(
                                        oK.getSource(),
                                    );
                                    var oG = oM.getSelectedElement();
                                    var oA = oG.getSelectedPanel();
                                    var ow = oA.getBean();
                                    var oI = ow.getColumnalign();
                                    if (oD == "space") {
                                        oI = co.deleteLastValue(oI);
                                    } else {
                                        if (oI == null) {
                                            if (oz == "center") {
                                                oI = "center " + oD;
                                            } else {
                                                oI = oD;
                                            }
                                        } else {
                                            oI = oI + " " + oD;
                                        }
                                    }
                                    ow.setColumnalign(oI);
                                    ow.setAttribute("editorSelected", "true");
                                    oM.getSelectedElement().setImageSelectionActive(
                                        null,
                                    );
                                    oM.addAction(fc);
                                    return gJ.updateFormulaAndPanels(oM);
                                } else {
                                    if (
                                        oK
                                            .getSource()
                                            .indexOf(mE + "_framespx") > -1 ||
                                        oK
                                            .getSource()
                                            .indexOf(mE + "_framespy") > -1
                                    ) {
                                        var oE = gJ.getSelectedLengthValue(
                                            oM.getEditorId() +
                                                "_" +
                                                mE +
                                                "_framespx",
                                        );
                                        var oC = gJ.getSelectedLengthValue(
                                            oM.getEditorId() +
                                                "_" +
                                                mE +
                                                "_framespy",
                                        );
                                        var oG = oM.getSelectedElement();
                                        var oA = oG.getSelectedPanel();
                                        var ow = oA.getBean();
                                        ow.setFramespacing(oE + " " + oC);
                                        ow.setAttribute(
                                            "editorSelected",
                                            "true",
                                        );
                                        oM.getSelectedElement().setImageSelectionActive(
                                            null,
                                        );
                                        oM.addAction(fc);
                                        return gJ.updateFormulaAndPanels(oM);
                                    } else {
                                        if (oK.getSource() == mE + "_rows") {
                                            var oN = gJ.getSelectedValue(
                                                oM.getEditorId() +
                                                    "_" +
                                                    oK.getSource(),
                                            );
                                            var oG = oM.getSelectedElement();
                                            var oA = oG.getSelectedPanel();
                                            var ow = oA.getBean();
                                            var oF = ow.getNumberOfRows();
                                            var oO = ow.getNumberOfColumns();
                                            var oL = lv.getIntegerValue(oN, oF);
                                            if (oL < 1) {
                                                ow.setAttribute(
                                                    "editorSelected",
                                                    "true",
                                                );
                                                oM.addAction(fc);
                                                return gJ.updateFormulaAndPanels(
                                                    oM,
                                                );
                                            }
                                            if (oL > oF) {
                                                var oB = oL - oF;
                                                for (
                                                    var oJ = 0;
                                                    oJ < oB;
                                                    oJ++
                                                ) {
                                                    var ou = co.getTr(oO, oM);
                                                    ow.addChild(ou);
                                                }
                                                ow.setAttribute(
                                                    "editorSelected",
                                                    "true",
                                                );
                                                oM.addAction(fc);
                                                return gJ.updateFormulaAndPanels(
                                                    oM,
                                                );
                                            } else {
                                                if (oL < oF) {
                                                    var oB = oF - oL;
                                                    for (
                                                        var oJ = 0;
                                                        oJ < oB;
                                                        oJ++
                                                    ) {
                                                        ow.removeLastChild();
                                                    }
                                                    ow.setAttribute(
                                                        "editorSelected",
                                                        "true",
                                                    );
                                                    oM.addAction(fc);
                                                    return gJ.updateFormulaAndPanels(
                                                        oM,
                                                    );
                                                }
                                            }
                                        } else {
                                            if (
                                                oK.getSource() ==
                                                mE + "_columns"
                                            ) {
                                                var oN = gJ.getSelectedValue(
                                                    oM.getEditorId() +
                                                        "_" +
                                                        oK.getSource(),
                                                );
                                                var oG =
                                                    oM.getSelectedElement();
                                                var oA = oG.getSelectedPanel();
                                                var ow = oA.getBean();
                                                var oF = ow.getNumberOfRows();
                                                var oO =
                                                    ow.getNumberOfColumns();
                                                var ox = lv.getIntegerValue(
                                                    oN,
                                                    oO,
                                                );
                                                if (ox < 1) {
                                                    ow.setAttribute(
                                                        "editorSelected",
                                                        "true",
                                                    );
                                                    oM.addAction(fc);
                                                    return gJ.updateFormulaAndPanels(
                                                        oM,
                                                    );
                                                }
                                                if (ox > oO) {
                                                    var oB = ox - oO;
                                                    for (
                                                        var oJ = 0;
                                                        oJ < oB;
                                                        oJ++
                                                    ) {
                                                        for (
                                                            var oH = 0;
                                                            oH < oF;
                                                            oH++
                                                        ) {
                                                            var oy = ow
                                                                .getChildren()
                                                                .get(oH);
                                                            var ov =
                                                                co.getTd(oM);
                                                            oy.addChild(ov);
                                                        }
                                                    }
                                                    ow.setAttribute(
                                                        "editorSelected",
                                                        "true",
                                                    );
                                                    oM.addAction(fc);
                                                    return gJ.updateFormulaAndPanels(
                                                        oM,
                                                    );
                                                } else {
                                                    if (ox < oO) {
                                                        var oB = oO - ox;
                                                        for (
                                                            var oJ = 0;
                                                            oJ < oB;
                                                            oJ++
                                                        ) {
                                                            for (
                                                                var oH = 0;
                                                                oH < oF;
                                                                oH++
                                                            ) {
                                                                var oy = ow
                                                                    .getChildren()
                                                                    .get(oH);
                                                                oy.removeLastChild();
                                                            }
                                                        }
                                                        ow.setAttribute(
                                                            "editorSelected",
                                                            "true",
                                                        );
                                                        oM.addAction(fc);
                                                        return gJ.updateFormulaAndPanels(
                                                            oM,
                                                        );
                                                    }
                                                }
                                            } else {
                                                if (
                                                    oK.getSource() ==
                                                    mE + "_equalrows"
                                                ) {
                                                    var oD = gJ.getBooleanValue(
                                                        oM.getEditorId() +
                                                            "_" +
                                                            oK.getSource(),
                                                    );
                                                    if (oD == "false") {
                                                        oD = null;
                                                    }
                                                    var oG =
                                                        oM.getSelectedElement();
                                                    var oA =
                                                        oG.getSelectedPanel();
                                                    var ow = oA.getBean();
                                                    ow.setEqualrows(oD);
                                                    ow.setAttribute(
                                                        "editorSelected",
                                                        "true",
                                                    );
                                                    return gJ.updateFormulaAndPanels(
                                                        oM,
                                                    );
                                                } else {
                                                    if (
                                                        oK.getSource() ==
                                                        mE + "_equalcolumns"
                                                    ) {
                                                        var oD =
                                                            gJ.getBooleanValue(
                                                                oM.getEditorId() +
                                                                    "_" +
                                                                    oK.getSource(),
                                                            );
                                                        if (oD == "false") {
                                                            oD = null;
                                                        }
                                                        var oG =
                                                            oM.getSelectedElement();
                                                        var oA =
                                                            oG.getSelectedPanel();
                                                        var ow = oA.getBean();
                                                        ow.setEqualcolumns(oD);
                                                        ow.setAttribute(
                                                            "editorSelected",
                                                            "true",
                                                        );
                                                        return gJ.updateFormulaAndPanels(
                                                            oM,
                                                        );
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    };
    co.getTd = function (ou) {
        var ow = cd.getEmptyMathMLElement();
        var ov = "<mtd>" + ow + "</mtd>";
        return fe.getBeanNotMath(ov, ou.getMainFormula().getSettings());
    };
    co.getTr = function (ov, ou) {
        var ow = "<mtr>" + co.getNumberOfTd(ov) + "</mtr>";
        return fe.getBeanNotMath(ow, ou.getMainFormula().getSettings());
    };
    co.getNumberOfTd = function (ou) {
        var ox = cd.getEmptyMathMLElement();
        var oy = "<mtd>" + ox + "</mtd>";
        var ow = "";
        for (var ov = 0; ov < ou; ov++) {
            ow = ow + oy;
        }
        return ow;
    };
    co.getMultipleStringValues = function (ov, oz, oy) {
        var ou = new Array(oz);
        for (var ow = 0; ow < oz; ow++) {
            ou[ow] = oy;
        }
        if (ov == null || ov.length == 0) {
            return ou;
        }
        ov = W.replace(ov, "  ", " ");
        var ox = ov.split(" ");
        for (var ow = 0; ow < oz; ow++) {
            if (ow < ox.length) {
                ou[ow] = ox[ow];
            } else {
                ou[ow] = ou[ow - 1];
            }
        }
        return ou;
    };
    co.getMultipleLengthValues = function (ov, oz, oy) {
        var ou = new Array(oz);
        for (var ow = 0; ow < oz; ow++) {
            ou[ow] = oy;
        }
        if (ov == null || ov.length == 0) {
            return co.normalizeLength(ou);
        }
        ov = W.replace(ov, "  ", " ");
        var ox = ov.split(" ");
        for (var ow = 0; ow < oz; ow++) {
            if (ow < ox.length) {
                ou[ow] = ox[ow];
            } else {
                ou[ow] = ou[ow - 1];
            }
        }
        return co.normalizeLength(ou);
    };
    co.removeDefault = function (ov, ou) {
        if (ov == ou) {
            return null;
        }
        return ov;
    };
    co.compressMultipleValues = function (ou, oy) {
        var oz = true;
        var ox = ou[0];
        for (var ov = 1; ov < ou.length; ov++) {
            if (!(ox == ou[ov])) {
                oz = false;
            }
        }
        if (oz) {
            if (ox == oy) {
                return null;
            }
            return ox;
        }
        var ow = "";
        for (var ov = 0; ov < ou.length; ov++) {
            ow = ow + ou[ov] + " ";
        }
        ow = W.trim(ow);
        return ow;
    };
    co.normalizeLength = function (ou) {
        for (var ov = 0; ov < ou.length; ov++) {
            ou[ov] = m2.normalizeLength(ou[ov]);
        }
        return ou;
    };

    function g5() {}
    g5.buildProp = function (oy, oE) {
        var oI = new kY(ea);
        oE.add(oI);
        var oB = oy.getSelectedElement();
        if (oB.getSelectedIndex() == -1) {
            return;
        }
        var ou = oB.getSelectedPanel();
        var oJ = ou.getBean();
        var oD = oJ.getNumberOfRows();
        var ov = oy.getAllSettingsRows();
        var oH = co.getMultipleStringValues(oJ.getRowalign(), oD, "baseline");
        var ow = oH[0];
        var oF = co.getMultipleLengthValues(oJ.getRowspacing(), oD - 1, "1ex");
        var oC = oF[0];
        var ox = co.getMultipleStringValues(oJ.getRowlines(), oD - 1, "none");
        var oG = ox[0];
        var oA = new fn("same", "prop_same.png");
        oA.setValue(ov + "");
        oA.setType(nl);
        oI.addAttList(oA);
        if (ov) {
            oI.addSpacer();
            g5.buildAttributeAlign(oI, "all", ow, false);
            g5.buildAttributeSpacing(oy, oI, "all", oC, false);
        } else {
            for (var oz = 0; oz < oD; oz++) {
                oI.addSpacer();
                g5.buildAttributeAlign(oI, oz + 1 + "", oH[oz], true);
                if (oz < oD - 1) {
                    g5.buildAttributeSpacing(oy, oI, oz + 1 + "", oF[oz], true);
                }
            }
        }
    };
    g5.buildAttributeAlign = function (ox, ou, ov, ow) {
        var oy = new fn("rowalign", "prop_align.png");
        oy.setValue(g5.getImageRowFor(ov));
        oy.setType(j0);
        oy.setOptions(n6.getTableRowAlign());
        oy.setParam(ou);
        oy.setAddParamToText(ow);
        ox.addAttList(oy);
    };
    g5.buildAttributeSpacing = function (ou, oy, ov, ow, ox) {
        var oz = new fn("rowspacing", "prop_height.png");
        oz.setValue(ow);
        oz.setType(g1);
        oz.setOptions(n6.getLengthPlusDefault(ou));
        oz.setParam(ov);
        oz.setAddParamToText(ox);
        oy.addAttList(oz);
    };
    g5.buildAttributeLines = function (ov, oz, ow, ox, oy) {
        var ou = new fn("rowlines", "prop_line_style.png");
        ou.setValue(ox);
        ou.setType(mt);
        ou.setOptions(n6.getTableLineStyleList(ov));
        ou.setParam(ow);
        ou.setAddParamToText(oy);
        oz.addAttList(ou);
    };
    g5.getImageRowFor = function (ox) {
        if (ox == null) {
            ox = "baseline";
        }
        ox = W.trim(ox);
        if (ox.length == 0) {
            ox = "baseline";
        }
        var ou = "";
        var oy = ox.split(" ");
        for (var ow = 0; ow < oy.length; ow++) {
            var ov = oy[ow];
            if (ov.length == 0) {
                continue;
            }
            if (ov == "axis" || ov == "center") {
                ov = "middle";
            }
            if (ou.length > 0) {
                ou = ou + ",";
            }
            ou = ou + "align/" + ov + ".png";
        }
        return ou;
    };
    g5.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(ea) == 0) {
            return true;
        }
        return false;
    };
    g5.executeEvent = function (oE, oz) {
        if (oE.getSource().indexOf(ea + "_rowalign_down") == 0) {
            oz.getSelectedElement().setImageSelectionActive(oE.getSource());
            oz.addAction(fc);
            return true;
        } else {
            if (oE.getSource().indexOf(ea + "_rowalign_up") == 0) {
                oz.getSelectedElement().setImageSelectionActive(null);
                oz.addAction(fc);
                return true;
            } else {
                if (oE.getSource() == ea + "_same") {
                    var oH = gJ.getBooleanValue(
                        oz.getEditorId() + "_" + oE.getSource(),
                    );
                    oz.setAllSettingsRows(oH == "true");
                    var oA = oz.getSelectedElement();
                    var ov = oA.getSelectedPanel();
                    var oI = ov.getBean();
                    var oC = oI.getNumberOfRows();
                    if (oH == "true") {
                        var oG = co.getMultipleStringValues(
                            oI.getRowalign(),
                            oC,
                            "baseline",
                        );
                        var ox = co.removeDefault(oG[0], "baseline");
                        oI.setRowalign(ox);
                        var oD = co.getMultipleLengthValues(
                            oI.getRowspacing(),
                            oC - 1,
                            "1ex",
                        );
                        var oB = co.removeDefault(oD[0], "1ex");
                        oI.setRowspacing(oB);
                        var oy = co.getMultipleStringValues(
                            oI.getRowlines(),
                            oC - 1,
                            "none",
                        );
                        var oF = co.removeDefault(oy[0], "none");
                        oI.setRowlines(oF);
                    }
                    oI.setAttribute("editorSelected", "true");
                    oz.addAction(fc);
                    return gJ.updateFormulaAndPanels(oz);
                } else {
                    if (oE.getSource().indexOf(ea + "_rowalign_") == 0) {
                        var oA = oz.getSelectedElement();
                        var ov = oA.getSelectedPanel();
                        var oI = ov.getBean();
                        var oC = oI.getNumberOfRows();
                        var oJ = oE.getKeys();
                        var ou = oJ[oJ.length - 1];
                        var oH = oJ[oJ.length - 2];
                        if (oH == "middle") {
                            oH = "center";
                        }
                        if (ou == "all") {
                            if (oH == "baseline") {
                                oH = null;
                            }
                            oI.setRowalign(oH);
                        } else {
                            var oG = co.getMultipleStringValues(
                                oI.getRowalign(),
                                oC,
                                "baseline",
                            );
                            var ow = lv.getIntegerValue(ou, 1) - 1;
                            oG[ow] = oH;
                            oH = co.compressMultipleValues(oG, "baseline");
                            oI.setRowalign(oH);
                        }
                        oI.setAttribute("editorSelected", "true");
                        oz.getSelectedElement().setImageSelectionActive(null);
                        oz.addAction(fc);
                        return gJ.updateFormulaAndPanels(oz);
                    } else {
                        if (oE.getSource().indexOf(ea + "_rowspacing_") == 0) {
                            var oA = oz.getSelectedElement();
                            var ov = oA.getSelectedPanel();
                            var oI = ov.getBean();
                            var oC = oI.getNumberOfRows();
                            var oJ = oE.getKeys();
                            var ou = oJ[oJ.length - 1];
                            var oH = gJ.getSelectedLengthValue(
                                oz.getEditorId() + "_" + oE.getSource(),
                            );
                            if (oH == "default") {
                                oH = "1ex";
                            }
                            if (ou == "all") {
                                oI.setRowspacing(co.removeDefault(oH, "1ex"));
                            } else {
                                var oD = co.getMultipleLengthValues(
                                    oI.getRowspacing(),
                                    oC - 1,
                                    "1ex",
                                );
                                var ow = lv.getIntegerValue(ou, 1) - 1;
                                oD[ow] = oH;
                                oH = co.compressMultipleValues(oD, "1ex");
                                oI.setRowspacing(oH);
                            }
                            oI.setAttribute("editorSelected", "true");
                            oz.getSelectedElement().setImageSelectionActive(
                                null,
                            );
                            oz.addAction(fc);
                            return gJ.updateFormulaAndPanels(oz);
                        } else {
                            if (
                                oE.getSource().indexOf(ea + "_rowlines_") == 0
                            ) {
                                var oA = oz.getSelectedElement();
                                var ov = oA.getSelectedPanel();
                                var oI = ov.getBean();
                                var oC = oI.getNumberOfRows();
                                var oJ = oE.getKeys();
                                var ou = oJ[oJ.length - 1];
                                var oH = gJ.getSelectedValue(
                                    oz.getEditorId() + "_" + oE.getSource(),
                                );
                                if (ou == "all") {
                                    if (oH == "none") {
                                        oH = null;
                                    }
                                    oI.setRowlines(oH);
                                } else {
                                    var oG = co.getMultipleStringValues(
                                        oI.getRowlines(),
                                        oC - 1,
                                        "none",
                                    );
                                    var ow = lv.getIntegerValue(ou, 1) - 1;
                                    oG[ow] = oH;
                                    oH = co.compressMultipleValues(oG, "none");
                                    oI.setRowlines(oH);
                                }
                                oI.setAttribute("editorSelected", "true");
                                oz.getSelectedElement().setImageSelectionActive(
                                    null,
                                );
                                oz.addAction(fc);
                                return gJ.updateFormulaAndPanels(oz);
                            }
                        }
                    }
                }
            }
        }
        return false;
    };

    function fO() {}
    fO.buildProp = function (oz, oB, oD, ov) {
        var oE = new kY(by);
        oD.add(oE);
        var oF = oB.getText();
        var oC = new fn("text", "prop_text.png");
        oC.setValue(oF);
        oC.setType(jI);
        oC.setFont(lN.getFontFromText(ov));
        oE.addAttList(oC);
        if (oF.length == 1) {
            var ow = new fn("unicode", "prop_unicode.gif");
            var oy = oF.charCodeAt(0);
            var oA = lv.getHexCodeFromInt(oy);
            oA = oA.toUpperCase();
            ow.setValue("0x" + oA);
            ow.setType(jI);
            oE.addAttList(ow);
            var ox = h.getFirstCodeForNumber(oy);
            if (ox != null && ox.length > 0) {
                var ou = new fn("code", "prop_code.png");
                ou.setValue(ox);
                ou.setType(mt);
                ou.setOptions(n6.loadCodesList(oz));
                oE.addAttList(ou);
            }
        }
    };
    fO.textExecuteEvent = function (ou, ov) {
        if (ou.getSource().indexOf(by) == 0) {
            return true;
        }
        return false;
    };
    fO.executeEvent = function (oA, ox) {
        if (oA.getSource() == by + "_text") {
            var oz = gJ.getSelectedValue(
                ox.getEditorId() + "_" + oA.getSource(),
            );
            var oy = ox.getSelectedElement();
            var ou = oy.getSelectedPanel();
            var oD = ou;
            var oB = oD.getBean();
            oB.setText(oz);
            oB.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (oA.getSource() == by + "_unicode") {
                var ow = gJ.getSelectedValue(
                    ox.getEditorId() + "_" + oA.getSource(),
                );
                if (ow.length > 2 && ow.indexOf("0x") == 0) {
                    ow = ow.substring(2, ow.length);
                    var oC = "&#x" + ow + ";";
                    var oz = ee.convertToChars(oC);
                    var oy = ox.getSelectedElement();
                    var ou = oy.getSelectedPanel();
                    var oD = ou;
                    var oB = oD.getBean();
                    oB.setText(oz);
                    oB.setAttribute("editorSelected", "true");
                    return gJ.updateFormulaAndPanels(ox);
                }
            } else {
                if (oA.getSource() == by + "_code") {
                    var ov = gJ.getSelectedValue(
                        ox.getEditorId() + "_" + oA.getSource(),
                    );
                    if (ov.length > 0) {
                        var oz = h.getChar(ov);
                        if (oz.length > 0) {
                            var oy = ox.getSelectedElement();
                            var ou = oy.getSelectedPanel();
                            var oD = ou;
                            var oB = oD.getBean();
                            oB.setText(oz);
                            oB.setAttribute("editorSelected", "true");
                            return gJ.updateFormulaAndPanels(ox);
                        }
                    }
                }
            }
        }
        return false;
    };

    function kW() {}
    kW.buildProp = function (ou, ov, ow) {
        var oy = new kY(l8);
        ow.add(oy);
        var ox = new fn("align", "prop_align.png");
        var oA = ov.getAlign();
        if (oA == null || oA.length == 0) {
            oA = "center";
        }
        ox.setValue(oA);
        ox.setType(mt);
        ox.setOptions(n6.getAlignValues(ou));
        oy.addAttList(ox);
        var oz = new fn("accent", "prop_accent.png");
        oz.setValue(ov.isAccentunder() + "");
        oz.setType(nl);
        oy.addAttList(oz);
    };
    kW.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == l8 + "_align") {
            return true;
        } else {
            if (ou.getSource() == l8 + "_accent") {
                return true;
            }
        }
        return false;
    };
    kW.executeEvent = function (ou, ox) {
        if (ou.getSource() == l8 + "_align") {
            var oy = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oy == "") {
                oy = null;
            }
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setAlign(oy);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource() == l8 + "_accent") {
                var oy = gJ.getBooleanValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setAccentunder(oy);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(ox);
            }
        }
        return false;
    };

    function aA() {}
    aA.buildProp = function (ou, ov, ow) {
        var oy = new kY(jM);
        ow.add(oy);
        var ox = new fn("align", "prop_align.png");
        var oB = ov.getAlign();
        if (oB == null || oB.length == 0) {
            oB = "center";
        }
        ox.setValue(oB);
        ox.setType(mt);
        ox.setOptions(n6.getAlignValues(ou));
        oy.addAttList(ox);
        var oz = new fn("accent2", "prop_accent.png");
        oz.setValue(ov.isAccent() + "");
        oz.setType(nl);
        oy.addAttList(oz);
        var oA = new fn("accent1", "prop_accent.png");
        oA.setValue(ov.isAccentunder() + "");
        oA.setType(nl);
        oy.addAttList(oA);
    };
    aA.textExecuteEvent = function (ou, ov) {
        if (ou.getSource() == jM + "_align") {
            return true;
        } else {
            if (ou.getSource() == jM + "_accent1") {
                return true;
            } else {
                if (ou.getSource() == jM + "_accent2") {
                    return true;
                }
            }
        }
        return false;
    };
    aA.executeEvent = function (ou, ox) {
        if (ou.getSource() == jM + "_align") {
            var oy = gJ.getSelectedValue(
                ox.getEditorId() + "_" + ou.getSource(),
            );
            if (oy == "") {
                oy = null;
            }
            var oz = ox.getSelectedElement();
            var ow = oz.getSelectedPanel();
            var ov = ow.getBean();
            ov.setAlign(oy);
            ov.setAttribute("editorSelected", "true");
            return gJ.updateFormulaAndPanels(ox);
        } else {
            if (ou.getSource() == jM + "_accent1") {
                var oy = gJ.getBooleanValue(
                    ox.getEditorId() + "_" + ou.getSource(),
                );
                var oz = ox.getSelectedElement();
                var ow = oz.getSelectedPanel();
                var ov = ow.getBean();
                ov.setAccentunder(oy);
                ov.setAttribute("editorSelected", "true");
                return gJ.updateFormulaAndPanels(ox);
            } else {
                if (ou.getSource() == jM + "_accent2") {
                    var oy = gJ.getBooleanValue(
                        ox.getEditorId() + "_" + ou.getSource(),
                    );
                    var oz = ox.getSelectedElement();
                    var ow = oz.getSelectedPanel();
                    var ov = ow.getBean();
                    ov.setAccent(oy);
                    ov.setAttribute("editorSelected", "true");
                    return gJ.updateFormulaAndPanels(ox);
                }
            }
        }
        return false;
    };

    function nR() {}
    nR.getTagsToTranslate = function (ow, ou, oz, oy, oB, oA, ov) {
        if (ov.getParentBean() instanceof bI) {
            if ("none" == ou || "mn" == ou || "mo" == ou) {
                oz.add(nR.addOptionForTag(ow, "mn", oB, oA, ou, oy));
                oz.add(nR.addOptionForTag(ow, "mo", oB, oA, ou, oy));
                oz.add(nR.addOptionForTag(ow, "none", oB, oA, ou, oy));
            }
        } else {
            if (ov.getParentBean() instanceof lr) {
                if (
                    "none" == ou ||
                    "empty" == ou ||
                    "mi" == ou ||
                    "mn" == ou ||
                    "mo" == ou ||
                    "ms" == ou ||
                    "mtext" == ou
                ) {
                    oz.add(nR.addOptionForTag(ow, "none", oB, oA, ou, oy));
                    oz.add(nR.addOptionForTag(ow, "empty", oB, oA, ou, oy));
                    oz.add(nR.addOptionForTag(ow, "mi", oB, oA, ou, oy));
                    oz.add(nR.addOptionForTag(ow, "mn", oB, oA, ou, oy));
                    oz.add(nR.addOptionForTag(ow, "mo", oB, oA, ou, oy));
                    oz.add(nR.addOptionForTag(ow, "ms", oB, oA, ou, oy));
                    oz.add(nR.addOptionForTag(ow, "mtext", oB, oA, ou, oy));
                    nR.changeToFenceLike(ow, oz, oB, oA, ou, oy);
                    nR.putInFenceLike(ow, oz, oB, oA, ou, oy);
                }
            } else {
                if (ov.getParentBean() instanceof b0) {
                    if ("none" == ou || "mn" == ou) {
                        oz.add(nR.addOptionForTag(ow, "mn", oB, oA, ou, oy));
                        oz.add(nR.addOptionForTag(ow, "none", oB, oA, ou, oy));
                    }
                } else {
                    if (ov.getParentBean() instanceof hq) {
                        if (
                            "msrow" == ou ||
                            "msline" == ou ||
                            "mscarries" == ou
                        ) {
                            oz.add(
                                nR.addOptionForTag(ow, "msrow", oB, oA, ou, oy),
                            );
                            oz.add(
                                nR.addOptionForTag(
                                    ow,
                                    "msline",
                                    oB,
                                    oA,
                                    ou,
                                    oy,
                                ),
                            );
                            oz.add(
                                nR.addOptionForTag(
                                    ow,
                                    "mscarries",
                                    oB,
                                    oA,
                                    ou,
                                    oy,
                                ),
                            );
                        } else {
                            if ("msgroup" == ou) {
                                oz.add(
                                    nR.addOptionForTag(
                                        ow,
                                        "msgroup",
                                        oB,
                                        oA,
                                        ou,
                                        oy,
                                    ),
                                );
                            }
                        }
                    } else {
                        if (
                            "mi" == ou ||
                            "mn" == ou ||
                            "mo" == ou ||
                            "ms" == ou ||
                            "mtext" == ou
                        ) {
                            oz.add(
                                nR.addOptionForTag(ow, "mi", oB, oA, ou, oy),
                            );
                            oz.add(
                                nR.addOptionForTag(ow, "mn", oB, oA, ou, oy),
                            );
                            oz.add(
                                nR.addOptionForTag(ow, "mo", oB, oA, ou, oy),
                            );
                            oz.add(
                                nR.addOptionForTag(ow, "ms", oB, oA, ou, oy),
                            );
                            oz.add(
                                nR.addOptionForTag(ow, "mtext", oB, oA, ou, oy),
                            );
                            nR.putInFenceLike(ow, oz, oB, oA, ou, oy);
                        } else {
                            if (
                                "mrow" == ou ||
                                "merror" == ou ||
                                "mfenced" == ou ||
                                "menclose" == ou ||
                                "mpadded" == ou ||
                                "mphantom" == ou ||
                                "msqrt" == ou ||
                                "mstyle" == ou
                            ) {
                                nR.changeToFenceLike(ow, oz, oB, oA, ou, oy);
                                if (oy == 2) {
                                    nR.addTypesFor2Elements(
                                        ow,
                                        oz,
                                        oB,
                                        oA,
                                        ou,
                                        oy,
                                    );
                                } else {
                                    if (oy == 3) {
                                        nR.addTypesFor3Elements(
                                            ow,
                                            oz,
                                            oB,
                                            oA,
                                            ou,
                                            oy,
                                        );
                                    }
                                }
                                nR.putInFenceLike(ow, oz, oB, oA, ou, oy);
                            } else {
                                if (
                                    "msup" == ou ||
                                    "msub" == ou ||
                                    "mover" == ou ||
                                    "munder" == ou ||
                                    "mfrac" == ou ||
                                    "mroot" == ou
                                ) {
                                    nR.addTypesFor2Elements(
                                        ow,
                                        oz,
                                        oB,
                                        oA,
                                        ou,
                                        oy,
                                    );
                                    nR.changeToFenceLike(
                                        ow,
                                        oz,
                                        oB,
                                        oA,
                                        ou,
                                        oy,
                                    );
                                    nR.putInFenceLike(ow, oz, oB, oA, ou, oy);
                                } else {
                                    if ("msubsup" == ou || "munderover" == ou) {
                                        nR.addTypesFor3Elements(
                                            ow,
                                            oz,
                                            oB,
                                            oA,
                                            ou,
                                            oy,
                                        );
                                        nR.putInFenceLike(
                                            ow,
                                            oz,
                                            oB,
                                            oA,
                                            ou,
                                            oy,
                                        );
                                    } else {
                                        if (ou == "math") {
                                            oz.add(
                                                nR.addOptionForTag(
                                                    ow,
                                                    ou,
                                                    oB,
                                                    oA,
                                                    ou,
                                                    oy,
                                                ),
                                            );
                                        } else {
                                            if ("mspace" == ou) {
                                                var ox = ov;
                                                if (ox.isLineBreak()) {
                                                    oz.add(
                                                        nR.addOptionForTag(
                                                            ow,
                                                            ou,
                                                            oB,
                                                            oA + "_break",
                                                            ou + "_break",
                                                            oy,
                                                        ),
                                                    );
                                                } else {
                                                    oz.add(
                                                        nR.addOptionForTag(
                                                            ow,
                                                            ou,
                                                            oB,
                                                            oA,
                                                            ou,
                                                            oy,
                                                        ),
                                                    );
                                                }
                                            } else {
                                                oz.add(
                                                    nR.addOptionForTag(
                                                        ow,
                                                        ou,
                                                        oB,
                                                        oA,
                                                        ou,
                                                        oy,
                                                    ),
                                                );
                                                nR.putInFenceLike(
                                                    ow,
                                                    oz,
                                                    oB,
                                                    oA,
                                                    ou,
                                                    oy,
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (ov != null && ov.canBeDeleted()) {
            oz.add(nR.addOptionToDelete(ow, oB, oA));
        }
    };
    nR.addOptionToDelete = function (ou, oy, ox) {
        var ow = cA.getTranslate(ou, oy, ox + "_delete");
        var ov = new hm("delete", ow);
        return ov;
    };
    nR.addOptionForTag = function (ov, oC, oB, oy, oz, ox) {
        var oD = oC;
        if (oC.indexOf("p") == 0) {
            oD = oC.substring(1, oC.length);
        }
        var oA = cA.getTranslate(ov, oB, oy + "_" + oD);
        var ow = "";
        if (oC == oz) {
            ow = "";
        } else {
            ow = cA.getTranslate(ov, oB, oy + "_change");
        }
        if (oC.indexOf("p") == 0) {
            ow = cA.getTranslate(ov, oB, oy + "_put_in");
        }
        var ou = new hm(oC, ow + " " + oA);
        return ou;
    };
    nR.putInFenceLike = function (ou, ow, oz, oy, ox, ov) {
        ow.add(nR.addOptionForTag(ou, "pmrow", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "pmfenced", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "pmenclose", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "pmpadded", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "pmstyle", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "pmphantom", oz, oy, ox, ov));
    };
    nR.changeToFenceLike = function (ou, ow, oz, oy, ox, ov) {
        ow.add(nR.addOptionForTag(ou, "mrow", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "msqrt", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "mfenced", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "menclose", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "mpadded", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "mstyle", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "mphantom", oz, oy, ox, ov));
    };
    nR.addTypesFor2Elements = function (ou, ow, oz, oy, ox, ov) {
        ow.add(nR.addOptionForTag(ou, "mfrac", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "msup", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "msub", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "mover", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "munder", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "mroot", oz, oy, ox, ov));
    };
    nR.addTypesFor3Elements = function (ou, ow, oz, oy, ox, ov) {
        ow.add(nR.addOptionForTag(ou, "msubsup", oz, oy, ox, ov));
        ow.add(nR.addOptionForTag(ou, "munderover", oz, oy, ox, ov));
    };
    return {
        MathMLFormula: gf,
        ApplicationConfiguration: ft,
        FMathJavascriptInterface: hz,
    };
})();
